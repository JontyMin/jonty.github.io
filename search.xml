<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我在ThoughtWorks的头三年</title>
    <url>/2022/01/29/My-first-three-years-at-ThoughtWorks/</url>
    <content><![CDATA[<img data-src="https://cdn.jonty.top/img/1.png" >

<div class="note info"><p>作者是 <a href="https://github.com/JulyShi">七姑娘</a> ，这里是 <a href="https://mp.weixin.qq.com/s/5SyFjxymvevAvX67TSjjsg">原文链接</a> 。</p>
</div>

<hr>
<p>几天前，同事小Y发来微信。</p>
<pre><code>“嗨，你参加过AWS考试吗？你说我要不要先考一下AWS从业者证书？” 小Y问道。

“你对AWS证书了解吗？” 我说。

“不是很了解。” 小Y回答。

“建议你先做做功课再做决定哈，了解清楚在考这个证书的过程中你能学到什么？证书有什么作用？
你为什么在当下选择考它而不是别的？”
“不过，你为什么忽然想要考AWS证书呢？” 我问道。

“我看到XX 和XX都在考，所以想一起考。” 小Y答。
</code></pre>
<p>小Y是2019年加入公司的毕业生QA，和大多数新人一样好学上进，眼里充满对知识的渴望和对大神的敬仰，但缺乏目标、东奔西撞。这不禁让我想到了自己。</p>
<p>2016年底，我加入ThoughtWorks，仿佛一脚跨进了知识爆炸的时代。面对琳琅满目的学习素材、开放的网络、分享型的组织文化、一张张打满鸡血的脸庞，我浑身充满干劲，但同时饱尝着能力进阶的压力和焦虑。于是，学会“如何提升自己”就成了我这几年研究的重要课题。</p>
<div class="note info"><p>第一年</p>
</div>

<p>作为一名QA加入公司，我要足够专业！这是我的立身之本。</p>
<p>我相信，能够给人带来机会的是自己的“长板”，但限制自己发展的往往是“短板”。所以，我首先纵观全局，把QA需要具备的技能都理清楚了，然后不断寻找自己当前“最短”的一块板来提升。我将这个过程称为 <strong>“短板学习法”</strong> 。</p>
<p>这样做的好处是：能力发展会比较均衡、不偏科；其次，一旦有了全局意识，即使从最细小的事情开始，大方向也始终保持一致，有序而不乱。</p>
<p>我用“精益价值树”给自己画了一个愿景，并细分出成为一名专业QA的必备技能。</p>
<img data-src="https://cdn.jonty.top/img/zlRE7i6fNqTStu8.png" >

<p>树的“投注”层就是我为了达成目标所需要提升的能力。要识别“短板”，首先要对每一项“投注”进行打分：</p>
<ul>
<li>0 - 表示你不具备这种技能</li>
<li>1 - 表示你能在别人指导下完成</li>
<li>2 - 表示你能独立完成</li>
<li>3 - 表示你能指导他人完成</li>
<li>4 - 表示你是这方面的专家，能去创造新的方法</li>
</ul>
<p>其中，得分最小的项就是我一定要提升的“短板”。假如有好几项得分相等且最低，我就会选择当前最容易实践的那一项，制定详细的学习举措。</p>
<p>“举措”非常重要，这决定了我最终能不能将提升计划落地。“举措”就是我要采取的具体行动，我习惯将理论与实际相结合。制定“举措”一定要考虑时间的投入。经过实践我发现，尽量不要在同一时间同时做3个以上的举措，时间的最小单位设定在2-3天最适宜。下图是我在提升自己API自动化测试时的举措，实践证明，这个“短板式学习法”很奏效。</p>
<img data-src="https://cdn.jonty.top/img/jOt5oyPxYiAS2LR.png" >

<div class="note info"><p>第二年</p>
</div>

<p>工作的第二年，我陆续遇到一些思维的瓶颈。</p>
<ul>
<li>我们发现了很多Bug，但开发进度非常紧张，Bug如何才能更好地排进迭代（估算与计划）</li>
<li>与团队探讨问题时，我的想法是正确的，可却无法说服别人（沟通）</li>
<li>每天睁开眼睛，眼前都是堆积如山的工作，但我却无法让团队成员分担（团队协作与培养他人）</li>
<li>在项目上临时客串了几个月BA，一起出差到客户现场挖掘需求。客户有一堆想要做的东西，而时间和成本都有限，大家讨论地非常激烈，而我如鲠在喉。太少面对客户的机会，让我觉得客户仿佛有‘尖牙利爪’，不知如何应对（自信、领域知识、MVP、痛点挖掘、愿景分析、引导技术、谈判技术）</li>
</ul>
<img data-src="https://cdn.jonty.top/img/FZ4PrcHmUh7TCGi.png" >

<p>为了打破这些思维的困境，我从公司内部找到好多资料来学习。</p>
<ul>
<li>参加公司BA系列培训，阅读BA基础必读书籍《用户故事与敏捷方法》、《用户故事地图》、《实例化需求》等。重新回顾自己客串BA时的全过程，反复推敲不足与待改进点</li>
<li>听了公司在“meia美啊”平台上公开的PM系列课程(搜索”ThoughtWorks”)，并挑选一些关键课程撰写个人感悟</li>
<li>参加公司的Tech Lead培训，学习角色认知、冲突管理、风险管理、影响力等等。并梳理自己工作中的典型案例，通过博客的方式，来记录自己的灵感和想法，如《你引导过一个窘迫的会议吗？》</li>
</ul>
<p>在学习的过程中，我意识到自己的学习动机来自于偶尔听到、看到或思考的一些课题，都是些零零散散的点，不够系统。因此，我需要按照一定的方式进行归类，构造出一个新的体系来。我将这个学习过程称为 <strong>“散点式学习法”</strong> 。</p>
<img data-src="https://cdn.jonty.top/img/y85EOiPuCrRBJqc.png" >

<p>我通过社区培训、数据、文章、思考、与大师交流等形式获得知识，然后将这些散点按照产品、需求、领域知识、通用技能4个维度进行归类。在散点图中，我用不同的颜色标记当前对知识的掌握程度，用距离中心的位置表示学习的优先级。</p>
<p>如此一来，每当遇到一个思维瓶颈，我就将它作为一个新的课题来研究。通过散点式学习法，我碎片化地积累了很多知识。</p>
<div class="note info"><p>第三年</p>
</div>

<p>工作的第三年，除了继续以QA的角色做交付项目之外，我还做了很多事情。</p>
<ul>
<li>我参与了一些售前的工作，开始了解到一个交付项目是怎么来的、标书是什么东西、打标是怎么回事、Proposal该怎么写</li>
<li>我参与到一些咨询的工作，也终于明白为什么做咨询的人看起来睿智、自信又侃侃而谈</li>
<li>我参与到招聘，一起来设计招聘需求；参与面试，寻找适合我们的人才；我组织面试官培训，让大家都来掌握面试的技巧</li>
<li>我学习管理自己的团队，让大家有归属感、有成长、有贡献</li>
</ul>
<p>在这些工作中，我不断提升自己的文案功底、优秀的视觉化能力、精准地分析问题能力、敏锐的洞察力、精确的表达能力、良好的归纳能力、卓越的沟通技巧。</p>
<p>学到的知识越多，就越需要归纳总结。不然就很容易变成“这也会，那也会；但这也不熟，那也不精”。</p>
<img data-src="https://cdn.jonty.top/img/gqt9oHl6h2wZmSR.png" >

<p>我将自己的技能归纳为三层：</p>
<ul>
<li>最里面是“核心技能”层：核心技能是我当前的立身之本。我作为一名QA，专业QA需要的技能及优秀素质就是我需要持续深耕的。我要严格要求自己，切不可3分钟热度</li>
<li>中间是“拓展技能”层：拓展技能层是我在角色周边获取的技能，它能帮助我突破瓶颈，站在更广阔的视野去思考；也能帮助我寻找更多的发展途径</li>
<li>最外层是“战略技能”层：这里的技能不受角色限制，不管你是一名QA，还是未来有一天你会成为一位像马爸爸一样的人，你都需要具备这些技能。随着职位越高，做的事情越复杂，你对“战略技能”的掌握就要更深入。“战略技能”让我们充满无限可能</li>
</ul>
<p>这是我在ThoughtWorks的头三年关于个人提升的理解，未来的三年，又将会是怎样的呢？</p>
<hr>
<p>写在最后：</p>
<p>电影《一代宗师》里宫老爷子说，习武之人有三个阶段：见自己，见天地，见众生。</p>
<ul>
<li>见自己，就是认识自己、了解自己，知道自己擅长学习什么武功</li>
<li>见天地，就是见识各门各派武学高手，知道自己所处的位置，这样才能日益精进</li>
<li>见众生，就是“普度众生”，让更多人学习这门武学，这样才能将其传承下去</li>
</ul>
<p>其实这不仅仅是武术传承，个人技能提升又何尝不是如此。你品、你细品……</p>
]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>QA</tag>
      </tags>
  </entry>
  <entry>
    <title>关于闰年那些事</title>
    <url>/2021/11/29/about-leap-year/</url>
    <content><![CDATA[<p>判断某一年是否是闰年几乎是所有编程语言的基础练习题之一，而我们必然也熟知其规则：</p>
<ul>
<li>整除但4不能整除100</li>
<li>整除100又能整除400</li>
</ul>
<blockquote>
<p>这就是俗语中的“四年一闰，百年不闰，四百年再润”，我们当然可以根据这个规则编写程序判断闰年，但你知道为什么这样规定闰年的算法么？</p>
</blockquote>
<hr>
<p>事实上，闰年是为了弥补因人为历法规定，造成的年度天数与地球实际公转周期的时间差而设立的。所以闰年有366天。</p>
<p>那么具体是怎么弥补的呢？</p>
<blockquote>
<p>我们知道，平年一年只有365天，而实际上地球绕太阳的公转周期为365天5小时48分46秒。即一回归年。所以公历的每一年都比回归年短0.2422天，四年累计起来，共短0.9688天。</p>
</blockquote>
<p>大概就是一天，所以为了弥补这一天的时间差。给2月加上1天，就有了闰年。这样一来，每四年里就有一个闰年，3个平年。这就是<strong>四年一闰</strong>。</p>
<p>那么<strong>百年不闰，四百年再闰</strong>又是怎么回事呢？</p>
<blockquote>
<p>是这样的，刚才说四年累计起来的时间差只有0.9688天，这比我们给闰年增加的一天还少0.0312天，所以每四年就会多出0.0312天。这样400年后，就会比实际天数多出3.12天。所以我们必须在这400年中少设3个闰年。这样公历年的平均长度与回归年就近似了。</p>
</blockquote>
<p>那这3个闰年怎么少呢？</p>
<p>很简单，给百年除以400即可，比如2000-2400这400年：</p>
<ul>
<li>2000/400=5</li>
<li>2100/400=5.25</li>
<li>2200/400=5.5</li>
<li>2300/400=5.75</li>
<li>2400/400=6</li>
</ul>
<p>可以发现，正好有3个不能整除的整百年。所以规定年份是整百数的必须是400的倍数才是闰年。这就是百年不闰，四百年才闰的规定。</p>
<p>你明白了吗？</p>
<hr>
<p>当然，根据规则，我们就可以编写代码判断了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	cin &gt;&gt; year;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (year % <span class="number">100</span> != <span class="number">0</span>)<span class="comment">//1. 能整除4，不能整除100</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((year % <span class="number">100</span>==<span class="number">0</span>) &amp;&amp; (year % <span class="number">400</span>==<span class="number">0</span>))<span class="comment">//2. 能整除100， 又能整除400</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//其它情况不是闰年</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//不能整除4就不是闰年</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;不是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器实现静默打印</title>
    <url>/2021/09/25/browser-silent-printing/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近有一个需求涉及到<code>静默打印</code>,也就是打印时不需要弹出打印配置框，而是直接调用打印机</p>
<img data-src="https://cdn.jonty.top/img/image-20210925223925277.png">

<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>经过讨论大概是以下几种方案：</p>
<ul>
<li>把打印配置弹窗干掉、模拟点击打印事件</li>
<li>浏览器实现静默打印</li>
<li>本地运行一个服务，客户端返回请求状态后请求本地接口调用打印</li>
</ul>
<h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>第一种没有去尝试，所以先讲讲第二种解决方案，通过前端控制浏览器打印，但是百度一圈下来的解决方案都是通过设置浏览器参数，然后创建一个快捷程序并设置启动参数，操作很简单，但实在不符合需求，总不能给每个客户也这样配置一边吧，所以第二种也<code>pass</code>。</p>
<p>操作如下：</p>
<img data-src="https://cdn.jonty.top/img/image-20210925225136606.png">

<h5 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h5><p>重点讲一下方案，也是目前在探索中，后续有更好的方法会发出来，也欢迎各位提出更好的解决方案。</p>
<p>目前仅支持windows环境，<code>winform</code>最终是<code>.exe</code>程序</p>
<h4 id="新建Winform程序"><a href="#新建Winform程序" class="headerlink" title="新建Winform程序"></a>新建Winform程序</h4><h5 id="使用VS2019创建"><a href="#使用VS2019创建" class="headerlink" title="使用VS2019创建"></a>使用<code>VS2019</code>创建</h5><img data-src="https://cdn.jonty.top/img/image-20210925225722885.png">

<h5 id="拖入ComboBox控件，用来选择本地打印机"><a href="#拖入ComboBox控件，用来选择本地打印机" class="headerlink" title="拖入ComboBox控件，用来选择本地打印机"></a>拖入<code>ComboBox</code>控件，用来选择本地打印机</h5><img data-src="https://cdn.jonty.top/img/image-20210925225843764.png">

<h5 id="获取打印机列表填充下拉"><a href="#获取打印机列表填充下拉" class="headerlink" title="获取打印机列表填充下拉"></a>获取打印机列表填充下拉</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 加载打印机列表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitPrinterList</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> print = <span class="keyword">new</span> PrintDocument();</span><br><span class="line">    <span class="keyword">var</span> defaultPrinter = print.PrinterSettings.PrinterName;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PrinterSettings.InstalledPrinters.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = PrinterSettings.InstalledPrinters[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp == defaultPrinter)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp += <span class="string">&quot;(默认)&quot;</span>; <span class="comment">// 标记默认的打印机</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.comboBox1.Items.Add(tmp);  <span class="comment">// 下拉项新增</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    InitPrinterList(); <span class="comment">// 窗体加载事件中调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ctrl-f5运行窗体查看效果"><a href="#ctrl-f5运行窗体查看效果" class="headerlink" title="ctrl+f5运行窗体查看效果"></a><code>ctrl+f5</code>运行窗体查看效果</h5><img data-src="https://cdn.jonty.top/img/image-20210925230348173.png">

<h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>没有使用<code>socket</code>,而是在<code>winform</code>中创建了一个<code>http</code>服务，并开放端口供浏览器本地请求</p>
<p>先新增两个依赖：</p>
<ol>
<li>BeetleX 1.5.1.7 </li>
<li>BeetleX.FastHttpApi 1.8.2.61</li>
</ol>
<p>这两个版本是支持<code>.net framework</code>的，<a href="https://github.com/IKende/BeetleX/">BeetleX</a>是一个基于.Net Core开发的一个开源跨平台TCP通讯框架，它提供了完整的会话服务管理，协议分析扩展，TLS支持和缓冲区管理等完全服务基础功能。有兴趣的可以去Github参观一下。</p>
<h5 id="初始化Http服务"><a href="#初始化Http服务" class="headerlink" title="初始化Http服务"></a>初始化Http服务</h5><p>在Load方法中调用<code>InitHttpServer()</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 初始化网关服务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">InitHttpServer</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _httpApiServer = <span class="keyword">new</span> HttpApiServer(<span class="keyword">new</span> HttpOptions()</span><br><span class="line">    &#123;</span><br><span class="line">        Port = <span class="number">9000</span>, <span class="comment">// 本地开放的端口 要注意不要被占用</span></span><br><span class="line">        LogToConsole = <span class="literal">true</span>,</span><br><span class="line">        LogLevel = BeetleX.EventArgs.LogType.Debug</span><br><span class="line">     &#125;);</span><br><span class="line">    _httpApiServer.IPv4Tables.AddWhite(<span class="string">&quot;127.0.0.1/24&quot;</span>);</span><br><span class="line">    _httpApiServer.Options.CrossDomain = <span class="keyword">new</span> OptionsAttribute() &#123; AllowOrigin = <span class="string">&quot;*&quot;</span>, AllowMethods = <span class="string">&quot;*&quot;</span>, AllowHeaders = <span class="string">&quot;*&quot;</span> &#125;; <span class="comment">// 跨域配置，这个很重要</span></span><br><span class="line">    _httpApiServer.Register(<span class="keyword">typeof</span>(Home).Assembly);</span><br><span class="line">    _httpApiServer.Open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册的程序就是<code>Controller</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Controller(BaseUrl = <span class="meta-string">&quot;/home&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Home</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Hello Word</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>string:  you name<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>string<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> &#123; Hello = <span class="string">&quot;hello &quot;</span> + name, Time = DateTime.Now &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制下服务的生命周期</p>
<img data-src="https://cdn.jonty.top/img/image-20210925231850394.png">

<p>使用<code>Postman</code>请求一下</p>
<p><code>http://localhost:9000/home/Hello?name=test</code> 返回成功</p>
<img data-src="https://cdn.jonty.top/img/image-20210925232302311.png">

<h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p>客户端向本地请求打印接口，传入参数</p>
<p>这里传入了pdf文件地址，通过请求文件并打印</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打印接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;printCount&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">int</span> printCount</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    url = url.Replace(<span class="string">&quot;\n &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(WebRequest.Create(url) <span class="keyword">is</span> HttpWebRequest request)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(request.GetResponse() <span class="keyword">is</span> HttpWebResponse response)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> stream = response.GetResponseStream();</span><br><span class="line">    <span class="comment">// 创建打印机</span></span><br><span class="line">    <span class="keyword">var</span> pdf = <span class="keyword">new</span> InputPdf(ReadFully(stream));</span><br><span class="line">    <span class="keyword">var</span> printJob = <span class="keyword">new</span> PrintJob(Printer.Default, pdf); <span class="comment">// 默认打印机</span></span><br><span class="line">    printJob.PrintOptions.Copies = printCount; <span class="comment">//打印数量</span></span><br><span class="line">    printJob.Print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取字节流</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;input&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">ReadFully</span>(<span class="params">Stream input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        input.CopyTo(ms);</span><br><span class="line">        <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打印插件调用的<code>DynamicPdf</code></p>
<p>打印插件文档：<a href="https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options">https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options</a> </p>
</blockquote>
<h4 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h4><p>可以通过下拉框选择的打印机打印,需要记录选择的打印机</p>
<p>通过读取和设置<code>config</code>值实现,引入<code>System.Configuration</code></p>
<p>ConfigHelper类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConfigHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>返回*.exe.config文件中appSettings配置节的value项  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAppConfig</span>(<span class="params"><span class="built_in">string</span> strKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">        <span class="keyword">var</span> config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">        <span class="keyword">return</span> config.AppSettings.Settings.AllKeys.Any(key =&gt; key == strKey) ? config.AppSettings.Settings[strKey].Value.ToString() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>在*.exe.config文件中appSettings配置节增加一对键值对  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;newKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;newValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateAppConfig</span>(<span class="params"><span class="built_in">string</span> newKey, <span class="built_in">string</span> newValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">        <span class="keyword">var</span> config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">        <span class="keyword">var</span> exist = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> config.AppSettings.Settings.AllKeys)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == newKey)</span><br><span class="line">            &#123;</span><br><span class="line">                exist = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exist)</span><br><span class="line">        &#123;</span><br><span class="line">            config.AppSettings.Settings.Remove(newKey);</span><br><span class="line">        &#125;</span><br><span class="line">        config.AppSettings.Settings.Add(newKey, newValue);</span><br><span class="line">        config.Save(ConfigurationSaveMode.Modified);</span><br><span class="line">        ConfigurationManager.RefreshSection(<span class="string">&quot;appSettings&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="设置下拉选择事件"><a href="#设置下拉选择事件" class="headerlink" title="设置下拉选择事件"></a>设置下拉选择事件</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comboBox1_SelectedIndexChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新setting设置</span></span><br><span class="line">    <span class="keyword">var</span> selectedPrint = <span class="keyword">this</span>.comboBox1.SelectedItem.ToString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(selectedPrint))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除掉初始化打印机列表添加的默认文本</span></span><br><span class="line">    <span class="keyword">if</span> (selectedPrint.Contains(<span class="string">&quot;默认&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        selectedPrint = selectedPrint.Replace(<span class="string">&quot;(默认)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigHelper.UpdateAppConfig(<span class="string">&quot;defaultPrint&quot;</span>, selectedPrint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="优化后的打印接口"><a href="#优化后的打印接口" class="headerlink" title="优化后的打印接口"></a>优化后的打印接口</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 获取设置的打印机 （读取配置）</span></span><br><span class="line"><span class="keyword">var</span> defaultPrinter = ConfigHelper.GetAppConfig(<span class="string">&quot;defaultPrint&quot;</span>);</span><br><span class="line"><span class="comment">// 创建打印机</span></span><br><span class="line"><span class="keyword">var</span> printer = <span class="keyword">new</span> Printer(defaultPrinter);</span><br><span class="line"><span class="keyword">var</span> pdf = <span class="keyword">new</span> InputPdf(ReadFully(stream));</span><br><span class="line"><span class="keyword">var</span> printJob = <span class="keyword">new</span> PrintJob(printer, pdf);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这样就能实现简单的静默打印，当然还有很多欠缺之处，后续优化，不当之处请指出</p>
]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>Winform</tag>
        <tag>Print</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员必备Code Review</title>
    <url>/2022/05/31/code-review/</url>
    <content><![CDATA[<h1 id="程序员必备的代码审查（Code-Review）清单"><a href="#程序员必备的代码审查（Code-Review）清单" class="headerlink" title="程序员必备的代码审查（Code Review）清单"></a>程序员必备的代码审查（Code Review）清单</h1><p>在我们关于高效代码审查的博文中，我们建议使用一个检查清单。</p>
<p>在代码审查中，检查清单是一个非常好的工具——它们保证了审查可以在团队中始终如一的进行。</p>
<p>它们也是一种保证常见问题能够被发现并被解决的便利方式。</p>
<p>软件工程学院的研究表明，程序员们会犯15-20种常见的错误。</p>
<p>所以，把这些错误加入到检查清单当中，可以确保不论什么时候，都能发现这些错误，并且杜绝这些错误。</p>
<p>这里列出了一些重要的内容：代码审查清单。</p>
<h2 id="常规项"><a href="#常规项" class="headerlink" title="常规项"></a>常规项</h2><ul>
<li>代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。</li>
<li>所有的代码是否简单易懂？</li>
<li>代码符合编程规范么？包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。</li>
<li>是否存在冗余或是重复的代码？</li>
<li>代码是否尽可能的模块化了？</li>
<li>是否有可以被替换的全局变量？</li>
<li>是否有被注释掉的代码？</li>
<li>循环是否会造成死循环？</li>
<li>是否有可以被库函数替代的代码？</li>
<li>是否有可以删除的日志或调试代码？</li>
</ul>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul>
<li>所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？</li>
<li>在哪里使用了第三方工具，返回的错误是否被捕获？</li>
<li>输出的值是否进行了检查并且编码？</li>
<li>无效的参数值是否能够处理？</li>
</ul>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li>是否有注释，并且描述了代码的意图？</li>
<li>所有的函数都有注释吗？</li>
<li>对非常规行为和边界情况处理是否有描述？</li>
<li>第三方库的使用和函数是否有文档？</li>
<li>数据结构和计量单位是否进行了解释？</li>
<li>是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如<code>TODO</code>？</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。</li>
<li>是否存在测试，它们是否可以被理解？比如，至少达到令人满意的代码覆盖(code coverage)。</li>
<li>单元测试是否真正的测试了代码是否可以完成预期的功能？</li>
<li>是否检查了数组的“<strong>越界</strong>“错误？</li>
<li>是否有可以被已经存在的API所替代的测试代码？</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>同样的，需要把特定语言中有可能引起错误的问题添加到清单中。</p>
<p>这个清单特地没有详细的列出所有可能会发生的错误。内容太多了以至于从来没人会去用它，仅仅包含常见的问题会比较好。</p>
<h2 id="优化你的清单"><a href="#优化你的清单" class="headerlink" title="优化你的清单"></a>优化你的清单</h2><p>把使用清单作为你的起点，针对特定的使用案例，你需要对其进行优化。</p>
<p>一个比较棒的方式就是让你的团队记录下那些在代码审查过程中临时发现的问题，有了这些数据，你就能够确定你的团队常犯的错误，然后你就可以量身定制一个审查清单。确保你删除了那些没有出现过的错误。（你也可以保留那些出现概率很小，但是非常关键的项目，比如安全相关的问题）。</p>
<h2 id="得到认可并且保持更新"><a href="#得到认可并且保持更新" class="headerlink" title="得到认可并且保持更新"></a>得到认可并且保持更新</h2><p>基本规则是，清单上的任何条目都必须明确，而且，如果可能的话，对于一些条目你可以对其进行二元判定。这样可以防止判断的不一致。和你的团队分享这份清单并且让他们认同你清单的内容是个好主意。同样的，要定期检查你的清单，以确保各条目仍然是有意义的。</p>
<p>有了一个好的清单，可以提高你在代码审查过程中发现的缺陷个数。这可以帮助你提高代码标准，避免质量参差不齐的代码审查。</p>
]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>code-review</tag>
      </tags>
  </entry>
  <entry>
    <title>温故而知新-C#泛型</title>
    <url>/2021/10/04/csharp-generic-review-01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发中，经常会遇到功能相同的模块，但是参数类型不同，这时候只能分别写不同的方法处理不同的数据类型。那么有没有一种办法，只用同一个方法来处理不同类型参数的方法</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params"><span class="built_in">string</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params">DateTime i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面几个方法分别获取<code>int、string、DateTime</code>类型的名称，可以看到对应写了三种类型的<code>重载</code>方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowTypeName(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowTypeName(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowTypeName(DateTime.Now);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004162840338.png"></p>
<p>这个时候我们就会想<strong>面向对象的继承</strong>，我们知道在<code>C#</code>语言中，所有的类型都继承自基类<code>object</code></p>
<p>优化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowObjectName</span>(<span class="params"><span class="built_in">object</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004163223821.png" alt="image-20211004163223821"></p>
<p>可以看到，使用<code>object</code>类型作为参数传入达到了我们预期的效果，解决了代码的<strong>复用性</strong>。</p>
<p>但是这里又会引发另一个问题：装箱和拆箱带来的性能损耗问题。</p>
<blockquote>
<p>装箱和拆箱：在把值类型转换为引用类型或把引用类型转换成值类型时，需要进行装箱和拆箱的操作。</p>
<p>值类型存储在栈上，引用类型存储在堆上。</p>
<p>值类型  ==&gt; 引用类型  装箱    隐式转换(自动转换)  </p>
<p>引用类型 ==&gt; 值类型   拆箱    显示转换（强制转换）需要类型转换运算符</p>
</blockquote>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>泛型就是为了解决这个问题而产生的，在<code>.NET2.0</code>推出泛型</p>
<blockquote>
<p>泛型是<code>C#</code>和<code>.NET</code>的一个重要概念，不仅是<code>C#</code>语言的一部分而且和<code>IL</code>中间语言紧密结合。</p>
<p>在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。</p>
<p>泛型类( <code>GenericList&lt;T&gt;</code>)无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 若要使用 <code>GenericList&lt;T&gt;</code>，客户端代码必须通过指定尖括号内的类型参数来声明并实例化构造类型。 此特定类的类型参数可以是编译器可识别的任何类型。 可创建任意数量的构造类型实例，其中每个使用不同的类型参数。</p>
</blockquote>
<h4 id="定义泛型参数"><a href="#定义泛型参数" class="headerlink" title="定义泛型参数"></a>定义泛型参数</h4><p>优化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowName</span>&lt;<span class="title">T</span>&gt;(<span class="params">T i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i?.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Jonty&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> d = DateTime.Now;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************CommonMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowTypeName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowTypeName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowTypeName(d);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************ObjectMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowObjectName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowObjectName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowObjectName(d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************GenericMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowName(d);</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p>可以看到，效果是一摸一样的：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004170341353.png" alt="image-20211004170341353"></p>
<p><strong>为什么泛型可以解决这个问题呢？</strong></p>
<p>泛型是延迟声明的：即定义的时候没有指定具体的参数类型，把参数类型的声明推迟到了调用的时候才指定参数类型</p>
<p><strong>泛型是如何工作的呢？</strong></p>
<p>控制台程序最终会编译成一个exe程序，exe被点击的时候，会经过JIT(即时编译器)的编译，最终生成二进制代码，才能被计算机执行。泛型加入到语法以后，<code>visual studio</code>自带的编译器又做了升级，升级之后编译时遇到泛型，会做特殊的处理：生成占位符。再次经过JIT编译的时候，会把上面编译生成的占位符替换成具体的数据类型。</p>
<p>示例:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="keyword">typeof</span>(List&lt;&gt;));</span><br><span class="line">Console.WriteLine(<span class="keyword">typeof</span>(Dictionary&lt;,&gt;));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p>可以看到，泛型在编译后会生成占位符</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004171349172.png" alt="image-20211004171349172"></p>
<p><strong>性能对比：</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">11932</span></span><br><span class="line">    <span class="built_in">long</span> commonSecond = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> objectSecond = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> genericSecond = <span class="number">0</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowInt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        commonSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowObject(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        objectSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Show(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        genericSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(</span><br><span class="line">        <span class="string">$&quot;commonMethod:<span class="subst">&#123;commonSecond&#125;</span>\nobjectMethod:<span class="subst">&#123;objectSecond&#125;</span>\ngenericMethod:<span class="subst">&#123;genericSecond&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Private Metho</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowInt</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowObject</span>(<span class="params"><span class="built_in">object</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>&lt;<span class="title">T</span>&gt;(<span class="params">T i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p>泛型方法&lt;普通方法&lt;Object方法 </p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004172530409.png" alt="image-20211004172530409"></p>
<h3 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h3><p>泛型的另一个特性就是<strong>类型安全</strong></p>
<p>示例：</p>
<p><code>ArrayList</code>可以添加任意类型的参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arrayList.Add(<span class="number">123</span>);</span><br><span class="line">arrayList.Add(<span class="string">&quot;jonty&quot;</span>);</span><br><span class="line">arrayList.Add(DateTime.Now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arrayList)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用泛型可以进行类型约束：</p>
<p>如果我们添加其他类型的参数则会编译报错，<strong>参数无效</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; arrInts = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">arrInts.Add(<span class="number">1</span>);</span><br><span class="line">arrInts.Add(<span class="number">2</span>);</span><br><span class="line">arrInts.Add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><ul>
<li><p>泛型类型的名称首字母用<code>T</code></p>
</li>
<li><p>如果没有特殊要求，泛型类型允许用任何类代替；且只使用了一个泛型类型时，可以直接使用<code>T</code>作为泛型类型的名称</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果泛型的类型有特殊的要求，或者使用了两个或多个泛型类型，那么泛型类应该使用描述性名称</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Eventhandler</span>&lt;<span class="title">TEventArgs</span>&gt;(<span class="params">Object sender,TEventargs e</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SortedList</span>&lt;<span class="title">Tkey</span>,<span class="title">TValue</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Generic</tag>
      </tags>
  </entry>
  <entry>
    <title>温故而知新-C#泛型</title>
    <url>/2021/10/08/csharp-generic-review-02/</url>
    <content><![CDATA[<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>除了有<strong>泛型方法</strong>，还有<strong>泛型类</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DocumentManager</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">readonly</span>  <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; _documentQueue</span>= <span class="keyword">new</span> Queue&lt;T&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsAvailable =&gt;_documentQueue.Count &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddDocument</span>(<span class="params">T doc</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            _documentQueue.Enqueue(doc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetDocument</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        T doc = <span class="literal">default</span>;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            doc=_documentQueue.Dequeue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>可以看到在<code>GetDocument</code>这个方法中初始化<code>doc</code>变量时，我们使用了<code>default</code>关键字</p>
<blockquote>
<p>default关键字根据上下文可以有多种含义，switch语句中使用default定义默认情况。在泛型中取决于泛型类型是值类型还是引用类型，泛型default关键字将泛型类型初始化为null或0</p>
</blockquote>
<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p><strong>泛型类</strong>都有了，<strong>泛型接口</strong>也可以有</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDocumentManager</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">AddDocument</span>(<span class="params">T doc</span>)</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="function">T <span class="title">GetDocument</span>(<span class="params"></span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>还有<strong>泛型委托</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">T t</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<p>1、泛型在声明的时候可以不指定具体的类型，在使用时需要指定具体类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AClass</span>:<span class="title">BClass</span>&lt;<span class="title">int</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>2、如果子类也是泛型的，那么继承的时候可以不指定具体类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AClass</span>&lt;<span class="title">T</span>&gt;:<span class="title">BClass</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逆变和协变"><a href="#逆变和协变" class="headerlink" title="逆变和协变"></a>逆变和协变</h4><p>在<code>.NET4.0</code>之前，泛型接口是不变的。</p>
<p><strong>协变</strong>和<strong>逆变</strong>指对参数和返回值的类型进行转换。只能放在接口或委托的泛型参数前面</p>
<p><code>out</code>协变 covariant 用来修饰返回值；</p>
<p><code>in</code>逆变 contravariant 用来修饰传入参数；</p>
<p>示例：</p>
<p>定义一个<code>Animal</code>类，再定义一个<code>Cat</code>类继承<code>Animal</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">Animal animal1 = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; animals = <span class="keyword">new</span> List&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Cat&gt;cats= <span class="keyword">new</span> List&lt;Cat&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; list = <span class="keyword">new</span> List&lt;Cat&gt;(); <span class="comment">// 报错 没有父子级关系</span></span><br></pre></td></tr></table></figure>

<p>这个时候可以使用<strong>协变</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IEnumerable list = <span class="keyword">new</span> List&lt;Cat&gt;();</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211008001058082.png" alt="image-20211008001058082"></p>
<p>可以看到，泛型接口使用了<code>out</code>参数修饰，<code>T</code>只能是返回值类型，不能作为参数类型。使用<strong>协变</strong>后，左边声明的是基类，右边可以声明子类或基类。</p>
<p>协变也可用于委托：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;Animal&gt;func = <span class="keyword">new</span> Func&lt;Cat&gt;(()=&gt;<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="自定义协变"><a href="#自定义协变" class="headerlink" title="自定义协变"></a>自定义协变</h4><p><strong>out</strong>协变，只能是返回结果</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerListOut</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">Get</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerListOut</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICustomerListOut</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ICustomerListOut&lt;Animal&gt; list1 = <span class="keyword">new</span> CustomerListOut&lt;Cat&gt;();</span><br></pre></td></tr></table></figure>

<h4 id="自定义逆变"><a href="#自定义逆变" class="headerlink" title="自定义逆变"></a>自定义逆变</h4><p><strong>in</strong>逆变，只能作为方法参数，不能作为返回值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerListIn</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span>(<span class="params">T t</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerListIn</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICustomerListIn</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params">T t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ICustomerListIn&lt;Cat&gt; list2 = <span class="keyword">new</span> CustomerListIn&lt;Animal&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>如果泛型类需要调用泛型类型中的方法，则需要添加约束。</p>
<p>定义一个<code>IDocument</code>接口，定义两个<strong>只读属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDocument</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Document</span>:<span class="title">IDocument</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Document</span>(<span class="params"><span class="built_in">string</span> title,<span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Title = title;</span><br><span class="line">        <span class="keyword">this</span>.Content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要显示<strong>Document</strong>的标题，我们可以这样写:</p>
<p>将<code>T</code>强制转换为<code>IDocument</code>接口</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayAllDocuments</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> _documentQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(((IDocument)doc).Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果我们实现的不是<code>IDocument</code>呢？而是其他的，并没有<code>Title</code>，这个时候就会报错。</p>
<p>这个时候我们可以给<code>DocumentManager</code>一个约束：<strong>T</strong>类型必须实现<strong>IDocument</strong>接口，使用<code>Where</code>关键字</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DocumentManager&lt;T&gt;:IDocumentManager&lt;T&gt; <span class="keyword">where</span> T : <span class="function">IDocument</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayAllDocuments</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> _documentQueue)</span><br><span class="line">   &#123;</span><br><span class="line">       Console.WriteLine(doc.Title);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img data-src="https://cdn.jonty.top/img/image-20211007223036959.png" alt="image-20211007223036959" style="zoom:80%;" />

<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><table>
<thead>
<tr>
<th align="center">约束</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">where T:struct</td>
<td align="center">T类型必须是值类型</td>
</tr>
<tr>
<td align="center">where T:class</td>
<td align="center">T类型必须是引用类型（类、接口、委托、数组等）</td>
</tr>
<tr>
<td align="center">where T:IFoo</td>
<td align="center">指定类型必须实现接口IFoo</td>
</tr>
<tr>
<td align="center">where T:Foo</td>
<td align="center">指定类型T必须派生自基类Foo</td>
</tr>
<tr>
<td align="center">where T:new()</td>
<td align="center">构造函数约束，指定类型T必须有一个默认构造函数，需最后指定</td>
</tr>
<tr>
<td align="center">where T1:T2</td>
<td align="center">T1派生自泛型类型T2</td>
</tr>
</tbody></table>
<blockquote>
<p>new()只能为默认构造函数定义构造函数约束，不能为其他构造函数定义构造函数约束</p>
<p>基类约束时，基类不能是密封类（即sealed类），sealed类不能被继承，则此约束无意义。</p>
</blockquote>
<p>泛型约束可以多个约束：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>&lt;<span class="title">T</span>&gt;(<span class="params">T t</span>) <span class="keyword">where</span> T:Document,<span class="keyword">new</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">DocumentManager</span>&lt;<span class="symbol">T</span>&gt; : <span class="symbol">IDocumentManager</span>&lt;<span class="symbol">T</span>&gt; <span class="symbol">where</span> <span class="symbol">T</span> : <span class="symbol">IDocument</span></span><br></pre></td></tr></table></figure>

<p>泛型类型可以实现泛型接口，也可以派生自一个类。泛型类可以派生自泛型基类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span>&lt;<span class="title">T</span>&gt;:<span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>必须重复实现接口的泛型类型，或者必须执行基类的类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span>&lt;<span class="title">T</span>&gt;:<span class="title">Base</span>&lt;<span class="title">string</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>派生类可以是<strong>泛型类</strong>或<strong>非泛型类</strong></p>
<p>例子：定义一个抽象的泛型类,在派生类中用另一种实现</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Calc</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">Add</span>(<span class="params">T x, T y</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntCalc</span> : <span class="title">Calc</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>泛型类的静态成员只能在类的一个实例中共享</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StaticDemo</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StaticDemo&lt;<span class="built_in">string</span>&gt;.x = <span class="number">4</span>;</span><br><span class="line">StaticDemo&lt;<span class="built_in">int</span>&gt;.x = <span class="number">5</span>;</span><br><span class="line">Console.WriteLine(StaticDemo&lt;<span class="built_in">string</span>&gt;.x);</span><br></pre></td></tr></table></figure>

<p>结果： </p>
<p><img data-src="https://cdn.jonty.top/img/image-20211007233059047.png" alt="image-20211007233059047"></p>
<h3 id="泛型缓存"><a href="#泛型缓存" class="headerlink" title="泛型缓存"></a>泛型缓存</h3><p>我们知道，类的静态构造函数只会执行一次，所以不管无论实例化多少次，在内存中只会有一个。</p>
<p>在泛型中，<code>T</code>类型不同，每个不同的<code>T</code>类型都会生成一个不同的副本，会产生不同的静态属性、静态构造函数。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">int</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">long</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">string</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;DateTime&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GenericCache</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _typeTime;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">GenericCache</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;static&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _typeTime = <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">typeof</span>(T).FullName&#125;</span>_<span class="subst">&#123;DateTime.Now:yyyyMMddHHmmss.fff&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCache</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _typeTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img data-src="https://cdn.jonty.top/img/image-20211008003511609.png" alt="image-20211008003511609" style="zoom:80%;" />

<p>泛型会为不同类型都创建一个副本，构造函数执行5次，后面获取的缓存都是相同的。</p>
<p>注意：只能为不同的类型缓存一次。泛型缓存比字典缓存效率高，但是不能主动释放。</p>
<h3 id="泛型结构"><a href="#泛型结构" class="headerlink" title="泛型结构"></a>泛型结构</h3><p>与类一样，结构也可以是泛型的。但是不同于类，不能继承。</p>
<p>以<code>Nullable&lt;T&gt;</code>为例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Nullable&lt;T&gt; <span class="keyword">where</span> T: <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _hasValue;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> HasValue =&gt; _hasValue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Nullable</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _hasValue = <span class="literal">true</span>;</span><br><span class="line">        _value = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T _value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T Value</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_hasValue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;no value&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">T</span>(<span class="params">Nullable&lt;T&gt; <span class="keyword">value</span></span>)</span> =&gt; <span class="keyword">value</span>.Value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">Nullable</span>&lt;<span class="title">T</span>&gt;(<span class="params">T <span class="keyword">value</span></span>)</span> =&gt; <span class="keyword">new</span> Nullable&lt;T&gt;(<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span>? ToString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !HasValue ? <span class="built_in">string</span>.Empty : _value.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Nullable&lt;<span class="built_in">int</span>&gt; x;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (x.HasValue)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(x.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h4><p>在<code>c#</code>中，使用<code>?</code>定义可空类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? i = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>可空类型可以与<code>null</code>或数字比较</li>
<li>可空类型可以与算数运算符使用</li>
</ul>
<p>非可空类型可以转换成可空类型，隐式转换</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span>? y = x;</span><br></pre></td></tr></table></figure>

<p>可空类型转为非可空类型可能会失败，如果可空类型<code>null</code>赋值给非可空类型则会抛出<code>InvalidOperationException</code>异常，需要强制类型转换</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? x = GetNullableType(); <span class="comment">// 可能返回null</span></span><br><span class="line"><span class="built_in">int</span> y = (<span class="built_in">int</span>)x;</span><br></pre></td></tr></table></figure>

<p>如果不进行显示转换，则可以使用合并运算符从可空类型转换成非可空类型，关键词<code>??</code>，为转换定义一个默认值，以防可控类型的值为<code>null</code>。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? x = GetNullableType();</span><br><span class="line"><span class="built_in">int</span> y = x ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>Generic</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本操作</title>
    <url>/2021/12/05/getting-started-with-git/</url>
    <content><![CDATA[<h1 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h1><p>下面对工作中涉及到的git命令做分类总结，都是最常用的。</p>
<h2 id="git本地管理"><a href="#git本地管理" class="headerlink" title="git本地管理"></a>git本地管理</h2><blockquote>
<p>git最基本的一些操作</p>
</blockquote>
<p>git init：将某目录变成git可以管理的仓库（添加.git目录）</p>
<p>git commit -m “…”:一次性提交多个文件（add进来的文件）</p>
<p>git add xxx.md:可以多次添加多个不同文件</p>
<p>git status:可以时刻掌握仓库当前的状态</p>
<p>git diff:显示具体修改的内容（与提交进去的文件相比）</p>
<p>git log：显示从最近到最远的提交日志，加上–pretty=oneline参数可以将每次提交信息压缩成一行,最前边的数字加字母是指每次commit的commit-id,是16进制的表示形式</p>
<p>.gitignore文件：包括git需要忽略提交的文件名，此文件也需要提交到git</p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><blockquote>
<p>世界上是有后悔药的</p>
</blockquote>
<p>git reset –hard HEAD^:回退到上个版本（上上个版本HEAD^^,上100个版本是HEAD~100。HEAD是指向当前版本的指针，因此可以通过调整HEAD来在历史版本间穿梭）</p>
<p>git reset –hard commmitid：在没有关闭上次回退时的命令窗口时，可以取消回退。commitid没必要写全，git可以自己去找</p>
<p>git reflog:可以显示每一次commit和回退的id号，如果命令窗口关闭，可以用此命令先找到commitid，然后用上个命令取消回退</p>
<p>git checkout – file：撤销在工作区对file做的修改，包括撤销对file文件的删除</p>
<p>git reset HEAD file &amp; git checkout – file：对file的修改已被add到stage，用前者删除add到stage的修改，再用后者撤销工作区的修改</p>
<p>git reset –hard HEAD^ :已经将想撤销的修改添加到了版本库，但还未提交到远程库。用版本回退撤销修改</p>
<p>git rm file&amp;git commit -m “delete file”：删除已添加到版本库的文件</p>
<p>git checkout:用版本库里的文件版本替换工作区的文件版本（一键还原）</p>
<h2 id="远程库连接"><a href="#远程库连接" class="headerlink" title="远程库连接"></a>远程库连接</h2><blockquote>
<p>连接远程库，进一步实现团队协作。</p>
</blockquote>
<p>git remote:查看远程库信息，详细信息加上-v选项</p>
<p>git remote add origin <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#111;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#111;&#109;</a>:Summyj/xxx.git：将本地git仓库与github远程库想关联,也可以是其它库，远程库默认名字是origin，也可以设为其它，比如github</p>
<p>git push -u origin xxx:把本地仓库指定分支·内容推送到远程，下次推送可以不用-u参数<br>因为第一次推送master分支时如果加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，所以在以后的推送或者拉取时就可以简化命令。</p>
<p>git clone <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a>:xxx/xxx.git:从远程仓库克隆到本地，后边是地址</p>
<p>git remotr rm origin:删除本地库关联的origin远程库</p>
<h2 id="分支创建管理"><a href="#分支创建管理" class="headerlink" title="分支创建管理"></a>分支创建管理</h2><blockquote>
<p>实现更安全便捷的版本控制。</p>
</blockquote>
<p>git checkout -b xxx:git check命令加上-b参数表示创建并切换到xxx分支，此命令相当于两条命令：</p>
<ul>
<li>git branch xxx</li>
<li>git checkout xxx</li>
</ul>
<p>git branch:查看当前分支（列出所有分支，当前分支前边会标有*号）</p>
<p>git merge xxx:将指定分支xxx合并到当前分支,首先要切换到当前分支（不一定是master分支）</p>
<p>git branch -d xxx:删除某分支（合并后再删除）</p>
<p>git branch -D xxx:强行删除某个没有被合并的分支</p>
<p>git log –graph –pretty=oneline –abbrev-commit：用分支图展示各分支合并情况（或者直接git log –graph，但这将会显示所有历史合并图）</p>
<p>git merge –no-ff -m “…” xxx:禁用git合并时默认的fast-forward模式，生成新的commit加入分支信息。-m后的内容就是合并信息</p>
<h2 id="工作现场存储"><a href="#工作现场存储" class="headerlink" title="工作现场存储"></a>工作现场存储</h2><blockquote>
<p>版本控制的freestyle.</p>
</blockquote>
<p>git stash:将当前工作现场储藏起来，等以后恢复现场后继续工作</p>
<p>git stash list:查看储藏的工作现场</p>
<p>git stash apply:回复储藏的工作现场</p>
<p>git stash apply stash@{x}有多个stash时恢复指定的stash</p>
<p>git stash drop:恢复现场并删除stash list的内容，如果有多个stash,默认恢复的是最新的stash.</p>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><blockquote>
<p>小伙伴们的友情</p>
</blockquote>
<p>git checkout -b xxx origin/xxx:刚从远程库克隆到本地时只有master分支，用此命令创建和远程分支对应的分支</p>
<p>git pull:多人协作时，远程分支比本地分支更新导致推送失败，用此命令从远程库抓取该分支最新的提交并和本地分支进行合并，合并有冲突需要手动解决</p>
<p>git branch –set-upstream xxx origin/xxx:git pull失败时需要创建本地分支和远程分支的关联</p>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><blockquote>
<p>更方便进行版本控制，与commit id相比更好记。相当于版本库的一个快照。</p>
</blockquote>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。与HEAD指针相比，后者可以移动，但标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<p>git tag xxx:打标签</p>
<p>git tag v0.3 646123:将commit id为646123的提交打上v0.3标签。这样可以解决忘记打标签的问题</p>
<p>git tag:查看所有标签（按字母排序，而并非时间）</p>
<p>git show tagname:查看标签信息（包括说明文字）</p>
<p>git tag -a v0.x -m “…” 615465:创建带有说明的标签，用-a指定标签名，-m指定说明文字</p>
<p>git tag -d xxx:删除指定标签（因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。）</p>
<p>git push origin tagname:推送标签到远程</p>
<p>git push origin –tags:一次性推送全部尚未推送到远程的本地标签</p>
<p>git tag -d tagname &amp; git push origin :refs/tags/tagname:删除已推送到远程库的标签，先从本地删除，再从远程删除</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁的 TypeScript</title>
    <url>/2022/03/07/clean-code-typescript/</url>
    <content><![CDATA[<blockquote>
<p>原文链接 <a href="https://github.com/labs42io/clean-code-typescript">clean-code-typescript</a></p>
</blockquote>
<p>将代码整洁的理念适配至 TypeScript ， 灵感来自于<a href="https://github.com/ryanmcdermott/clean-code-javascript">代码整洁的 JavaScript </a>。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img data-src="https://www.osnews.com/images/comics/wtfm.jpg" alt="一张用你阅读代码时吐槽的数量来评估软件质量的搞笑图片"></p>
<p>将源自 Robert C. Martin 的 <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a>的软件工程原则适配到 TypeScript 。 这不是一个代码风格指南， 它是一个使用 TypeScript 来生产可读的、可重用的、以及可重构的软件的指南。</p>
<p>这里的每一项原则都不是必须遵守的， 甚至只有更少的能够被广泛认可。 这些仅仅是指南而已， 但却是<em>Clean Code</em> 作者多年经验的结晶。</p>
<p>我们的软件工程行业只有短短的 50 年， 依然有很多要我们去学习。 当软件架构与建筑架构一样古老时，也许我们将会有硬性的规则去遵守。 而现在， 让这些指南做为你和你的团队生产的 TypeScript 代码的质量的标准。</p>
<p>还有一件事： 知道这些指南并不能马上让你成为一个更加出色的软件开发者， 并且使用它们工作多年也并不意味着你不再会犯错误。 每一段代码最开始都是草稿， 像湿粘土一样被打造成最终的形态。 最后当我们和搭档们一起审查代码时清除那些不完善之处, 不要因为最初需要改善的草稿代码而自责， 而是对那些代<br>码下手。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="使用有意义的变量名称"><a href="#使用有意义的变量名称" class="headerlink" title="使用有意义的变量名称"></a>使用有意义的变量名称</h3><p>使用可以区分的名称， 让读者知道他们的区别是什么。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">a1: T, a2: T, a3: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, left: T, right: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> left &lt;= value &amp;&amp; value &lt;= right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用可拼读的变量名称"><a href="#使用可拼读的变量名称" class="headerlink" title="使用可拼读的变量名称"></a>使用可拼读的变量名称</h3><p>如果你不能把它读出来， 那你就不能和同事讨论它。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DtaRcrd102 = &#123;</span><br><span class="line">  <span class="attr">genymdhms</span>: <span class="built_in">Date</span>;</span><br><span class="line">  modymdhms: <span class="built_in">Date</span>;</span><br><span class="line">  pszqint: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Customer = &#123;</span><br><span class="line">  <span class="attr">generationTimestamp</span>: <span class="built_in">Date</span>;</span><br><span class="line">  modificationTimestamp: <span class="built_in">Date</span>;</span><br><span class="line">  recordId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为相同类型的变量使用相同的词汇"><a href="#为相同类型的变量使用相同的词汇" class="headerlink" title="为相同类型的变量使用相同的词汇"></a>为相同类型的变量使用相同的词汇</h3><p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDetails</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserData</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h3><p>我们要阅读的代码比要写的代码多得多， 所以我们写出的代码的可读性和可搜索性是很重要的。 使用没有意义的变量名将会导致我们的程序难于理解， 所以请使用可搜索的变量名。 类似 <a href="https://palantir.github.io/tslint/rules/no-magic-numbers/">TSLint</a>的工具可以帮助我们找到未命名的常量。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// What the heck is 86400000 for?</span></span><br><span class="line"><span class="comment">// 艹， 86400000 是什么鬼？</span></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, <span class="number">86400000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized named constants.</span></span><br><span class="line"><span class="comment">// 将它们声明为大写的变量</span></span><br><span class="line"><span class="keyword">const</span> MILLISECONDS_IN_A_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, MILLISECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>

<h3 id="使用解释性的变量"><a href="#使用解释性的变量" class="headerlink" title="使用解释性的变量"></a>使用解释性的变量</h3><p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> keyValue <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="comment">// iterate through users map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [id, user] <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="comment">// iterate through users map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免心理映射"><a href="#避免心理映射" class="headerlink" title="避免心理映射"></a>避免心理映射</h3><p>显示比隐式更好。 清晰为王！</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> u = getUser();</span><br><span class="line"><span class="keyword">const</span> s = getSubscription();</span><br><span class="line"><span class="keyword">const</span> t = charge(u, s);</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = getUser();</span><br><span class="line"><span class="keyword">const</span> subscription = getSubscription();</span><br><span class="line"><span class="keyword">const</span> transaction = charge(user, subscription);</span><br></pre></td></tr></table></figure>

<h3 id="不添加不必要的上下文"><a href="#不添加不必要的上下文" class="headerlink" title="不添加不必要的上下文"></a>不添加不必要的上下文</h3><p>如果你的类/类型/对象名有意义， 不必在变量名上再重复。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  <span class="attr">carMake</span>: <span class="built_in">string</span>;</span><br><span class="line">  carModel: <span class="built_in">string</span>;</span><br><span class="line">  carColor: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.carMake&#125;</span> <span class="subst">$&#123;car.carModel&#125;</span> (<span class="subst">$&#123;car.carColor&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="built_in">string</span>;</span><br><span class="line">  model: <span class="built_in">string</span>;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.make&#125;</span> <span class="subst">$&#123;car.model&#125;</span> (<span class="subst">$&#123;car.color&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用默认变量替代短路运算或条件"><a href="#使用默认变量替代短路运算或条件" class="headerlink" title="使用默认变量替代短路运算或条件"></a>使用默认变量替代短路运算或条件</h3><p>默认参数通常比短路运算更清晰。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loadCount = count !== <span class="literal">undefined</span> ? count : <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count: <span class="built_in">number</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数-两个以下最理想"><a href="#函数参数-两个以下最理想" class="headerlink" title="函数参数 (两个以下最理想)"></a>函数参数 (两个以下最理想)</h3><p>限制函数参数的个数是非常重要的， 因为这样将使你的函数容易进行测试。 一旦超过三个参数将会导致组合爆炸， 因为你不得不编写大量针对每个参数的测试用例。</p>
<p>一个或者两个参数是理想状况， 如果可能的话， 三个参数的情况应该避免， 超过三个应该被<strong>重构</strong>。 通常，如果你有一个超过两个函数的参数， 那就意味着你的函数尝试做太多的事情。 如果不是， 多数情况下一个 更高级对象可能会满足需求。</p>
<p>当你发现你自己需要大量的参数时， 考虑使用一个对象。</p>
<p>为了让函数需要的属性更明显， 可以使用<a href="https://basarat.gitbooks.io/typescript/docs/destructuring.html">解构</a>语法。 它有三个优点：</p>
<ol>
<li><p>当有人查看函数签名时， 会立刻清楚用到了哪些属性。</p>
</li>
<li><p>解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆参数对象中解构的对象和数组。</p>
</li>
<li><p>TypeScript 会警告您未使用的属性，如果没有解构，这将是不可能的。</p>
</li>
</ol>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(<span class="string">&#x27;Foo&#x27;</span>, <span class="string">&#x27;Bar&#x27;</span>, <span class="string">&#x27;Baz&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: &#123; title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>你可以通过<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases">类型别名</a>来显著提高可读性：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuOptions = &#123; <span class="attr">title</span>: <span class="built_in">string</span>, <span class="attr">body</span>: <span class="built_in">string</span>, <span class="attr">buttonText</span>: <span class="built_in">string</span>, <span class="attr">cancellable</span>: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: MenuOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="函数应当只做一件事情"><a href="#函数应当只做一件事情" class="headerlink" title="函数应当只做一件事情"></a>函数应当只做一件事情</h3><p>单一职责原则，这是软件工程中最重要的一条规则， 当函数需要做更多的事情时， 它们将会更难进行编写、 测试和推理。当你能将一个函数隔离到只有一个动作， 他们将能够被容易的进行重构并且你的代码将会更容易阅读。 如果你严格遵守本指南中的这一条， 你将会领先于许多开发者。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client</span>) </span>&#123;</span><br><span class="line">  clients.filter(isActiveClient).forEach(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActiveClient</span>(<span class="params">client: Client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数名称应该说明它要做什么"><a href="#函数名称应该说明它要做什么" class="headerlink" title="函数名称应该说明它要做什么"></a>函数名称应该说明它要做什么</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// It&#x27;s hard to tell from the function name what is added</span></span><br><span class="line"><span class="comment">// 很难从函数名看出加了什么</span></span><br><span class="line">addToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMonthToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">addMonthToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="函数应该只有一个抽象级别"><a href="#函数应该只有一个抽象级别" class="headerlink" title="函数应该只有一个抽象级别"></a>函数应该只有一个抽象级别</h3><p>当在你的函数中有多于一个抽象级别时， 你的函数通常做了太多事情。 拆分函数将会提升重用性和测试性。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ast = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tokens = tokenize(code);</span><br><span class="line">  <span class="keyword">const</span> syntaxTree = parse(tokens);</span><br><span class="line"></span><br><span class="line">  syntaxTree.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">code: <span class="built_in">string</span></span>): <span class="title">Token</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens: Token[] = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      tokens.push( <span class="comment">/* ... */</span> );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">tokens: Token[]</span>): <span class="title">SyntaxTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> syntaxTree: SyntaxTree[] = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    syntaxTree.push( <span class="comment">/* ... */</span> );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> syntaxTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移除冗余代码"><a href="#移除冗余代码" class="headerlink" title="移除冗余代码"></a>移除冗余代码</h3><p>竭尽你的全力去避免冗余代码。 冗余代码是不好的， 因为它意味着当你需要修改一些逻辑时会有多个地方需要修改。</p>
<p>想象一下你在经营一家餐馆， 你需要记录所有的库存西红柿， 洋葱， 大蒜， 各种香料等等。 如果你有多个记录列表， 当你用西红柿做一道菜时你得更新多个列表。 如果你只有一个列表， 就只有一个地方需要更新！</p>
<p>你有冗余代码通常是因为你有两个或多个稍微不同的东西， 它们共享大部分， 但是它们的不同之处迫使你使用两个或更多独立的函数来处理大部分相同的东西。 移除冗余代码意味着创建一个可以处理这些不同之处的抽象的函数/模块/类。</p>
<p>让这个抽象正确是关键的， 这是为什么要你遵循 <em>Classes</em> 那一章的 SOLID 的原因。 不好的抽象比冗余代码更差， 所以要谨慎行事。 既然已经这么说了， 如果你能够做出一个好的抽象， 才去做。 不要重复你自己， 否则你会发现当你要修改一个东西时时刻需要修改多个地方。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers: Developer[]</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function">(<span class="params">developer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.getGithubLink();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers: Manager[]</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function">(<span class="params">manager</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.getMBAProjects();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getExtraDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">githubLink</span>: <span class="built_in">this</span>.githubLink,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getExtraDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">portfolio</span>: <span class="built_in">this</span>.portfolio,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEmployeeList</span>(<span class="params">employee: Developer | Manager</span>) </span>&#123;</span><br><span class="line">  employee.forEach(<span class="function">(<span class="params">employee</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">const</span> extra = employee.getExtraDetails();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      extra,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您应该对代码冗余持批判的态度。 有时需要在冗余代码和通过因不必要的抽象而增加的复杂性之间做权衡。 当来自两个不同模块的两个实现看起来相似但存在于不同的域中时，冗余(可能)是可接受的并且优于提取公共代码。 在这种情况下，提取的公共代码引入了两个模块之间的间接依赖关系。</p>
<h3 id="使用-Object-assign-设置默认对象或者解构"><a href="#使用-Object-assign-设置默认对象或者解构" class="headerlink" title="使用 Object.assign 设置默认对象或者解构"></a>使用 Object.assign 设置默认对象或者解构</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">&#x27;Foo&#x27;</span>;</span><br><span class="line">  config.body = config.body || <span class="string">&#x27;Bar&#x27;</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">&#x27;Baz&#x27;</span>;</span><br><span class="line">  config.cancellable = config.cancellable !== <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menuConfig = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">    <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>另外， 也可以使用解构来处理默认值：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title = <span class="string">&#x27;Foo&#x27;</span>, body = <span class="string">&#x27;Bar&#x27;</span>, buttonText = <span class="string">&#x27;Baz&#x27;</span>, cancellable = <span class="literal">true</span> &#125;: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>要避免显示传递 <code>undefined</code> 或者 <code>null</code> 值产生的负面影响或异常行为， 可以设置 TypeScript 编译器来禁止。 请查看 TypeScript 的 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks"><code>--strictNullChecks</code></a> 选项。</p>
<h3 id="不要使用标记位做为函数参数"><a href="#不要使用标记位做为函数参数" class="headerlink" title="不要使用标记位做为函数参数"></a>不要使用标记位做为函数参数</h3><p>标记位是告诉你的用户这个函数做了不只一件事情。 函数应该只做一件事情。 如果你的函数因为一个布尔值出现不同的代码路径， 请拆分它们。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span>, temp: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.create(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  createFile(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免副作用（第-1-部分）"><a href="#避免副作用（第-1-部分）" class="headerlink" title="避免副作用（第 1 部分）"></a>避免副作用（第 1 部分）</h3><p>如果一个函数做了除接受一个值然后返回一个值或多个值之外的任何事情， 它将会产生副作用， 它可能是写入一个文件， 修改一个全局变量， 或者意外的把你所有的钱连接到一个陌生人那里。</p>
<p>现在在你的程序中确实偶尔需要副作用， 就像上面的代码， 你也许需要写入到一个文件， 你需要做的是集中化你要做的事情， 不要让多个函数或者类写入一个特定的文件， 用一个服务来实现它， 一个并且只有一个。</p>
<p>重点是避免这些常见的易犯的错误， 比如在对象之间共享状态而不使用任何结构， 使用任何地方都可以写入的可变的数据类型， 没有集中化导致副作用。 如果你能做到这些， 那么你将会比其它的码农大军更加幸福。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// 全局变量被下面的函数引用</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Robert C. Martin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = btoa(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toBase64();</span><br><span class="line"><span class="comment">// If we had another function that used this name, now it&#x27;d be a Base64 value</span></span><br><span class="line"><span class="comment">// 如果我们有另一个函数使用这个 name ， 现在它应该是一个 Base64 字符串值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// expected to print &#x27;Robert C. Martin&#x27; but instead &#x27;Um9iZXJ0IEMuIE1hcnRpbg==&#x27;</span></span><br><span class="line"><span class="comment">// 期望打印出 &#x27;Robert C. Martin&#x27; 但是却是 &#x27;Um9iZXJ0IEMuIE1hcnRpbg==&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Robert C. Martin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params">text: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> btoa(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encodedName = toBase64(name);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<h3 id="避免副作用-（第-2-部分）"><a href="#避免副作用-（第-2-部分）" class="headerlink" title="避免副作用 （第 2 部分）"></a>避免副作用 （第 2 部分）</h3><p>在 JavaScript 中， 基本类型通过值进行传递而对象/类通过引用传递。 以对象和数组为例， 如果你的函数对一个购物车数组做出了更改， 比如添加了一个要购买的东西， 那么其它使用这个购物车数组的任何函数都会受到影响。 这样貌似挺不错的， 不过也可能很糟糕。 让我们来想象一个糟糕的情况：</p>
<p>用户点击“购买”按钮， 调用一个 <code>purchase</code> 函数， 发出一个网络请求， 经购物车数组发送到服务器。 由于网络情况比较差， <code>purchase</code> 函数只能尝试重新发送请求。 现在， 用户在网络请求开始之前， 突然点击了“添加到购物车”按钮， 添加了一项并不是真心想买的东西， 那么 <code>purchase</code> 函数将会发送这个突然被添加的项目， 因为它们引用了同一个购物车数组对象， 而这个对象 <code>addItemToCart</code> 函数修改了， 添加了一个不想要的项目。</p>
<p>一个好的方案应该是让 <code>addItemToCart</code> 始终克隆一个购物车副本， 编辑并返回副本。 这样能够保证它不会被其它任何函数引用， 也就不能进行修改。</p>
<p>这种方案下需要注意以下 2 个问题：</p>
<ol>
<li><p>可能在有些情况下确实需要修改输入对象， 但是当你采用这种编程实践之后， 你会发现这种情况是寥寥无几的。 很多东西可以被重构来消除负面影响。 （参考<a href="https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0">纯函数</a>/<a href="https://en.wikipedia.org/wiki/Pure_function">Pure function</a>）</p>
</li>
<li><p>克隆大对象可能比较消耗性能。 幸运的是， 在实际操作上， 并不是一个多大的问题， 因为有优秀的类库可以让这一操作变得非常快， 同时也比手工克隆这些对象和数组节省很多内存。</p>
</li>
</ol>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  cart.push(&#123; item, <span class="attr">date</span>: <span class="built_in">Date</span>.now() &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">CartItem</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...cart, &#123; item, <span class="attr">date</span>: <span class="built_in">Date</span>.now() &#125;];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="不要写入全局函数"><a href="#不要写入全局函数" class="headerlink" title="不要写入全局函数"></a>不要写入全局函数</h3><p>污染全局在 JavaScript 中是一个不好的做法， 因为你可能会和另外一个类库冲突， 你的 API 的用户可能不够聪明， 直到他们得到在生产环境得到一个异常。 让我们来考虑这样一个例子： 假设你要扩展JavaScript 的 原生 <code>Array</code> ， 添加一个可以显示两个数组的不同之处的 <code>diff</code> 方法， 你可以在<code>Array.prototype</code> 中写一个新的方法， 但是它可能会和尝试做相同事情的其它类库发生冲突。 如果有另外一个类库仅仅使用 <code>diff</code> 方法来查找数组的第一个元素和最后一个元素之间的不同之处呢？ 这就是为什么使用 ES2015/ES6 的类是一个更好的做法的原因， 只要简单的扩展全局的 <code>Array</code> 即可。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> Array&lt;T&gt; &#123;</span><br><span class="line">    diff(other: T[]): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.diff) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">other: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  diff(other: T[]): T[] &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数式编程优于指令式编程"><a href="#函数式编程优于指令式编程" class="headerlink" title="函数式编程优于指令式编程"></a>函数式编程优于指令式编程</h3><p>当你可以使用函数式编程风格时请尽情使用。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Uncle Bobby&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Suzie Q&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jimmy Gosling&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Gracie Hopper&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contributions.length; i++) &#123;</span><br><span class="line">  totalOutput += contributions[i].linesOfCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Uncle Bobby&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Suzie Q&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jimmy Gosling&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Gracie Hopper&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalOutput = contributions</span><br><span class="line">  .reduce(<span class="function">(<span class="params">totalLines, output</span>) =&gt;</span> totalLines + output.linesOfCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="封装条件语句"><a href="#封装条件语句" class="headerlink" title="封装条件语句"></a>封装条件语句</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (subscription.isTrial || account.balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canActivateService</span>(<span class="params">subscription: Subscription, account: Account</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> subscription.isTrial || account.balance &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canActivateService(subscription, account)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免负面条件"><a href="#避免负面条件" class="headerlink" title="避免负面条件"></a>避免负面条件</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailNotUsed</span>(<span class="params">email: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmailNotUsed(email)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailUsed</span>(<span class="params">email</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isEmailUsed(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免条件语句"><a href="#避免条件语句" class="headerlink" title="避免条件语句"></a>避免条件语句</h3><p>这看起来似乎是一个不可能的任务。 第一次听到这个时， 多数人会说： “没有 <code>if</code> 语句还能期望我干啥呢”， 答案是多数情况下你可以使用多态来完成同样的任务。 第二个问题通常是 “好了， 那么做很棒，但是我为什么想要那样做呢”， 答案是我们学到的上一条代码整洁之道的理念： 一个函数应当只做一件事情。<br>当你有使用 <code>if</code> 语句的类/函数是， 你在告诉你的用户你的函数做了不止一件事情。 记住： 只做一件事情。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;777&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getPassengerCount();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Air Force One&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Cessna&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getFuelExpenditure();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Unknown airplane type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// shared logic with subclasses ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getPassengerCount();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getFuelExpenditure();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免类型检查"><a href="#避免类型检查" class="headerlink" title="避免类型检查"></a>避免类型检查</h3><p>TypeScript 是 JavaScript 的一个严格语法的超集， 为这门语言增加了可选的静态类型检查。始终倾向于给变量、 参数以及返回值定义类型一体现 TypeScript 的完整特征。这将使重构变得更加容易。</p>
<p><strong>NO</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle: Bicycle | Car</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">    vehicle.pedal(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">    vehicle.drive(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vehicle = Bicycle | Car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  vehicle.move(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h3><p>现代化浏览器运行时在幕后做大量的优化， 在大多数的时间， 做优化就是在浪费你的时间。 <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers">这些是好的资源</a>， 用来查看那些地方需要优化。 为这些而优化， 直到它们被修正。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// On old browsers, each iteration with uncached `list.length` would be costly</span></span><br><span class="line"><span class="comment">// because of `list.length` recomputation. In modern browsers, this is optimized.</span></span><br><span class="line"><span class="comment">// 在旧的浏览器上， 每次循环 `list.length` 都没有被缓存， 会导致不必要的开销， 因为要重新计</span></span><br><span class="line"><span class="comment">// 算 `list.length` 。 在现代化浏览器上， 这个已经被优化了。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移除僵尸代码"><a href="#移除僵尸代码" class="headerlink" title="移除僵尸代码"></a>移除僵尸代码</h3><p>僵死代码和冗余代码同样糟糕。 没有理由在代码库中保存它。 如果它不会被调用， 就删掉它。 当你需要<br>它时， 它依然保存在版本历史记录中。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">&#x27;apples&#x27;</span>, req, <span class="string">&#x27;www.inventory-awesome.io&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">&#x27;apples&#x27;</span>, req, <span class="string">&#x27;www.inventory-awesome.io&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用枚举器和生成器"><a href="#使用枚举器和生成器" class="headerlink" title="使用枚举器和生成器"></a>使用枚举器和生成器</h3><p>当像流一样处理数据集时， 使用生成器和枚举器。 这样做的好处是：</p>
<ul>
<li>被调用者与生成器解耦， 这样被调用者可以决定处理多少项；</li>
<li>延迟执行， 元素按流式按需处理；</li>
<li>允许为枚举模式实现进行优化；</li>
</ul>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> items: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (items.length &lt; n) &#123;</span><br><span class="line">    items.push(items[items.length - <span class="number">2</span>] + items[items.length - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  fibonacci(n).forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print first 10 Fibonacci numbers.</span></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个无限长的斐波那契数字流， 生成器并没有保存数字数组。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fib <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i++ === n) <span class="keyword">break</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(fib);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print first 10 Fibonacci numbers.</span></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>一些类库可以与原生数组类似的方式使用枚举， 将 <code>map</code>， <code>slice</code>， <code>forEach</code> 等方法串联到一起。 请参考 <a href="https://www.npmjs.com/package/itiriri">itiriri</a> 的高级枚举处理示例（或者 <a href="https://www.npmjs.com/package/itiriri-async">itiriri-async</a> 的异步枚举处理）。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itiriri <span class="keyword">from</span> <span class="string">&#x27;itiriri&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">itiriri(fibonacci())</span><br><span class="line">  .take(<span class="number">10</span>)</span><br><span class="line">  .forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br></pre></td></tr></table></figure>

<h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="使用-getter-和-setter"><a href="#使用-getter-和-setter" class="headerlink" title="使用 getter 和 setter"></a>使用 getter 和 setter</h3><p>TypeScript 支持 getter/setter 语法。 正因为如此， 使用 getters 和 setters 来访问对象上的数据比简单的在一个对象上查找属性要好得多。 “为什么？” 你可能会问， 好吧， 原因请看下面的列表：</p>
<ul>
<li><p>当你想在获取一个对象属性的背后做更多的事情时， 你不需要在代码库中查找和修改每一处访问；</p>
</li>
<li><p>使用 <code>set</code> 可以让添加验证变得容易；</p>
</li>
<li><p>封装内部实现；</p>
</li>
<li><p>使用 getting 和 setting 时， 容易添加日志和错误处理；</p>
</li>
<li><p>你可以延迟加载对象的属性， 比如说从服务器获取。</p>
</li>
<li><p><em>NO：</em>*</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> BankAccount = &#123;</span><br><span class="line">  <span class="attr">balance</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> account: BankAccount = &#123;</span><br><span class="line">  <span class="attr">balance</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot set negative balance.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.balance = value;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> accountBalance: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">balance</span>(): <span class="title">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.accountBalance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">balance</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot set negative balance.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.accountBalance = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 `BankAccount` 封装了验证逻辑， 如果某一天需求变化了， 需要添加额外的验证规则， 我们只需要修改 `setter` 即可， 其它依赖性代码则无需修改。</span></span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">new</span> BankAccount();</span><br><span class="line">account.balance = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h3 id="让对象拥有私有的-受保护的成员"><a href="#让对象拥有私有的-受保护的成员" class="headerlink" title="让对象拥有私有的/受保护的成员"></a>让对象拥有私有的/受保护的成员</h3><p>TypeScript 支持在类成员上添加 <code>public</code> <em>(默认)</em> ， <code>protected</code> 和 <code>private</code> 修饰符。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">perimeter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">surface</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> radius: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">perimeter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">surface</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="倾向于不可变性"><a href="#倾向于不可变性" class="headerlink" title="倾向于不可变性"></a>倾向于不可变性</h3><p>TypeScript 的类型系统允许将类/接口的某些属性标记为 <em>只读</em> 。 这允许你在一个很舒适的方式下工作（不需要考虑意外的变化）。 针对更加高级的场景， 有一个内置的 <code>Readonly</code> 类型， 它接受一个类型 <code>T</code> ， 实用类型映射， 将类型 <code>T</code> 的全部属性统统标记为只读（参考 <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types">mapped types</a>）。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="built_in">string</span>;</span><br><span class="line">  port: <span class="built_in">string</span>;</span><br><span class="line">  db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="keyword">readonly</span> host: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> port: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型-vs-接口"><a href="#类型-vs-接口" class="headerlink" title="类型 vs. 接口"></a>类型 vs. 接口</h3><p>当需要并集或者交集时， 实用类型。 当需要扩展或实现时， 实用接口。 然而并没有严格的规则， 哪个适合就用哪个。 若需要一个更加详细的解释， 请参考关于 TypeScript 的类型和接口之间的不同的这个<a href="https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543">答案</a>。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> EmailConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DbConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DbConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config  = EmailConfig | DbConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="title">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="title">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类应当小"><a href="#类应当小" class="headerlink" title="类应当小"></a>类应当小</h3><p>类的大小由它的职责衡量。 根据 <em>单一职责原则</em> 一个类应该小。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dashboard</span> </span>&#123;</span><br><span class="line">  getLanguage(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  setLanguage(language: <span class="built_in">string</span>): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  showProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  hideProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  isDirty(): <span class="built_in">boolean</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  goToHomePage(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  updateProfile(details: UserDetails): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dashboard</span> </span>&#123;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其它方法移到其它类以拆分职责</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="高内聚和低耦合"><a href="#高内聚和低耦合" class="headerlink" title="高内聚和低耦合"></a>高内聚和低耦合</h3><p>内聚定义了类成员彼此相关的程度。 理想情况下，每个方法都应使用类中的所有字段。<br>然后我们说这个类是<em>最高内聚</em>。 实际上， 这并非总是可行， 甚至不可取。 但是你应该更喜欢高内聚。</p>
<p>耦合指的是两个类相互依赖或相互依赖的程度。 如果其中一个类中的更改不影响其它的， 则称这些类是低耦合的。</p>
<p>好的软件设计拥有 <strong>高内聚</strong> 和 <strong>低耦合</strong> 。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不好的： 每一个私有变量仅仅被一组或另一组方法使用， 这很明显说明这个类在兼负多个职责。 当我仅仅需要一个服务来获取用户事务时， 还得传递另外一个 `emailSender` 的实例。</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> db: Database,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> emailSender: EmailSender</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(<span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> db: Database</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserNotifier</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> emailSender: EmailSender</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.emailSender.send(<span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合优先于继承"><a href="#组合优先于继承" class="headerlink" title="组合优先于继承"></a>组合优先于继承</h3><p>正如<a href="https://en.wikipedia.org/wiki/Design_Patterns"><em>设计模式四人帮</em></a>所述， 如果可能，你应该优先使用组合而不是继承。 有许多好的理由去使用继承， 也有许多好的理由去使用组合。这个格言的重点是， 如果你本能的观点是继承， 那么请想一下组合能否更好的为你的问题建模。 很多情况下它真的可以。</p>
<p>那么你也许会这样想， “我什么时候改使用继承？” 这取决于你手上的问题， 不过这儿有一个像样的列表说明什么时候继承比组合更好用：</p>
<ol>
<li>你的继承表示”是一个”的关系而不是”有一个”的关系（人类-&gt;动物 vs 用户-&gt;用户详情）；</li>
<li>你可以重用来自基类的代码（人可以像所有动物一样行动）；</li>
<li>你想通过基类对子类进行全局的修改（改变所有动物行动时的热量消耗）；</li>
</ol>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="comment">// 不好是因为雇员“有”税率数据， EmployeeTaxData 不是一个 Employee 类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    email: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> ssn: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> salary: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> taxData: EmployeeTaxData;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTaxData(ssn: <span class="built_in">string</span>, <span class="attr">salary</span>: <span class="built_in">number</span>): Employee &#123;</span><br><span class="line">    <span class="built_in">this</span>.taxData = <span class="keyword">new</span> EmployeeTaxData(ssn, salary);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">readonly</span> ssn: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">readonly</span> salary: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h3><p>这个模式在 JavaScript 中是非常有用的， 并且在许多类库使用。 它使你的代码变得富有表现力， 并减少啰嗦。 因为这个原因， 我说， 使用方法链然后再看看你的代码会变得多么简洁。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.collection = collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, <span class="attr">itemsPerPage</span>: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="built_in">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.orderByFields = fields;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryBuilder = <span class="keyword">new</span> QueryBuilder();</span><br><span class="line">queryBuilder.from(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">queryBuilder.page(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">queryBuilder.orderBy(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = queryBuilder.build();</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.collection = collection;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, <span class="attr">itemsPerPage</span>: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="built_in">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.orderByFields = fields;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="keyword">new</span> QueryBuilder()</span><br><span class="line">  .from(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  .page(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">  .orderBy(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>

<h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 (SRP)"></a>单一职责原则 (SRP)</h3><p>正如代码整洁之道所述， “永远不要有超过一个理由来修改一个类”。 给一个类塞满许多功能， 就像你在航班上只能带一个行李箱一样， 这样做的问题你的类不会有理想的内聚性， 将会有太多的理由来对它进行修改。最小化需要修改一个类的次数时很重要的， 因为如果一个类拥有太多的功能， 一旦你修改它的一小部分，<br>将会很难弄清楚会对代码库中的其它模块造成什么影响。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeSettings</span>(<span class="params">settings: UserSettings</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">verifyCredentials</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">verifyCredentials</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> auth: UserAuth;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.auth = <span class="keyword">new</span> UserAuth(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeSettings</span>(<span class="params">settings: UserSettings</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.auth.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 (OCP)"></a>开闭原则 (OCP)</h3><p>Bertrand Meyer 说过， “软件实体 (类， 模块， 函数等) 应该为扩展开放， 但是为修改关闭。” 这是什么意思呢？ 这个原则基本上说明了你应该允许用户添加功能而不必修改现有的代码。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> adapter: Adapter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.adapter <span class="keyword">instanceof</span> AjaxAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeAjaxCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.adapter <span class="keyword">instanceof</span> NodeAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeHttpCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// code shared to subclasses ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> adapter: Adapter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="built_in">this</span>.adapter.request&lt;T&gt;(url);</span><br><span class="line">    <span class="comment">// transform response and return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 (LSP)"></a>里氏替换原则 (LSP)</h3><p>这是针对一个非常简单的里面的一个恐怖意图， 它的正式定义是： “如果 S 是 T 的一个子类型， 那么类型为 T 的对象可以被类型为 S 的对象替换（例如， 类型为 S 的对象可作为类型为 T 的替代品）而不需要修改目标程序的期望性质 （正确性、 任务执行性等）。” 这甚至是个恐怖的定义。</p>
<p>最好的解释是， 如果你有一个基类和一个子类， 那个基类和字类可以互换而不会产生不正确的结果。 这可能还有些疑惑， 让我们来看一下这个经典的正方形与矩形的例子。 从数学上说， 一个正方形是一个矩形，但是你用 “is-a” 的关系用继承来实现， 你将很快遇到麻烦。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">protected</span> width: <span class="built_in">number</span> = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">protected</span> height: <span class="built_in">number</span> = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">area: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="built_in">this</span>.height = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = height;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span>(<span class="params">rectangles: Rectangle[]</span>) </span>&#123;</span><br><span class="line">  rectangles.forEach(<span class="function">(<span class="params">rectangle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = rectangle</span><br><span class="line">      .setWidth(<span class="number">4</span>)</span><br><span class="line">      .setHeight(<span class="number">5</span>)</span><br><span class="line">      .getArea(); <span class="comment">// BAD: Returns 25 for Square. Should be 20.</span></span><br><span class="line">    rectangle.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">area: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> width = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> height = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> length: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length * <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeShapes</span>(<span class="params">shapes: Shape[]</span>) </span>&#123;</span><br><span class="line">  shapes.forEach(<span class="function">(<span class="params">shape</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = shape.getArea();</span><br><span class="line">    shape.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shapes = [<span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Square(<span class="number">5</span>)];</span><br><span class="line">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure>

<h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>接口隔离原则说的是 “客户端不应该强制依赖他们不需要的接口。” 这个原则与单一职责原则紧密相关。</p>
<p>它的真正含义是你应该总是设计一种抽象的方式，使用部分方法的客户端不会得到全部实现。 这还包括禁止客户端实现他们不需要的方法。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SmartPrinter &#123;</span><br><span class="line">  print();</span><br><span class="line">  fax();</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllInOnePrinter</span> <span class="title">implements</span> <span class="title">SmartPrinter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EconomicPrinter</span> <span class="title">implements</span> <span class="title">SmartPrinter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Fax not supported.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Scan not supported.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Printer &#123;</span><br><span class="line">  print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fax &#123;</span><br><span class="line">  fax();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Scanner &#123;</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllInOnePrinter</span> <span class="title">implements</span> <span class="title">Printer</span>, <span class="title">Fax</span>, <span class="title">Scanner</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EconomicPrinter</span> <span class="title">implements</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 (DIP)"></a>依赖反转原则 (DIP)</h3><p>这个原则阐述了两个重要的事情：</p>
<ol>
<li>高级模块不应该依赖于低级模块， 两者都应该依赖与抽象；</li>
<li>抽象不应当依赖于具体实现， 具体实现应当依赖于抽象。</li>
</ol>
<p>这个一开始会很难理解， 但是如果你使用过 Angular.js ， 你应该已经看到过通过依赖注入来实现的这个原则， 虽然他们不是相同的概念， 依赖反转原则让高级模块远离低级模块的细节和创建， 可以通过 DI 来实现。 这样做的巨大益处是降低模块间的耦合。 耦合是一个非常糟糕的开发模式， 因为会导致代码难于重构。</p>
<p>DIP 通常通过使用控制反转 (IoC) 容器来达到。 <a href="https://www.npmjs.com/package/inversify">InversifyJs</a> 是 TypeScript 下的一个强大的 IoC 容器示例。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlFormatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts an XML string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// BAD: We have created a dependency on a specific request implementation.</span></span><br><span class="line">  <span class="comment">// We should just have ReportReader depend on a parse method: `parse`</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> formatter = <span class="keyword">new</span> XmlFormatter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader();</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.xml&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Formatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlFormatter</span> <span class="title">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts an XML string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonFormatter</span> <span class="title">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts a JSON string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportReader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> formatter: Formatter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> XmlFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.xml&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or if we had to read a json report</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> JsonFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.json&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试比发布更加重要。 如果你没有测试或者测试不够充分， 每次发布时你就不能确认没有破坏任何事情。<br>测试的量由你的团队决定， 但是拥有 100% 的覆盖率(包括所有的语句和分支)是你为什么能达到高度自信和内心的平静。 这意味着需要一个额外的伟大的测试框架， 也需要一个好的<a href="http://gotwarlost.github.io/istanbul/">覆盖率工具</a>。</p>
<p>没有理由不写测试。 这里有<a href="http://jstherightway.org/#testing-tools">大量的优秀的 JS 测试框架</a>，<br>选一个适合你的团队的即可。 当为团队选择了测试框架之后， 接下来的目标是为生产的每一个新的功能／模块编写测试。 如果你倾向于测试驱动开发(TDD)， 那就太棒了， 但是要点是确认你在上线任何功能或者重构一个现有功能之前， 达到了需要的目标覆盖率。</p>
<h3 id="TDD-的三大纪律"><a href="#TDD-的三大纪律" class="headerlink" title="TDD 的三大纪律"></a>TDD 的三大纪律</h3><ol>
<li>不得写任何生产代码， 除非是修复了一个失败的单元测试；</li>
<li>出现任何失败， 不得继续编写任何单元测试； 编译失败也是失败；</li>
<li>只要有失败的单元测试， 不得继续编写任何生产代码；</li>
</ol>
<h3 id="F-I-R-S-T-规则"><a href="#F-I-R-S-T-规则" class="headerlink" title="F.I.R.S.T. 规则"></a>F.I.R.S.T. 规则</h3><p>简洁测试应当遵循的规则：</p>
<ul>
<li><p><strong>快速 (Fast)</strong> 测试应当很快， 因为我们希望经常运行他们。</p>
</li>
<li><p><strong>独立 (Independent)</strong> 测试不应当相互依赖。 不管是单独运行还是一起以任意顺序运行， 应当有相同的输出。</p>
</li>
<li><p><strong>重复 (Repeatable)</strong> 测试应当是在任何环境下可重复的， 测试失败不应有任何理由。</p>
</li>
<li><p><strong>自验证 (Self-Validating)</strong> 一个测试的结果应该是 <em>通过</em> 或者 <em>失败</em> 。 不需要去比较日志文件来判断测试是否通过。</p>
</li>
<li><p><strong>及时 (Timely)</strong> 单元测试应该在产品代码之前编写。 如果你在产品代码之后编写测试， 就会发现写测试太难了。</p>
</li>
</ul>
<h3 id="每个测试单个概念"><a href="#每个测试单个概念" class="headerlink" title="每个测试单个概念"></a>每个测试单个概念</h3><p>单元测试也应当遵守 <em>单一职责原则</em> 。 让每个单元测试只包含一个断言。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;AwesomeDate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;handles date boundaries&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: AwesomeDate;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;1/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;1/31/2015&#x27;</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2016&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;2/29/2016&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;3/1/2015&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;AwesomeDate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;handles 30-day months&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;1/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;1/31/2015&#x27;</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;handles leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2016&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;2/29/2016&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;handles non-leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;3/1/2015&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="测试的名称应当揭示它的动机"><a href="#测试的名称应当揭示它的动机" class="headerlink" title="测试的名称应当揭示它的动机"></a>测试的名称应当揭示它的动机</h3><p>当测试失败时， 它的名称就是错误的第一指示。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Calendar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;2/29/2020&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;throws&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Calendar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;should handle leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;should throw when format is invalid&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="倾向于-Promise-而不是回调"><a href="#倾向于-Promise-而不是回调" class="headerlink" title="倾向于 Promise 而不是回调"></a>倾向于 Promise 而不是回调</h3><p>回调不够简洁， 因为他们会产生过多的嵌套 <em>（回调地狱）</em> 。 这些工具可以将使用回调函数转换成返回 Promise 的函数 （对于 Node.js ， 参考 <a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original"><code>util.promisify</code></a> ， 而对于更加通用的场景， 参考  <a href="https://www.npmjs.com/package/pify">pify</a>, <a href="https://www.npmjs.com/package/es6-promisify">es6-promisify</a> ）。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span>, callback: (error: <span class="built_in">Error</span>, content?: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  get(url, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      callback(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      writeFile(saveTo, response.body, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          callback(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, response.body);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>, <span class="function">(<span class="params">error, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));  </span><br></pre></td></tr></table></figure>

<p>Promise 提供了一些帮助方法来让代码变得更加简洁：</p>
<table>
<thead>
<tr>
<th>Pattern</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>Promise.resolve(value)</code></td>
<td>将一个值转换为一个已解决的 Promise 。</td>
</tr>
<tr>
<td><code>Promise.reject(error)</code></td>
<td>将一个错误转换为一个已拒绝的 Promise 。</td>
</tr>
<tr>
<td><code>Promise.all(promises)</code></td>
<td>从一组 Promise 返回一个新的 Promise ， 如果这组 Promise 全部解决， 则解决新生成的 Promise ， 否则拒绝新生成的 Promise 。</td>
</tr>
<tr>
<td><code>Promise.race(promises)</code></td>
<td>从多个 Promise 生成一个新的 Promise ， 返回值由第一个解决或者拒绝的 Promise 决定。</td>
</tr>
</tbody></table>
<p><code>Promise.all</code> 在需要并行运行任务时非常有用， 而 <code>Promise.race</code> 则可以比较容易的实现类似超时的 Promise 。</p>
<h3 id="Async-Await-比-Promise-更加简洁"><a href="#Async-Await-比-Promise-更加简洁" class="headerlink" title="Async/Await 比 Promise 更加简洁"></a>Async/Await 比 Promise 更加简洁</h3><p>使用<code>async</code> /<code>await</code>语法，您可以编写更清晰，更易理解的链接承诺的代码。 通过在方法前面标记 <code>async</code> 关键字， 可以让 JavaScript 运行时在遇到 <code>async</code> 关键字时暂停（当使用 Promise 时才能这样做）。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = util.promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));  </span><br></pre></td></tr></table></figure>

<p><strong>Good:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> get(url);</span><br><span class="line">  <span class="keyword">await</span> write(saveTo, response);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// somewhere in an async function</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="keyword">await</span> downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(content);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>抛出错误是件好事！ 它们意味着当程序出错时， 成功的通知运行时， 并通过停止执行当前堆栈上的函数， 终止进程（在 Node 中）， 并且在控制台打印错误堆栈信息以通知你。</p>
<h3 id="始终使用为抛出或拒绝使用错误对象-Error"><a href="#始终使用为抛出或拒绝使用错误对象-Error" class="headerlink" title="始终使用为抛出或拒绝使用错误对象 (Error)"></a>始终使用为抛出或拒绝使用错误对象 (Error)</h3><p>JavaScript 以及 TypeScript 允许你 <code>抛出</code> 任意对象， 一个 Promise 也能够用任意对象进行拒绝。 使用 <code>抛出 (throw)</code> 语法和 <code>错误 (Error)</code> 类型是非常明智的， 这是因为错误消息可能会被更高级的语句用 <code>cache</code> 捕获到。 而捕获一个字符串可能会非常令人疑惑的， 同时也会让<a href="https://basarat.gitbooks.io/typescript/docs/types/exceptions.html#always-use-error">调试更加痛苦</a>。 同样的理由， 拒绝 Promise 时， 也应该使用 <code>Error</code> 类型。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;Not implemented.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or equivalent to:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>Error</code> 类型的好处是它被 <code>try/catch/finally</code> 支持， 并且所有的 Error 对象都有一个隐式属性 <code>stack</code> ， 在调试时很有用。 还有一个选择， 那就是不使用 <code>throw</code> 语法， 始终返回自定义的错误对象。 TypeScript 下更加容易， 参看下面的例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Result&lt;R&gt; = &#123; <span class="attr">isError</span>: <span class="literal">false</span>, <span class="attr">value</span>: R &#125;;</span><br><span class="line"><span class="keyword">type</span> Failure&lt;E&gt; = &#123; <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">error</span>: E &#125;;</span><br><span class="line"><span class="keyword">type</span> Failable&lt;R, E&gt; = Result&lt;R&gt; | Failure&lt;E&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">Failable</span>&lt;<span class="title">number</span>, &#x27;<span class="title">empty</span>&#x27;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (items.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">error</span>: <span class="string">&#x27;empty&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">isError</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">42</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要查看这个主意的更详细说明， 请参考<a href="https://medium.com/@dhruvrajvanshi/making-exceptions-type-safe-in-typescript-c4d200ee78e9">原帖</a>。</p>
<h3 id="不要忽略捕获到的错误"><a href="#不要忽略捕获到的错误" class="headerlink" title="不要忽略捕获到的错误"></a>不要忽略捕获到的错误</h3><p>捕获到错误后，什么都不做， 既不能让你修复错误， 也不能让你响应错误。 使用 <code>console.log</code> 将错误输出到控制台并不是十分高明， 因为经常会有大量的内容被打印输出到控制台， 很难再被找到。 一旦你在 <code>try/catch</code> 中包括了任何一点儿代码， 这就意味着你认为这里可能会有错误发生， 你应当针对它有一个计划， 或者一段代码来进行处理。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or even worse</span></span><br><span class="line"><span class="comment">// 更糟糕的是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// ignore error</span></span><br><span class="line">  <span class="comment">// 完全忽略错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&#x27;./logging&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要忽略被拒绝的-Promise"><a href="#不要忽略被拒绝的-Promise" class="headerlink" title="不要忽略被拒绝的 Promise"></a>不要忽略被拒绝的 Promise</h3><p>由于同样的原因， 你不应该忽略由 <code>try/catch</code> 捕获到的错误。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&#x27;./logging&#x27;</span></span><br><span class="line"></span><br><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    logger.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 async/await 语法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> getUser();</span><br><span class="line">  <span class="keyword">await</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>格式化是主观的。 就像其它规则一样， 没有必须让你遵守的硬性规则。 重点是不要因为格式去争论， 有大量的工具来自动格式化， 使用其中的一个即可！ 因为做为工程师去争论格式化就是在浪费时间和金钱。 要遵守的通用规则是 <em>保持一致的格式化规则</em> 。</p>
<p>对 TypeScript 来说， 有一个强大的工具叫做 <a href="https://palantir.github.io/tslint/">TSLint</a> 。 它是一个可以显著提高代码的可读性和可维护性的静态分析工具。 也已经有一些可用的 TSLint 配置供你在项目中参考：</p>
<ul>
<li><p><a href="https://www.npmjs.com/package/tslint-config-standard">标准的 TSLint 配置</a> - 标准风格规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-config-airbnb">Airbnb 的 TSLint 配置</a> - Airbnb 风格指南</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-clean-code">简洁代码的 TSLint 配置</a> - 受 <a href="https://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: A Handbook of Agile Software Craftsmanship</a> 影响的 TSLint 规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-react">React 的 TSLint 配置</a> - React &amp; JSX 相关的 TSLint 配置</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-config-prettier">TSLint + Prettier</a> - <a href="https://github.com/prettier/prettier">Prettier</a> 的代码检查规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-eslint-rules">TypeScript 的 ESLint 规则</a> - TypeScript 的 ESLint 规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-immutable">Immutable</a> - TypeScript 中禁止突变的规则</p>
</li>
</ul>
<p>也请参考这个伟大的 <a href="https://basarat.gitbooks.io/typescript/docs/styleguide/styleguide.html">TypeScript 风格指南和编码约定</a> 。</p>
<h3 id="使用一致的大小写"><a href="#使用一致的大小写" class="headerlink" title="使用一致的大小写"></a>使用一致的大小写</h3><p>大小写可以告诉你很多关于你的变量， 函数等等。 这些规则是主观的， 所以你的团队可以选择他们想要的任何东西。 关键是， 无论你选择什么， 只要 <em>保持一致</em> 即可。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> songs = [<span class="string">&#x27;Back In Black&#x27;</span>, <span class="string">&#x27;Stairway to Heaven&#x27;</span>, <span class="string">&#x27;Hey Jude&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> Artists = [<span class="string">&#x27;ACDC&#x27;</span>, <span class="string">&#x27;Led Zeppelin&#x27;</span>, <span class="string">&#x27;The Beatles&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore_database</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> DAYS_IN_MONTH = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SONGS = [<span class="string">&#x27;Back In Black&#x27;</span>, <span class="string">&#x27;Stairway to Heaven&#x27;</span>, <span class="string">&#x27;Hey Jude&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> ARTISTS = [<span class="string">&#x27;ACDC&#x27;</span>, <span class="string">&#x27;Led Zeppelin&#x27;</span>, <span class="string">&#x27;The Beatles&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restoreDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>建议类、 接口、 类型和命名空间使用 <code>PascalCase</code> 风格， 变量、 函数和类成员使用 <code>camelCase</code> 风格。</p>
<h3 id="函数的调用方与被调用方应该靠近"><a href="#函数的调用方与被调用方应该靠近" class="headerlink" title="函数的调用方与被调用方应该靠近"></a>函数的调用方与被调用方应该靠近</h3><p>如果一个函数调用另一个， 则在代码中这两个函数的竖直位置应该靠近。 理想情况下，保持被调用函数在被调用函数的正上方。 我们倾向于从上到下阅读代码， 就像读一章报纸。 由于这个原因， 保持你的代码可<br>以按照这种方式阅读。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> employee: Employee</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupPeers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee.id, <span class="string">&#x27;peers&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupManager</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee, <span class="string">&#x27;manager&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getPeerReviews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="built_in">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">review</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getPeerReviews();</span><br><span class="line">    <span class="built_in">this</span>.getManagerReview();</span><br><span class="line">    <span class="built_in">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getManagerReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="built_in">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getSelfReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> employee: Employee</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">review</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getPeerReviews();</span><br><span class="line">    <span class="built_in">this</span>.getManagerReview();</span><br><span class="line">    <span class="built_in">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getPeerReviews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="built_in">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupPeers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee.id, <span class="string">&#x27;peers&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getManagerReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="built_in">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupManager</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee, <span class="string">&#x27;manager&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getSelfReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure>

<h3 id="组织导入"><a href="#组织导入" class="headerlink" title="组织导入"></a>组织导入</h3><p>使用简洁易读的 import 语句， 您可以快速查看当前代码的依赖关系。 确保对 <code>import</code> 语句应用以下良好实践：</p>
<ul>
<li>导入应当排序并分组；</li>
<li>未使用的导入应当删除；</li>
<li>命名导入应当排序 (比如： <code>import &#123;A, B, C&#125; from &#39;foo&#39;;</code>)</li>
<li>导入源应当在分组内排序， 比如： <code>import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;</code></li>
<li>分组导入之间保留一个空行；</li>
<li>分组之间应当遵守下面的顺序：<ul>
<li>兼容性填充 (比如： <code>import &#39;reflect-metadata&#39;;</code>)</li>
<li>Node 内置模块 (比如： <code>import fs from &#39;fs&#39;;</code>)</li>
<li>外部模块 (比如： <code>import &#123; query &#125; from &#39;itiriri&#39;;</code>)</li>
<li>内部模块 (i.e <code>import &#123; UserService &#125; from &#39;src/services/userService&#39;;</code>)</li>
<li>来自父目录的模块 (比如： <code>import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;</code>)</li>
<li>来自相同目录或同级目录的模块 (比如： <code>import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;</code>)</li>
</ul>
</li>
</ul>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">&#x27;../types/typeDefinition&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/attribute&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/api/authorization&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./plugins/config/configPlugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">&#x27;inversify&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">&#x27;inversify&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/attribute&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">&#x27;../types/typeDefinition&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/api/authorization&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./plugins/config/configPlugin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用-TypeScript-别名"><a href="#使用-TypeScript-别名" class="headerlink" title="使用 TypeScript 别名"></a>使用 TypeScript 别名</h3><p>通过在 <code>tsconfig.json</code> 文件中的 compilerOptions 对象内定义路径和基础路径， 可以创建更漂亮的导入。</p>
<p>这将避免导入时出现太长的相对路径。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../services/UserService&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;@services/UserService&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">...</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@services&quot;</span>: [<span class="string">&quot;services/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>使用注释就意味着代码的表达失败。 代码应该是唯一的事实来源。</p>
<blockquote>
<p>不是为烂代码添加注释， 而是重写它们。  </p>
<ul>
<li><em>Brian W. Kernighan 和 P. J. Plaugher</em></li>
</ul>
</blockquote>
<h3 id="倾向于自描述的代码而不是注释"><a href="#倾向于自描述的代码而不是注释" class="headerlink" title="倾向于自描述的代码而不是注释"></a>倾向于自描述的代码而不是注释</h3><p>评论是代码的辩解， 不是要求。 多数情况下， 好的代码就是文档。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check if subscription is active.</span></span><br><span class="line"><span class="keyword">if</span> (subscription.endDate &gt; <span class="built_in">Date</span>.now) &#123;  &#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isSubscriptionActive = subscription.endDate &gt; <span class="built_in">Date</span>.now;</span><br><span class="line"><span class="keyword">if</span> (isSubscriptionActive) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要在代码库中保存注释掉的代码"><a href="#不要在代码库中保存注释掉的代码" class="headerlink" title="不要在代码库中保存注释掉的代码"></a>不要在代码库中保存注释掉的代码</h3><p>因为有版本控制， 把旧的代码留在历史记录即可</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// age: number;</span></span><br><span class="line">  <span class="comment">// jobPosition: string;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要有日志式的注释"><a href="#不要有日志式的注释" class="headerlink" title="不要有日志式的注释"></a>不要有日志式的注释</h3><p>记住， 使用版本控制！ 不需要僵尸代码， 注释掉的代码， 尤其是日志式的评论。 使用 <code>git log</code> 来<br>获取历史记录。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn&#x27;t understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Added type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Implemented combine (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免占位符"><a href="#避免占位符" class="headerlink" title="避免占位符"></a>避免占位符</h3><p>它们仅仅添加了干扰。 让函数和变量名称与合适的缩进和格式化为你的代码提供视觉结构。<br>绝大多数 IDE 支持代码折叠， 允许你展开/关闭代码段 （查看 Visual Studio Code <a href="https://code.visualstudio.com/updates/v1_17#_folding-regions">folding regions</a> ） 。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Client class</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// public methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// private methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="TODO-注释"><a href="#TODO-注释" class="headerlink" title="TODO 注释"></a>TODO 注释</h3><p>当你发现你需要在代码中做一些后期改进是， 请使用 <code>// TODO</code> 注释。 大多数 IDE 对这种类型的注释有着特殊的支持， 你可以快速的发现全部的 TODO 列表。</p>
<p>记住， <em>TODO</em> 注视并不是烂代码的借口。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; <span class="attr">dueDate</span>: &#123; <span class="attr">$lte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; <span class="attr">dueDate</span>: &#123; <span class="attr">$lte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础入门-01</title>
    <url>/2021/11/28/getting-started-with-docker-01/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/docker01.png" alt="Docker"></p>
<p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。</p>
<p>可以让开发者打包应用以及依赖包到一个轻量级、可移植的容器中，然后发布到其他<strong>Linux</strong>系统上，以实现虚拟化。</p>
<p><strong>优点</strong>：</p>
<ul>
<li>快速、一致地交付应用（避免在我的电脑上能运行，你那怎么就报错的情况发生）</li>
<li>响应式部署和扩展</li>
<li>在同一硬件上运行更多工作负载</li>
</ul>
<p>Docker 官网：<a href="https://www.docker.com/">https://www.docker.com</a></p>
<p>GitHub Docker 源码：<a href="https://github.com/docker/docker-ce">https://github.com/docker/docker-ce</a></p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><code>Docker</code>包括三个基本概念：</p>
<ul>
<li><p><strong>镜像</strong>（Image）: Docker镜像（Image）相当于一个<strong>root</strong>文件系统</p>
</li>
<li><p><strong>容器</strong>（Container）: 容器相当于镜像的一个实例，类比面向对象程序中的类和对象一样，镜像是静态的定义，容器是镜像的一个实例。实例（容器）可以被创建、启动、停止、删除。</p>
</li>
<li><p><strong>仓库</strong>（Repository）: 类似于代码仓库git，用于保存镜像</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Docker</th>
<th>OOP</th>
</tr>
</thead>
<tbody><tr>
<td>Container</td>
<td>Object</td>
</tr>
<tr>
<td>Images</td>
<td>Class</td>
</tr>
</tbody></table>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img data-src="https://cdn.jonty.top/img/576507-docker1.png" alt="img"></p>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Images</td>
<td>Docker Images是创建容器的模板</td>
</tr>
<tr>
<td>Container</td>
<td>容器是镜像运行的一个实体。</td>
</tr>
<tr>
<td>Client</td>
<td>客户端通过命令行工具或Desktop等与Docker通信</td>
</tr>
<tr>
<td>Host</td>
<td>宿主（服务器），用于执行Docker守护进程和容器</td>
</tr>
<tr>
<td>Registry</td>
<td>镜像仓库，public/private 仓库</td>
</tr>
<tr>
<td>Machine</td>
<td>命令行工具</td>
</tr>
</tbody></table>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>环境：<code>Centos7.9 </code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128124726295.png" alt="cpu-memery"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a	# 查看机器信息 3.8以上</span><br><span class="line">cat /etc/redhat-release # Linux版本</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128125004040.png" alt="image-20211128125004040"></p>
<h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>可以先检查是否安装过旧版本的<code>Docker</code>，如果安装过则需要先卸载依赖项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h4 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h4><p>安装<code>yum-utils</code>包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<p>设置仓库：</p>
<ul>
<li><p>官方源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li><p>阿里云：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里我们使用阿里云的仓库，国内访问比较快。</p>
<h4 id="Docker引擎"><a href="#Docker引擎" class="headerlink" title="Docker引擎"></a>Docker引擎</h4><p>安装<code>Docker Engine</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>启动<code>Docker</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker	# 启动</span><br><span class="line">systemctl stop docker	# 停止</span><br><span class="line">systemctl restart docker	# 重启</span><br></pre></td></tr></table></figure>

<p>配置自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker.service</span><br><span class="line">sudo systemctl enable containerd.service</span><br></pre></td></tr></table></figure>

<p>禁用则使用<code>disable</code></p>
<p>检查是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local yum.repos.d]# docker -v</span><br><span class="line">Docker version 20.10.8, build 3967b7d</span><br><span class="line">[root@local yum.repos.d]# </span><br></pre></td></tr></table></figure>

<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul>
<li><p>卸载Docker Engine、CLI和Containerd包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li><p>删除所有镜像、容器和卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>参考：官方文档<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos</a></p>
</blockquote>
<h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>国内从<code>Docker Hub</code>拉取镜像可能会比较慢，推荐配置国内的镜像加速器</p>
<ul>
<li>科大镜像：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn/</a></li>
<li>网易镜像：<a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com/</a></li>
</ul>
<p>获取个人阿里镜像加速器：</p>
<p>找到<strong>容器镜像服务</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128131145813.png" alt="image-20211128131145813"></p>
<p>镜像工具 =&gt; 镜像加速器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128131239013.png" alt="image-20211128131239013"></p>
<h4 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h4><p>修改daemon配置文件<code>/etc/docker/daemon.json</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加镜像地址</span></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://yoursId.mirror.aliyuncs.com&quot;]</span><br><span class="line"> </span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128131513972.png" alt="image-20211128131513972"></p>
<h4 id="检查是否生效"><a href="#检查是否生效" class="headerlink" title="检查是否生效"></a>检查是否生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128133728211.png" alt="image-20211128133728211"></p>
<h3 id="Docker容器使用"><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211128134120395.png" alt="image-20211128134120395" style="zoom:80%;" />

<p>使用 <code>docker [cammand] --help</code>查看命令使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --help</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211128134321971.png" alt="image-20211128134321971" style="zoom:80%;" />

<h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p>从镜像仓库拉取镜像</p>
<p>命令：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull  -q nginx  # -q 不输出 </span><br><span class="line">docker images # 查看镜像列表</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128134754794.png" alt="image-20211128134754794"></p>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>启动一个新的容器实例</p>
<p>命令：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name my_nginx -p 80:80 -d nginx</span><br><span class="line"></span><br><span class="line">[root@local ~]# docker run --name my_nginx -p 80:80 -d nginx</span><br><span class="line">2fc689cc169c994ffec7aeadacbedfc13ff4de540fb3e5e7c85520f2d4da5fde</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<ul>
<li>–name：指定容器的名称</li>
<li>-p：映射的端口</li>
<li>-d : 后台运行</li>
</ul>
<p>浏览器访问我们的容器，可以看到<code>nginx</code>已经启动。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128135337874.png" alt="image-20211128135337874"></p>
<h4 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h4><p>命令：<code>docker ps [OPTIONS]</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128135638225.png" alt="image-20211128135638225"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">[root@local ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">2fc689cc169c   nginx     &quot;/docker-entrypoint.…&quot;   6 minutes ago   Up 6 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   my_nginx</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><p>命令：<code>docker start [OPTIONS] CONTAINER [CONTAINER...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start my_nginx</span><br><span class="line">docker restart my_nginx # 重启容器</span><br></pre></td></tr></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop my_nginx # 停止名称为my_nginx的容器</span><br><span class="line">docker stop 2fc689cc169c # container Id</span><br><span class="line"></span><br><span class="line">[root@local ~]# docker stop my_nginx</span><br><span class="line">my_nginx</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker stop --help</span><br><span class="line"></span><br><span class="line">Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Stop one or more running containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --time int   Seconds to wait for stop before killing it (default 10)</span><br></pre></td></tr></table></figure>

<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>在正在运行的容器中运行命令</p>
<p>命令：<code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it my_nginx /bin/bash</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128141608965.png" alt="image-20211128141608965"></p>
<p>相当于进入容器内部，一个隔离的<code>Linux</code>系统，使用<code>exit</code>退出</p>
<h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>导出容器镜像文件</p>
<p>命令:<code>docker export [OPTIONS] CONTAINER</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export my_nginx &gt; my_nginx.tar</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128142032945.png" alt="image-20211128142032945"></p>
<h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><p>导入镜像</p>
<p>命令：<code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code></p>
<p>这里我将导出的镜像文件放到<code>win</code>系统中，使用<code>Docker Desktop</code>导入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker import .\my_nginx.tar my_nginx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128142745839.png" alt="image-20211128142745839"></p>
<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>命令:<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docekr rm my_nginx</span><br></pre></td></tr></table></figure>

<p>可选参数：</p>
<ul>
<li>-f : 强制删除正在运行的容器（不加这个参数则需要先<code>docker stop containerId</code>）</li>
<li>-v : 移除与容器相关的数据卷</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20211128144931845.png" alt="image-20211128144931845"></p>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>命令：<code> docker logs [OPTIONS] CONTAINER</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -n 100 my_nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>-f : 跟踪日志输出</li>
<li>-n : 从日志末尾显示的行数（默认：全部）</li>
</ul>
<img data-src="https://cdn.jonty.top/img/image-20211128144724047.png" alt="image-20211128144724047" style="zoom:80%;" />



<h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker port  my_nginx</span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br><span class="line">80/tcp -&gt; :::80</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<h3 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a>Docker 镜像使用</h3><p>使用<code>docker run </code>运行容器时，如果在本地没有找到镜像则会自动从<code>Docker Hub</code>拉取镜像。</p>
<img data-src="https://cdn.jonty.top/img/image-20211128145350390.png" alt="image-20211128145350390" style="zoom:80%;" />



<h4 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx         latest    ea335eea17ab   10 days ago    141MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br></pre></td></tr></table></figure>

<ul>
<li>REPOSITORY : 镜像仓库源（默认：Docker Hub）</li>
<li>TAG ：镜像标签 默认拉取<strong>latest</strong>,可指定版本 <code>docker pull nginx:xxx</code></li>
<li>IMAGE ID : 镜像ID</li>
<li>CREATED : 创建时间</li>
<li>SIZE : 镜像大小</li>
</ul>
<h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><p>命令：<code> docker search [OPTIONS] TERM</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search --limit 10 nginx # 返回10条结果</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211128150050740.png" alt="image-20211128150050740" style="zoom:80%;" />

<ul>
<li>NAME ： 镜像仓库源名称</li>
<li>DESCRIPTION : 描述</li>
<li>STARS : 点赞数</li>
<li>OFFICIAL : 是否官方发布</li>
<li>AUTOMATED : 自动构建</li>
</ul>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>命令：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx # 拉取默认版本</span><br><span class="line">docker pull nginx:xxx # 拉取指定版本</span><br><span class="line">docker pull -q nginx # 无输出</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">eff15d958d66: Pull complete</span><br><span class="line">1e5351450a59: Pull complete</span><br><span class="line">2df63e6ce2be: Pull complete</span><br><span class="line">9171c7ae368c: Pull complete</span><br><span class="line">020f975acd28: Pull complete</span><br><span class="line">266f639b35ad: Pull complete</span><br><span class="line">Digest: sha256:097c3a0913d7e3a5b01b6c685a60c03632fc7a2b50bc8e35bcaa3691d788226e</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128150647218.png" alt="image-20211128150647218"></p>
<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>命令：<code> docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi hello-world:latest</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128183009721.png" alt="image-20211128183009721"></p>
<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>命令：<code>docker build [OPTIONS] PATH | URL | -</code></p>
<img data-src="https://cdn.jonty.top/img/image-20211128191400815.png" alt="image-20211128191400815" style="zoom: 67%;" />



<h4 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h4><p>命令：<code> docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest jontymin/my_nginx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128192133803.png" alt="image-20211128192133803"></p>
<h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><p>仓库（Repository）是集中存放镜像的地方（类比git仓库）</p>
<p><code>Docker</code>官方维护了一个公共仓库，需要注册账号以推送镜像 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<img data-src="https://cdn.jonty.top/img/1578550749282.png" alt="1578550749282" style="zoom:80%;" />

<blockquote>
<p>上图为Docker容器和本地仓库、远程仓库的关系</p>
</blockquote>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login </span><br></pre></td></tr></table></figure>

<ul>
<li>-p : 密码</li>
<li>-u ： 用户名</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: jontymax</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><p>命令 : <code>docker push [OPTIONS] NAME[:TAG]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push jontymax/my_nginx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128215642468.png" alt="image-20211128215642468"></p>
<blockquote>
<p>参考： <a href="https://docs.docker.com/engine/reference/run/">https://docs.docker.com/engine/reference/run/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中安装jira</title>
    <url>/2021/09/23/install-jira-in-docker/</url>
    <content><![CDATA[<h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>其他数据库请参考文档</p>
<p><a href="https://confluence.atlassian.com/adminjiraserver/connecting-jira-applications-to-a-database-938846850.html">Connecting Jira applications to a database</a></p>
<p>这里使用的是PostgreSql</p>
<ol>
<li><p>创建空数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jiradb <span class="keyword">WITH</span> ENCODING <span class="string">&#x27;UNICODE&#x27;</span> LC_COLLATE <span class="string">&#x27;C&#x27;</span> LC_CTYPE <span class="string">&#x27;C&#x27;</span> TEMPLATE template0;</span><br></pre></td></tr></table></figure></li>
<li><p>创建用户(也可以使用默认用户)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jira <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;bb123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 给权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE jiradb <span class="keyword">TO</span> jira</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img data-src="https://cdn.jonty.top/img/20210711235815.png" alt="image-20210708171601263"></p>
<h3 id="Jira安装"><a href="#Jira安装" class="headerlink" title="Jira安装"></a>Jira安装</h3><p><a href="https://confluence.atlassian.com/adminjiraserver071/jira-applications-installation-requirements-802592164.html">需要保证服务器有<code>4GB</code>以上内存</a></p>
<p>我在安装的时候1核2G跑不动换成了4核8G👀</p>
<p><img data-src="https://cdn.jonty.top/img/20210711235851.png" alt="image-20210708164819758"></p>
<h4 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h4><p>查看docker文档</p>
<p><img data-src="https://cdn.jonty.top/img/20210712000508.png"></p>
<ol>
<li>创建卷</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create --name jiraVolume</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取镜像并运行</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -v jiraVolume:/var/atlassian/application-data/jira --name=<span class="string">&quot;jira&quot;</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> atlassian/jira-software:<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps：注意：我们破解的版本的为8.1.0，拉镜像需要指定版本</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/20210712001529.png" alt="image-20210708170606734"></p>
<ol start="4">
<li>浏览器打开<code>IP:8080</code>端口</li>
</ol>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初次打开为英文，可在右上角设置为中文。选择第二个，自定义配置</p>
<p><img data-src="https://cdn.jonty.top/img/20210712001604.png" alt="image-20210708170935567"></p>
<p>点击下一步</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102437.png" alt="image-20210708171706660"></p>
<p><img data-src="https://cdn.jonty.top/img/20210721102449.png" alt="image-20210708171725265"></p>
<p>点击下一步，等待几分钟，正在创建数据库表</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102444.png" alt="image-20210708171808729"></p>
<p>数据库创建完成之后</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102454.png" alt="image-20210708172102316"></p>
<p>点击下一步，获取授权码，可以有30天试用</p>
<p>需要先按照提示去官方获取试用授权码，这样才可以进入系统，然后进行破解包的替换，重启服务即可。</p>
<p>点击连接去官网生成许可证</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102458.png" alt="image-20210708172300316"></p>
<p>我这里是直接用微软账号登录申请的，点击生成按钮后自动跳转回来并自动填入授权码</p>
<p><img data-src="https://cdn.jonty.top/img/20210712001647.png" alt="image-20210708172452780"></p>
<p>配置管理员账号</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102555.png" alt="image-20210708172617985"></p>
<p>邮件服务器，以后再说</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102602.png" alt="image-20210708172653783"></p>
<p>设置默认语言</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102726.png" alt="image-20210708172918673"></p>
<p>选择头像</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102743.png" alt="image-20210708172949746"></p>
<p>这里可以选择创建示例项目</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102835.png" alt="image-20210708173027592"></p>
<p><img data-src="https://cdn.jonty.top/img/20210721102859.png" alt="image-20210708173118682"></p>
<p>进入首页面板</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102910.png" alt="image-20210708173327874"></p>
<p>点击右上角的管理&gt;应用程序</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102535.png" alt="image-20210708173606783"></p>
<h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><ol>
<li>下载破解包</li>
</ol>
<p><a href="https://cloud.189.cn/t/2MFZFvriQ7fe">atlassian-extras-3.2</a></p>
<ol start="2">
<li>使用ftp工具上传到服务器</li>
</ol>
<p><img data-src="https://cdn.jonty.top/img/20210721102527.png" alt="image-20210708174235612"></p>
<ol start="3">
<li><p>替换</p>
<p>通过docker ps 获取jira容器id，然后把破解包上传至宿主机通过docker cp 命令复制到容器中，重启jira容器　</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker cp atlassian-extras-3.2.jar  06849baab1a6:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib</span><br><span class="line"></span><br><span class="line">docker restart 06849baab1a6</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/20210721091151.png" alt="image-20210708174512592"></p>
</li>
</ol>
<p>破解成功</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102816.png" alt="image-20210708174733130"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jira</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据库性能优化</title>
    <url>/2022/04/21/database-performance-optimization-solutions/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>毫不夸张的说咱们后端工程师，无论在哪家公司，呆在哪个团队，做哪个系统，遇到的第一个让人头疼的问题绝对是数据库性能问题。如果我们有一套成熟的方法论，能让大家快速、准确的去选择出合适的优化方案，我相信能够快速准备解决咱么日常遇到的80%甚至90%的性能问题。</p>
<p>　　从解决问题的角度出发，我们得先了解到问题的原因；其次我们得有一套思考、判断问题的流程方式，让我们合理的站在哪个层面选择方案；最后从众多的方案里面选择一个适合的方案进行解决问题，找到一个合适的方案的前提是我们自己对各种方案之间的优缺点、场景有足够的了解，没有一个方案是完全可以通吃通用的，软件工程没有银弹。</p>
<h2 id="为什么数据库会慢？"><a href="#为什么数据库会慢？" class="headerlink" title="为什么数据库会慢？"></a>为什么数据库会慢？</h2><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210729504.png" alt="image-20220421072926363"></p>
<p>无论是关系型数据库还是NoSQL，任何存储系统决定于其查询性能的主要有三种：</p>
<ul>
<li><strong>查找的时间复杂度</strong></li>
<li><strong>数据总量</strong></li>
<li><strong>高负载</strong></li>
</ul>
<p>而决定于<strong>查找时间复杂度</strong>主要有两个因素：</p>
<ul>
<li><strong>查找算法</strong></li>
<li><strong>存储数据结构</strong></li>
</ul>
<p>无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。</p>
<p><strong>从关系型数据库角度出发，索引结构基本固定是B+Tree，时间复杂度是O(log n)，存储结构是行式存储。因此我们对于关系数据库能优化的一般只有数据量。</strong></p>
<p>而高负载造成原因有高并发请求、复杂查询等，导致CPU、磁盘繁忙等，而服务器资源不足则会导致慢查询等问题。该类型问题一般会选择集群、数据冗余的方式分担压力。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210730825.png" alt="img"></p>
<h2 id="应该站在哪个层面思考优化？"><a href="#应该站在哪个层面思考优化？" class="headerlink" title="应该站在哪个层面思考优化？"></a>应该站在哪个层面思考优化？</h2><p><img data-src="https://cdn.jonty.top/img/202204210731601.png" alt="img"></p>
<p>从上图可见，自顶向下的一共有四层，分别是<strong>硬件、存储系统、存储结构、具体实现。层与层之间是紧密联系的，每一层的上层是该层的载体；因此越往顶层越能决定性能的上限，同时优化的成本也相对会比较高，性价比也随之越低</strong>。以最底层的具体实现为例，那么<strong>索引的优化的成本应该是最小</strong>的，可以说加了索引后无论是CPU消耗还是响应时间都是立竿见影降低；然而一个简单的语句，无论如何优化加索引也是有局限的，当在具体实现这层没有任何优化空间的时候就得往上一层【存储结构】思考，思考是否从物理表设计的层面出发优化（如分库分表、压缩数据量等），如果是文档型数据库得思考下文档聚合的结果；如果在存储结构这层优化得没效果，得继续往再上一次进行考虑，是否关系型数据库应该不适合用在现在得业务场景？如果要换存储，那么得换怎样的NoSQL?</p>
<p>​        所以我们优化的思路，出于性价比的优先考虑具体实现，实在没有优化空间了再往上一层考虑。当然如果公司有钱，直接使用钞能力，绕过了前面三层，这也是一种便捷的应急处理方式。</p>
<p>　　<strong>文章不讨论顶与底的两个层面的优化，主要从存储结构、存储系统中间两层的角度出发进行探讨</strong>。</p>
<h2 id="八大方案总结"><a href="#八大方案总结" class="headerlink" title="八大方案总结"></a>八大方案总结</h2><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210733980.png" alt="image-20220421073339928"></p>
<p>数据库的优化方案核心本质有三种：<strong>减少数据量</strong>、<strong>用空间换性能</strong>、<strong>选择合适的存储系统，</strong>这也对应了开篇讲解的慢的三个原因：<strong>数据总量、高负载、查找的时间复杂度。</strong></p>
<p>　　这里大概解释下收益类型：短期收益，处理成本低，能紧急应对，久了则会有技术债务；长期收益则跟短期收益相反，短期内处理成本高，但是效果能长久使用，扩展性会更好。</p>
<p>　  静态数据意思是，相对改动频率比较低的，也无需过多联表的，where过滤比较少。动态数据与之相反，更新频率高，通过动态条件筛选过滤。</p>
<h3 id="减少数据量"><a href="#减少数据量" class="headerlink" title="减少数据量"></a>减少数据量</h3><hr>
<p>减少数据量类型共有四种方案：<strong>数据序列化存储、数据归档、中间表生成、分库分表。</strong></p>
<p>就如上面所说的，无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。目前市面上的NoSQL基本上都支持分片存储，所以其天然分布式写的能力从数据量上能得到非常的解决方案。而关系型数据库，查找算法与存储结构是可以优化的空间比较少，因此我们一般思考出发点只有从<strong>如何减少数据量</strong>的这个角度进行选择优化，因此本类型的优化方案主要针对<strong>关系型数据库</strong>进行处理。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210735989.png" alt="img"></p>
<h3 id="数据归档"><a href="#数据归档" class="headerlink" title="数据归档"></a>数据归档</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210736615.png" alt="image-20220421073617560"></p>
<p>　注意点：别一次性迁移数量过多，建议低频率多次限量迁移。像MySQL由于删除数据后是不会释放空间的，可以执行命令OPTIMIZE TABLE释放存储空间，但是会锁表，如果存储空间还满足，可以不执行。<br>　　建议优先考虑该方案，主要通过数据库作业把非热点数据迁移到历史表，如果需要查历史数据，可新增业务入口路由到对应的历史表（库）。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210736411.png" alt="img"></p>
<h3 id="中间表（结果表）"><a href="#中间表（结果表）" class="headerlink" title="中间表（结果表）"></a>中间表（结果表）</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210737279.png" alt="image-20220421073713236"></p>
<p>中间表（结果表）其实就是利用调度任务把复杂查询的结果跑出来存储到一张额外的物理表，因为这张物理表存放的是通过跑批汇总后的数据，因此可以理解成根据原有的业务进行了高度的数据压缩。以报表为例，如果一个月的源数据有数十万，我们通过调度任务以月的维度生成，那么等于把原有的数据压缩了几十万分之一；接下来的季报和年报可以根据月报*N来进行统计，以这种方式处理的数据，就算三年、五年甚至十年数据量都可以在接受范围之内，而且可以精确计算得到。</p>
<p>　　那么数据的压缩比率是否越低越好？下面有一段口诀：</p>
<ul>
<li>字段越多，粒度越细，灵活性越高，可以以中间表进行不同业务联表处理。</li>
<li>字段越少，粒度越粗，灵活性越低，一般作为结果表查询出来。</li>
</ul>
<h3 id="数据序列化存储"><a href="#数据序列化存储" class="headerlink" title="数据序列化存储"></a>数据序列化存储</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210737499.png" alt="image-20220421073749446"></p>
<p><img data-src="https://cdn.jonty.top/img/202204210737619.png" alt="img"></p>
<p> 在数据库以序列化存储的方式，对于一些不需要结构化存储的业务来说是一种很好减少数据量的方式，特别是对于一些M*N的数据量的业务场景，如果以M作为主表优化，那么就可以把数据量维持最多是M的量级。另外像订单的地址信息，这种业务一般是不需要根据里面的字段检索出来，也比较适合。</p>
<p>​    这种方案我认为属于一种临时性的优化方案，无论是从序列化后丢失了部份字段的查询能力，还是这方案的可优化性都是有限的。</p>
<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><hr>
<p>分库分表作为数据库优化的一种非常经典的优化方案，特别是在以前NoSQL还不是很成熟的年代，这个方案就如救命草一般的存在。</p>
<p>　　如今也有不少同行也会选择这种优化方式，但是从我角度来看，分库分表是一种优化成本很大的方案。这里我有几个建议：</p>
<ol>
<li>分库分表是实在没有办法的办法，应放到最后选择。</li>
<li>优先选择NoSQL代替，因为NoSQL诞生基本上为了扩展性与高性能。</li>
<li>究竟分库还是分表？量大则分表，并发高则分库</li>
<li>不考虑扩容，一部做到位。因为技术更新太快了，每3-5年一大变。</li>
</ol>
<h4 id="拆分方式"><a href="#拆分方式" class="headerlink" title="拆分方式"></a>拆分方式</h4><p><img data-src="https://cdn.jonty.top/img/202204210738266.png" alt="image-20220421073849209"></p>
<p>只要涉及到这个拆，那么无论是微服务也好，分库分表也好，拆分的方式主要分两种：<strong>垂直拆分、水平拆分</strong>。</p>
<p>　　垂直拆分更多是从<strong>业务角度</strong>进行拆分，主要是为了<strong>降低业务耦合度；</strong>此外以SQL Server为例，一页是8KB存储，如果在一张表里字段越多，一行数据自然占的空间就越大，那么一页数据所存储的行数就自然越少，那么每次查询所需要IO则越高因此性能自然也越慢；因此反之，减少字段也能很好提高性能。之前我听说某些同行的表有80个字段，几百万的数据就开始慢了。</p>
<p>　　水平拆分更多是从<strong>技术角度</strong>进行拆分，拆分后每张表的结构是一模一样的，简而言之就是把原有一张表的数据，通过<strong>技术手段</strong>进行分片到多张表存储，从根本上解决了数据量的问题。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210739856.png" alt="img"></p>
<h4 id="路由方式"><a href="#路由方式" class="headerlink" title="路由方式"></a>路由方式</h4><p><img data-src="https://cdn.jonty.top/img/202204210739428.png" alt="image-20220421073935371"></p>
<p>进行水平拆分后，根据分区键（sharding key）原来应该在同一张表的数据拆解写到不同的物理表里，那么查询也得根据分区键进行定位到对应的物理表从而把数据给查询出来。</p>
<p>　　路由方式一般有三种<strong>区间范围、Hash、分片映射表</strong>，每种路由方式都有自己的优点和缺点，可以根据对应的业务场景进行选择。</p>
<p>　　<strong>区间范围</strong>根据某个元素的区间的进行拆分，以时间为例子，假如有个业务我们希望以月为单位拆分那么表就会拆分像 table_2022-04，这种对于文档型、ElasticSearch这类型的NoSQL也适用，无论是定位查询，还是日后清理维护都是非常的方便的。那么缺点也明显，会因为业务独特性导致数据不平均，甚至不同区间范围之间的数据量差异很大。</p>
<p>　　<strong>Hash</strong>也是一种常用的路由方式，根据Hash算法取模以数据量均匀分别存储在物理表里，缺点是对于带分区键的查询依赖特别强，如果不带分区键就无法定位到具体的物理表导致相关所有表都查询一次，而且在分库的情况下对于Join、聚合计算、分页等一些RDBMS的特性功能还无法使用。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210739346.png" alt="img"></p>
<p>一般分区键就一个，假如有时候业务场景得用不是分区键的字段进行查询，那么难道就必须得全部扫描一遍？其实可以使用<strong>分片映射表</strong>的方式，简单来说就是额外有一张表记录额外字段与分区键的映射关系。举个例子，有张订单表，原本是以UserID作为分区键拆分的，现在希望用OrderID进行查询，那么得有额外得一张物理表记录了OrderID与UserID的映射关系。因此得先查询一次映射表拿到分区键，再根据分区键的值路由到对应的物理表查询出来。可能有些朋友会问，那这映射表是否多一个映射关系就多一张表，还是多个映射关系在同一张表。我优先建议单独处理，如果说映射表字段过多，那跟不进行水平拆分时的状态其实就是一致的，这又跑回去的老问题。</p>
<h3 id="用空间换性能"><a href="#用空间换性能" class="headerlink" title="用空间换性能"></a>用空间换性能</h3><hr>
<p>该类型的两个方案都是用来应对高负载的场景，方案有以下两种：<strong>分布式缓存、一主多从。</strong></p>
<p>与其说这个方案叫用空间换性能，我认为用空间换资源更加贴切一些。因此两个方案的本质主要通<strong>数据冗余、集群</strong>等方式分担负载压力。</p>
<p>对于关系型数据库而言，因为他的ACID特性让它天生不支持写的分布式存储，<strong>但是它依然天然的支持分布式读</strong>。 </p>
<p><img data-src="https://cdn.jonty.top/img/202204210740386.png" alt="img"></p>
<h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210741697.png" alt="image-20220421074105653"></p>
<p>缓存层级可以分好几种：<strong>客户端缓存</strong>、<strong>API服务本地缓存</strong>和<strong>分布式缓存</strong>，咱们这次只聊分布式缓存。一般我们选择分布式缓存系统都会优先选择NoSQL的键值型数据库，例如Memcached、Redis，如今Redis的数据结构多样性，高性能，易扩展性也逐渐占据了分布式缓存的主导地位。</p>
<p>缓存策略也主要有很多种：<strong>Cache-Aside</strong>、<strong>Read/Wirte-Through</strong>、<strong>Write-Back</strong>，咱们用得比较多的方式主要<strong>Cache-Aside，</strong>具体流程可看下图：</p>
<p><img data-src="https://cdn.jonty.top/img/202204210741433.png" alt="img"></p>
<p>对于分布式缓存有几点需要注意的：</p>
<h4 id="避免滥用缓存"><a href="#避免滥用缓存" class="headerlink" title="避免滥用缓存"></a>避免滥用缓存</h4><p><strong>缓存应该是按需使用，从28法则来看，80%的性能问题由主要的20%的功能引起</strong>。滥用缓存的后果会导致维护成本增大，而且有一些数据一致性的问题也不好定位。特别像一些动态条件的查询或者分页，key的组装是多样化的，量大又不好用keys指令去处理，当然我们可以用额外的一个key把记录数据的key以集合方式存储，删除时候做两次查询，先查Key的集合，然后再遍历Key集合把对应的内容删除。这一顿操作下来无疑是非常废功夫的，谁弄谁知道。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210742344.png" alt="img"></p>
<h4 id="避免缓存穿透"><a href="#避免缓存穿透" class="headerlink" title="避免缓存穿透"></a>避免缓存穿透</h4><p>当缓存没有数据，就得跑去数据库查询出来，这就是<strong>缓存穿透</strong>。假如某个时间临界点数据是空的例如周排行榜，穿透过去的无论查找多少次数据库仍然是空，而且该查询消耗CPU相对比较高，并发一进来因为缺少了缓存层的对高并发的应对，这个时候就会<strong>因为并发导致数据库资源消耗过高</strong>，这就是<strong>缓存击穿</strong>。数据库资源消耗过高就会导致其他查询超时等问题。</p>
<p>　　该问题的解决方案也简单，对于查询到数据库的空结果也缓存起来，但是给一个相对快过期的时间。有些同行可能又会问，这样不就会造成了数据不一致了么？一般有数据同步的方案像分布式缓存、后续会说的一主多从、CQRS，只要存在<strong>数据同步</strong>这几个字，那就意味着会存在数据一致性的问题，<strong>因此如果使用上述方案，对应的业务场景应允许容忍一定的数据不一致。</strong></p>
<h4 id="不是所有慢查询都适用"><a href="#不是所有慢查询都适用" class="headerlink" title="不是所有慢查询都适用"></a>不是所有慢查询都适用</h4><p>一般来说，慢的查询都意味着比较吃资源的（CPU、磁盘I/O）。举个例子，假如某个查询功能需要3秒时间，串行查询的时候并没什么问题，我们继续假设这功能每秒大概QPS为100，那么在第一次查询结果返回之前，接下来的所有查询都应该穿透到数据库，也就意味着这几秒时间有300个请求到数据库，如果这个时候数据库CPU达到了100%，那么接下来的所有查询都会超时，也就是无法有第一个查询结果缓存起来，从而还是形成了缓存击穿。</p>
<h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210743024.png" alt="image-20220421074329948"></p>
<p>常用的分担数据库压力还有一种常用做法，就是读写分离、一主多从。咱们都是知道关系型数据库天生是不具备分布式分片存储的，也就是不支持分布式写，但是它天然的支持分布式读。一主多从是部署多台从库只读实例，通过冗余主库的数据来分担读请求的压力，路由算法可有代码实现或者中间件解决，具体可以根据团队的运维能力与代码组件支持视情况选择。</p>
<p>一主多从在还没找到根治方案前是一个非常好的应急解决方案，特别是在现在云服务的年代，扩展从库是一件非常方便的事情，而且一般情况只需要运维或者DBA解决就行，无需开发人员接入。当然这方案也有缺点，因为数据无法分片，所以主从的数据量完全冗余过去，也会导致高的硬件成本。从库也有其上限，从库过多了会主库的多线程同步数据的压力。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210743531.png" alt="img"></p>
<h3 id="选择合适的存储系统"><a href="#选择合适的存储系统" class="headerlink" title="选择合适的存储系统"></a>选择合适的存储系统</h3><p>　NoSQL主要以下五种类型：<strong>键值型、文档型、列型、图型、搜素引擎，</strong>不同的存储系统直接决定了<strong>查找算法</strong>、<strong>存储数据结构</strong>，也应对了需要解决的不同的业务场景。NoSQL的出现也解决了关系型数据库之前面临的难题（性能、高并发、扩展性等）。</p>
<p>​    例如，ElasticSearch的查找算法是倒排索引，可以用来代替关系型数据库的低性能、高消耗的Like搜索（全表扫描）。而Redis的Hash结构决定了时间复杂度为O(1)，还有它的内存存储，结合分片集群存储方式以至于可以支撑数十万QPS。</p>
<p>　　因此本类型的方案主要有两种：<strong>CQRS、替换（选择）存储，</strong>这两种方案的最终本质基本是一样的主要使用合适存储来弥补关系型数据库的缺点，只不过切换过渡的方式会有点不一样。</p>
<img data-src="https://cdn.jonty.top/img/202204210744493.png" alt="img" style="zoom: 50%;" />



<h3 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h3><hr>
<blockquote>
<p><em>CQS（命令查询分离）指同一个对象中作为查询或者命令的方法，每个方法或者返回的状态，要么改变状态，但不能两者兼备</em>　</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/202204210745298.png" alt="image-20220421074500233"></p>
<p>讲解CQRS前得了解CQS，有些小伙伴看了估计还没不是很清晰，我这里用通俗的话解释：某个对象的数据访问的方法里，要么只是查询，要么只是写入（更新）。而CQRS（命令查询职责分离）基于CQS的基础上，用物理数据库来写入（更新），而用另外的存储系统来查询数据。因此我们在某些业务场景进行存储架构设计时，可以通过关系型数据库的ACID特性进行数据的更新与写入，用NoSQL的高性能与扩展性进行数据的查询处理，这样的好处就是关系型数据库和NoSQL的优点都可以兼得，同时对于某些业务不适于一刀切的替换存储的也可以有一个平滑的过渡。</p>
<p>从代码实现角度来看，不同的存储系统只是调用对应的接口API，因此CQRS的难点主要在于如何进行数据同步。</p>
<h3 id="数据同步方式"><a href="#数据同步方式" class="headerlink" title="数据同步方式"></a>数据同步方式</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210745102.png" alt="image-20220421074537057"></p>
<p>一般讨论到数据同步的方式主要是分<strong>推</strong>和<strong>拉：</strong></p>
<p>推指的是由数据变更端通过直接或者间接的方式把数据变更的记录发送到接收端，从而进行数据的一致性处理，这种主动的方式优点是实时性高。</p>
<p>拉指的是接收端定时的轮询数据库检查是否有数据需要进行同步，这种被动的方式从实现角度来看比推简单，因为推是需要数据变更端支持变更日志的推送的。</p>
<p>而推的方式又分两种：CDC（变更数据捕获）和领域事件。对于一些旧的项目来说，某些业务的数据入口非常多，无法完整清晰的梳理清楚，这个时候CDC就是一种非常好的方式，只要从最底层数据库层面把变更记录取到就可。</p>
<p>对于已经服务化的项目来说领域事件是一种比较舒服的方式，因为CDC是需要数据库额外开启功能或者部署额外的中间件，而领域事件则不需要，从代码可读性来看会更高，也比较开发人员的维护思维模式。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210746719.png" alt="img"></p>
<h3 id="替换（选择）存储系统"><a href="#替换（选择）存储系统" class="headerlink" title="替换（选择）存储系统"></a>替换（选择）存储系统</h3><hr>
<p>因为从本质来看该模式与CQRS的核心本质是一样的，主要是要对NoSQL的优缺点有一个全面认识，这样才能在对应业务场景选择与判断出一个合适的存储系统。这里我像大家介绍一本书马丁.福勒《NoSQL精粹》，这本书我重复看了好几遍，也很好全面介绍各种NoSQL优缺点和使用场景。</p>
<p>当然替换存储的时候，我这里也有个建议：加入一个中间版本，该版本做好数据同步与业务开关，数据同步要保证全量与增加的处理，随时可以重来，业务开关主要是为了后续版本的更新做的一个临时型的功能，主要避免后续版本更新不顺利或者因为版本更新时导致的数据不一致的情况出现。在跑了一段时间后，验证了两个不同的存储系统数据是一致的后，接下来就可以把数据访问层的底层调用替换了。如此一来就可以平滑的更新切换。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><hr>
<p>本文到这里就把八大方案介绍完了，在这里再次提醒一句，每个方案都有属于它的应对场景，咱们只能根据业务场景选择对应的解决方案，没有通吃，没有银弹。</p>
<p>这八个方案里，大部分都存在数据同步的情况，只要存在数据同步，无论是一主多从、分布式缓存、CQRS都好，都会有数据一致性的问题导致，因此这些方案更多适合一些只读的业务场景。当然有些写后既查的场景，可以通过过渡页或者广告页通过用户点击关闭切换页面的方式来缓解数据不一致性的情况。</p>
<p>通过这篇文章我相信大家对数据库设计优化有了一个全面的认识，如果有更加的建议可以在下方评论反馈给给我。</p>
<blockquote>
<p>作　　者： <strong><a href="http://www.cnblogs.com/skychen1218/">陈珙</a></strong><br>出　　处：<a href="http://www.cnblogs.com/skychen1218/">http://www.cnblogs.com/skychen1218/</a><br>关于作者：专注于微软平台的项目开发。如有问题或建议，请多多赐教！<br>版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</blockquote>
]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle11gR2 Rac集群搭建</title>
    <url>/2022/01/04/oracle-11gR2-rac/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Oracle RAC是什么?</strong></p>
<p><img data-src="https://cdn.jonty.top/img/20210612235829184.png" alt="img"></p>
<ul>
<li>Oracle Real Application Clusters (RAC) 允许客户跨多台服务器运行单个 Oracle 数据库，以最大限度地提高可用性并实现水平可扩展性，同时访问共享存储。</li>
<li>连接到 Oracle RAC 实例的用户会话可以在中断期间进行故障转移并安全地重放更改，而无需对最终用户应用程序进行任何更改，从而对最终用户隐藏了中断的影响。</li>
<li>Oracle RAC 运行于集群之上，为 Oracle 数据库提供了最高级别的可用性、可伸缩性和低成本计算能力。</li>
<li>如果集群内的一个节点发生故障，Oracle 将可以继续在其余的节点上运行。</li>
<li>Oracle 的主要创新是一项称为高速缓存合并的技术。</li>
<li>高速缓存合并使得集群中的节点可以通过高速集群互联高效地同步其内存高速缓存，从而最大限度地低降低磁盘 I/O。</li>
<li>高速缓存最重要的优势在于它能够使集群中所有节点的磁盘共享对所有数据的访问,数据无需在节点间进行分区。</li>
</ul>
<p>特点：</p>
<ul>
<li>多台互连计算机组成，使用共享存储。</li>
<li>用户无感知，对于最终用户和应用程序而言，它们似乎是一台服务器。</li>
<li>高可用，只要有一个节点存活，就能正常对外提供服务，避免单点故障。</li>
<li>高性能，多节点负载均衡。</li>
<li>易伸缩，可以容易地添加、删除节点，以满足系统自身的调整。</li>
</ul>
<p><strong>如何部署RAC数据库环境？</strong></p>
<p>大致步骤如下：</p>
<ul>
<li>安装两台redhat7.6版本Linux系统</li>
<li>网络配置（双网卡，准备IP：Public IP，Virtual IP，Private IP，Scan IP）</li>
<li>存储配置（6块5G共享盘做ASM盘，根目录留50G用于安装grid和oracle）</li>
<li>预安装准备（系统参数/etc/sysctl.conf修改，防火墙selinux关闭，ntpd时钟定时同步，yum源配置安装<br>用户组及用户、目录新建，环境变量配置，用户资源限制/etc/security/limits.conf配置，/etc/pam.d/login修改pam_limits.so等等）</li>
<li>安装Grid软件</li>
<li>安装Oracle软件并建库</li>
<li>修改数据库内存配置，密码不过期，开启归档，布置归档定时删除脚本，布置rman备份机制)</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/20210613001253755.png" alt="img"></p>
<h3 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h3><p>本文主机配置为<code>RedHat 7.6 x86_64</code>、<code>内存8G</code>、<code>硬盘100G</code>、<code>双网卡</code>、<code>iscsi共享存储5G*6</code></p>
<table>
<thead>
<tr>
<th>节点</th>
<th>主机版本</th>
<th>主机名</th>
<th>实例名</th>
<th>Oracle版本</th>
<th>Public IP</th>
<th>Private IP</th>
<th>Virtual IP</th>
<th>Scan IP</th>
</tr>
</thead>
<tbody><tr>
<td>node1</td>
<td>RedHat 7.6</td>
<td>rac21</td>
<td>orcl1</td>
<td>11.2.0.4</td>
<td>192.168.145.11</td>
<td>10.10.10.11</td>
<td>192.168.145.13</td>
<td>192.168.145.15</td>
</tr>
<tr>
<td>node2</td>
<td>RedHat 7.6</td>
<td>rac22</td>
<td>orcl2</td>
<td>11.2.0.4</td>
<td>192.168.145.12</td>
<td>10.10.10.12</td>
<td>192.168.145.14</td>
<td>192.168.145.15</td>
</tr>
</tbody></table>
<h4 id="Linux系统安装"><a href="#Linux系统安装" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h4><blockquote>
<p>Linux系统安装不做详细演示，请参考 <a href="https://jonty.top/2021/10/27/vmware-install-linux/">https://jonty.top/2021/10/27/vmware-install-linux/</a></p>
</blockquote>
<h4 id="配置yum源并安装依赖包"><a href="#配置yum源并安装依赖包" class="headerlink" title="配置yum源并安装依赖包"></a>配置yum源并安装依赖包</h4><p>VMware Workstation挂载Linux镜像：</p>
<p><strong>注意：</strong> 需要提前挂载系统镜像</p>
<p>配置镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;export LANG=en_US&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置yum源</span></span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>安装依赖包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y &quot;Server with GUI&quot;</span><br><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">tigervnc* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p>手动上传并安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br><span class="line">rpm -e ksh-20120801-139.el7.x86_64</span><br><span class="line">rpm -ivh pdksh-5.2.14-37.el5.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>检查安装情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline | grep &quot;not installed&quot;</span><br></pre></td></tr></table></figure>



<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p><code>rac41</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Public IP</span></span></span><br><span class="line">nmcli connection modify ens33 ipv4.addresses 192.168.145.21/24 ipv4.gateway 192.168.145.2 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Private IP</span></span></span><br><span class="line">nmcli connection modify ens34 ipv4.addresses 10.10.10.21/24 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生效</span></span></span><br><span class="line">nmcli connection up ens33</span><br><span class="line">nmcli connection up ens34</span><br></pre></td></tr></table></figure>

<p><code>rac42</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Public IP</span></span></span><br><span class="line">nmcli connection modify ens33 ipv4.addresses 192.168.145.22/24 ipv4.gateway 192.168.45.2 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Private IP</span></span></span><br><span class="line">nmcli connection modify ens34 ipv4.addresses 10.10.10.22/24 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生效</span></span></span><br><span class="line">nmcli connection up ens33</span><br><span class="line">nmcli connection up ens34</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211223161839494.png" alt="image-20211223161839494"></p>
<h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><p>使用<code>ISCSI</code>配置共享存储：<a href="https://luciferliu.blog.csdn.net/article/details/118087577">https://luciferliu.blog.csdn.net/article/details/118087577</a></p>
<p>配置好共享存储后，在 Linux 主机连接共享存储：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#iscsi识别共享存储</span></span></span><br><span class="line">yum install -y iscsi-initiator-utils*</span><br><span class="line"></span><br><span class="line">systemctl enable iscsi</span><br><span class="line">systemctl start iscsi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#输出targetname，10.211.55.18为iscsi共享存储设备IP地址</span></span></span><br><span class="line">iscsiadm -m discovery -t st -p 192.168.145.1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#连接共享存储</span></span></span><br><span class="line">iscsiadm -m node -T iqn.2008-08.com.starwindsoftware:192.168.1.21-jonty -p 192.168.145.1 -l</span><br><span class="line"></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p>安装 <code>multipath</code> 绑定多路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y device-mapper*</span><br><span class="line">mpathconf --enable --with_multipathd y</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看共享盘的scsi_id</span></span></span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdb</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdc</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdd</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sde</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdf</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdg</span><br></pre></td></tr></table></figure>

<p>配置 multipath 文件：</p>
<p><strong>📢 注意：</strong> wwid的值为上面获取的scsi_id，alias可自定义，这里配置3块OCR盘，3块DATA盘！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;/etc/multipath.conf</span><br><span class="line">defaults &#123;</span><br><span class="line">    user_friendly_names yes</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">blacklist &#123;</span><br><span class="line">  devnode &quot;^sda&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">multipaths &#123;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;2b4a04d8579625dfe&quot;</span><br><span class="line">  alias asm-ocr_1</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;24a84046e7f3723ee&quot;</span><br><span class="line">  alias asm-ocr_2</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;22e5355507973a019&quot;</span><br><span class="line">  alias asm-ocr_3</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;267309a91b23cad07&quot;</span><br><span class="line">  alias asm-data_1</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;2101958d6779faa9a&quot;</span><br><span class="line">  alias asm-data_2</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;205af7fc0a95ea04b&quot;</span><br><span class="line">  alias asm-data_3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>激活multipath多路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multipath -F</span><br><span class="line">multipath -v2</span><br><span class="line">multipath -ll</span><br></pre></td></tr></table></figure>

<p>配置UDEV绑盘：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in ocr_* data_*; do</span><br><span class="line">	printf &quot;%s %s\n&quot; &quot;$i&quot; &quot;$(udevadm info --query=all --name=/dev/mapper/&quot;$i&quot; | grep -i dm_uuid)&quot; &gt;&gt;/dev/mapper/udev_info</span><br><span class="line">done</span><br><span class="line">while read -r line; do</span><br><span class="line">	dm_uuid=$(echo &quot;$line&quot; | awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">	disk_name=$(echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">	echo &quot;KERNEL==\&quot;dm-*\&quot;,ENV&#123;DM_UUID&#125;==\&quot;$&#123;dm_uuid&#125;\&quot;,SYMLINK+=\&quot;asm_$&#123;disk_name&#125;\&quot;,OWNER=\&quot;grid\&quot;,GROUP=\&quot;asmadmin\&quot;,MODE=\&quot;0660\&quot;&quot; &gt;&gt;/etc/udev/rules.d/99-oracle-asmdevices.rules</span><br><span class="line">done &lt;/dev/mapper/udev_info</span><br><span class="line"></span><br><span class="line">asm-ocr_3	(253:2)</span><br><span class="line">asm-ocr_2	(253:1)</span><br><span class="line">asm-ocr_1	(253:0)</span><br><span class="line">asm-data_3	(253:5)</span><br><span class="line">asm-data_2	(253:4)</span><br><span class="line">asm-data_1	(253:3)</span><br><span class="line"></span><br><span class="line">for i in asm-ocr_1 asm-ocr_2 asm-ocr_3 asm-data_1 asm-data_2 asm-data_3;</span><br><span class="line">do</span><br><span class="line">printf &quot;%s %s\n&quot; &quot;$i&quot; &quot;$(udevadm info --query=all --name=/dev/mapper/$i |grep -i dm_uuid)&quot;;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">asm-ocr_1 E: DM_UUID=mpath-2b4a04d8579625dfe</span><br><span class="line">asm-ocr_2 E: DM_UUID=mpath-24a84046e7f3723ee</span><br><span class="line">asm-ocr_3 E: DM_UUID=mpath-22e5355507973a019</span><br><span class="line">asm-data_1 E: DM_UUID=mpath-267309a91b23cad07</span><br><span class="line">asm-data_2 E: DM_UUID=mpath-2101958d6779faa9a</span><br><span class="line">asm-data_3 E: DM_UUID=mpath-205af7fc0a95ea04b</span><br><span class="line"></span><br><span class="line">vi /etc/udev/rules.d/99-oracle-asmdevices.rules</span><br><span class="line"></span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-2b4a04d8579625dfe&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-24a84046e7f3723ee&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-22e5355507973a019&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-267309a91b23cad07&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-2101958d6779faa9a&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-205af7fc0a95ea04b&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重载udev</span></span></span><br><span class="line">udevadm control --reload-rules</span><br><span class="line">udevadm trigger --type=devices</span><br><span class="line"></span><br><span class="line">ls -lsa /dev/dm*</span><br><span class="line">ls -lsa /dev/mapper/*</span><br></pre></td></tr></table></figure>

<p>确认配置完成后，分别在两个节点输入命令 <code>ls /dev/dm*</code> 查看是否已经成功绑定。</p>
<h4 id="hosts文件配置"><a href="#hosts文件配置" class="headerlink" title="hosts文件配置"></a>hosts文件配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">Public IP</span></span><br><span class="line">192.168.145.21 rac21</span><br><span class="line">192.168.145.22 rac22</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Private IP</span></span><br><span class="line">10.10.10.21 rac21-priv</span><br><span class="line">10.10.10.22 rac22-priv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Vip IP</span></span><br><span class="line">192.168.145.22 rac21-vip</span><br><span class="line">192.168.145.23 rac22-vip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Scan IP</span></span><br><span class="line">192.168.145.25 rac-scan</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service ## 禁用防火墙</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>



<h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启后生效</span></span></span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启后检查</span></span></span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: selinux 配置需要重启生效！</p>
</blockquote>
<h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p>首先需要禁用 chronyd 和 ntpd 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#禁用chronyd</span></span></span><br><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">systemctl stop chronyd.service</span><br><span class="line">systemctl disable chronyd.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#禁用ntpd</span></span></span><br><span class="line">yum install -y ntpdate</span><br></pre></td></tr></table></figure>

<p>配置计划任务，定时刷新系统时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/var/spool/cron/root</span><br><span class="line">00 12 * * * /usr/sbin/ntpdate -u ntp.ntsc.ac.cn &amp;&amp; /usr/sbin/hwclock -w</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看计划任务</span></span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#手动执行</span></span></span><br><span class="line">/usr/sbin/ntpdate -u 10.211.55.200 &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure>



<h4 id="关闭透明大页和-NUMA"><a href="#关闭透明大页和-NUMA" class="headerlink" title="关闭透明大页和 NUMA"></a>关闭透明大页和 NUMA</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启后检查是否生效</span></span></span><br><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">cat /proc/cmdline</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 注意： 关闭 <code>透明大页</code> 和 <code>numa</code> 的配置，需要重启主机生效</p>
</blockquote>
<h4 id="avahi-daemon-配置"><a href="#avahi-daemon-配置" class="headerlink" title="avahi-daemon 配置"></a>avahi-daemon 配置</h4><p>有些主机安装选择最小化安装，没有安装 avahi-daemon 功能，建议安装之后禁用，防止以后误操作导致出问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y avahi*</span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">pgrep -f avahi-daemon | awk &#x27;&#123;print &quot;kill -9 &quot;$2&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>配置 NOZEROCONF：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysconfig/network</span><br><span class="line">NOZEROCONF=yes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h4 id="系统参数配置"><a href="#系统参数配置" class="headerlink" title="系统参数配置"></a>系统参数配置</h4><p>安装 Oracle 数据库需要配置系统参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置参数文件</span></span></span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">	shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">	shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysctl.conf</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall</span><br><span class="line">kernel.shmmax = $shmmax</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">net.ipv4.conf.ens33.rp_filter = 1</span><br><span class="line">net.ipv4.conf.ens34.rp_filter = 2</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生效</span></span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置limits.conf</span></span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line"></span><br><span class="line">grid soft nofile 1024</span><br><span class="line">grid hard nofile 65536</span><br><span class="line">grid soft stack 10240</span><br><span class="line">grid hard stack 32768</span><br><span class="line">grid soft nproc 2047</span><br><span class="line">grid hard nproc 16384</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置pam.d/login</span></span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h4 id="用户及组、目录创建"><a href="#用户及组、目录创建" class="headerlink" title="用户及组、目录创建"></a>用户及组、目录创建</h4><p>创建安装 Oracle 数据库所需的用户、组以及安装目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#组创建</span></span></span><br><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line">/usr/sbin/groupadd -g 54324 backupdba</span><br><span class="line">/usr/sbin/groupadd -g 54325 dgdba</span><br><span class="line">/usr/sbin/groupadd -g 54326 kmdba</span><br><span class="line">/usr/sbin/groupadd -g 54327 asmdba</span><br><span class="line">/usr/sbin/groupadd -g 54328 asmoper</span><br><span class="line">/usr/sbin/groupadd -g 54329 asmadmin</span><br><span class="line">/usr/sbin/groupadd -g 54330 racdba</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#用户创建</span></span></span><br><span class="line">/usr/sbin/useradd -u 11012 -g oinstall -G asmadmin,asmdba,asmoper,dba,racdba,oper grid</span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G asmdba,dba,backupdba,dgdba,kmdba,racdba,oper oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改用户密码为oracle</span></span></span><br><span class="line">echo &quot;oracle&quot; |passwd oracle --stdin</span><br><span class="line">echo &quot;oracle&quot; |passwd grid --stdin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建软件目录</span></span></span><br><span class="line">mkdir -p /u01/app/11.2.0/grid</span><br><span class="line">mkdir -p /u01/app/grid</span><br><span class="line">mkdir -p /u01/app/oracle/product/11.2.0/db</span><br><span class="line">mkdir -p /u01/app/oraInventory</span><br><span class="line">mkdir -p /backup</span><br><span class="line">mkdir -p /home/oracle/scripts</span><br><span class="line">chown -R oracle:oinstall /backup</span><br><span class="line">chown -R oracle:oinstall /home/oracle/scripts</span><br><span class="line">chown -R grid:oinstall /u01</span><br><span class="line">chown -R grid:oinstall /u01/app/grid</span><br><span class="line">chown -R grid:oinstall /u01/app/11.2.0/grid</span><br><span class="line">chown -R grid:oinstall /u01/app/oraInventory</span><br><span class="line">chown -R oracle:oinstall /u01/app/oracle</span><br><span class="line">chmod -R 775 /u01</span><br></pre></td></tr></table></figure>



<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><h5 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h5><p><strong>grid 用户：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/grid/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/grid</span><br><span class="line">export ORACLE_HOME=/u01/app/11.2.0/grid</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=+ASM1</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysasm&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>oracle 用户：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/11.2.0/db</span><br><span class="line">export ORACLE_HOSTNAME=rac11</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=orcl1</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleEnd#########################</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h5 id="node2"><a href="#node2" class="headerlink" title="node2"></a>node2</h5><p><strong>grid 用户</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/grid/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/grid</span><br><span class="line">export ORACLE_HOME=/u01/app/11.2.0/grid</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=+ASM2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysasm&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>oracle 用户：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/11.2.0/db</span><br><span class="line">export ORACLE_HOSTNAME=rac12</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=orcl2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleEnd#########################</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="安装介质上传解压"><a href="#安装介质上传解压" class="headerlink" title="安装介质上传解压"></a>安装介质上传解压</h4><p>只需要上传至一节点 /soft 目录下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建安装介质存放目录</span></span></span><br><span class="line">mkdir /soft</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上传安装介质到/soft目录</span></span></span><br><span class="line">p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line">p13390677_112040_Linux-x86-64_3of7.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压安装介质</span></span></span><br><span class="line">cd /soft</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_3of7.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#授权目录</span></span></span><br><span class="line">chown -R oracle:oinstall /soft/database</span><br><span class="line">chown -R grid:oinstall /soft/grid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#root用户下，cvuqdisk安装（rac01&amp;rac02）</span></span></span><br><span class="line">cd /soft/grid/rpm</span><br><span class="line">rpm -ivh cvuqdisk-1.0.9-1.rpm </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#传输到节点二安装</span></span></span><br><span class="line">scp cvuqdisk-1.0.9-1.rpm rac12:/tmp</span><br><span class="line">rpm -ivh /tmp/cvuqdisk-1.0.9-1.rpm </span><br></pre></td></tr></table></figure>

<h3 id="安装Grid软件"><a href="#安装Grid软件" class="headerlink" title="安装Grid软件"></a>安装Grid软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装vncserver</span></span></span><br><span class="line">yum install -y tigervnc*</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#root用户下切换到grid用户</span></span></span><br><span class="line">su - grid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行vncserver，按提示输入密码即可</span></span></span><br><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p>开始安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入安装目录</span></span></span><br><span class="line">cd /soft/grid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行安装程序开始安装，加上jar包防止弹窗不显示问题</span></span></span><br><span class="line">./runInstaller -jreLoc /etc/alternatives/jre_1.8.0</span><br></pre></td></tr></table></figure>



<p>跳过软件更新：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104095907830.png" alt="image-20220104095907830"></p>
<p>选择集群模式安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100037758.png" alt="image-20220104100037758"></p>
<p>自定义安装：<img data-src="https://cdn.jonty.top/img/image-20220104100119417.png" alt="image-20220104100119417"></p>
<p> 配置集群名称和<code>scan</code>名称</p>
<blockquote>
<p>需要和hosts配置一致</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100325637.png" alt="image-20220104100325637"></p>
<p> 配置节点互信：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100434776.png" alt="image-20220104100434776"></p>
<blockquote>
<p>点击Add添加rac12节点，然后点击setup配置互信</p>
</blockquote>
<p>点击Test测试互信：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100607278.png" alt="image-20220104100607278"></p>
<p>确认网络信息是否正确</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100645594.png" alt="image-20220104100645594"></p>
<p>选择<strong>ASM</strong>模式安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100727480.png" alt="image-20220104100727480"></p>
<p>配置<strong>OCR</strong>裁决盘信息：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100848491.png" alt="image-20220104100848491"></p>
<blockquote>
<p>OCR裁决盘冗余模式External,Normal,High对应磁盘数量为1，3，5</p>
</blockquote>
<p>配置ASM实例SYS密码：oracle</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100905957.png" alt="image-20220104100905957"></p>
<p>不使用IPMI</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101122176.png" alt="image-20220104101122176"></p>
<p>选择用户组，默认：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101150351.png" alt="image-20220104101150351"></p>
<p>选择安装目录，默认：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101220287.png" alt="image-20220104101220287"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101249813.png" alt="image-20220104101249813"></p>
<p>安装前检查：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101424877.png" alt="image-20220104101424877"></p>
<p>开始执行安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104102648525.png" alt="image-20220104102648525"></p>
<blockquote>
<p>注意：执行root.sh之前需要安装<code>18370031</code>补丁</p>
</blockquote>
<p><code>rac11</code>&amp;<code>rac12</code>均需要执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上传补丁包</span></span></span><br><span class="line">p18370031_112040_Linux-x86-64.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压补丁包</span></span></span><br><span class="line">cd /soft</span><br><span class="line">unzip -q p18370031_112040_Linux-x86-64.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#授权补丁包</span></span></span><br><span class="line">chown -R grid:oinstall /soft/18370031</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#开始安装补丁，两个节点都需要执行</span></span></span><br><span class="line">su - grid</span><br><span class="line">opatch napply -oh $ORACLE_HOME -local /soft/18370031 -silent</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104103121399.png" alt="image-20220104103121399"></p>
<p>打好补丁后，开始执行<code>root.sh</code>脚本</p>
<p>先在节点1执行，执行成功后节点2加入群集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#root用户下执行</span></span></span><br><span class="line">/u01/app/oraInventory/orainstRoot.sh</span><br><span class="line">/u01/app/11.2.0/grid/root.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104104406468.png" alt="image-20220104104406468"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105124755.png" alt="image-20220104105124755"></p>
<p>点击OK,继续安装</p>
<p>没有配置<code>DNS</code>解析，报错可忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105427461.png" alt="image-20220104105427461"><code>GRID</code>安装成功：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105542972.png" alt="image-20220104105542972"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105649608.png" alt="image-20220104105649608"></p>
<p>osh:</p>
<p><strong>注意：</strong> 如果需要安装 <code>PSU</code> 补丁，建议在建库之前安装，可以省去数据字典升级的步骤</p>
<p>以 Grid PSU 补丁 <code>31718723</code> 为例，使用 <code>root</code> 用户执行补丁安装命令：（rac11&amp;rac12）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压补丁包</span></span></span><br><span class="line">cd /soft</span><br><span class="line">unzip -q p31718723_112040_Linux-x86-64.zip</span><br><span class="line"></span><br><span class="line">mv Opatch OPatch_old # 备份</span><br><span class="line">cp -r /soft/Opatch . # 复制</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#切换到root用户执行，需要拷贝到2节点也执行一次</span></span></span><br><span class="line">opatch auto /soft/31718723 -oh $GRID_ORACLE_HOME</span><br></pre></td></tr></table></figure>

<h3 id="创建ASM数据盘DATA"><a href="#创建ASM数据盘DATA" class="headerlink" title="创建ASM数据盘DATA"></a>创建ASM数据盘DATA</h3><p> DATA 磁盘组主要用于存放数据文件、日志文件等数据库文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asmca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104112335347.png" alt="image-20220104112335347"></p>
<p>点击<strong>create</strong>创建DATA</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104112423523.png" alt="image-20220104112423523"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104112429678.png" alt="image-20220104112429678"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104112509247.png" alt="image-20220104112509247"></p>
<p>重启，检查群集状态</p>
<h3 id="安装Oracle软件"><a href="#安装Oracle软件" class="headerlink" title="安装Oracle软件"></a>安装Oracle软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">vncserver</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入安装目录</span></span></span><br><span class="line">cd /soft/database</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行安装程序开始安装，加上jar包防止弹窗不显示问题</span></span></span><br><span class="line">./runInstaller -jreLoc /etc/alternatives/jre_1.8.0</span><br></pre></td></tr></table></figure>

<p>不配置邮件发送：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122206066.png" alt="image-20220104122206066"></p>
<p>跳过软件更新</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122247144.png" alt="image-20220104122247144"></p>
<p>选择仅安装Oracle软件：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122305882.png" alt="image-20220104122305882"></p>
<p>配置Oracle用户互信：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122407750.png" alt="image-20220104122407750"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122359451.png" alt="image-20220104122359451"></p>
<p>选择企业版安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104130823682.png"></p>
<p>安装位置，默认即可：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104130927245.png" alt="image-20220104130927245"></p>
<p>用户组，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104130945700.png" alt="image-20220104130945700"></p>
<p>安装前检查：</p>
<p>忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104131057647.png" alt="image-20220104131057647"></p>
<p>开始安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104131128124.png" alt="image-20220104131128124"></p>
<p>安装过程报错：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104132002754.png" alt="image-20220104132002754"></p>
<blockquote>
<p><strong>注意：</strong> Linux7 安装 Oracle 11GR2 版本，oracle 软件安装过程中报错：<code>ins_emagent.mk</code>，需要修改文件 <code>/sysman/lib/ins_emagent.mk</code> 修复</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@rac11:/home/oracle]$ sed -i &#x27;s/^\(\s*\$(MK_EMAGENT_NMECTL)\)\s*$/\1 -lnnz11/g&#x27; $ORACLE_HOME/sysman/lib/ins_emagent.mk</span><br></pre></td></tr></table></figure>

<p>执行<code>root.sh</code>脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/u01/app/oracle/product/11.2.0/db/root.sh</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20220104133753429.png" alt="image-20220104133753429"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104134046080.png" alt="image-20220104134046080"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104133928204.png" alt="image-20220104133928204"></p>
<h3 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca</span><br></pre></td></tr></table></figure>

<p>选择rac模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142637632.png" alt="image-20220104142637632"></p>
<p>创建数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142655532.png" alt="image-20220104142655532"></p>
<p>选择自定义</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142722154.png" alt="image-20220104142722154"></p>
<p>填写实例ID:</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142759183.png" alt="image-20220104142759183"></p>
<p>EM：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142834540.png" alt="image-20220104142834540"></p>
<p>填写SYS密码：P@ssw0rd</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142927756.png" alt="image-20220104142927756"></p>
<p>选择数据存放盘：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142945676.png" alt="image-20220104142945676"></p>
<p>暂不开启闪回，建库后可随时开启：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143018740.png" alt="image-20220104143018740"></p>
<p>选择自定义组件，默认：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143037219.png" alt="image-20220104143037219"></p>
<p>配置初始化参数：</p>
<p>内存：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SGA &lt;= memory * 0.8 * 0.8</span><br><span class="line">PGA &lt;= memory * 0.8 * 0.2  (40% ~ 60%)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104143129101.png" alt="image-20220104143129101"></p>
<p>进程数：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211230105346341.png"></p>
<p>字符集：根据实际需求设置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143306605.png" alt="image-20220104143306605"></p>
<p><strong>存储配置</strong></p>
<p>控制文件：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211230110158202.png" alt="image-20211230110158202"></p>
<p>表空间设置：</p>
<blockquote>
<p>每个数据文件设置为20G  USERS:5G </p>
<p>自动扩展关闭</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211230110652517.png" alt="image-20211230110652517"></p>
<p>重做日志文件：</p>
<blockquote>
<p>2组 10个  每个2G  (演示为200M)</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211230111057915.png" alt="image-20211230111057915"></p>
<p><strong>创建选项</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143603934.png" alt="image-20220104143603934"></p>
<p>开始创建：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143813380.png" alt="image-20220104143813380"></p>
<p>创建成功：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104151937257.png" alt="image-20220104151937257"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">select instance_number,instance_name,startup_time,status from gv<span class="variable">$Instance</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104154654400.png" alt="image-20220104154654400"></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>RedHat安装Oracle数据库</title>
    <url>/2021/11/09/rhel-install-oracle-11g-r2/</url>
    <content><![CDATA[<p>📢：本文为实操记录，练习环境为RHEL7.6(本地虚拟机)，腾讯云Centos7.6实操安装成功。不正之处望指出。</p>
<p>关于虚拟机安装Linux操作系统,<a href="https://jonty.top/2021/10/27/vmware-install-linux/">点击查看</a></p>
<h2 id="Linux主机配置"><a href="#Linux主机配置" class="headerlink" title="Linux主机配置"></a>Linux主机配置</h2><h3 id="主机名和网络配置"><a href="#主机名和网络配置" class="headerlink" title="主机名和网络配置"></a>主机名和网络配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#OracleBegin##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Public IP</span></span></span><br><span class="line">192.168.1.79   orcl79</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#OracleEnd##</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211104095943481.png" alt="image-20211104095943481"></p>
<h3 id="hosts文件配置"><a href="#hosts文件配置" class="headerlink" title="hosts文件配置"></a>hosts文件配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104100304275.png" alt="image-20211104100304275"></p>
<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104100742682.png" alt="image-20211104100742682"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104100906781.png" alt="image-20211104100906781"></p>
<h3 id="SELINUX配置"><a href="#SELINUX配置" class="headerlink" title="SELINUX配置"></a>SELINUX配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211104101228439.png" alt="image-20211104101228439"></p>
<h3 id="挂载镜像"><a href="#挂载镜像" class="headerlink" title="挂载镜像"></a>挂载镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">cat &lt;&lt;EOF&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104101459247.png" alt="image-20211104101459247"></p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104102036281.png" alt="image-20211104102036281"></p>
<p>安装缺少的compat-libstdc++包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104102049805.png" alt="image-20211104102049805"></p>
<h3 id="配置ZeroConf"><a href="#配置ZeroConf" class="headerlink" title="配置ZeroConf"></a>配置ZeroConf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#关闭Zeroconf service的服务守护进程</span></span></span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">systemctl disable avahi-daemon.service</span><br><span class="line">systemctl disable avahi-daemon.socket</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#关闭NOZEROCONF</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysconfig/network</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line">NOZEROCONF=yes</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleEnd</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104103506861.png" alt="image-20211104103506861"></p>
<h3 id="关闭透明大页和numa"><a href="#关闭透明大页和numa" class="headerlink" title="关闭透明大页和numa"></a>关闭透明大页和numa</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104103747755.png" alt="image-20211104103747755"></p>
<h3 id="配置系统参数文件"><a href="#配置系统参数文件" class="headerlink" title="配置系统参数文件"></a>配置系统参数文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#计算shmall和shmmax值</span></span></span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">  shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">  shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line">echo $shmall</span><br><span class="line">echo $shmmax</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置系统参数</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmal&#x27;s Calculation formula: physical memory 8G：(8*1024*1024*1024)/4096=2097152</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmax&#x27;s Calculation formula: physical memory 8G：(8/2)*1024*1024*1024 -1=4294967295</span></span></span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall  # 单个共享内存段最大值</span><br><span class="line">kernel.shmmax = $shmmax  # 共享内存页数</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#系统参数生效</span></span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysctl.conf</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 4294967295</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kernel.shmall = $shmall  # 单个共享内存段最大值</span><br><span class="line">kernel.shmmax = $shmmax  # 共享内存页数</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211115173131542.png" alt="image-20211115173131542"></p>
<h3 id="配置系统资源限制"><a href="#配置系统资源限制" class="headerlink" title="配置系统资源限制"></a>配置系统资源限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 16384</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 16384 </span><br><span class="line">oracle hard nproc 16384 </span><br><span class="line">oracle hard memlock 8000000</span><br><span class="line">oracle soft memlock 8000000</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单位kb 略低于内存</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047 </span><br><span class="line">oracle hard nproc 16384 </span><br><span class="line">oracle hard memlock 8000000</span><br><span class="line">oracle soft memlock 8000000</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleEnd</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/pam.d/login</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleEnd</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="创建用户和组"><a href="#创建用户和组" class="headerlink" title="创建用户和组"></a>创建用户和组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line"></span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G dba,oper oracle</span><br><span class="line">echo oracle | passwd --stdin oracle</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建Oracle安装目录"><a href="#创建Oracle安装目录" class="headerlink" title="创建Oracle安装目录"></a>创建Oracle安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /u01/app/oracle/product/11.2.0/db</span><br><span class="line">mkdir -p /u01/app/oraInventory</span><br><span class="line">mkdir -p /oradata</span><br><span class="line">chown -R oracle:oinstall /oradata</span><br><span class="line">chown -R oracle:oinstall /u01/app</span><br><span class="line">chmod -R 775 /u01/app</span><br></pre></td></tr></table></figure>

<h3 id="用户环境变量配置"><a href="#用户环境变量配置" class="headerlink" title="用户环境变量配置"></a>用户环境变量配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=/u01/app/oracle/product/11.2.0/db</span><br><span class="line">export ORACLE_HOSTNAME=orcl79</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="Oracle软件安装"><a href="#Oracle软件安装" class="headerlink" title="Oracle软件安装"></a>Oracle软件安装</h2><p><a href="https://luciferliu.blog.csdn.net/article/details/118529918">https://luciferliu.blog.csdn.net/article/details/118529918</a></p>
<h3 id="软件包上传"><a href="#软件包上传" class="headerlink" title="软件包上传"></a>软件包上传</h3><p><img data-src="https://cdn.jonty.top/img/image-20211104171706862.png" alt="image-20211104171706862"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104171845746.png" alt="image-20211104171845746"></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>按顺序解压1、2软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -q p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line"></span><br><span class="line">// 授权soft  to oracle</span><br><span class="line">chown -R oracle:oinstall /soft</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="VNC配置"><a href="#VNC配置" class="headerlink" title="VNC配置"></a>VNC配置</h4><h5 id="安装GNOME桌面"><a href="#安装GNOME桌面" class="headerlink" title="安装GNOME桌面"></a>安装GNOME桌面</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出的组列表里有GNOME Desktop。</span></span><br><span class="line">yum grouplist  </span><br><span class="line"><span class="meta">#</span><span class="bash">安装之</span></span><br><span class="line">yum groupinstall -y &quot;GNOME Desktop&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完成后，修改默认启动方式为图形化界面</span></span><br><span class="line">systemctl set-default graphical.target  //设置成图形模式 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果要换回来</span> </span><br><span class="line">systemctl set-default multi-user.target  //设置成命令模式 </span><br><span class="line"><span class="meta">#</span><span class="bash">然后重启系统即可</span></span><br></pre></td></tr></table></figure>

<h5 id="安装VNC服务"><a href="#安装VNC服务" class="headerlink" title="安装VNC服务"></a>安装VNC服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install tigervnc-server -y</span><br><span class="line"></span><br><span class="line">rpm -qa|grep tigervnc-server -- 验证是否安装成功</span><br></pre></td></tr></table></figure>

<h5 id="打开VNC服务"><a href="#打开VNC服务" class="headerlink" title="打开VNC服务"></a>打开VNC服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vncserver :1  # 5901</span><br><span class="line"></span><br><span class="line">vncserver -kill :1  # 关闭</span><br><span class="line"></span><br><span class="line">vncpasswd # 重置密码</span><br></pre></td></tr></table></figure>

<p>然后配置好密码使用<code>VNC Viewer</code>连接远程桌面</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211108134312717.png" alt="image-20211108134312717"></p>
<blockquote>
<p>教程 ： <a href="https://blog.csdn.net/nahancy/article/details/86316971">https://blog.csdn.net/nahancy/article/details/86316971</a></p>
<p>VNC下载：链接：<a href="https://pan.baidu.com/s/1fEf87xSB09gWxwswNXFeYw">https://pan.baidu.com/s/1fEf87xSB09gWxwswNXFeYw</a><br>提取码：3w9b </p>
</blockquote>
<h4 id="执行Oracle安装脚本"><a href="#执行Oracle安装脚本" class="headerlink" title="执行Oracle安装脚本"></a>执行Oracle安装脚本</h4><p>进入<code>/soft/database</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./runInstaller -jreLoc /etc/alternatives/jre_1.8.0</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104172834599.png" alt="image-20211104172834599"></p>
<p><strong>安装检查的问题</strong>：</p>
<p>1、must be configured to display at least 256 colors</p>
<p>解决方法：使用oracle用户打开vnserver</p>
<p>2、交换空间需要大于150MB</p>
<p>结局方法：</p>
<p>增加<code>swap</code>分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/home/swapfile bs=1M count=512</span><br><span class="line">mkswap /home/swapfile</span><br><span class="line">swapon /home/swapfile</span><br></pre></td></tr></table></figure>

<p>然后修改 /etc/fstab，加上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> vim /etc/fstab</span><br><span class="line">/home/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure>



<h4 id="配置安全更新"><a href="#配置安全更新" class="headerlink" title="配置安全更新"></a>配置安全更新</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104172939686.png" alt="image-20211104172939686"></p>
<h4 id="下载软件更新"><a href="#下载软件更新" class="headerlink" title="下载软件更新"></a>下载软件更新</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173006944.png" alt="image-20211104173006944"></p>
<h4 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173036634.png" alt="image-20211104173036634"></p>
<h4 id="安装选项-1"><a href="#安装选项-1" class="headerlink" title="安装选项"></a>安装选项</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173111607.png" alt="image-20211104173111607"></p>
<h4 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173154202.png" alt="image-20211104173154202"></p>
<h4 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173224434.png" alt="image-20211104173224434"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173247574.png" alt="image-20211104173247574"></p>
<h4 id="操作系统组"><a href="#操作系统组" class="headerlink" title="操作系统组"></a>操作系统组</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173318474.png" alt="image-20211104173318474"></p>
<h4 id="安装前检查"><a href="#安装前检查" class="headerlink" title="安装前检查"></a>安装前检查</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173400667.png" alt="image-20211104173400667"></p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh pdksh-5.2.14-37.el5.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104173503682.png" alt="image-20211104173503682"></p>
<p>重新检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173621400.png" alt="image-20211104173621400"></p>
<p>等待安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173754434.png" alt="image-20211104173754434"></p>
<p><strong>错误解决</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173840559.png" alt="image-20211104173840559"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">sed -i &#x27;s/^\(\s*\$(MK_EMAGENT_NMECTL)\)\s*$/\1 -lnnz11/g&#x27; $ORACLE_HOME/sysman/lib/ins_emagent.mk</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104174044437.png" alt="image-20211104174044437"></p>
<h4 id="执行配置脚本"><a href="#执行配置脚本" class="headerlink" title="执行配置脚本"></a>执行配置脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - root</span><br><span class="line">/u01/app/oraInventory/orainstRoot.sh</span><br><span class="line">/u01/app/oraInventory/orainstRoot.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104174220290.png" alt="image-20211104174220290"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104174230792.png" alt="image-20211104174230792"></p>
<h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104174313280.png" alt="image-20211104174313280"></p>
<p>安装完成后重启主机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>



<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h4 id="打开监听"><a href="#打开监听" class="headerlink" title="打开监听"></a>打开监听</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">lsnrctl start</span><br><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104175006137.png" alt="image-20211104175006137"></p>
<h4 id="打开配置工具"><a href="#打开配置工具" class="headerlink" title="打开配置工具"></a>打开配置工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LANG=en_US</span><br><span class="line">dbca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104175143670.png" alt="image-20211104175143670"></p>
<h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104175219629.png" alt="image-20211104175219629"></p>
<p>自定义模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175242442.png" alt="image-20211104175242442"></p>
<p>实例名</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175309394.png" alt="image-20211104175309394"></p>
<p>EM</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175402390.png" alt="image-20211104175402390"></p>
<p>使用统一密码</p>
<p><code>P@ssw0rd</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175458122.png" alt="image-20211104175458122"></p>
<p>使用建好的数据文件保存地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175606842.png" alt="image-20211104175606842"></p>
<p>关闭闪回和归档</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175643304.png" alt="image-20211104175643304"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175710858.png" alt="image-20211104175710858"></p>
<p>内存分配</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175742728.png" alt="image-20211104175742728"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175807092.png" alt="image-20211104175807092"></p>
<p>字符集配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175832188.png" alt="image-20211104175832188"></p>
<p>下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190456300.png" alt="image-20211104190456300"></p>
<p>下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190517979.png" alt="image-20211104190517979"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190603367.png" alt="image-20211104190603367"></p>
<p>等待创建完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190644897.png" alt="image-20211104190644897"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104194542389.png" alt="image-20211104194542389"></p>
<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">su <span class="operator">-</span> oracle</span><br><span class="line">sqlplus <span class="operator">/</span> <span class="keyword">as</span> sysdba</span><br><span class="line"></span><br><span class="line">## 重启后启动数据库</span><br><span class="line">startup</span><br><span class="line"></span><br><span class="line">shutdown immediate; # 关闭数据库</span><br><span class="line"></span><br><span class="line">$ echo $ORACLE_SID  <span class="comment">-- 实例ID</span></span><br><span class="line">....                    <span class="comment">--&gt;&gt; Look what you get</span></span><br><span class="line">$ echo $ORACLE_HOME <span class="comment">-- 安装目录</span></span><br><span class="line">....                  </span><br><span class="line">$ ps <span class="operator">-</span>ef <span class="operator">|</span> grep smon    <span class="comment">--&gt;&gt; Look for smon background process which</span></span><br><span class="line">ora_smon_InfraDB        <span class="comment">--&gt;&gt; should include ORACLE_SID in it.</span></span><br><span class="line"></span><br><span class="line">$ ORACLE_SID<span class="operator">=</span>InfraDB    <span class="comment">--&gt;&gt; set to a valid value like these ones.</span></span><br><span class="line">$ ORACLE_HOME<span class="operator">=</span><span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">12.2</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>dbhome_1</span><br><span class="line"></span><br><span class="line">$ lsnrctl status        <span class="comment">--&gt;&gt; Look whether listener is ON</span></span><br><span class="line">$ lsnrctl <span class="keyword">start</span>         <span class="comment">--&gt;&gt; If not, then start the listener.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v$database;</span><br><span class="line"></span><br><span class="line">##创建数据库用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> test identified <span class="keyword">by</span> test;</span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> test; # RESOURCE</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> session <span class="keyword">to</span> test</span><br><span class="line">conn test<span class="operator">/</span>test</span><br><span class="line"></span><br><span class="line">##创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id number <span class="keyword">not</span> <span class="keyword">null</span>,name varchar2(<span class="number">100</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;jonty&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211104194801063.png" alt="image-20211104194801063"></p>
<p><strong>注意</strong>：如果执行SQL命令<a href="https://stackoverflow.com/questions/50219312/ora-01034-oracle-not-available">ORA-01034: ORACLE not available</a>，可能是实例ID对不上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $ORACLE_SID   -- 查看当前实例</span><br><span class="line"></span><br><span class="line">echo $ORACLE_HOME -- 安装目录</span><br><span class="line"></span><br><span class="line">ORACLE_SID=medprodb  -- 设置</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211108134715074.png" alt="image-20211108134715074"></p>
<h2 id="数据库补丁安装"><a href="#数据库补丁安装" class="headerlink" title="数据库补丁安装"></a>数据库补丁安装</h2><h3 id="上传补丁"><a href="#上传补丁" class="headerlink" title="上传补丁"></a>上传补丁</h3><p>上传PSU文件夹到<code>/soft</code>目录下并解压</p>
<p> p6880880_112000_Linux-x86-64.zip</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211118190817028.png" alt="image-20211118190817028"></p>
<h3 id="关闭数据库服务"><a href="#关闭数据库服务" class="headerlink" title="关闭数据库服务"></a>关闭数据库服务</h3><p>停掉所有数据库服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl stop # 关闭监听</span><br><span class="line"></span><br><span class="line">emctl stop dbconsole; # 关闭EM</span><br><span class="line"></span><br><span class="line">shutdown immediate; # 关闭数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="替换OPatch"><a href="#替换OPatch" class="headerlink" title="替换OPatch"></a>替换OPatch</h3><p>替换<strong>OPatch</strong>工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $ORACLE_HOME</span><br><span class="line">cd /OPatch</span><br><span class="line">./opatch version</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118192559635.png" alt="image-20211118192559635"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv Opatch OPatch_old # 备份</span><br><span class="line">cp -r /soft/Opatch . # 复制</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118193207365.png" alt="image-20211118193207365"></p>
<h3 id="执行补丁脚本"><a href="#执行补丁脚本" class="headerlink" title="执行补丁脚本"></a>执行补丁脚本</h3><p>进入补丁目录</p>
<p>查看<code>README.html</code>文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opatch prereq CheckConflictAgainstOHWithDetail -ph ./</span><br><span class="line">opatch apply</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果OPatch failed with error code 73</span></span><br><span class="line">ps -ef|grep smon</span><br><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118194022739.png" alt="image-20211118194022739"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opatch lsinventory # 查看</span><br><span class="line"></span><br><span class="line">cd $ORACLE_HOME/rdbms/admin</span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">startup # 启动</span><br><span class="line">@catbundle.sql psu apply # 执行脚本</span><br><span class="line">@utlrp.sql</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118194940622.png" alt="image-20211118194940622"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211118195242997.png" alt="image-20211118195242997"></p>
<p>重启数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown immediate;</span><br><span class="line">startup;</span><br></pre></td></tr></table></figure>



<h2 id="基础维护"><a href="#基础维护" class="headerlink" title="基础维护"></a>基础维护</h2><h3 id="关闭密码过期"><a href="#关闭密码过期" class="headerlink" title="关闭密码过期"></a>关闭密码过期</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_profiles <span class="keyword">where</span> profile <span class="operator">=</span> <span class="string">&#x27;DEFAULT&#x27;</span>; # 查看</span><br><span class="line"><span class="keyword">alter</span> profile <span class="keyword">default</span> limit PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> audit; # 审计</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> audit_trail <span class="operator">=</span> <span class="keyword">none</span> <span class="keyword">scope</span> <span class="operator">=</span> spfile;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$datafile; # 查看数据文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> sga; # 查看sga</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> pga; # 查看pga</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> proc; # 进程数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> <span class="keyword">open</span>; # 游标</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> open_cursors <span class="operator">=</span> <span class="number">2000</span> <span class="keyword">scope</span> <span class="operator">=</span> spfile;</span><br></pre></td></tr></table></figure>



<h3 id="警告日志"><a href="#警告日志" class="headerlink" title="警告日志"></a>警告日志</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> dump</span><br><span class="line">cd <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118201536713.png" alt="image-20211118201536713"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211118201633885.png" alt="image-20211118201633885"></p>
<h3 id="归档日志"><a href="#归档日志" class="headerlink" title="归档日志"></a>归档日志</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> recover;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest_size<span class="operator">=</span><span class="number">5</span>g;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest <span class="operator">=</span> <span class="string">&#x27;/archive&#x27;</span>;</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line"><span class="keyword">alter</span> database archivelog;</span><br><span class="line">archive log list;</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure>

<p>配置完成后关闭，迁移数据后生产再打开</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line"><span class="keyword">alter</span> database noarchivelog;</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure>



<p>备份一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> root用户</span></span><br><span class="line">tar zcvf oracle.tar.gz /u01/app/oracle</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Oracle</tag>
        <tag>RedHat</tag>
      </tags>
  </entry>
  <entry>
    <title>52ABP开发MVC项目</title>
    <url>/2021/11/07/introduction-with-aspNet-core-and-entity-framework-core/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文介绍使用ASP.NET Core、Entity FrameWork Core和<a href="https://www.52abp.com/">52ABP</a>创建WEB.MVC项目。</p>
<p>在本文中将使用以下技术创建一个简单的跨平台<strong>分层</strong>Web应用程序：</p>
<ul>
<li>.NET Core作为基础跨平台应用程序开发框架</li>
<li><a href="https://www.52abp.com/">52ABP</a>作为启动模板和应用程序框架</li>
<li>ASP.NET Core 作为Web框架</li>
<li>Entity FrameWork Core 作为ORM框架</li>
<li>Bootstrap作为HHML和CSS框架</li>
<li>JQuery作为客户端Ajax和DOM库</li>
</ul>
<p>还包括52ABP启动模板中包含的：</p>
<ul>
<li>AutoMapper</li>
<li>分层架构</li>
<li>领域驱动设计(DDD)</li>
<li>依赖注入(DI)</li>
</ul>
<h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul>
<li><p>.NET SDK 5.0</p>
</li>
<li><p>Visual Studio 2019</p>
</li>
<li><p>SQL Server</p>
</li>
</ul>
<h2 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h2><p>使用52abp启动模板(<a href="https://www.52abp.com/Download)%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E2%80%9C**MyPortal**%E2%80%9D%E7%9A%84">https://www.52abp.com/Download)创建一个名为“**MyPortal**”的</a> Web应用程序。</p>
<p><img data-src="https://cdn.jonty.top/img/create-template-program.png"></p>
<p>创建了一个多层架构的解决方案</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106145537934.png" alt="image-20211106145537934"></p>
<p>包括7个以<code>MyPortal</code>开头的项目</p>
<ul>
<li>.Core项目针对领域/业务层（实体、领域服务）</li>
<li>.Application项目是针对应用层的（DTO、应用服务）</li>
<li>.EntityFramework项目用于EFCore集成</li>
<li>.Migrator项目用于迁移数据库</li>
<li>.WebCore用于Web服务公共层</li>
<li>.Web.MVC用于ASP.NET MVC层</li>
<li>.Tests项目用于测试</li>
</ul>
<p>创建数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Add-Migration &#x27;InitialDb&#x27;</span><br><span class="line">Update-Database</span><br></pre></td></tr></table></figure>

<p>运行应用程序</p>
<p>默认账号：admin</p>
<p>密码：bb123456</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106231550438.png" alt="image-20211106231550438"></p>
<p>首页</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106161022373.png" alt="image-20211106161022373"></p>
<h2 id="开发应用程序"><a href="#开发应用程序" class="headerlink" title="开发应用程序"></a>开发应用程序</h2><h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>我们在<strong>Core</strong>层创建一个Task实体</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"><span class="keyword">using</span> Abp.Domain.Entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学生表</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Table(<span class="meta-string">&quot;Abp_Student&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Entity</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称最大长度</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> MaxNameLength = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址最大长度</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> MaxAddressLength = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(MaxNameLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StringLength(MaxAddressLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Task</code>派生自<code>AuditedEntity</code>,默认情况下包含<code>Id</code>属性为<code>int</code>,也可以指定<code>Entity&lt;TPrimaryKey&gt;</code>来选择不同的<strong>PK</strong>类型</li>
</ul>
<h3 id="将实体添加到DbContext"><a href="#将实体添加到DbContext" class="headerlink" title="将实体添加到DbContext"></a>将实体添加到DbContext</h3><p><code>.EntityFrameWorkCore</code>项目包含一个预定义的<code>DbContext</code>,注册<code>Task</code>实体</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Abp.Zero.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Authorization.Roles;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Authorization.Users;</span><br><span class="line"><span class="keyword">using</span> MyPortal.MultiTenancy;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.EntityFrameworkCore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyPortalDbContext</span> : <span class="title">AbpZeroDbContext</span>&lt;<span class="title">Tenant</span>, <span class="title">Role</span>, <span class="title">User</span>, <span class="title">MyPortalDbContext</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Define a DbSet for each entity of the application */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyPortalDbContext</span>(<span class="params">DbContextOptions&lt;MyPortalDbContext&gt; options</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建数据库迁移"><a href="#创建数据库迁移" class="headerlink" title="创建数据库迁移"></a>创建数据库迁移</h3><p>创建数据库迁移<code>Abp_Tasks</code>表，选择默认项目<code>.EntityFrameWorkCore</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Add-Migration &#x27;Create_Abp_Tasks&#x27;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211106210823677.png" alt="image-20211106210823677"></p>
<p>生成的迁移类：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106210905907.png" alt="image-20211106210905907"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Migrations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Migrations</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">CreateStudentTable</span> : <span class="title">Migration</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            migrationBuilder.CreateTable(</span><br><span class="line">                name: <span class="string">&quot;Abp_Student&quot;</span>,</span><br><span class="line">                columns: table =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Id = table.Column&lt;<span class="built_in">int</span>&gt;(type: <span class="string">&quot;uniqueidentifier&quot;</span>, nullable: <span class="literal">false</span>),</span><br><span class="line">                    Name = table.Column&lt;<span class="built_in">string</span>&gt;(type: <span class="string">&quot;nvarchar(50)&quot;</span>, maxLength: <span class="number">50</span>, nullable: <span class="literal">false</span>),</span><br><span class="line">                    Age = table.Column&lt;<span class="built_in">int</span>&gt;(type: <span class="string">&quot;int&quot;</span>, nullable: <span class="literal">false</span>),</span><br><span class="line">                    Address = table.Column&lt;<span class="built_in">string</span>&gt;(type: <span class="string">&quot;nvarchar(200)&quot;</span>, maxLength: <span class="number">200</span>, nullable: <span class="literal">true</span>),</span><br><span class="line">                   </span><br><span class="line">                &#125;,</span><br><span class="line">                constraints: table =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    table.PrimaryKey(<span class="string">&quot;PK_Abp_Student&quot;</span>, x =&gt; x.Id);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            migrationBuilder.DropTable(</span><br><span class="line">                name: <span class="string">&quot;Abp_Student&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>程序包管理控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Update-Database</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211106210959548.png" alt="image-20211106210959548"></p>
<p>执行命令后会在<code>SQL Server</code>中创建一个名为<code>52AbpFree_db</code>的数据库，包含定义的实体表和迁移记录</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106211155510.png" alt="image-20211106211155510"></p>
<p>注意：数据库连接字符串在<code>.Web.Mvc</code>项目中的<code>appsettings.json</code>中配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;ConnectionStrings&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;Default&quot;</span>: <span class="string">&quot;Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=52AbpFree_db;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>应用服务层用于向表示层提供逻辑处理，表示层调用应用服务层，并以数据传输对象<code>DTO</code>作为参数，使用领域对象执行业务逻辑，并将<code>DTO</code>返回表示层。</p>
<p>我们在<code>.Application</code> 创建一个<code>StudentAppService</code>和对应的<code>IStudentAppService</code>,以执行相关的应用程序逻辑。</p>
<p>首先定义一个服务接口：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Abp.Application.Services;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学生应用服务接口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStudentAppService</span> : <span class="title">IAsyncCrudAppService</span>&lt;<span class="title">StudentDto</span>, <span class="title">int</span>, <span class="title">PagedStudentResultRequestDto</span>,</span><br><span class="line">        <span class="title">CreateStudentDto</span>, <span class="title">StudentDto</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义服务接口不是固定的，但是按照约定，所有的应用服务都应该实现<code>IApplicationService</code>。</p>
<p>并为此定义了以下<code>DTO</code>对象：</p>
<ul>
<li><strong>StudentDto</strong>:用于返回查询</li>
<li><strong>PagedStudentResultRequestDto</strong>：用于分页和搜索过滤</li>
<li><strong>CreateStudentDto</strong>：用于新增或修改</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"><span class="keyword">using</span> Abp.AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students.Dtos</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AutoMap(typeof(Student))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentDto</span>:<span class="title">EntityDto</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(Student.MaxNameLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StringLength(Student.MaxAddressLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"><span class="keyword">using</span> Abp.AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students.Dtos</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AutoMapTo(typeof(Student))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateStudentDto</span>:<span class="title">EntityDto</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(Student.MaxNameLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StringLength(Student.MaxAddressLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students.Dtos</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PagedStudentResultRequestDto</span> : <span class="title">PagedResultRequestDto</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Keyword &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：[AutoMapFrom]属性用来创建<code>Student</code>=&gt;<code>Dto</code>的<strong>AutoMapper</strong>映射</p>
<p>现在我们可以实现<code>IStudentAppService</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services;</span><br><span class="line"><span class="keyword">using</span> Abp.Domain.Repositories;</span><br><span class="line"><span class="keyword">using</span> Abp.Extensions;</span><br><span class="line"><span class="keyword">using</span> Abp.Linq.Extensions;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentAppService</span> : <span class="title">AsyncCrudAppService</span>&lt;<span class="title">Student</span>, <span class="title">StudentDto</span>, <span class="title">int</span>, <span class="title">PagedStudentResultRequestDto</span>, <span class="title">CreateStudentDto</span>, <span class="title">StudentDto</span>&gt;, <span class="title">IStudentAppService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StudentAppService</span>(<span class="params">IRepository&lt;Student, <span class="built_in">int</span>&gt; repository</span>) : <span class="title">base</span>(<span class="params">repository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IQueryable&lt;Student&gt; <span class="title">CreateFilteredQuery</span>(<span class="params">PagedStudentResultRequestDto input</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Repository.GetAll()</span><br><span class="line">                .WhereIf(!input.Keyword.IsNullOrWhiteSpace(), x =&gt; x.Name.Contains(input.Keyword));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>StudentAppService</strong>继承自<strong>AsyncCrudAppService</strong></li>
<li>使用构造函数注入<strong>IRepository</strong></li>
</ul>
<p><strong>AsyncCrudAppService</strong>帮我们实现了基本的增删改查操作：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107101650994.png" alt="image-20211107101650994"></p>
<p>目录结构：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107101751193.png" alt="image-20211107101751193"></p>
<h3 id="学生列表视图"><a href="#学生列表视图" class="headerlink" title="学生列表视图"></a>学生列表视图</h3><h4 id="添加新的菜单项"><a href="#添加新的菜单项" class="headerlink" title="添加新的菜单项"></a>添加新的菜单项</h4><p>在<strong>MyPortal.Web</strong>项目中<code>Startup -&gt; MyPortalNavigationProvider</code>中添加新的菜单项</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Abp.Application.Navigation;</span><br><span class="line"><span class="keyword">using</span> Abp.Authorization;</span><br><span class="line"><span class="keyword">using</span> Abp.Localization;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Web.Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This class defines menus for the application.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyPortalNavigationProvider</span> : <span class="title">NavigationProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetNavigation</span>(<span class="params">INavigationProviderContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.Manager.MainMenu</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.About,</span><br><span class="line">                        L(<span class="string">&quot;About&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-info-circle&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Home,</span><br><span class="line">                        L(<span class="string">&quot;HomePage&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-home&quot;</span>,</span><br><span class="line">                        requiresAuthentication: <span class="literal">true</span></span><br><span class="line">                    )</span><br><span class="line">                ).AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Tenants,</span><br><span class="line">                        L(<span class="string">&quot;Tenants&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;Tenants&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-building&quot;</span>,</span><br><span class="line">                        permissionDependency: <span class="keyword">new</span> SimplePermissionDependency(PermissionNames.Pages_Tenants)</span><br><span class="line">                    )</span><br><span class="line">                ).AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Users,</span><br><span class="line">                        L(<span class="string">&quot;Users&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;Users&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-users&quot;</span>,</span><br><span class="line">                        permissionDependency: <span class="keyword">new</span> SimplePermissionDependency(PermissionNames.Pages_Users)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Roles,</span><br><span class="line">                        L(<span class="string">&quot;Roles&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;Roles&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-theater-masks&quot;</span>,</span><br><span class="line">                        permissionDependency: <span class="keyword">new</span> SimplePermissionDependency(PermissionNames.Pages_Roles)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">// 学生列表菜单</span></span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Students, <span class="comment">// 菜单名称</span></span><br><span class="line">                        L(<span class="string">&quot;Students&quot;</span>), <span class="comment">// 显示名称</span></span><br><span class="line">                        url: <span class="string">&quot;Students&quot;</span>, <span class="comment">// Url地址 对应Controller名称</span></span><br><span class="line">                        icon: <span class="string">&quot;fa fa-tasks&quot;</span> <span class="comment">// 图标</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        <span class="string">&quot;MultiLevelMenu&quot;</span>,</span><br><span class="line">                        L(<span class="string">&quot;MultiLevelMenu&quot;</span>),</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-circle&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ILocalizableString <span class="title">L</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LocalizableString(name, MyPortalConsts.LocalizationSourceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="创建Controller和View"><a href="#创建Controller和View" class="headerlink" title="创建Controller和View"></a>创建Controller和View</h4><p>在<strong>Web.MVC</strong>项目下新建新的控制器类<strong>StudentsController</strong>:</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106222518121.png" alt="image-20211106222518121"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Controllers;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Web.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentsController</span>: <span class="title">MyPortalControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IStudentAppService _studentAppService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StudentsController</span>(<span class="params">IStudentAppService studentAppService</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _studentAppService = studentAppService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span> =&gt; View();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">EditModal</span>(<span class="params"><span class="built_in">int</span> studentId</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> tenantDto = <span class="keyword">await</span> _studentAppService.GetAsync(<span class="keyword">new</span> EntityDto(studentId));</span><br><span class="line">            <span class="keyword">return</span> PartialView(<span class="string">&quot;_EditModal&quot;</span>, tenantDto);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>StudentsController</strong>继承自<strong>MyPortalControllerBase</strong></li>
<li>**Index()**返回一个视图</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20211106222653044.png" alt="image-20211106222653044"></p>
<ul>
<li>使用构造函数注入<strong>IStudentAppService</strong></li>
</ul>
<h4 id="学生列表视图-1"><a href="#学生列表视图-1" class="headerlink" title="学生列表视图"></a>学生列表视图</h4><p>学生展示列表如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using MyPortal.Web.Startup</span><br><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = L(&quot;Students&quot;);</span><br><span class="line">    ViewBag.CurrentPageName = PageNames.Students;</span><br><span class="line">&#125;</span><br><span class="line">@section scripts</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">names</span>=<span class="string">&quot;Development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/view-resources/Views/Students/Index.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">names</span>=<span class="string">&quot;Staging,Production&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/view-resources/Views/Students/Index.min.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>@L(&quot;Students&quot;)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#StudentCreateModal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue float-sm-right&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus-square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    @L(&quot;CreateNewStudent&quot;)</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--Use for bulk actions--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">                                @await Html.PartialAsync(&quot;~/Views/Students/Index.AdvancedSearch.cshtml&quot;)</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;StudentsTable&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>@L(&quot;Name&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>@L(&quot;Age&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>@L(&quot;Address&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px&quot;</span>&gt;</span>@L(&quot;Actions&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@await Html.PartialAsync(&quot;~/Views/Students/_CreateModal.cshtml&quot;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentEditModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;StudentEditModalLabel&quot;</span> <span class="attr">data-backdrop</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们加入了<strong>新增</strong>、<strong>编辑</strong>、<strong>删除</strong>以及<strong>搜索</strong>的按钮，将在后续补充完整</p>
<p>可以看到，我们为此视图引入了对应的<code>js</code>文件，并放在<strong>wwwroot</strong>静态资源目录下</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107104617786.png" alt="image-20211107104617786"></p>
<p>并使用<code>Jquery</code>来渲染我们的表格：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _studentService = abp.services.app.student,</span><br><span class="line">        l = abp.localization.getSource(<span class="string">&#x27;MyPortal&#x27;</span>),</span><br><span class="line">        _$modal = $(<span class="string">&#x27;#StudentCreateModal&#x27;</span>),</span><br><span class="line">        _$form = _$modal.find(<span class="string">&#x27;form&#x27;</span>),</span><br><span class="line">        _$table = $(<span class="string">&#x27;#StudentsTable&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _$studentsTable = _$table.DataTable(&#123;</span><br><span class="line">        <span class="attr">paging</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">serverSide</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ajax</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, callback, settings</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> filter = $(<span class="string">&#x27;#StudentSearchForm&#x27;</span>).serializeFormToObject(<span class="literal">true</span>);</span><br><span class="line">            filter.maxResultCount = data.length;</span><br><span class="line">            filter.skipCount = data.start;</span><br><span class="line"></span><br><span class="line">            abp.ui.setBusy(_$table);</span><br><span class="line">            _studentService.getAll(filter).done(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                callback(&#123;</span><br><span class="line">                    <span class="attr">recordsTotal</span>: result.totalCount,</span><br><span class="line">                    <span class="attr">recordsFiltered</span>: result.totalCount,</span><br><span class="line">                    <span class="attr">data</span>: result.items</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                abp.ui.clearBusy(_$table);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">buttons</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;refresh&#x27;</span>,</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;&lt;i class=&quot;fas fa-redo-alt&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">                <span class="attr">action</span>: <span class="function">() =&gt;</span> _$studentsTable.draw(<span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">responsive</span>: &#123;</span><br><span class="line">            <span class="attr">details</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;column&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">columnDefs</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">className</span>: <span class="string">&#x27;control&#x27;</span>,</span><br><span class="line">                <span class="attr">defaultContent</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;address&#x27;</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">autoWidth</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">defaultContent</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">render</span>: <span class="function">(<span class="params">data, type, row, meta</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> [</span><br><span class="line">                        <span class="string">`   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm bg-secondary edit-student&quot; data-student-id=&quot;<span class="subst">$&#123;row.id&#125;</span>&quot; data-toggle=&quot;modal&quot; data-target=&quot;#StudentEditModal&quot;&gt;`</span>,</span><br><span class="line">                        <span class="string">`       &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt; <span class="subst">$&#123;l(<span class="string">&#x27;Edit&#x27;</span>)&#125;</span>`</span>,</span><br><span class="line">                        <span class="string">&#x27;   &lt;/button&gt;&#x27;</span>,</span><br><span class="line">                        <span class="string">`   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm bg-danger delete-student&quot; data-student-id=&quot;<span class="subst">$&#123;row.id&#125;</span>&quot; data-student-name=&quot;<span class="subst">$&#123;row.name&#125;</span>&quot;&gt;`</span>,</span><br><span class="line">                        <span class="string">`       &lt;i class=&quot;fas fa-trash&quot;&gt;&lt;/i&gt; <span class="subst">$&#123;l(<span class="string">&#x27;Delete&#x27;</span>)&#125;</span>`</span>,</span><br><span class="line">                        <span class="string">&#x27;   &lt;/button&gt;&#x27;</span></span><br><span class="line">                    ].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>abp.services.app.student</strong>用来获取<code>StudentAppService</code></p>
</li>
<li><p><code>l = abp.localization.getSource(&#39;MyPortal&#39;)</code>获取本地化资源</p>
</li>
<li><p><strong>columnDefs</strong>中定义表格字段</p>
</li>
</ul>
<p>页面效果如下：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107104031390.png" alt="image-20211107104031390"></p>
<h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><p>我们在视图中使用了<strong>L</strong>方法，它用于<strong>本地化</strong>字符串。可以在<code>.Core</code>项目下的本地资源中找到它并配置：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107105529411.png" alt="image-20211107105529411"></p>
<p>我们将页面需要的字符串添加到对应语言的<strong>XML</strong>文件下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;Students&quot;</span> <span class="attr">value</span>=<span class="string">&quot;学生列表&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;地址&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;年龄&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;EditStudent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;编辑学生&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;CreateNewStudent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加学生&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="过滤学生视图"><a href="#过滤学生视图" class="headerlink" title="过滤学生视图"></a>过滤学生视图</h4><p>我们新建一个视图文件<code>Index.AdvancedSearch.cshtml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;abp-advanced-search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;StudentSearchForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue btn-search&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-search&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Keyword&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control txt-search&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入并使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@await Html.PartialAsync(<span class="string">&quot;~/Views/Students/Index.AdvancedSearch.cshtml&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>对应的，在<code>index.js</code>文件中加入<strong>搜索触发事件</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.btn-search&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">     _$studentsTable.ajax.reload();</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">&#x27;.txt-search&#x27;</span>).on(<span class="string">&#x27;keypress&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (e.which == <span class="number">13</span>) &#123;</span><br><span class="line">         _$studentsTable.ajax.reload();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>在<code>StudentAppService</code>中重写过滤查询方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IQueryable&lt;Student&gt; <span class="title">CreateFilteredQuery</span>(<span class="params">PagedStudentResultRequestDto input</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Repository.GetAll()</span><br><span class="line">                .WhereIf(!input.Keyword.IsNullOrWhiteSpace(), x =&gt; x.Name.Contains(input.Keyword));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>查看效果：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107110550326.png" alt="image-20211107110550326"></p>
<h3 id="新增学生视图"><a href="#新增学生视图" class="headerlink" title="新增学生视图"></a>新增学生视图</h3><p>首先创建一个<strong>新增学生</strong>的模态框视图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using MyPortal.Web.Models.Common.Modals</span><br><span class="line">@model MyPortal.Web.Models.Students.StudentListViewModel</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentCreateModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;StudentCreateModalLabel&quot;</span> <span class="attr">data-backdrop</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            @await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalHeader.cshtml&quot;, new ModalHeaderViewModel(L(&quot;CreateNewStudent&quot;)))</span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;roleCreateForm&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>@L(&quot;Name&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>@L(&quot;Age&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">max</span>=<span class="string">&quot;130&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>@L(&quot;Address&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                @await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml&quot;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为此，我们需要新建一个<strong>视图模型类</strong>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Web.Models.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentListViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> IReadOnlyList&lt;StudentDto&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211107112541841.png" alt="image-20211107112541841"></p>
<p>最后我们在<code>index.js</code>中加入<strong>创建学生</strong>的请求方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_$form.find(<span class="string">&#x27;.save-button&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_$form.valid()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> student = _$form.serializeFormToObject();</span><br><span class="line"></span><br><span class="line">    abp.ui.setBusy(_$modal);</span><br><span class="line"></span><br><span class="line">    _studentService</span><br><span class="line">        .create(student)</span><br><span class="line">        .done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            _$modal.modal(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">            _$form[<span class="number">0</span>].reset();</span><br><span class="line">            abp.notify.info(l(<span class="string">&#x27;SavedSuccessfully&#x27;</span>));</span><br><span class="line">            _$studentsTable.ajax.reload();</span><br><span class="line">        &#125;)</span><br><span class="line">        .always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            abp.ui.clearBusy(_$modal);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>查看效果：</p>
<p>点击<strong>添加学生</strong>按钮，弹出<strong>模态框</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107113021877.png" alt="image-20211107113021877"></p>
<p>我们输入数据，并点击保存：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107113201560.png" alt="image-20211107113201560"></p>
<p>可以看，表格中已经将我们刚刚新增的数据展示出来了</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107113240720.png" alt="image-20211107113240720"></p>
<h3 id="编辑学生视图"><a href="#编辑学生视图" class="headerlink" title="编辑学生视图"></a>编辑学生视图</h3><p>我们先创建一个<strong>编辑页面</strong>视图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using MyPortal.Web.Models.Common.Modals</span><br><span class="line">@model MyPortal.Students.Dtos.StudentDto</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line">@await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalHeader.cshtml&quot;, new ModalHeaderViewModel(L(&quot;EditStudent&quot;)))</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;StudentEditForm&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>@L(&quot;Name&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Name&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>@L(&quot;Age&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Age&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;128&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>@L(&quot;Address&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Address&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    @await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml&quot;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/view-resources/Views/Students/_EditModal.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>并创建一个<strong>编辑视图</strong>的<code>_EditModal.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _studentService = abp.services.app.student,</span><br><span class="line">        l = abp.localization.getSource(<span class="string">&#x27;MyPortal&#x27;</span>),</span><br><span class="line">        _$modal = $(<span class="string">&#x27;#StudentEditModal&#x27;</span>),</span><br><span class="line">        _$form = _$modal.find(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_$form.valid()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> student = _$form.serializeFormToObject();</span><br><span class="line"></span><br><span class="line">        abp.ui.setBusy(_$form);</span><br><span class="line">        _studentService.update(student).done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            _$modal.modal(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">            abp.notify.info(l(<span class="string">&#x27;SavedSuccessfully&#x27;</span>));</span><br><span class="line">            abp.event.trigger(<span class="string">&#x27;student.edited&#x27;</span>, student);</span><br><span class="line">        &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            abp.ui.clearBusy(_$form);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _$form.closest(<span class="string">&#x27;div.modal-content&#x27;</span>).find(<span class="string">&quot;.save-button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        save();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _$form.find(<span class="string">&#x27;input&#x27;</span>).on(<span class="string">&#x27;keypress&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.which === <span class="number">13</span>) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _$modal.on(<span class="string">&#x27;shown.bs.modal&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _$form.find(<span class="string">&#x27;input[type=text]:first&#x27;</span>).focus();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>

<p>在<code>Index</code>页面，当我们点击编辑时，需要先查询当前实体，然后填充到编辑视图中去：</p>
<p>在<code>index.js</code>中加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.edit-student&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> studentId = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;data-student-id&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    abp.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: abp.appPath + <span class="string">&#x27;Students/EditModal?studentId=&#x27;</span> + studentId,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;#StudentEditModal div.modal-content&#x27;</span>).html(content);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>对应的，在<strong>StudentController</strong>中需要添加<strong>EditModal</strong>方法，并接收一个<strong>studentId</strong>参数，如下：</p>
<p>根据学生Id查询当前编辑的学生，并将值返回给编辑的模态框</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">EditModal</span>(<span class="params"><span class="built_in">int</span> studentId</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">var</span> tenantDto = <span class="keyword">await</span> _studentAppService.GetAsync(<span class="keyword">new</span> EntityDto(studentId));</span><br><span class="line">          <span class="keyword">return</span> PartialView(<span class="string">&quot;_EditModal&quot;</span>, tenantDto);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>我们将前面新增的数据<code>jiejie</code>的年龄更改为<code>202</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115502392.png" alt="image-20211107115502392"></p>
<p>保存后刷新列表并且右下角弹出<strong>保存成功</strong>，编辑功能就完成了</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115543250.png" alt="image-20211107115543250"></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>删除需要我们传入要删除的学生Id,我们只需要在<code>index.js</code>中加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteStudent</span>(<span class="params">studentId, studentName</span>) </span>&#123;</span><br><span class="line">    abp.message.confirm(</span><br><span class="line">        abp.utils.formatString(</span><br><span class="line">            l(<span class="string">&#x27;AreYouSureWantToDelete&#x27;</span>),</span><br><span class="line">            studentName</span><br><span class="line">        ),</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="function">(<span class="params">isConfirmed</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConfirmed) &#123;</span><br><span class="line">                _studentService</span><br><span class="line">                    .delete(&#123;</span><br><span class="line">                        <span class="attr">id</span>: studentId</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .done(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        abp.notify.info(l(<span class="string">&#x27;SuccessfullyDeleted&#x27;</span>));</span><br><span class="line">                        _$studentsTable.ajax.reload();</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击删除，弹出提示框：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115722754.png" alt="image-20211107115722754"></p>
<p>点击确定，刷新列表并弹出删除成功提示</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115801144.png" alt="image-20211107115801144"></p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>你可以从以下仓库地址获取源码：</p>
<p><a href="https://github.com/JontyMin/52abp_examples/tree/main/src/MyPortal/src/myportal-aspnet-core">https://github.com/JontyMin/52abp_examples/tree/main/src/MyPortal/src/myportal-aspnet-core</a></p>
<blockquote>
<p>版权声明：本人为52abp社区成员，与52abp社区wiki内容一致，不存在内容侵权。</p>
<p>本文PR:<a href="https://github.com/52ABP/Documents/pull/109">https://github.com/52ABP/Documents/pull/109</a></p>
</blockquote>
]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>MVC</tag>
        <tag>EF Core</tag>
        <tag>52ABP</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】SQL Server优化-索引</title>
    <url>/2022/05/22/sql-optimization-index/</url>
    <content><![CDATA[<h1 id="数据如何存储在SQL数据库中"><a href="#数据如何存储在SQL数据库中" class="headerlink" title="数据如何存储在SQL数据库中"></a>数据如何存储在SQL数据库中</h1><img data-src="https://cdn.jonty.top/img/database-index-structure.jpg" alt="数据库索引结构" style="zoom: 33%;" />

<h2 id="数据如何物理存储在-SQL-Server-中"><a href="#数据如何物理存储在-SQL-Server-中" class="headerlink" title="数据如何物理存储在 SQL Server 中"></a>数据如何物理存储在 SQL Server 中</h2><p>你有没有想过SQL Server 如何在内部物理存储表数据？表中的数据在逻辑上以<strong>行和列</strong>格式存储，但在物理上它将数据存储在称为<strong>数据页</strong>的东西中，数据页是 SQL Server 中数据存储的<strong>基本单位</strong>，大小为 <strong>8KB</strong>。当我们将任何数据插入到 SQL Server 数据库表中时，它会将这些数据保存到一系列 8 KB 数据页中。</p>
<img data-src="https://cdn.jonty.top/img/how-is-data-stored-physically-in-sql-server.png" alt="数据是如何物理存储在 sql server 中的" style="zoom:50%;" />

<h2 id="SQL-Server-中的数据存储在树状结构中"><a href="#SQL-Server-中的数据存储在树状结构中" class="headerlink" title="SQL Server 中的数据存储在树状结构中"></a>SQL Server 中的数据存储在树状结构中</h2><p>SQL Server 中的表数据实际上存储在树状结构中。我们通过一个简单的例子来理解这一点。</p>
<img data-src="https://cdn.jonty.top/img/how-is-data-stored-in-sql-database.jpg" alt="数据是如何物理存储在 sql server 中的" style="zoom: 33%;" />

<ul>
<li><code>EmployeeId</code> 是主键列，所以默认情况下，会在这个<code>EmployeeId </code>列上创建一个<strong>聚集索引</strong></li>
<li>物理存储在数据库中的数据按 <code>EmployeeId</code> 列排序</li>
</ul>
<h2 id="数据实际存储在哪里"><a href="#数据实际存储在哪里" class="headerlink" title="数据实际存储在哪里"></a>数据实际存储在哪里</h2><p>它存储在树状结构中的一系列数据页中。如下所示。</p>
<p>这种树状结构称为 B-Tree、索引 B-Tree 或聚集索引结构（含义相同）。</p>
<img data-src="https://www.pragimtech.com/blog/contribute/article_images/1220210328005839/how-sql-server-stores-data-internally.png" alt="sql server 如何在内部存储数据" style="zoom:33%;" />



<ul>
<li><p>在树底部看到的节点称为<strong>数据页</strong>或树的叶节点，这些叶节点包含我们的表数据。</p>
</li>
<li><p>每个数据页的大小为 8 KB，每个数据页中存储的行数实际上取决于每行的大小。</p>
</li>
</ul>
<p>对于上述示例，假设在<code> Employees</code> 表中有 1200 行数据，在每个数据页中有 200 行数据，但实际上根据行数据的大小，数量可能会有上下浮动。我们假设每个数据页有 200 行。这些数据页中的行按 <code>EmployeeId</code> 列排序，因为<code>EmployeeId</code>是表的主键(聚集索引)。</p>
<p>在第一个数据页中有 1 到 200 行，在第二个数据页中有 201 到 400 行，在第三个 401 到 600 行，依此类推…</p>
<p>树顶部的节点称为<strong>根节点</strong>。根节点和叶节点之间的节点称为<strong>中间层</strong>，可以有多个中间层，中间层的数量取决于基础数据库表中的行数。</p>
<p>根节点和中间层节点包含索引行，叶节点（即树底部的节点）包含实际数据行。每个索引行包含一个键值（在我们的例子中是员工 ID）和一个指向 B Tree中的中间层或叶节点中的数据行的指针。 这种树状结构有一系列指针，可以帮助数据库引擎快速找到数据。</p>
<h2 id="SQL-Server-如何通过-ID-查找行"><a href="#SQL-Server-如何通过-ID-查找行" class="headerlink" title="SQL Server 如何通过 ID 查找行"></a>SQL Server 如何通过 ID 查找行</h2><p>假设我们要查找 <code>EmployeeId = 1120</code> 的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> EmployeeId <span class="operator">=</span> <span class="number">1120</span>;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/how-data-is-stored-in-sql-database.jpg" alt="数据如何存储在sql数据库中" style="zoom:33%;" />

<p>第一步：数据库引擎从根节点开始，它选择右边的索引节点，因为数据库引擎知道这个节点包含从 801 到 1200 的员工 ID。</p>
<p>第二步：选择最右边的叶节点，因为从 1001 到 1200 的员工数据行存在于该叶节点中。</p>
<p>第三步：叶节点中的数据行按员工 ID 排序，因此数据库引擎很容易找到 ID = 1120 的数据行。</p>
<p>只需 3 次操作，SQL Server 就能找到我们要查找的数据。如果有上百甚至上千万条记录，SQL Server 也可以方便快捷地找到我们要查找的数据，前提是有一个<strong>索引</strong>可以帮助查询查找数据。</p>
<h1 id="索引是如何工作的"><a href="#索引是如何工作的" class="headerlink" title="索引是如何工作的"></a>索引是如何工作的</h1><h2 id="创建员工表"><a href="#创建员工表" class="headerlink" title="创建员工表"></a>创建员工表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Employees</span><br><span class="line">(</span><br><span class="line">	Id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,</span><br><span class="line">	[Name] nvarchar(<span class="number">50</span>),</span><br><span class="line">	Email nvarchar(<span class="number">50</span>),</span><br><span class="line">	Department nvarchar(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line">Go</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">Declare</span> <span class="variable">@counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">While(<span class="variable">@counter</span> <span class="operator">&lt;=</span> <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="keyword">Declare</span> <span class="variable">@Name</span> nvarchar(<span class="number">50</span>) <span class="operator">=</span> <span class="string">&#x27;ABC &#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>)</span><br><span class="line">	<span class="keyword">Declare</span> <span class="variable">@Email</span> nvarchar(<span class="number">50</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>) <span class="operator">+</span> <span class="string">&#x27;@jonty.top&#x27;</span></span><br><span class="line">	<span class="keyword">Declare</span> <span class="variable">@Dept</span> nvarchar(<span class="number">10</span>) <span class="operator">=</span> <span class="string">&#x27;Dept &#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">Insert</span> <span class="keyword">into</span> Employees <span class="keyword">values</span> (<span class="variable">@Name</span>, <span class="variable">@Email</span>, <span class="variable">@Dept</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">Set</span> <span class="variable">@counter</span> <span class="operator">=</span> <span class="variable">@counter</span> <span class="operator">+</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">	If(<span class="variable">@Counter</span><span class="operator">%</span><span class="number">100000</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">		Print RTRIM(<span class="variable">@Counter</span>) <span class="operator">+</span> <span class="string">&#x27; rows inserted&#x27;</span></span><br><span class="line"><span class="keyword">End</span></span><br></pre></td></tr></table></figure>

<h2 id="聚集索引搜索"><a href="#聚集索引搜索" class="headerlink" title="聚集索引搜索"></a>聚集索引搜索</h2><img data-src="https://cdn.jonty.top/img/include-actual-execution-plan-in-sql-server.png" alt="在 sql server 中包含实际的执行计划" style="zoom:33%;" />

<p>在 SSMS 中单击<code>Include Actual Execution Plan</code>图标，然后执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> Id <span class="operator">=</span> <span class="number">932000</span>;</span><br></pre></td></tr></table></figure>



<p>实际执行计划如下:</p>
<img data-src="https://cdn.jonty.top/img/clustered-index-seek.png" alt="聚集索引查找" style="zoom:33%;" />

<p>这里操作是 Clustered Index Seek，数据库引擎使用员工 Id 列上的<strong>聚集索引</strong>来查找 <code>Id = 932000 </code>的员工行</p>
<ul>
<li>Number of Rows Read (读取的行数) = 1</li>
<li>Actual Number of Rows for All Executions (所有执行的实际行数 )= 1</li>
</ul>
<p>读取的行数，是指SQL 服务器为产生查询结果而必须读取的行数。</p>
<p>在我们的例子中，员工 ID 是唯一的，结果集为 1 行，这由所有执行的实际行数表示。</p>
<p>在索引的帮助下，SQL Server 能够直接读取我们需要的 1 个特定员工行。所以，读取的行数和所有执行的实际行数都是 1。</p>
<p>如果有上百甚至上千万条记录，SQL Server 都可以方便快捷地找到我们要查找的数据，前提是有一个<strong>索引</strong>可以帮助查询数据。</p>
<h2 id="聚集索引扫描"><a href="#聚集索引扫描" class="headerlink" title="聚集索引扫描"></a>聚集索引扫描</h2><p>在这个例子中，<code>EmployeeId </code>列上有一个<strong>聚集索引</strong>，当我们通过员工 id 搜索时，SQL Server 可以快速地找到我们要查找的数据。</p>
<p>那如果我们按员工姓名搜索怎么办？<code>Name</code> 列上没有创建索引，因此 SQL Server 没有简单的方法找到我们要查找的数据，必须读取表中的每条记录，从性能的角度来看，效率是非常低的。</p>
<p><code>Include Actual Execution Plan</code>在打开的情况下执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">Where</span> Name <span class="operator">=</span> <span class="string">&#x27;ABC 932000&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>实际执行计划如下:</p>
<img data-src="https://cdn.jonty.top/img/clustered-index-scan.png" alt="聚集索引扫描" style="zoom:33%;" />

<p>注意，这里操作的操作是<code>Clustered Index Scan</code>。由于没有合适的索引，数据库引擎只能读取表中的每条记录。</p>
<ul>
<li>Number of Rows Read (读取的行数) = 1000000</li>
<li>Actual Number of Rows for All Executions (所有执行的实际行数 )= 1</li>
</ul>
<p>我们需要的结果只有1行，只有一名员工的姓名 = ‘ABC 932000’。而要查询这一条数据，SQL Server 必须从表中读取所有的数据行。</p>
<p>这被称为索引扫描，索引扫描对性能有影响。</p>
<h2 id="SQL-Server-中的非聚集索引"><a href="#SQL-Server-中的非聚集索引" class="headerlink" title="SQL Server 中的非聚集索引"></a>SQL Server 中的非聚集索引</h2><p>在<code>Name</code>字段上创建非聚集索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED INDEX IX_Employees_Name</span><br><span class="line"><span class="keyword">ON</span> [dbo].[Employees] ([Name])</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/non-clustered-index-structure-in-sql-server.png" alt="non clustered index structure in sql server" style="zoom:33%;" />

<p>在非集群索引中，我们没有表的数据。我们有键值和行定位器。我们在 Name 列上创建了一个<strong>非聚集索引</strong>，键值（在本例中为 Employee Name）按字母顺序排序和存储。树底部的行定位器包含员工姓名和行主键，也就是<code>Employee Id</code>。</p>
<p>打开<code>包括实际执行计划</code>执行以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">Where</span> Name <span class="operator">=</span> <span class="string">&#x27;ABC 932000&#x27;</span>;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/sql-server-execution-plan-example.png" alt="sql server 执行计划示例" style="zoom: 50%;" />

<h2 id="非聚集索引的运行情况"><a href="#非聚集索引的运行情况" class="headerlink" title="非聚集索引的运行情况"></a>非聚集索引的运行情况</h2><p>当我们执行查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> Name<span class="operator">=</span><span class="string">&#x27;David&#x27;</span></span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/how-does-a-non-clustered-index-point-to-the-data.png" alt="非聚集索引如何指向数据" style="zoom: 33%;" />

<ul>
<li>SQL Server 使用 <code>Name</code> 列上的非聚集索引在索引中快速找到该员工条目。</li>
<li>在非聚集索引以及员工姓名中，我们还有集群键（在我们的例子中是 <code>Employee Id</code>）。</li>
<li>数据库引擎知道<code> Employee Id</code>上有<strong>聚集索引</strong>，使用<code>Employee Id</code>查找相应的员工记录。</li>
</ul>
<blockquote>
<p>注意：在名称列上有和没有非聚集索引的估计查询成本。</p>
</blockquote>
<img data-src="https://cdn.jonty.top/img/how-nonclustered-index-works.png" alt="how nonclustered index works" style="zoom: 50%;" />

]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>SQL-Index</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 19c RAC集群搭建</title>
    <url>/2022/01/12/rhel7-6-install-oracle19c-rac/</url>
    <content><![CDATA[<h3 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a>系统规划</h3><p>项目环境：虚拟机</p>
<p>主机：3台 </p>
<ul>
<li>2台运行RAC集群</li>
<li>1台共享存储</li>
</ul>
<p>CPU和内存资源：</p>
<p>RAC集群：4U/8G</p>
<p>共享存储：2U/4G</p>
<h3 id="网络规划"><a href="#网络规划" class="headerlink" title="网络规划"></a>网络规划</h3><p>Public IP (内部访问)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.63 rac1</span><br><span class="line">192.168.2.64 rac2</span><br></pre></td></tr></table></figure>

<p>Private IP（节点心跳网络）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10.10.10.63 rac1-priv</span><br><span class="line">10.10.10.64 rac2-priv</span><br></pre></td></tr></table></figure>

<p>Virtual IP（提供客户端访问 漂移）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.65 rac1-vip</span><br><span class="line">192.168.2.66 rac2-vip</span><br></pre></td></tr></table></figure>

<p>SCAN IP（客户端访问 均衡）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.67</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>节点</th>
<th>主机版本</th>
<th>主机名</th>
<th>实例名</th>
<th>Oracle版本</th>
<th>public ip</th>
<th>private ip</th>
<th>virtual ip</th>
<th>scan ip</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>rhel7.6</td>
<td>rac1</td>
<td>mesdb1</td>
<td>19.3</td>
<td>192.168.2.63</td>
<td>10.10.10.63</td>
<td>192.168.2.65</td>
<td>192.168.2.67</td>
</tr>
<tr>
<td>2</td>
<td>rhel7.6</td>
<td>rac2</td>
<td>mesdb2</td>
<td>19.3</td>
<td>192.168.2.64</td>
<td>10.10.10.64</td>
<td>192.168.2.66</td>
<td>192.168.2.67</td>
</tr>
</tbody></table>
<h3 id="存储规划"><a href="#存储规划" class="headerlink" title="存储规划"></a>存储规划</h3><p><strong>系统：</strong></p>
<ul>
<li><p>/:50g</p>
</li>
<li><p>/oracle:100g</p>
</li>
<li><p>/backup:200g</p>
</li>
</ul>
<p><strong>共享存储</strong></p>
<ul>
<li><p>dggrid1 :1g*3</p>
</li>
<li><p>dggrid2 :1g*3</p>
</li>
<li><p>dgsystem:8g*1</p>
</li>
<li><p>dgrecovery:3g*1</p>
</li>
<li><p>dgdata01:2g*1</p>
</li>
</ul>
<p><strong>生产数据库空间要求</strong>：1T数据</p>
<ul>
<li><p>dggrid1 :2g*3</p>
</li>
<li><p>dggrid2 :2g*3</p>
</li>
<li><p>dgsystem:200g*1</p>
</li>
<li><p>dgrecovery:1T= 200g*5</p>
</li>
<li><p>dgdata01:1T= 200g*5</p>
</li>
<li><p>备份：/backup 3T= 1T *3</p>
</li>
</ul>
<h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><h4 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">Public IP</span></span><br><span class="line">192.168.2.63 	rac1</span><br><span class="line">192.168.2.64 	rac2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Private IP</span></span><br><span class="line">10.10.10.63 rac1-priv</span><br><span class="line">10.10.10.64 rac2-priv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Vip IP</span></span><br><span class="line">192.168.2.65 rac1-vip</span><br><span class="line">192.168.2.66 rac2-vip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Scan IP</span></span><br><span class="line">192.168.2.67 rac-scan</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><p><code>rac1&amp;rac2</code></p>
<p>服务器主机的存储:lvm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb /dev/sdc</span><br><span class="line"></span><br><span class="line">vgcreate oraclevg /dev/sdb</span><br><span class="line">vgcreate backupvg /dev/sdc</span><br><span class="line"></span><br><span class="line">lvcreate -n oraclelv -L 100000M oraclevg</span><br><span class="line">lvcreate -n backuplv -L 200000M backupvg</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/backupvg/backuplv</span><br><span class="line">mkfs.xfs /dev/oraclevg/oraclelv</span><br></pre></td></tr></table></figure>

<p>挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line">/dev/backupvg/backuplv	/backup		xfs		defaults	0 0</span><br><span class="line">/dev/oraclevg/oraclelv	/oracle		xfs		defaults	0 0</span><br><span class="line"></span><br><span class="line">mkdir /oracle</span><br><span class="line">mkdir /backup</span><br><span class="line"></span><br><span class="line">mount /oracle</span><br><span class="line">mount /backup</span><br></pre></td></tr></table></figure>

<h4 id="ASM磁盘"><a href="#ASM磁盘" class="headerlink" title="ASM磁盘"></a>ASM磁盘</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#iscsi识别共享存储</span></span></span><br><span class="line">yum install -y iscsi-initiator-utils*</span><br><span class="line"></span><br><span class="line">systemctl enable iscsi</span><br><span class="line">systemctl start iscsi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#输出targetname，10.10.10.68为iscsi共享存储设备IP地址</span></span></span><br><span class="line">iscsiadm -m discovery -t st -p 10.10.10.68</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#连接共享存储</span></span></span><br><span class="line">iscsiadm -m node -T iqn.1991-05.com.microsoft:win-arg9liue0mv-mesdb-target -p 10.10.10.68 -l</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<blockquote>
<p>todo 多路径配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in d e f g h i j k l;</span><br><span class="line">do  </span><br><span class="line">echo &quot;KERNEL==\&quot;sd?\&quot;,SUBSYSTEM==\&quot;block\&quot;, PROGRAM==\&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/\$name\&quot;,RESULT==\&quot;`/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/sd$i`\&quot;, SYMLINK+=\&quot;asm-disk$i\&quot;,OWNER=\&quot;grid\&quot;, GROUP=\&quot;asmadmin\&quot;,MODE=\&quot;0660\&quot;&quot;</span><br><span class="line">done  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc8646bc8413b34f9a&quot;, SYMLINK+=&quot;asm-dggrid01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc9617e1089ab64fb4&quot;, SYMLINK+=&quot;asm-dggrid02&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adcb020780584975001&quot;, SYMLINK+=&quot;asm-dggrid03&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adcba8050aa37c7be56&quot;, SYMLINK+=&quot;asm-dggrid04&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc9952fc11f7dfd9fb&quot;, SYMLINK+=&quot;asm-dggrid05&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc99341d2d641e1b3c&quot;, SYMLINK+=&quot;asm-dggrid06&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc889634115ea78a36&quot;, SYMLINK+=&quot;asm-dgsystem01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc8ed98c025a591e68&quot;, SYMLINK+=&quot;asm-dgrecovery01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adca5b7eca16123d815&quot;, SYMLINK+=&quot;asm-dgdata01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vi /etc/udev/rules.d/99-oracle-asmdevices.rules</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重载udev</span></span></span><br><span class="line">udevadm control --reload-rules</span><br><span class="line">udevadm trigger --type=devices</span><br><span class="line"></span><br><span class="line">ls -lsa /dev/asm*</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110141222202.png" alt="image-20220110141222202"></p>
<h4 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 挂载镜像</span></span></span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure>

<p>配置yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum repolist all</span><br></pre></td></tr></table></figure>

<p>安装依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y &quot;Server with GUI&quot;</span><br><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">tigervnc* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p>手动上传安装缺失依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /soft</span><br><span class="line">cd /soft</span><br><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>检查依赖包安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline | grep &quot;not installed&quot;</span><br></pre></td></tr></table></figure>

<h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><p><code>rac1&amp;rac2</code></p>
<p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p><code>rac1&amp;rac2</code></p>
<p>禁用<code>chronyd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">systemctl stop chronyd.service</span><br><span class="line">systemctl disable chronyd.service</span><br></pre></td></tr></table></figure>

<p>使用<code>ntp</code>同步时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/var/spool/cron/root</span><br><span class="line">00 12 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看计划任务</span></span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#手动执行</span></span></span><br><span class="line">/usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure>

<h4 id="关闭透明大页和numa"><a href="#关闭透明大页和numa" class="headerlink" title="关闭透明大页和numa"></a>关闭透明大页和numa</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<p>重启后检查是否生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">cat /proc/cmdline</span><br></pre></td></tr></table></figure>

<h4 id="avahi-daemon-配置"><a href="#avahi-daemon-配置" class="headerlink" title="avahi-daemon 配置"></a>avahi-daemon 配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y avahi*</span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">pgrep -f avahi-daemon | awk &#x27;&#123;print &quot;kill -9 &quot;$2&#125;&#x27;</span><br><span class="line">systemctl disable avahi-daemon.socket</span><br><span class="line">systemctl disable avahi-daemon.service</span><br></pre></td></tr></table></figure>

<h4 id="NOZEROCONF配置"><a href="#NOZEROCONF配置" class="headerlink" title="NOZEROCONF配置"></a>NOZEROCONF配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysconfig/network</span><br><span class="line">NOZEROCONF=yes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line"></span><br><span class="line">grid soft nofile 1024</span><br><span class="line">grid hard nofile 65536</span><br><span class="line">grid soft stack 10240</span><br><span class="line">grid hard stack 32768</span><br><span class="line">grid soft nproc 2047</span><br><span class="line">grid hard nproc 16384</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>配置pam.d/login：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="系统参数配置"><a href="#系统参数配置" class="headerlink" title="系统参数配置"></a>系统参数配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">	shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">	shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysctl.conf</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall</span><br><span class="line">kernel.shmmax = $shmmax</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">net.ipv4.conf.ens224.rp_filter = 1</span><br><span class="line">net.ipv4.conf.ens192.rp_filter = 2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h4 id="用户、组、目录创建"><a href="#用户、组、目录创建" class="headerlink" title="用户、组、目录创建"></a>用户、组、目录创建</h4><p><code>rac1&amp;rac2</code></p>
<p>用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line">/usr/sbin/groupadd -g 54324 backupdba</span><br><span class="line">/usr/sbin/groupadd -g 54325 dgdba</span><br><span class="line">/usr/sbin/groupadd -g 54326 kmdba</span><br><span class="line">/usr/sbin/groupadd -g 54327 asmdba</span><br><span class="line">/usr/sbin/groupadd -g 54328 asmoper</span><br><span class="line">/usr/sbin/groupadd -g 54329 asmadmin</span><br><span class="line">/usr/sbin/groupadd -g 54330 racdba</span><br></pre></td></tr></table></figure>

<p>用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/useradd -u 11012 -g oinstall -G asmadmin,asmdba,asmoper,dba,racdba,oper grid</span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G asmdba,dba,backupdba,dgdba,kmdba,racdba,oper oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改用户密码为oracle</span></span></span><br><span class="line">echo &quot;oracle&quot; |passwd oracle --stdin</span><br><span class="line">echo &quot;oracle&quot; |passwd grid --stdin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看用户组</span></span></span><br><span class="line">id grid</span><br><span class="line">id oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重载udev</span></span></span><br><span class="line">udevadm control --reload-rules</span><br><span class="line">udevadm trigger --type-devices</span><br><span class="line">ll /dev/asm*</span><br></pre></td></tr></table></figure>

<p>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /oracle/app/19.3.0/grid</span><br><span class="line">mkdir -p /oracle/app/grid</span><br><span class="line">mkdir -p /oracle/app/oracle/product/19.3.0/db</span><br><span class="line">mkdir -p /oracle/app/oraInventory</span><br><span class="line">mkdir -p /home/oracle/scripts</span><br><span class="line">chown -R oracle:oinstall /backup</span><br><span class="line">chown -R oracle:oinstall /home/oracle/scripts</span><br><span class="line">chown -R grid:oinstall /oracle</span><br><span class="line">chown -R grid:oinstall /oracle/app/grid</span><br><span class="line">chown -R grid:oinstall /oracle/app/19.3.0/grid</span><br><span class="line">chown -R grid:oinstall /oracle/app/oraInventory</span><br><span class="line">chown -R oracle:oinstall /oracle/app/oracle</span><br><span class="line">chmod -R 775 /oracle</span><br></pre></td></tr></table></figure>

<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p><code>rac1&amp;rac2</code></p>
<p>grid用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/grid/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/oracle/app/grid</span><br><span class="line">export ORACLE_HOME=/oracle/app/19.3.0/grid</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=+ASM2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysasm&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27; </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 每个节点的 ORACLE_SID 不一样（+ASM1/+ASM2），需要自行修改</p>
</blockquote>
<p>oracle用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/oracle/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/19.3.0/db</span><br><span class="line">export ORACLE_HOSTNAME=rac2</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=mesdb2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleEnd#########################</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong>注意：</strong> 每个节点的 ORACLE_HOSTNAME（rac1/rac2）和 ORACLE_SID（mesdb1/mesdb2）不一样，需要自行修改</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启系统</span></span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure>

<h4 id="安装包上传解压"><a href="#安装包上传解压" class="headerlink" title="安装包上传解压"></a>安装包上传解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建安装介质存放目录</span></span></span><br><span class="line">mkdir /soft</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上传安装介质到/soft目录</span></span></span><br><span class="line">LINUX.X64_193000_db_home.zip</span><br><span class="line">LINUX.X64_193000_grid_home.zip</span><br><span class="line">p32545008_190000_Linux-x86-64.zip</span><br><span class="line">p6880880_190000_Linux-x86-64.zip</span><br></pre></td></tr></table></figure>

<blockquote>
<p>19C 的安装包需要解压到对应的 ORACLE_HOME 目录下</p>
</blockquote>
<p>静默解压<code>grid</code>安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R grid:oinstall /soft</span><br><span class="line">su - grid -c &quot;unzip -q /soft/LINUX.X64_193000_grid_home.zip -d /oracle/app/19.3.0/grid/&quot;</span><br></pre></td></tr></table></figure>

<p>静默解压<code>oracle</code>安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle -c &quot;unzip -q /soft/LINUX.X64_193000_db_home.zip -d /oracle/app/oracle/product/19.3.0/db/&quot;</span><br></pre></td></tr></table></figure>

<p>静默解压补丁安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /soft</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压OPatch补丁包</span></span></span><br><span class="line">chown -R grid:oinstall /soft</span><br><span class="line">su - grid -c &quot;unzip -q -o /soft/p6880880_190000_Linux-x86-64.zip -d /oracle/app/19.3.0/grid&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压RU补丁包</span></span></span><br><span class="line">su - grid -c &quot;unzip -q /soft/p32545008_190000_Linux-x86-64.zip -d /soft&quot;</span><br><span class="line"></span><br><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle -c &quot;unzip -q -o /soft/p6880880_190000_Linux-x86-64.zip -d /oracle/app/oracle/product/19.3.0/db&quot;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意：</strong> 由于19C支持安装grid软件前打RU补丁，因此提前解压OPatch和RU补丁，为安装做准备</p>
</blockquote>
<h4 id="cvuqdisk安装"><a href="#cvuqdisk安装" class="headerlink" title="cvuqdisk安装"></a>cvuqdisk安装</h4><p>root用户下，cvuqdisk安装（rac01&amp;rac02):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh /oracle/app/19.3.0/grid/cv/rpm/cvuqdisk-1.0.10-1.rpm </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#传输到节点二安装</span></span></span><br><span class="line"></span><br><span class="line">scp /oracle/app/19.3.0/grid/cv/rpm/cvuqdisk-1.0.10-1.rpm rac2:/tmp</span><br><span class="line">rpm -ivh /tmp/cvuqdisk-1.0.10-1.rpm </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 19C 版本的 cvu 包换位置了，目录为：<code>$ORACLE_HOME/cv/rpm/</code>，以上所有软件只需要在节点一上传解压即可</p>
</blockquote>
<h3 id="安装Grid软件"><a href="#安装Grid软件" class="headerlink" title="安装Grid软件"></a>安装Grid软件</h3><p>配置<code>grid</code>用户vnc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y tigervnc*</span><br><span class="line">chown -R grid:oinstall /soft</span><br><span class="line">su - grid</span><br><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p>开始安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入安装目录</span></span></span><br><span class="line">cd $ORACLE_HOME</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行安装程序开始安装，通过-applyRU参数指向补丁解压位置，提前安装grid补丁</span></span></span><br><span class="line">./gridSetup.sh -applyRU /soft/32545008</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110145154657.png" alt="image-20220110145154657"></p>
<p>打完补丁，进入安装界面，选择集群安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145247453.png" alt="image-20220110145247453"></p>
<p>选择<code>standlone</code>模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145325890.png" alt="image-20220110145325890"></p>
<p>修改<code>scan</code>名称与<code>hosts</code>文件配置一致</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145429347.png" alt="image-20220110145429347"></p>
<p>添加<code>rac2</code>节点，配置互信</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145805853.png" alt="image-20220110145805853"></p>
<p>网卡配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150250058.png" alt="image-20220110150250058"></p>
<p>存储类型，选择<code>ASM</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150520054.png" alt="image-20220110150520054"></p>
<p>GIMR，这里不选择安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150553342.png" alt="image-20220110150553342"></p>
<p>ASM磁盘组</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150816058.png" alt="image-20220110150816058"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150759154.png" alt="image-20220110150759154"></p>
<p>ASM密码 mesasm2022</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150920096.png" alt="image-20220110150920096"></p>
<p>默认，下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151006818.png" alt="image-20220110151006818"></p>
<p>EM管理，暂不开启</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151033309.png" alt="image-20220110151033309"></p>
<p>管理组，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151056236.png" alt="image-20220110151056236"></p>
<p>安装地址，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151115523.png" alt="image-20220110151115523"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151129756.png" alt="image-20220110151129756"></p>
<p>不自动执行脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151215234.png" alt="image-20220110151215234"></p>
<p>安装前检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151243543.png" alt="image-20220110151243543"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152429085.png" alt="image-20220110152429085"></p>
<p>忽略，开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152505759.png" alt="image-20220110152505759"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152517367.png" alt="image-20220110152517367"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152542962.png" alt="image-20220110152542962"></p>
<p>执行<code>root</code>脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152952149.png" alt="image-20220110152952149"></p>
<p>先在节点1执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/oracle/app/oraInventory/orainstRoot.sh</span><br><span class="line">/oracle/app/19.3.0/grid/root.sh</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20220110154201184.png" alt="image-20220110154201184"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110154722451.png" alt="image-20220110154722451"></p>
<p>执行完成后，继续安装</p>
<p>忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110154915575.png" alt="image-20220110154915575"></p>
<p>安装完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110154946582.png" alt="image-20220110154946582"></p>
<p>检查集群状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - grid</span><br><span class="line">crsctl stat res -t</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110160312452.png" alt="image-20220110160312452"></p>
<p>检查<code>grid</code>补丁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - grid</span><br><span class="line">opatch lspatches</span><br><span class="line">sqlplus -version</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20220110160414752.png" alt="image-20220110160414752"></p>
<h3 id="创建磁盘组"><a href="#创建磁盘组" class="headerlink" title="创建磁盘组"></a>创建磁盘组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asmca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110155103889.png" alt="image-20220110155103889"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110155557309.png" alt="image-20220110155557309"></p>
<p>检查asm磁盘：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asmcmd lsdg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启检查集群状态</span></span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110160532100.png" alt="image-20220110160532100"></p>
<h3 id="安装Oracle软件"><a href="#安装Oracle软件" class="headerlink" title="安装Oracle软件"></a>安装Oracle软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle</span><br><span class="line">vncserver</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line">cd $ORACLE_HOME</span><br><span class="line">./runInstaller -applyRU /soft/32545008/</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110171230005.png" alt="image-20220110171230005"></p>
<p>进入安装界面，选择<strong>仅安装软件</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171312175.png" alt="image-20220110171312175"></p>
<p>选择集群模式：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171332064.png" alt="image-20220110171332064"></p>
<p>配置互信</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171428128.png" alt="image-20220110171428128"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171419257.png" alt="image-20220110171419257"></p>
<p>安装企业版</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171459738.png" alt="image-20220110171459738"></p>
<p>安装位置，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171525099.png" alt="image-20220110171525099"></p>
<p>用户组 默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171546241.png" alt="image-20220110171546241"></p>
<p>不配置自动执行脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171930293.png" alt="image-20220110171930293"></p>
<p>安装前检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110172130358.png" alt="image-20220110172130358"></p>
<p>只配置了一个SCAN,关于DNS相关的都忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110172448494.png" alt="image-20220110172448494"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110172946918.png" alt="image-20220110172946918"></p>
<p>开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110173710548.png" alt="image-20220110173710353"></p>
<p>执行root脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/oracle/app/oracle/product/19.3.0/db/root.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110173804416.png" alt="image-20220110173804416"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110173827746.png" alt="image-20220110173827746"></p>
<p>检查补丁版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opatch lspatches</span><br><span class="line">sqlplus -version</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110173912817.png" alt="image-20220110173912817"></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca</span><br></pre></td></tr></table></figure>

<p>选择创建数据库实例</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180252118.png" alt="image-20220110180252118"></p>
<p>自定义模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180553410.png" alt="image-20220110180553410"></p>
<p>自定义数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180630914.png" alt="image-20220110180630914"></p>
<p>选择节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180642777.png" alt="image-20220110180642777"></p>
<p>PDB&amp;CDB</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180720005.png" alt="image-20220110180720005"></p>
<p>存储配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110181334789.png" alt="image-20220110181334789"></p>
<p>暂不开启归档闪回</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111090704484.png" alt="image-20220111090704484"></p>
<p>生产环境无特殊要求全部安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111090911968.png" alt="image-20220111090911968"></p>
<p>配置项：</p>
<p>内存：SGA&amp;PGA</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091136127.png" alt="image-20220111091136127"></p>
<p>进程数：1500</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091201951.png" alt="image-20220111091201951"></p>
<p>字符集：16GBK</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091226787.png" alt="image-20220111091226787"></p>
<p>EM管理器，暂不开启</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091648137.png" alt="image-20220111091648137"></p>
<p>sys/system密码：mesdb2022</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091717329.png" alt="image-20220111091717329"></p>
<p>创建选项，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091941917.png" alt="image-20220111091941917"></p>
<p>预检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111092033716.png" alt="image-20220111092033716"></p>
<p>可忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111092121232.png" alt="image-20220111092121232"></p>
<p>开始创建</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111092147664.png" alt="image-20220111092147664"></p>
<p>创建完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111105256812.png" alt="image-20220111105256812"></p>
<p>检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看集群状态</span></span><br><span class="line">crsctl stat res -t  </span><br><span class="line"></span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">select instance_name,status from gv$instance;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111105817916.png" alt="image-20220111105817916"></p>
<h3 id="基础维护"><a href="#基础维护" class="headerlink" title="基础维护"></a>基础维护</h3><h4 id="RAC停止"><a href="#RAC停止" class="headerlink" title="RAC停止"></a>RAC停止</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">sqlplus &quot;/as sysdba&quot;</span><br><span class="line">shutdown immediate;</span><br><span class="line"></span><br><span class="line">su - grid</span><br><span class="line">crsctl stop crs</span><br></pre></td></tr></table></figure>

<h4 id="RAC启动"><a href="#RAC启动" class="headerlink" title="RAC启动"></a>RAC启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - grid</span><br><span class="line">crsctl start crs</span><br><span class="line">crsctl status res -t</span><br><span class="line"></span><br><span class="line">-- crsctl disable crs</span><br><span class="line"></span><br><span class="line">alter pluggable database mespdb open;</span><br></pre></td></tr></table></figure>

<p>自启动触发器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER open_all_pdbs</span><br><span class="line">	ALTER STARTUP ON DATABASE</span><br><span class="line">BEGIN</span><br><span class="line">	EXECUTE IMMEDIATE &#x27;alter pluggable database all open&#x27;;</span><br><span class="line">END open_all_pdbsl;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>



<h4 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h4><p>grid:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[grid@rac2:/home/grid]$ crsctl stat res -t</span><br></pre></td></tr></table></figure>

<p>oracle:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srvctl status database -db mesdb</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111133031684.png" alt="image-20220111133031684"></p>
<h4 id="PDB-amp-CDB"><a href="#PDB-amp-CDB" class="headerlink" title="PDB&amp;CDB"></a>PDB&amp;CDB</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看当前容器</span></span></span><br><span class="line">show con_name;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看所有PDB</span></span></span><br><span class="line">show pdbs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 切换pdb</span></span></span><br><span class="line">alter session set container = mespdb;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 切换根容器</span></span></span><br><span class="line">conn /as sysdba</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111133445262.png" alt="image-20220111133445262"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建表空间</span></span></span><br><span class="line">create tablespace mes datafile &#x27;+dgdata01&#x27; size 20m;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看数据文件</span></span></span><br><span class="line">select name from v$datafile;</span><br><span class="line"></span><br><span class="line">create user mesadmin identified by mes2022 default tablespace mes;</span><br><span class="line"></span><br><span class="line">grant dba to mesadmin;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111135231663.png" alt="image-20220111135231663"></p>
<p>创建测试数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create table EMPLOYEE (id number(12) primary key,name varchar(20));</span><br><span class="line">insert into EMPLOYEE values(1,&#x27;Oracle&#x27;);</span><br><span class="line">insert into EMPLOYEE values(2,&#x27;EAP&#x27;);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">select * from EMPLOYEE</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111135523550.png" alt="image-20220111135523550"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111135537825.png" alt="image-20220111135537825"></p>
<p>节点2：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111135703283.png" alt="image-20220111135703283"></p>
<h4 id="OCR镜像"><a href="#OCR镜像" class="headerlink" title="OCR镜像"></a>OCR镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ocrconfig -add +DGGRID2</span><br><span class="line">ocrcheck</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111143132715.png" alt="image-20220111143132715"></p>
<h4 id="密码过期策略"><a href="#密码过期策略" class="headerlink" title="密码过期策略"></a>密码过期策略</h4><blockquote>
<p>后续配置在容器数据库下修改</p>
</blockquote>
<p>关闭密码 180 天过期限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn /as sysdba</span><br><span class="line">select * from dba_profiles where profile=&#x27;DEFAULT&#x27; and resource_name=&#x27;PASSWORD_LIFE_TIME&#x27;;</span><br><span class="line">alter profile default limit password_life_time unlimited;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111145953420.png" alt="image-20220111145953420"></p>
<h4 id="关闭审计"><a href="#关闭审计" class="headerlink" title="关闭审计"></a>关闭审计</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter audit;</span><br><span class="line">alter system set audit_trail=none scope = spfile;</span><br></pre></td></tr></table></figure>

<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111151040444.png" alt="image-20220111151040444"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter recover;</span><br><span class="line">alter system set db_recovery_file_dest_size=10g; ## 略小于存储 留出冗余空间</span><br><span class="line">alter system set db_recovery_file_dest=&#x27;+dgrecovery&#x27;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111151357258.png" alt="image-20220111151357258"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter system set cluster_database=false scope=spfile;</span><br><span class="line">shutdown immediate; ## 关闭两个节点</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启动rac1到mount状态</span></span></span><br><span class="line">startup mount;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开启归档</span></span></span><br><span class="line">alter database archivelog;</span><br><span class="line">alter system set cluster_database=true scope=spfile;</span><br><span class="line">shutdown immediate;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2节点启动数据库</span></span></span><br><span class="line">startup; </span><br></pre></td></tr></table></figure>

<p><strong>检查归档状态，切换日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br><span class="line">alter system switch logfile;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111153451555.png" alt="image-20220111153451555"></p>
<h4 id="闪回"><a href="#闪回" class="headerlink" title="闪回"></a>闪回</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 生产环境不开启闪回</span></span></span><br><span class="line">alter database flashback on;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭</span></span></span><br><span class="line">alter database flashback off;</span><br></pre></td></tr></table></figure>



<h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter db_files;</span><br><span class="line">alter system set db_files=8191 scope=spfile;</span><br><span class="line"></span><br><span class="line">show parameter processes;</span><br><span class="line"></span><br><span class="line">show parameter open_cursors;</span><br><span class="line">alter system set open_cursors=2000 scope=spfile;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111150512989.png" alt="image-20220111150512989"></p>
<h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><p><code>hosts</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.67 rac-scan</span><br></pre></td></tr></table></figure>

<p><code>tnsnames.ora</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mesdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">mespdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mespdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111173611145.png" alt="image-20220111173611145"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn system/mesdb2022@mesdb</span><br><span class="line">select instance_name from v$instance;</span><br></pre></td></tr></table></figure>

<p>4个窗口分别是 mesdb2、mesdb1、mesdb2、mesdb1</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111174008051.png" alt="image-20220111174008051"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crsctl stop crs # 关闭</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111180802477.png" alt="image-20220111180802477"></p>
<h4 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h4><p><code>session</code>:基于会话，如果用户连接丢失,将创建一个新的会话连接到备用节点,用户的所有未提交的操作必须回滚,然后再次执行,SELECT操作也被中止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (LOAD_BALANCE = yes)</span><br><span class="line">    (FAILOVER = ON)</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mesdb)</span><br><span class="line">      (FAILOVER_MODE =</span><br><span class="line">        (TYPE = SESSION)</span><br><span class="line">        (METHOD = BASIC)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220112093541671.png" alt="image-20220112093541671"></p>
<h4 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h4><p>建议使用</p>
<p><code>select</code>:如果用户连接丢失,将使用游标和之前的快照继续执行SELECT操作,叫做SQL接管,SQL接管能够无缝接管理的事务类型只有SELECT语句.其它的操作也必须要回滚然后再次执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (LOAD_BALANCE = yes)</span><br><span class="line">    (FAILOVER = ON)</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mesdb)</span><br><span class="line">      (FAILOVER_MODE =</span><br><span class="line">        (TYPE = SELECT)</span><br><span class="line">        (METHOD = BASIC)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )  </span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220112093721196.png" alt="image-20220112093721196"></p>
<blockquote>
<p>参考资料：<a href="http://blog.itpub.net/31397003/viewspace-2144255/">Oracle RAC Failover 详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 19c Single 安装</title>
    <url>/2022/01/09/rhel7-6-install-oracle19c-single/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>19C 是未来几年 Oracle 数据库的大趋势，同样的作为长期稳定版，11GR2 在 2020 年 10 月份官方就宣布停止 Support 了，19C 将成为新的长期稳定版，并持续支持到 2027 年，也就意味着 19C 版本将成为最佳选择</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109234706402.png" alt="image-20220109234706402"></p>
<p>Oracle 19C 是支持 RHEL 7 和 RHEL 8 版本的系统进行安装的，RHEL 6 不再被兼容</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109234845049.png" alt="image-20220109234845049"></p>
<h3 id="Linux系统配置"><a href="#Linux系统配置" class="headerlink" title="Linux系统配置"></a>Linux系统配置</h3><h4 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4><table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>操作系统版本</th>
<th>Oracle版本</th>
<th>磁盘空间</th>
<th>内存</th>
</tr>
</thead>
<tbody><tr>
<td>orcl</td>
<td>192.168.40.11</td>
<td>rhel 7.6</td>
<td>19c</td>
<td>80G</td>
<td>8G</td>
</tr>
</tbody></table>
<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<h4 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>

<h4 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h4><p>挂在镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom /mnt</span><br></pre></td></tr></table></figure>

<p>配置yum文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/yum.repos.d/bak -p</span><br><span class="line">mv /etc/yum.repos.d/* /etc/yum.repos.d/bak</span><br><span class="line">cat&lt;&lt;EOF&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p>检查是否安装完成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline</span><br></pre></td></tr></table></figure>

<p>手动安装<code>compat-libstdc++</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h4 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/hosts</span><br><span class="line">192.168.40.11 orcl       </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># lvm</span></span></span><br><span class="line">pvcreate /dev/sdb /dev/sdc</span><br><span class="line">vgcreate oraclevg /dev/sdb</span><br><span class="line">vgcreate backupvg /dev/sdc</span><br><span class="line">lvcreate -n oraclelv -L 80000M oraclevg</span><br><span class="line">lvcreate -n oradatalv -L 100000M oraclevg</span><br><span class="line">lvcreate -n backuplv -L 50000M backupvg</span><br><span class="line">lvcreate -n archivelv -L 50000M backupvg</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/backupvg/backuplv</span><br><span class="line">mkfs.xfs /dev/backupvg/archivelv</span><br><span class="line">mkfs.xfs /dev/oraclevg/oradatalv</span><br><span class="line">mkfs.xfs /dev/oraclevg/oraclelv</span><br></pre></td></tr></table></figure>

<p>挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line">/dev/backupvg/backuplv /backup  xfs defaults 0 0</span><br><span class="line">/dev/backupvg/archivelv /archive xfs defaults 0 0</span><br><span class="line">/dev/oraclevg/oraclelv /oracle xfs defaults 0 0</span><br><span class="line">/dev/oraclevg/oradatalv /oradata xfs defaults 0 0</span><br><span class="line"></span><br><span class="line">mkdir /backup</span><br><span class="line">mkdir /archive</span><br><span class="line">mkdir /oracle</span><br><span class="line">mkdir /oradata</span><br><span class="line"></span><br><span class="line">mount /backup</span><br><span class="line">mount /archive</span><br><span class="line">mount /oracle</span><br><span class="line">mount /oradata</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107094435521.png"></p>
<h4 id="创建用户、组"><a href="#创建用户、组" class="headerlink" title="创建用户、组"></a>创建用户、组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建 oinstall dba oper 组</span></span></span><br><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line">/usr/sbin/groupadd -g 54324 backupdba</span><br><span class="line">/usr/sbin/groupadd -g 54325 dgdba</span><br><span class="line">/usr/sbin/groupadd -g 54326 kmdba</span><br><span class="line">/usr/sbin/groupadd -g 54330 racdba</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建 oracle 用户</span></span></span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G dba,backupdba,dgdba,kmdba,racdba,oper oracle</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 oracle 用户密码为 oracle</span></span></span><br><span class="line">echo oracle | passwd --stdin oracle</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 检查 oracle 用户</span></span></span><br><span class="line">id oracle</span><br></pre></td></tr></table></figure>

<h4 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a>创建安装目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /oracle/app/oracle/product/19.3.0/db</span><br><span class="line">mkdir -p /oracle/app/oraInventory</span><br><span class="line">chown -R oracle:oinstall /oradata</span><br><span class="line">chown -R oracle:oinstall /archive</span><br><span class="line">chown -R oracle:oinstall /oracle/app</span><br><span class="line">chmod -R 775 /oracle/app</span><br></pre></td></tr></table></figure>

<h4 id="配置avahi-deamon"><a href="#配置avahi-deamon" class="headerlink" title="配置avahi-deamon"></a>配置avahi-deamon</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.service</span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.socket</span><br><span class="line"></span><br><span class="line"><span class="comment">##关闭 NOZEROCONF</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt;&gt;/etc/sysconfig/network</span></span><br><span class="line"><span class="string">NOZEROCONF=yes</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="关闭透明大页和numa"><a href="#关闭透明大页和numa" class="headerlink" title="关闭透明大页和numa"></a>关闭透明大页和numa</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<h4 id="配置系统参数文件"><a href="#配置系统参数文件" class="headerlink" title="配置系统参数文件"></a>配置系统参数文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DAYTIME=$(date +%Y%m%d)</span><br><span class="line">mv /etc/sysctl.conf /etc/sysctl.conf.$&#123;DAYTIME&#125;</span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">  shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">  shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmal&#x27;s Calculation formula: physical memory 8G：(8*1024*1024*1024)/4096=2097152</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmax&#x27;s Calculation formula: physical memory 8G：(8/2)*1024*1024*1024 -1=4294967295</span></span></span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall</span><br><span class="line">kernel.shmmax = $shmmax</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="配置pam-d"><a href="#配置pam-d" class="headerlink" title="配置pam.d"></a>配置pam.d</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="配置用户环境变量"><a href="#配置用户环境变量" class="headerlink" title="配置用户环境变量"></a>配置用户环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 配置 root 用户</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/root/.bash_profile</span><br><span class="line">alias so=&#x27;su - oracle&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]# &#x27;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 配置 oracle 用户</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/home/oracle/.bash_profile</span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/oracle/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/19.3.0/db</span><br><span class="line">export ORACLE_HOSTNAME=orcl</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=mesdb</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p> 重启，检查<code>Selinux</code>、透明大页、<code>numa</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot </span><br><span class="line"></span><br><span class="line">cat /etc/selinux/config</span><br><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">cat /proc/cmdline</span><br></pre></td></tr></table></figure>

<h3 id="安装Oracle软件"><a href="#安装Oracle软件" class="headerlink" title="安装Oracle软件"></a>安装Oracle软件</h3><h4 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h4><p>使用<code>ftp</code>工具上传安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /soft</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109172822777.png" alt="image-20220109172822777"></p>
<blockquote>
<p>从18c开始要求将Database安装包解压到ORACLE_HOME目录下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle</span><br><span class="line">cd /soft</span><br><span class="line">unzip -q LINUX.X64_193000_db_home.zip -d $ORACLE_HOME</span><br></pre></td></tr></table></figure>

<h4 id="RU补丁安装"><a href="#RU补丁安装" class="headerlink" title="RU补丁安装"></a>RU补丁安装</h4><p>Oracle19c支持在安装Oracle软件之前就打好补丁，可以提前打RU补丁，在安装时指定<code>-applyRU</code>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压OPatch工具到$ORACLE_HOME目录</span></span></span><br><span class="line">unzip -o -q p6880880_190000_Linux-x86-64.zip -d $ORACLE_HOME</span><br><span class="line">opatch version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压RU补丁包</span></span></span><br><span class="line">unzip -q p33192793_190000_Linux-x86-64.zip</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109173747923.png" alt="image-20220109173747923"></p>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $ORACLE_HOME</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 指定RU补丁目录</span></span></span><br><span class="line">./runInstaller -applyRU /soft/33192793/</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109175105212.png" alt="image-20220109175105212"></p>
<p>仅安装软件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175205100.png" alt="image-20220109175205100"></p>
<p>安装单实例数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175236997.png" alt="image-20220109175236997"></p>
<p>生产环境安装企业版</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175311157.png" alt="image-20220109175311157"></p>
<p>安装目录，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175344029.png" alt="image-20220109175344029"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175359109.png" alt="image-20220109175359109"></p>
<p>用户组</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175429125.png" alt="image-20220109175429125"></p>
<p>root脚本自动执行：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175518229.png" alt="image-20220109175518229"></p>
<p>安装前检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175601645.png" alt="image-20220109175601645"></p>
<p>开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175633174.png" alt="image-20220109175633174"></p>
<p>自动执行root脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175744877.png" alt="image-20220109175744877"></p>
<p>安装完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175758838.png" alt="image-20220109175758838"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175935925.png" alt="image-20220109175935925"></p>
<h3 id="创建监听"><a href="#创建监听" class="headerlink" title="创建监听"></a>创建监听</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109180039141.png" alt="image-20220109180039141"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180056252.png" alt="image-20220109180056252"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180108789.png" alt="image-20220109180108789"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180158581.png" alt="image-20220109180158581"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180207581.png" alt="image-20220109180207581"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180221629.png" alt="image-20220109180221629"></p>
<p>检查监听</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109180309445.png" alt="image-20220109180309445"> </p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca</span><br></pre></td></tr></table></figure>

<h4 id="选择创建数据库"><a href="#选择创建数据库" class="headerlink" title="选择创建数据库"></a>选择创建数据库</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109213155602.png" alt="image-20220109213155602"></p>
<h4 id="自定义创建"><a href="#自定义创建" class="headerlink" title="自定义创建"></a>自定义创建</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109213237927.png" alt="image-20220109213237927"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109213920663.png" alt="image-20220109213920663"></p>
<h4 id="CDB-amp-PDB"><a href="#CDB-amp-PDB" class="headerlink" title="CDB&amp;PDB"></a>CDB&amp;PDB</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109214038496.png" alt="image-20220109214038496"></p>
<h4 id="存储配置-1"><a href="#存储配置-1" class="headerlink" title="存储配置"></a>存储配置</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109214346088.png" alt="image-20220109214346088"></p>
<h4 id="归档-amp-闪回"><a href="#归档-amp-闪回" class="headerlink" title="归档&amp;闪回"></a>归档&amp;闪回</h4><p>暂不开启归档和闪回</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214420047.png" alt="image-20220109214420047"></p>
<h4 id="选择监听"><a href="#选择监听" class="headerlink" title="选择监听"></a>选择监听</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109214440783.png" alt="image-20220109214440783"></p>
<h4 id="数据库选项"><a href="#数据库选项" class="headerlink" title="数据库选项"></a>数据库选项</h4><p>生产环境无特殊要求全部安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214531999.png" alt="image-20220109214531999"></p>
<h4 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h4><p><strong>PGA：</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214818760.png" alt="image-20220109214818760"></p>
<p>线程数：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214842417.png" alt="image-20220109214842417"></p>
<p><strong>字符集：</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214903263.png" alt="image-20220109214903263"></p>
<h4 id="EM管理器"><a href="#EM管理器" class="headerlink" title="EM管理器"></a>EM管理器</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109215258128.png" alt="image-20220109215258128"></p>
<p>数据库密码：mesdb2022</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109215543617.png" alt="image-20220109215543617"></p>
<h4 id="创建选项"><a href="#创建选项" class="headerlink" title="创建选项"></a>创建选项</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109215651312.png" alt="image-20220109215651312"></p>
<h4 id="表空间配置"><a href="#表空间配置" class="headerlink" title="表空间配置"></a>表空间配置</h4><p>控制文件大小改为8192</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109220205032.png" alt="image-20220109220205032"></p>
<h4 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109220520009.png" alt="image-20220109220520009"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109220528857.png" alt="image-20220109220528857"></p>
<h4 id="创建完成"><a href="#创建完成" class="headerlink" title="创建完成"></a>创建完成</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109223833891.png" alt="image-20220109223833891"></p>
<p>查看监听</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109224228578.png" alt="image-20220109224228578"></p>
<h3 id="基本使用与配置"><a href="#基本使用与配置" class="headerlink" title="基本使用与配置"></a>基本使用与配置</h3><h4 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br><span class="line">startup</span><br><span class="line">show pdbs</span><br><span class="line">alter pluggable database mespdb open; ## 关闭=&gt; close</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#存储过程 启动全部</span></span></span><br><span class="line">CREATE TRIGGER open_all_pdbs</span><br><span class="line">    AFTER STARTUP ON DATABASE</span><br><span class="line">BEGIN</span><br><span class="line">    EXECUTE IMMEDIATE &#x27;alter plggable database all open&#x27;;</span><br><span class="line">END open_all_pdbs;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动监听</span></span></span><br><span class="line">lsnrctl start </span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107150235871.png" alt="image-20220107150235871"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl stop</span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">shutdown immediate;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107150235871.png" alt="image-20220107150235871"></p>
<h4 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from v$diag_info;</span><br><span class="line">cd /oracle/app/oracle/diag/rdbms/mesdb/mesdb/alert</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107153632793.png" alt="image-20220107153632793"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220107153702836.png" alt="image-20220107153702836"></p>
<h4 id="PDB-amp-CDB"><a href="#PDB-amp-CDB" class="headerlink" title="PDB&amp;CDB"></a>PDB&amp;CDB</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show con_name;</span><br><span class="line">alter session set container = mespdb;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107162507434.png" alt="image-20220107162507434"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create tablespace mes datafile &#x27;/oradata/MESDB/mespdb/mes01.dbf&#x27; size 20m;</span><br><span class="line">create user mesadmin identified by mes2022 default tablespace mes;</span><br><span class="line">grant dba to mesadmin;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107162926063.png" alt="image-20220107162926063"></p>
<h4 id="TNS解析"><a href="#TNS解析" class="headerlink" title="TNS解析"></a>TNS解析</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $ORACLE_HOME/network/admin/</span><br><span class="line">vi tnsnames.ora</span><br><span class="line"></span><br><span class="line">tnsping mespdb</span><br><span class="line">sqlplus mesadmin/mes2022@mespdb</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107165043554.png" alt="image-20220107165043554"></p>
<h4 id="密码过期规则"><a href="#密码过期规则" class="headerlink" title="密码过期规则"></a>密码过期规则</h4><p>后续配置在容器数据库下修改</p>
<p>关闭密码180天过期限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn /as sysdba</span><br><span class="line">select * from dba_profiles where profile=&#x27;DEFAULT&#x27; and resource_name=&#x27;PASSWORD_LIFE_TIME&#x27;;</span><br><span class="line">alter profile default limit password_life_time unlimited;</span><br></pre></td></tr></table></figure>

<h4 id="EM管理器-1"><a href="#EM管理器-1" class="headerlink" title="EM管理器"></a>EM管理器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select DBMS_XDB.gethttpport from dual;</span><br><span class="line">select DBMS_XBD_CONFIG.gethttpsport from dual;</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="https://192.168.40.11:5500/em">https://192.168.40.11:5500/em</a></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109233843387.png" alt="image-20220109233843387"></p>
<h4 id="关闭审计"><a href="#关闭审计" class="headerlink" title="关闭审计"></a>关闭审计</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter audit;</span><br><span class="line">alter system set audit_trail=none scope = spfile;</span><br></pre></td></tr></table></figure>

<h4 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter system set db_files = 8192 scope=spfile;</span><br><span class="line">alter system set processes = 2000 scope=spfile; ## 进程数</span><br><span class="line">alter system set open_cursors = 2000 scope=spfile; ## 游标数</span><br></pre></td></tr></table></figure>

<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter recover;</span><br><span class="line">alter system set db_recovery_file_dest_size=10g; ## 略小于存储 留出冗余空间</span><br><span class="line">alter system set db_recovery_file_dest = &#x27;/archive&#x27;; ## 归档存储路径</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line">alter database archivelog;</span><br><span class="line">alter database open;</span><br><span class="line">archive log list;</span><br><span class="line">alter system switch logfile;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server故障转移集群 - 01</title>
    <url>/2021/12/02/sqlserver-ha-01/</url>
    <content><![CDATA[<h2 id="安装服务器"><a href="#安装服务器" class="headerlink" title="安装服务器"></a>安装服务器</h2><p>电脑安装<strong>VMware</strong>虚拟机，<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载地址</a></p>
<h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><h4 id="选择自定义"><a href="#选择自定义" class="headerlink" title="选择自定义"></a>选择自定义</h4><p>选择自定义安装向导，点击下一步。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093614132.png" alt="image-20211130093614132"></p>
<h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>默认兼容性（或者选择VMware对应版本），点击下一步继续。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093715657.png" alt="image-20211130093715657"></p>
<h4 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h4><p>这里选择<strong>稍后</strong>安装操作系统，我们配置完成之后再手动选择<code>系统镜像文件</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093835618.png" alt="image-20211130093835618"></p>
<h4 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h4><p>我们安装<code>Windows Server 2019</code>版本的服务器。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093953176.png" alt="image-20211130093953176"></p>
<h4 id="命名虚拟机"><a href="#命名虚拟机" class="headerlink" title="命名虚拟机"></a>命名虚拟机</h4><p>填写虚拟机名称，建议以<code>主机名+IP</code>，方便区分。选择虚拟机存放路径</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094211240.png" alt="image-20211130094211240"></p>
<h4 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h4><p>选择使用<strong>BIOS</strong>启动</p>
<blockquote>
<p>使用UEFI 可能会出现 Time Out …这种情况</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094235421.png" alt="image-20211130094235421"></p>
<h4 id="处理器配置"><a href="#处理器配置" class="headerlink" title="处理器配置"></a>处理器配置</h4><p>处理我们选择1个CPU 2个处理核心</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094440354.png" alt="image-20211130094440354"></p>
<h4 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h4><p>内存配置为<code>4G</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094508709.png" alt="image-20211130094508709"></p>
<h4 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h4><p>网络类型根据实际情况来，我这里选择桥接网络，后续需要添加一个网卡。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094611392.png" alt="image-20211130094611392"></p>
<h4 id="I-O控制器类型"><a href="#I-O控制器类型" class="headerlink" title="I/O控制器类型"></a>I/O控制器类型</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094641514.png" alt="image-20211130094641514"></p>
<h4 id="磁盘类型"><a href="#磁盘类型" class="headerlink" title="磁盘类型"></a>磁盘类型</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094700337.png" alt="image-20211130094700337"></p>
<h4 id="磁盘选择"><a href="#磁盘选择" class="headerlink" title="磁盘选择"></a>磁盘选择</h4><p>选择创建新的虚拟磁盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094732722.png" alt="image-20211130094732722"></p>
<h4 id="指定磁盘容量"><a href="#指定磁盘容量" class="headerlink" title="指定磁盘容量"></a>指定磁盘容量</h4><p>磁盘大小配置为：100G</p>
<p>将磁盘存储为单个文件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094803559.png" alt="image-20211130094803559"></p>
<h4 id="指定磁盘文件"><a href="#指定磁盘文件" class="headerlink" title="指定磁盘文件"></a>指定磁盘文件</h4><p>默认，下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094902452.png" alt="image-20211130094902452"></p>
<h4 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h4><p>点击完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094932549.png" alt="image-20211130094932549"></p>
<h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><h4 id="系统镜像-1"><a href="#系统镜像-1" class="headerlink" title="系统镜像"></a>系统镜像</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130095602092.png" alt="image-20211130095602092"></p>
<h4 id="添加网卡"><a href="#添加网卡" class="headerlink" title="添加网卡"></a>添加网卡</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130095229246.png" alt="image-20211130095229246"></p>
<p>配置第二块网卡的网络连接</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130095303266.png" alt="image-20211130095303266"></p>
<h4 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130095407929.png" alt="image-20211130095407929"></p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><img data-src="https://cdn.jonty.top/img/image-20211130100913192.png" alt="image-20211130100913192"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130100928792.png" alt="image-20211130100928792"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130100943388.png" alt="image-20211130100943388"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130100953011.png" alt="image-20211130100953011"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101029992.png" alt="image-20211130101029992"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101122829.png" alt="image-20211130101122829"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101144922.png" alt="image-20211130101144922"></p>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p><img data-src="https://cdn.jonty.top/img/image-20211130101330030.png" alt="image-20211130101330030"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101611447.png" alt="image-20211130101611447"></p>
<ul>
<li>配置IP</li>
<li>更改主机名</li>
<li>关闭防火墙</li>
</ul>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>下载安装包到共享文件夹下，在虚拟机中打开安装程序，可以在官网下载适用版本</p>
<p>光盘映像文件需要先解压，解压完后进入目录：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130151655185.png" alt="image-20211130151655185"></p>
<p>运行安装程序：</p>
<p>选择左侧安装，选择全新安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130151740122.png" alt="image-20211130151740122"></p>
<h4 id="产品密钥"><a href="#产品密钥" class="headerlink" title="产品密钥"></a>产品密钥</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130152002424.png" alt="image-20211130152002424"></p>
<h4 id="功能选择"><a href="#功能选择" class="headerlink" title="功能选择"></a>功能选择</h4><p>可以选择安装到D盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130144535838.png" alt="image-20211130144535838"></p>
<ul>
<li>数据库引擎服务</li>
<li>SQL Server 复制</li>
<li>全文和语义提取搜索</li>
<li>Data Quality Services</li>
<li>Analysis Services</li>
<li>客户端工具连接</li>
<li>客户端工具向后兼容性</li>
<li>客户端工具SDK</li>
<li>SQL 客户端连接SDK</li>
<li>Master Data Services</li>
</ul>
<h4 id="实例安装"><a href="#实例安装" class="headerlink" title="实例安装"></a>实例安装</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130145023223.png" alt="image-20211130145023223"></p>
<h4 id="服务器配置-1"><a href="#服务器配置-1" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>更改SQL Server代理 自动启动</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145044256.png" alt="image-20211130145044256"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145110590.png" alt="image-20211130145110590"></p>
<h4 id="数据库引擎配置"><a href="#数据库引擎配置" class="headerlink" title="数据库引擎配置"></a>数据库引擎配置</h4><p>设置密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145258502.png" alt="image-20211130145258502"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145607022.png" alt="image-20211130145607022"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130152522168.png" alt="image-20211130152522168"></p>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server 2019</tag>
        <tag>DB Cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>AlwaysOn可用性组搭建</title>
    <url>/2021/12/12/sqlserver-always-on/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>关于<a href="https://docs.microsoft.com/zh-cn/sql/database-engine/availability-groups/windows/overview-of-always-on-availability-groups-sql-server?view=sql-server-ver15">AlwaysOn</a>高可用性组的官方介绍</p>
<p>关于SQL Server高可用性的<a href="https://blog.csdn.net/DBA_Huangzj/article/details/54015470">相关概念</a></p>
</blockquote>
<p>​        AlwaysOn利用了Windows 故障转移群集（FCI）的健康监测和自动故障转移的特性，所以AlwaysOn需要建立在Windows故障转移群集之上。关于故障转移群集的搭建在之前的文章有介绍（<a href="https://jonty.top/2021/12/02/sqlserver-ha-02/">故障转移群集搭建</a>）。但是和故障转移群集不同的地方是，可用性组不需要存放在<strong>共享存储</strong>上。另外，可用性组是<strong>数据库</strong>层面的，故障转移群集是<strong>实例</strong>层面的。</p>
<p><img data-src="https://cdn.jonty.top/img/aoag-agintrofigure.gif" alt="有五个副本的可用性组"></p>
<p><img data-src="https://docs.microsoft.com/zh-cn/sql/includes/media/sql-server-ha-story/image10.png?view=sql-server-ver15" alt="分布式 AG"></p>
<p>特点：</p>
<ul>
<li>AlwaysOn支持故障转移群集</li>
<li>多个用户数据库可以一同进行故障转移</li>
<li>每个辅助服务器上都有一份数据的拷贝，可以使服务器上的数据拷贝和主服务器上的数据完全同步</li>
<li>辅助服务器可用于只读的访问请求</li>
<li>……</li>
</ul>
<p><strong>大致步骤如下</strong>：</p>
<ul>
<li>安装4台Windows Server2019服务器。</li>
<li>配置主机、网卡</li>
<li>安装AD域、DNS,添加域</li>
<li>安装故障转移群集</li>
<li>安装SQL Server </li>
<li>配置AlwaysOn可用性组</li>
<li>配置读写分离路由</li>
</ul>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>演示配置为<code>Windows Server 2019 DataCenter</code>，<code>2核4G</code>，<code>硬盘100G</code>，双网卡，<code>Administrator</code>密码需要配置一致。</p>
<table>
<thead>
<tr>
<th align="center">节点</th>
<th align="center">主机名</th>
<th align="center">public ip</th>
<th align="center">private ip</th>
<th align="center">群集ip</th>
<th align="center">侦听器</th>
<th align="center">DNS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ws11</td>
<td align="center">ws11</td>
<td align="center">192.168.1.11</td>
<td align="center">10.10.10.11</td>
<td align="center">192.168.1.15</td>
<td align="center">192.168.1.16</td>
<td align="center">192.168.1.20</td>
</tr>
<tr>
<td align="center">ws12</td>
<td align="center">ws12</td>
<td align="center">192.168.1.12</td>
<td align="center">10.10.10.12</td>
<td align="center">192.168.1.15</td>
<td align="center">192.168.1.16</td>
<td align="center">192.168.1.20</td>
</tr>
<tr>
<td align="center">ws13</td>
<td align="center">ws13</td>
<td align="center">192.168.1.13</td>
<td align="center">10.10.10.13</td>
<td align="center">192.168.1.15</td>
<td align="center">192.168.1.16</td>
<td align="center">192.168.1.20</td>
</tr>
<tr>
<td align="center">ws20</td>
<td align="center">ws20</td>
<td align="center">192.168.1.20</td>
<td align="center">10.10.10.20</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">192.168.1.20</td>
</tr>
</tbody></table>
<blockquote>
<p> 注意：后续操作没有特殊说明3节点均需配置</p>
</blockquote>
<h3 id="配置域控"><a href="#配置域控" class="headerlink" title="配置域控"></a>配置域控</h3><p>将<code>ws20</code>作为域控服务器。</p>
<h4 id="IP和DNS配置"><a href="#IP和DNS配置" class="headerlink" title="IP和DNS配置"></a>IP和DNS配置</h4><p>配置网卡属性：</p>
<p>配置<code>IP</code>地址：<code>192.168.1.20</code>，并将<code>DNS</code>设置为本机<code>IP</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210160647337.png" alt="image-20211210160647337"></p>
<p>无域控DNS配置：<a href="https://www.cnblogs.com/DragonStart/p/8275182.html">https://www.cnblogs.com/DragonStart/p/8275182.html</a> </p>
<h4 id="AD-amp-DNS安装"><a href="#AD-amp-DNS安装" class="headerlink" title="AD &amp; DNS安装"></a>AD &amp; DNS安装</h4><p>打开服务器管理器，添加角色和功能向导，选择添加 <code>Active Directory域服务</code>和 <code>DNS</code> 服务器</p>
<img data-src="https://cdn.jonty.top/img/image-20211201202841391.png" alt="image-20211201202841391" style="zoom:80%;" />

<p>安装完成后，选择将此服务器升级为<strong>域控制器</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201203328080.png" alt="image-20211201203328080" style="zoom:80%;" />

<h4 id="配置域控-1"><a href="#配置域控-1" class="headerlink" title="配置域控"></a>配置域控</h4><p>点击添加<strong>新林</strong>，自定义一个<strong>根域名</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201203602401.png" alt="image-20211201203602401" style="zoom:80%;" />

<p>下一步，设置DNS密码</p>
<img data-src="https://cdn.jonty.top/img/image-20211201210755796.png" alt="image-20211201210755796" style="zoom:80%;" />

<p>后续步骤<strong>默认</strong>，点击安装</p>
<img data-src="https://cdn.jonty.top/img/image-20211201211327973.png" alt="image-20211201211327973" style="zoom:80%;" />

<p>安装完成后会<strong>自动重启</strong>，并使用<strong>域账户</strong>登录</p>
<p>查看电脑属性，可以看到<code>ws20</code>节点已经加入域</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210162246204.png" alt="image-20211210162246204"></p>
<h4 id="节点加入域"><a href="#节点加入域" class="headerlink" title="节点加入域"></a>节点加入域</h4><p>更改<strong>DNS</strong>，设置为域控服务器IP，<code>ws11</code>、<code>ws12</code>、<code>ws13</code>节点均操作</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210163048875.png" alt="image-20211210163048875"></p>
<p>打开<strong>计算机属性</strong>，更改<strong>主机名</strong>并加入<strong>域</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211210163229691.png" alt="image-20211210163229691" style="zoom: 67%;" />

<p>输入<strong>域控服务器</strong>用户名和密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210163317769.png" alt="image-20211210163317769"></p>
<h3 id="故障转移群集配置"><a href="#故障转移群集配置" class="headerlink" title="故障转移群集配置"></a>故障转移群集配置</h3><h4 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h4><p><code>ws11</code>、<code>ws12</code>、<code>ws13</code>节点均操作</p>
<p>重命名网卡：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101040029.png" alt="image-20211202101040029"></p>
<p><strong>public网卡：</strong></p>
<p>跃点设置为：5</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101150519.png" alt="image-20211202101150519"></p>
<p><strong>pirvate网卡：</strong></p>
<p>设置跃点为：75</p>
<img data-src="https://cdn.jonty.top/img/image-20211210171252768.png" alt="image-20211210171252768" style="zoom:80%;" />

<p>取消DNS注册</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101436509.png" alt="image-20211202101436509"></p>
<p>禁用<strong>NetBIOS</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101526718.png" alt="image-20211202101526718"></p>
<p>查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get-netipinterface</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211202101716057.png" alt="image-20211202101716057"></p>
<h4 id="安装故障转移群集"><a href="#安装故障转移群集" class="headerlink" title="安装故障转移群集"></a>安装故障转移群集</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>3个节点安装故障转移群集</p>
<p>新建角色和功能向导，选择<strong>故障转移群集</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211202102733214.png" alt="image-20211202102733214" style="zoom:80%;" />



<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>服务器管理器面板 -&gt; 工具，打开故障转移群集管理器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103144127.png" alt="image-20211202103144127"></p>
<p>选择<strong>创建群集</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211102905894.png" alt="image-20211211102905894"></p>
<p>把3个节点都加入<strong>群集</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103337978.png" alt="image-20211202103337978"></p>
<p>可以选择是否要运行测试</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104126258.png" alt="image-20211202104126258"></p>
<p>配置集群地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104427813.png" alt="image-20211202104427813"></p>
<p>查看群集状态</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211105749127.png" alt="image-20211211105749127"></p>
<p>DNS中已经添加了群集的解析：</p>
<img data-src="https://cdn.jonty.top/img/image-20211211152156209.png" alt="image-20211211152156209" style="zoom:80%;" />



<h4 id="仲裁配置"><a href="#仲裁配置" class="headerlink" title="仲裁配置"></a>仲裁配置</h4><p>可以看到，群集的见证是没有的：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151112296.png" alt="image-20211211151112296"></p>
<p>添加一个<strong>共享文件夹</strong>做仲裁文件夹：ws20节点</p>
<blockquote>
<p>关于仲裁：<a href="https://www.cnblogs.com/ljhdo/p/5652643.html">https://www.cnblogs.com/ljhdo/p/5652643.html</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151229090.png" alt="image-20211211151229090"></p>
<p><strong>配置仲裁</strong></p>
<p>右键群集，选择更多操作，点击配置群集仲裁设置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151321318.png" alt="image-20211211151321318"></p>
<p>选择仲裁见证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151409823.png" alt="image-20211211151409823"></p>
<p>选择使用共享文件见证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151444295.png" alt="image-20211211151444295"></p>
<p>选择在<code>ws20</code>节点配置的共享文件夹</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151519725.png"></p>
<p>默认下一步，安装</p>
<p>安装完成后可以看到<strong>文件共享见证</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211151616739.png" alt="image-20211211151616739" style="zoom:80%;" />



<h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><h4 id="添加域用户"><a href="#添加域用户" class="headerlink" title="添加域用户"></a>添加域用户</h4><p>在<code>AD</code>中添加一个<strong>域用户</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211151936934.png" alt="image-20211211151936934" style="zoom:80%;" />

<img data-src="https://cdn.jonty.top/img/image-20211211151914110.png" alt="image-20211211151914110" style="zoom:80%;" />

<p>其他三个节点均添加此<strong>域用户</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211152039971.png" alt="image-20211211152039971" style="zoom:80%;" />



<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><strong>3节点均需安装</strong></p>
<p>选择<strong>全新安装</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211162839680.png" alt="image-20211211162839680" style="zoom:80%;" />



<p><strong>选择安装功能</strong></p>
<p>根据实际需求选择安装功能，数据库引擎服务是必须的</p>
<img data-src="https://cdn.jonty.top/img/image-20211211163624854.png" alt="image-20211211163624854" style="zoom:80%;" />



<p><strong>实例配置</strong>：</p>
<p>三节点均使用默认实例配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211211171142018.png" alt="image-20211211171142018" style="zoom:80%;" />

<p><strong>服务器配置</strong></p>
<p>使用<strong>域用户</strong>登录</p>
<img data-src="https://cdn.jonty.top/img/image-20211211173957657.png" alt="image-20211211173957657" style="zoom:80%;" />

<p><strong>数据库引擎配置</strong></p>
<p>服务器配置：选择混合模式登录，管理员添加<strong>本机管理员</strong>以及<strong>域用户</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211174318402.png" alt="image-20211211174318402" style="zoom:80%;" />

<p>数据目录：</p>
<p>可以自定义数据文件存储位置</p>
<img data-src="https://cdn.jonty.top/img/image-20211211174423423.png" alt="image-20211211174423423" style="zoom:80%;" />

<p>TempDB:</p>
<p>将TempDB的初始大小可以按实际需求设置初始大小</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211174540873.png" alt="image-20211211174540873"></p>
<p><strong>安装</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211174914993.png" alt="image-20211211174914993" style="zoom:80%;" />



<img data-src="C:/Users/JontyWong/AppData/Roaming/Typora/typora-user-images/image-20211212144604044.png" alt="image-20211212144604044" style="zoom:80%;" />

<h3 id="Always-On-配置"><a href="#Always-On-配置" class="headerlink" title="Always On 配置"></a>Always On 配置</h3><h4 id="启用AlwaysOn"><a href="#启用AlwaysOn" class="headerlink" title="启用AlwaysOn"></a>启用AlwaysOn</h4><p>打开配置管理器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212150735055.png" alt="image-20211212150735055"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212150811047.png" alt="image-20211212150811047"></p>
<blockquote>
<p>注意：开启后重启<code>SQL Server</code>服务，三个节点都需要打开。</p>
</blockquote>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>连接到3个节点的<strong>数据库</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212152510363.png" alt="image-20211212152510363"></p>
<p>创建2个测试数据库：ws21节点</p>
<img data-src="https://cdn.jonty.top/img/image-20211212152847643.png" alt="image-20211212152847643" style="zoom:80%;" />

<p>创建测试数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use jontydb</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Employee (id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty3&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty4&#x27;</span>)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Employee</span><br></pre></td></tr></table></figure>

<h4 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h4><p>对新建的2个数据库进行<strong>全备</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212153406168.png" alt="image-20211212153406168"></p>
<p>备份类型选择<strong>完整</strong></p>
<p><strong>介质选项</strong>和<strong>备份选项</strong>按需求配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211212153551144.png" alt="image-20211212153551144" style="zoom:80%;" />

<p>可以配置备份文件存放位置，方便管理</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212153700280.png" alt="image-20211212153700280"></p>
<h4 id="新建可用性组"><a href="#新建可用性组" class="headerlink" title="新建可用性组"></a>新建可用性组</h4><p>右键AlwaysOn高可用性，选择向导</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154002973.png" alt="image-20211212154002973"></p>
<p>可用性组名称，勾选<strong>数据库级别运行状况检测</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154121519.png" alt="image-20211212154121519"></p>
<p>选择要添加到可用性组的数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154200085.png" alt="image-20211212154200085"></p>
<p><strong>指定副本</strong></p>
<p>点击添加副本，将<code>ws12</code>、<code>ws13</code>节点添加为副本，并设置<strong>自动故障转移</strong>和<strong>可读辅助副本</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154308677.png" alt="image-20211212154308677"></p>
<p><strong>端点</strong></p>
<p>使用<strong>私有网卡</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154626198.png" alt="image-20211212154626198"></p>
<p><strong>备份首选项</strong></p>
<p>选择<strong>任意副本</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154745535.png" alt="image-20211212154745535"></p>
<p><strong>侦听器</strong>和<strong>只读路由</strong>稍后配置。</p>
<p><strong>数据同步</strong></p>
<p>选择<code>完整的数据库和日志备份</code>，这里在<strong>域服务器</strong>创建了一个共享目录，可使用<strong>备份服务器</strong>同步</p>
<img data-src="https://cdn.jonty.top/img/image-20211212155405079.png" alt="image-20211212155405079" style="zoom:80%;" />

<p><strong>验证</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212155537431.png" alt="image-20211212155537431"></p>
<p>运行下一步，完成配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211212155658350.png" alt="image-20211212155658350" style="zoom:80%;" />

<p>查看是否配置成功：</p>
<p>辅助节点的数据库已经同步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212155829069.png" alt="image-20211212155829069"></p>
<h4 id="创建侦听器"><a href="#创建侦听器" class="headerlink" title="创建侦听器"></a>创建侦听器</h4><p><img data-src="https://cdn.jonty.top/img/image-20211212160001906.png" alt="image-20211212160001906"></p>
<p><strong>DNS</strong>中可以看到侦听器已经添加进去了</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212160106551.png" alt="image-20211212160106551"></p>
<h4 id="面板查看"><a href="#面板查看" class="headerlink" title="面板查看"></a>面板查看</h4><p><img data-src="https://cdn.jonty.top/img/image-20211212160409506.png" alt="image-20211212160409506"></p>
<h4 id="连接可用性组"><a href="#连接可用性组" class="headerlink" title="连接可用性组"></a>连接可用性组</h4><p>使用创建的<strong>侦听器地址</strong>连接</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212160541634.png"></p>
<h4 id="测试可用性组"><a href="#测试可用性组" class="headerlink" title="测试可用性组"></a>测试可用性组</h4><p>在<code>ws11</code>节点插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Employee</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@SERVERNAME</span>  <span class="comment">-- ws11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;always on&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211212161052133.png" alt="image-20211212161052133"></p>
<p>在<strong>其他副本</strong>查看是否同步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212161020941.png" alt="image-20211212161020941"></p>
<h4 id="故障转移测试"><a href="#故障转移测试" class="headerlink" title="故障转移测试"></a>故障转移测试</h4><p>使用<code>host</code>机器连接到<strong>可用性组</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@SERVERNAME</span>  <span class="comment">-- 查看当前主机</span></span><br></pre></td></tr></table></figure>

<p>当前主节点为：<code>ws11</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212165938337.png" alt="image-20211212165938337"></p>
<p>将<code>ws11</code>节点关闭</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170052511.png" alt="image-20211212170052511"></p>
<p>测试查询：</p>
<p>可以看到主节点已经转移到<code>ws12</code>，<code>Always on</code>已经自动故障转移切换</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170210354.png" alt="image-20211212170210354"></p>
<p>我们在<code>ws12</code>节点添加几条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;restart always on&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;restart always on2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;restart always on3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>重新启动<code>ws11</code>节点，查看<strong>副本数据</strong>是否同步</p>
<p>节点已经恢复</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170749810.png" alt="image-20211212170749810"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170836596.png" alt="image-20211212170836596"></p>
<p>查看故障节点<code>ws11</code>的数据，可以看到已经恢复同步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212171600016.png" alt="image-20211212171600016"></p>
<h4 id="手动故障转移"><a href="#手动故障转移" class="headerlink" title="手动故障转移"></a>手动故障转移</h4><p>我们把<code>ws11</code>节点关闭后，<code>Always on</code>自动故障转移，现在主节点:<code>ws12</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212171840132.png" alt="image-20211212171840132"></p>
<p>我们可以手动切换回<code>ws11</code>节点，右键可用性组，选择故障转移</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212171923827.png" alt="image-20211212171923827"></p>
<p>选择<code>ws11</code>为新的主副本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172025348.png" alt="image-20211212172025348"></p>
<p>完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172103932.png" alt="image-20211212172103932"></p>
<p>刷新可用性组，可以看到已经切换到<code>ws11</code>节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172120377.png" alt="image-20211212172120377"></p>
<h3 id="读写分离-amp-负载均衡"><a href="#读写分离-amp-负载均衡" class="headerlink" title="读写分离 &amp; 负载均衡"></a>读写分离 &amp; 负载均衡</h3><h4 id="配置可读辅助副本"><a href="#配置可读辅助副本" class="headerlink" title="配置可读辅助副本"></a>配置可读辅助副本</h4><img data-src="https://cdn.jonty.top/img/image-20211212173349400.png" alt="image-20211212173349400" style="zoom:80%;" />



<h4 id="查看路由配置"><a href="#查看路由配置" class="headerlink" title="查看路由配置"></a>查看路由配置</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> master.sys.availability_replicas  <span class="comment">-- 查看可用性副本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看路由</span></span><br><span class="line"><span class="keyword">SELECT</span> ar.replica_server_name ,</span><br><span class="line">rl.routing_priority ,</span><br><span class="line">( <span class="keyword">SELECT</span> ar2.replica_server_name</span><br><span class="line"><span class="keyword">FROM</span> sys.availability_read_only_routing_lists rl2</span><br><span class="line"><span class="keyword">JOIN</span> sys.availability_replicas <span class="keyword">AS</span> ar2 <span class="keyword">ON</span> rl2.read_only_replica_id</span><br><span class="line"><span class="operator">=</span> ar2.replica_id</span><br><span class="line"><span class="keyword">WHERE</span> rl.replica_id <span class="operator">=</span> rl2.replica_id</span><br><span class="line"><span class="keyword">AND</span> rl.routing_priority <span class="operator">=</span> rl2.routing_priority</span><br><span class="line"><span class="keyword">AND</span> rl.read_only_replica_id <span class="operator">=</span> rl2.read_only_replica_id</span><br><span class="line">) <span class="keyword">AS</span> <span class="string">&#x27;read_only_replica_server_name&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.availability_read_only_routing_lists rl</span><br><span class="line"><span class="keyword">JOIN</span> sys.availability_replicas <span class="keyword">AS</span> ar <span class="keyword">ON</span> rl.replica_id <span class="operator">=</span> ar.replica_id</span><br></pre></td></tr></table></figure>

<p>配置可用性组时没有配置路由：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212163928361.png" alt="image-20211212163928361"></p>
<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立读指针，为当前主节点上每个副本创建副本对应的TCP连接</span></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws11&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(SECONDARY_ROLE (READ_ONLY_ROUTING_URL <span class="operator">=</span> N<span class="string">&#x27;TCP://ws11.jonty.com:1433&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws12&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(SECONDARY_ROLE (READ_ONLY_ROUTING_URL <span class="operator">=</span> N<span class="string">&#x27;TCP://ws12.jonty.com:1433&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws13&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(SECONDARY_ROLE (READ_ONLY_ROUTING_URL <span class="operator">=</span> N<span class="string">&#x27;TCP://ws13.jonty.com:1433&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 配置只读路由副本</span></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws11&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST<span class="operator">=</span>((<span class="string">&#x27;ws12&#x27;</span>,<span class="string">&#x27;ws13&#x27;</span>),<span class="string">&#x27;ws11&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws12&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST<span class="operator">=</span>((<span class="string">&#x27;ws11&#x27;</span>,<span class="string">&#x27;ws13&#x27;</span>),<span class="string">&#x27;ws12&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws13&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST<span class="operator">=</span>((<span class="string">&#x27;ws11&#x27;</span>,<span class="string">&#x27;ws12&#x27;</span>),<span class="string">&#x27;ws13&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211212164241842.png" alt="image-20211212164241842"></p>
<p>查看可用性组属性：</p>
<p>可以看到路由已经配置完成，可以按照需求更改</p>
<img data-src="https://cdn.jonty.top/img/image-20211212164327405.png" alt="image-20211212164327405" style="zoom:80%;" />



<p>测试：</p>
<p>可以看到查询的主机是在两个副本直接切换的，实现<strong>读均衡</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlcmd <span class="operator">-</span>S agvip1 <span class="operator">-</span>K ReadOnly <span class="operator">-</span>d jontydb <span class="operator">-</span>Q &quot;select @@servername&quot;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211212165124505.png" alt="image-20211212165124505" style="zoom:80%;" />



<h4 id="测试写入操作"><a href="#测试写入操作" class="headerlink" title="测试写入操作"></a>测试写入操作</h4><p>手动连接到<code>ws12</code>只读节点，执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use employeedb</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;read only&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到，只读节点是不允许插入数据的</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172911057.png" alt="image-20211212172911057"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><ul>
<li>本文是使用1个域控服务+3节点配置<code>AlwaysOn</code>高可用性组，基于<code>Win Server2019</code>环境。</li>
</ul>
<blockquote>
<p>如果域控服务器挂了那不是就挂了？</p>
</blockquote>
<p>这个时候又可以考虑再添加一个域控，用双域，域弄一个备份域。</p>
<p>域控服务器挂了 只是用户认证有问题，不影响 集群</p>
<ul>
<li><p>3节点情况下配置了读写分离实现负载均衡，2节点则不必要，保证故障转移即可。</p>
</li>
<li><p>在写这篇教程之前配置了无域控双节点AlwaysOn，大概讲一下思路</p>
<p>双节点安装DNS,添加解析(相互配置包括本机)，参考博客：<a href="https://www.cnblogs.com/DragonStart/p/8275182.html">https://www.cnblogs.com/DragonStart/p/8275182.html</a></p>
</li>
</ul>
<p>​        后续安装故障转移群集和AlwaysOn配置操作都差不多。</p>
<ul>
<li>添加新的节点，把之前节点做的操作执行一遍，包括配置DNS、加入域、加入群集，安装数据库、打开AlwaysOn，然后就是可用性组添加副本。</li>
<li>删除副本、可用性组，直接右键删除就好。</li>
<li>添加新的数据库到可用性组，记得全备。</li>
</ul>
<p>AlwaysOn 到此结束</p>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server 2019</tag>
        <tag>AlwaysOn</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 批量处理表</title>
    <url>/2022/05/08/sqlserver-batch-processing-tables/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><div class="note info"><p>由于平台架构的调整，我所负责的项目也迁移到新的框架中了，加上由于历史遗留问题，对表结构有很大影响，为了不影响生产库的数据，需要对测试库和正式库进行结构同步，于是有了这篇文章。</p>
</div>



<h2 id="转换表名"><a href="#转换表名" class="headerlink" title="转换表名"></a>转换表名</h2><p>如果需要批量转换数据库表名，可以使用以下<code>sql</code>生成的<strong>可执行语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;EXEC sp_rename &#x27;</span></span><br><span class="line"><span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;, &#x27;</span></span><br><span class="line"><span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">+</span> <span class="built_in">Lower</span>(TABLE_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="keyword">as</span> sqlstr</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> OBJECTPROPERTY(OBJECT_ID(QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">QUOTENAME(TABLE_NAME)), <span class="string">&#x27;IsMSShipped&#x27;</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_TYPE <span class="operator">=</span> <span class="string">&#x27;BASE TABLE&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_NAME)</span><br></pre></td></tr></table></figure>

<ul>
<li>Lower(TABLE_NAME) ：将表名转换为小写，如果需要转换成大写可以使用<code>Upper()</code></li>
</ul>
<p>如图是生成的可执行SQL语句：</p>
<p><img data-src="https://cdn.jonty.top/img/202205082319209.png" alt="image-20220508231946150"></p>
<p>操作的对象是<code>INFORMATION_SCHEMA.TABLES</code>，可以根据需求进行筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA.TABLES</span><br></pre></td></tr></table></figure>



<h2 id="转换字段"><a href="#转换字段" class="headerlink" title="转换字段"></a>转换字段</h2><p>由于生产库以前使用的是<code>pgsql</code>，生成的字段全部为小写，所以下面是生成转换字段的<code>sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;EXEC sp_rename &#x27;&#x27;&#x27;</span> <span class="operator">+</span> TABLE_SCHEMA <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> TABLE_NAME <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> </span><br><span class="line">COLUMN_NAME <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;</span> <span class="operator">+</span></span><br><span class="line"><span class="built_in">LOWER</span>(COLUMN_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;COLUMN&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> OBJECTPROPERTY(OBJECT_ID(<span class="string">&#x27;[&#x27;</span> <span class="operator">+</span> TABLE_SCHEMA <span class="operator">+</span> <span class="string">&#x27;].[&#x27;</span> <span class="operator">+</span> TABLE_NAME <span class="operator">+</span> <span class="string">&#x27;]&#x27;</span>),</span><br><span class="line"><span class="string">&#x27;isMSShipped&#x27;</span>) <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/202205082331972.png" alt="image-20220508233159927"></p>
<p>这里操作的对象是<code>INFORMATION_SCHEMA.COLUMNS</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA.COLUMNS</span><br></pre></td></tr></table></figure>



<h2 id="批量删除字段"><a href="#批量删除字段" class="headerlink" title="批量删除字段"></a>批量删除字段</h2><p>由于之前迁移<code>pgsql</code>的原因，生成了很多<code>trialxxx</code>的字段，对于这些无用的、历史遗留的也一并解决。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 批量操作所有表中的相同字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;ALTER TABLE [dbo].[&#x27;</span><span class="operator">+</span>tab.name<span class="operator">+</span><span class="string">&#x27;] DROP COLUMN &#x27;</span><span class="operator">+</span> col.name <span class="operator">+</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">as</span> sqlstr <span class="keyword">from</span> </span><br><span class="line">sys.tables tab <span class="keyword">join</span> sys.columns col <span class="keyword">on</span> tab.object_id <span class="operator">=</span> col.object_id <span class="keyword">and</span> col.name <span class="keyword">like</span> <span class="string">&#x27;trial%&#x27;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里筛选条件需要根据实际需求调整</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/202205082344690.png" alt="image-20220508234429639"></p>
<h2 id="批量删除索引"><a href="#批量删除索引" class="headerlink" title="批量删除索引"></a>批量删除索引</h2><p>进行结构同步时，由于字段名变化，需要把所有的索引删除。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除所有索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;drop index &#x27;</span><span class="operator">+</span>o.name<span class="operator">+</span><span class="string">&#x27;.&#x27;</span><span class="operator">+</span>i.name<span class="operator">+</span><span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> sys.indexes i <span class="keyword">join</span> sys.objects o <span class="keyword">on</span>  i.object_id<span class="operator">=</span>o.object_id</span><br><span class="line">  <span class="keyword">where</span> o.type<span class="operator">&lt;&gt;</span><span class="string">&#x27;S&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>这里操作的是<code>sys.indexes</code>，可以根据需求筛选要删除的<strong>索引类型</strong>等。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.indexes</span><br></pre></td></tr></table></figure>



<h2 id="批量删除主外键"><a href="#批量删除主外键" class="headerlink" title="批量删除主外键"></a>批量删除主外键</h2><p>当数据库表中存在主外键关系时，会阻止我们进行更改操作，所以需要删除主外键关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        <span class="string">&#x27;alter table &#x27;</span> <span class="operator">+</span> quotename(schema_name(schema_id)) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">        quotename(object_name(parent_object_id)) <span class="operator">+</span></span><br><span class="line">        <span class="string">&#x27; drop constraint &#x27;</span><span class="operator">+</span>quotename(name) <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> sys.foreign_keys</span><br></pre></td></tr></table></figure>

<p>这里操作的是<code>sys.foreign_keys</code>，可以判断是<strong>主键</strong>或是<strong>外键引用</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.foreign_keys</span><br></pre></td></tr></table></figure>



<h2 id="删除所有表描述"><a href="#删除所有表描述" class="headerlink" title="删除所有表描述"></a>删除所有表描述</h2><p>清空表的描述字段信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;EXEC sp_dropextendedproperty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@name = &#x27;&#x27;MS_Description&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0type = &#x27;&#x27;schema&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0name = &#x27;</span> <span class="operator">+</span> object_schema_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1type = &#x27;&#x27;table&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1name = &#x27;</span> <span class="operator">+</span> object_name(extended_properties.major_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys.extended_properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> extended_properties.class_desc <span class="operator">=</span> <span class="string">&#x27;OBJECT_OR_COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.minor_id <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.name <span class="operator">=</span> <span class="string">&#x27;MS_Description&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="删除所有字段描述"><a href="#删除所有字段描述" class="headerlink" title="删除所有字段描述"></a>删除所有字段描述</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="string">&#x27;EXEC sp_dropextendedproperty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@name = &#x27;&#x27;MS_Description&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0type = &#x27;&#x27;schema&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0name = &#x27;</span> <span class="operator">+</span> object_schema_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1type = &#x27;&#x27;table&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1name = &#x27;</span> <span class="operator">+</span> object_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level2type = &#x27;&#x27;column&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level2name = &#x27;</span> <span class="operator">+</span> columns.name  <span class="keyword">as</span> sqlstr</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys.extended_properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">join</span> sys.columns</span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> columns.object_id <span class="operator">=</span> extended_properties.major_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> columns.column_id <span class="operator">=</span> extended_properties.minor_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> extended_properties.class_desc <span class="operator">=</span> <span class="string">&#x27;OBJECT_OR_COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.minor_id <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.name <span class="operator">=</span> <span class="string">&#x27;MS_Description&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="执行语句"><a href="#执行语句" class="headerlink" title="执行语句"></a>执行语句</h2><p>上面的操作都是按条件生成可执行的SQL语句，并没有执行相关操作。</p>
<p>我们使用<code>sys.sp_executesql</code>执行SQL语句。</p>
<p>对于我们查询的结果集，这里提供以下两种方式执行，大家有更好的方法欢迎提出，这里仅供参考，</p>
<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>使用游标<strong>逐行</strong>执行SQL语句</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">-- 使用游标处理</span><br><span class="line">declare OneCursor cursor----创建游标</span><br><span class="line"><span class="keyword">for</span></span><br><span class="line"></span><br><span class="line">-- 放要执行的sql集合</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;drop index &#x27;</span>+o.name+<span class="string">&#x27;.&#x27;</span>+i.name+<span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> sys.indexes i <span class="keyword">join</span> sys.objects o <span class="keyword">on</span>  i.object_id=o.object_id</span><br><span class="line">  <span class="keyword">where</span> o.type&lt;&gt;<span class="string">&#x27;S&#x27;</span> <span class="keyword">and</span> is_primary_key&lt;&gt;<span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">open OneCursor ---打开游标</span><br><span class="line">declare @ItemName nvarchar(max);---声明<span class="number">2</span>个变量用于填充</span><br><span class="line">fetch next <span class="keyword">from</span> OneCursor <span class="keyword">into</span> @ItemName ---移动到游标的第一行用于填充</span><br><span class="line"><span class="keyword">while</span> @@FETCH_STATUS=<span class="number">0</span> ---若为<span class="number">0</span>，则代表成功执行</span><br><span class="line">begin</span><br><span class="line">print @ItemName</span><br><span class="line">EXECUTE sys.sp_executesql @ItemName</span><br><span class="line">fetch next <span class="keyword">from</span> OneCursor <span class="keyword">into</span> @ItemName ----移动到游标的下一行并填充到变量中</span><br><span class="line">end</span><br><span class="line">close OneCursor ---关闭游标</span><br><span class="line">deallocate OneCursor --删除游标</span><br></pre></td></tr></table></figure>

<h3 id="批量执行"><a href="#批量执行" class="headerlink" title="批量执行"></a>批量执行</h3><p>执行全部SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@sql</span> nvarchar(max) <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="string">&#x27;alter table &#x27;</span> <span class="operator">+</span> quotename(schema_name(schema_id)) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">        quotename(object_name(parent_object_id)) <span class="operator">+</span></span><br><span class="line">        <span class="string">&#x27; drop constraint &#x27;</span><span class="operator">+</span>quotename(name) <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> sys.foreign_keys</span><br><span class="line">    <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">exec</span> sp_executesql <span class="variable">@sql</span>;</span><br></pre></td></tr></table></figure>



<h2 id="扩展查询"><a href="#扩展查询" class="headerlink" title="扩展查询"></a>扩展查询</h2><p><strong>查询数据库表中的所有字段信息以及描述。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   </span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> ddd.value <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> &quot;表名（中文）&quot;,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> d.name <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 表名,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> ddd.value <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 表说明,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line">     a.colorder <span class="keyword">as</span> 字段序号,  </span><br><span class="line">     a.name <span class="keyword">as</span> 字段名,  </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> COLUMNPROPERTY( a.id,a.name,<span class="string">&#x27;IsIdentity&#x27;</span>)<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span><span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 是否自增标识,  </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> sysobjects<span class="comment">--查询主键  </span></span><br><span class="line">                     <span class="keyword">WHERE</span> (name <span class="keyword">in</span>  </span><br><span class="line">                             (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sysindexes   </span><br><span class="line">                               <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id)  <span class="keyword">AND</span> (indid <span class="keyword">in</span>  </span><br><span class="line">                                     (<span class="keyword">SELECT</span> indid <span class="keyword">FROM</span> sysindexkeys  </span><br><span class="line">                                       <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id) <span class="keyword">AND</span> (colid <span class="keyword">in</span>  </span><br><span class="line">                                         (<span class="keyword">SELECT</span> colid <span class="keyword">FROM</span> syscolumns  </span><br><span class="line">                                          <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id) <span class="keyword">AND</span> (name <span class="operator">=</span> a.name)</span><br><span class="line">           )  </span><br><span class="line">                                      )</span><br><span class="line">                    )</span><br><span class="line">        )</span><br><span class="line">           )</span><br><span class="line">      )</span><br><span class="line">         <span class="keyword">AND</span> (xtype <span class="operator">=</span> <span class="string">&#x27;PK&#x27;</span>))<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 主键,<span class="comment">--查询主键END  </span></span><br><span class="line"> b.name <span class="keyword">as</span> 类型,  </span><br><span class="line"> a.length <span class="keyword">as</span> 占用字节数,  </span><br><span class="line"> COLUMNPROPERTY(a.id,a.name,<span class="string">&#x27;PRECISION&#x27;</span>) <span class="keyword">as</span>  长度,  </span><br><span class="line"> isnull(COLUMNPROPERTY(a.id,a.name,<span class="string">&#x27;Scale&#x27;</span>),<span class="number">0</span>) <span class="keyword">as</span> 小数位数,  </span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.isnullable<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span><span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 允许空,  </span><br><span class="line"> isnull(e.text,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> 默认值, </span><br><span class="line"> isnull(g.[<span class="keyword">value</span>],<span class="string">&#x27;&#x27;</span>) <span class="keyword">AS</span> 字段说明   </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">FROM</span> syscolumns a </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> systypes b</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">on</span> a.xtype<span class="operator">=</span>b.xusertype  </span><br><span class="line"> <span class="keyword">inner</span> <span class="keyword">join</span> sysobjects d   </span><br><span class="line"> <span class="keyword">on</span> a.id<span class="operator">=</span>d.id <span class="keyword">and</span> d.xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span> <span class="keyword">and</span> d.name<span class="operator">&lt;&gt;</span><span class="string">&#x27;dtproperties&#x27;</span>  </span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>( <span class="keyword">SELECT</span> major_id, <span class="keyword">value</span> </span><br><span class="line">     <span class="keyword">FROM</span> sys.extended_properties </span><br><span class="line">     <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;MS_Description&#x27;</span> <span class="keyword">AND</span> minor_id <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">as</span> ddd  <span class="keyword">ON</span> a.id <span class="operator">=</span> ddd.major_id</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> syscomments e  </span><br><span class="line"> <span class="keyword">on</span> a.cdefault<span class="operator">=</span>e.id  </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> sys.extended_properties g  </span><br><span class="line"> <span class="keyword">on</span> a.id<span class="operator">=</span>g.major_id <span class="keyword">AND</span> a.colid <span class="operator">=</span> g.minor_id  <span class="keyword">where</span> d.name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> a.id,a.colorder</span><br></pre></td></tr></table></figure>



<p><strong>查询SQL占用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">100</span></span><br><span class="line">[cpu_time],</span><br><span class="line"> [session_id],</span><br><span class="line"> [request_id],</span><br><span class="line"> [start_time] <span class="keyword">AS</span> <span class="string">&#x27;开始时间&#x27;</span>,</span><br><span class="line"> [status] <span class="keyword">AS</span> <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line"> <span class="comment">--[command] AS &#x27;命令&#x27;,</span></span><br><span class="line"> dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span>,</span><br><span class="line"> DB_NAME([database_id]) <span class="keyword">AS</span> <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line"> <span class="comment">--[blocking_session_id] AS &#x27;正在阻塞其他会话的会话ID&#x27;,</span></span><br><span class="line"> der.[wait_type] <span class="keyword">AS</span> <span class="string">&#x27;等待资源类型&#x27;</span>,</span><br><span class="line"> [wait_time] <span class="keyword">AS</span> <span class="string">&#x27;等待时间&#x27;</span>,</span><br><span class="line"> [wait_resource] <span class="keyword">AS</span> <span class="string">&#x27;等待的资源&#x27;</span>,</span><br><span class="line"> [dows].[waiting_tasks_count] <span class="keyword">AS</span> <span class="string">&#x27;当前正在进行等待的任务数&#x27;</span>,</span><br><span class="line"> [<span class="keyword">reads</span>] <span class="keyword">AS</span> <span class="string">&#x27;物理读次数&#x27;</span>,</span><br><span class="line"> [writes] <span class="keyword">AS</span> <span class="string">&#x27;写次数&#x27;</span>,</span><br><span class="line"> [logical_reads] <span class="keyword">AS</span> <span class="string">&#x27;逻辑读次数&#x27;</span>,</span><br><span class="line"> [row_count] <span class="keyword">AS</span> <span class="string">&#x27;返回结果行数&#x27;</span></span><br><span class="line"> <span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> [sys].[dm_os_wait_stats] <span class="keyword">AS</span> dows</span><br><span class="line"> <span class="keyword">ON</span> der.[wait_type]<span class="operator">=</span>[dows].[wait_type]</span><br><span class="line"> <span class="keyword">CROSS</span> APPLY</span><br><span class="line"> sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"> <span class="comment">--WHERE [session_id]&gt;50</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> [cpu_time] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"><span class="keyword">CROSS</span> APPLY</span><br><span class="line">sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"><span class="keyword">WHERE</span> [session_id]<span class="operator">&gt;</span><span class="number">50</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [cpu_time] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">   total_worker_time<span class="operator">/</span>execution_count <span class="keyword">AS</span> avg_cpu_cost, plan_handle,</span><br><span class="line">   execution_count,</span><br><span class="line">   (<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(text, statement_start_offset<span class="operator">/</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">      (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> statement_end_offset <span class="operator">=</span> <span class="number">-1</span></span><br><span class="line">         <span class="keyword">THEN</span> LEN(<span class="keyword">CONVERT</span>(nvarchar(max), text)) <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">         <span class="keyword">ELSE</span> statement_end_offset</span><br><span class="line">      <span class="keyword">END</span> <span class="operator">-</span> statement_start_offset)<span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">   <span class="keyword">FROM</span> sys.dm_exec_sql_text(sql_handle)) <span class="keyword">AS</span> query_text</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_exec_query_stats</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [avg_cpu_cost] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> net_address, hostname,hostprocess,program_name,loginame,login_time <span class="keyword">from</span> master.dbo.sysprocesses</span><br><span class="line"><span class="keyword">where</span> dbid <span class="operator">=</span> DB_ID(<span class="string">&#x27;xsteam_datacenter&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> hostprocess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> p.object_id, object_name<span class="operator">=</span>object_name(p.object_id), p.index_id, buffer_pages<span class="operator">=</span><span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> sys.allocation_units a,sys.dm_os_buffer_descriptors b,     sys.partitions p </span><br><span class="line"><span class="keyword">where</span> a.allocation_unit_id<span class="operator">=</span>b.allocation_unit_id      <span class="keyword">and</span> a.container_id<span class="operator">=</span>p.hobt_id     <span class="keyword">and</span> b.database_id<span class="operator">=</span>db_id()</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.object_id,p.index_id <span class="keyword">order</span> <span class="keyword">by</span> buffer_pages <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>



<h2 id="项目迁移数据库做的调整"><a href="#项目迁移数据库做的调整" class="headerlink" title="项目迁移数据库做的调整"></a>项目迁移数据库做的调整</h2><p>对<code>EF Core</code>迁移数据库做了部分调整，如下：</p>
<p>我们在<code>EntityFrameworkCore</code>项目中添加扩展类，包含以下扩展方法</p>
<p>引入<code>Riven.EntityFrameworkCore</code>包，熊猫维护的开源包</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DbContextExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 映射规则</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;modelBuilder&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModelBuilder <span class="title">UseTableMapping</span>(<span class="params"><span class="keyword">this</span> ModelBuilder modelBuilder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> verifyingEntityType = <span class="keyword">new</span> Func&lt;IMutableEntityType, <span class="built_in">bool</span>&gt;((e) =&gt; EntityHelper.IsEntity(e.ClrType));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelBuilder</span><br><span class="line">            .TableMappingTo(verifyingEntityType, (x) =&gt; x.ToLower()) <span class="comment">// 将表名和字段映射为小写</span></span><br><span class="line">            .MapDiscriminators(verifyingEntityType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并在<code>DbContext</code>添加对扩展方法的调用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    modelBuilder.UseTableMapping();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们重新迁移到一个新的数据库，使用以下迁移命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Add-Migration initdb</span><br><span class="line">Update-DataBase</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要删除之前生成的迁移文件</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>知乎关于我国高等教育的看法</title>
    <url>/2021/09/27/the-systematic-failure-of-higher-education-in-china/</url>
    <content><![CDATA[<p>和老同学聊到在学校的生活，突然想到之前在知乎看到的这篇帖子，转载记录一下</p>
<p><a href="https://www.zhihu.com/people/517a82a684971b49348575efaa8f6fdd">@Youngster38324</a> 的回答透露出来了我国高等教育系统中的不少问题：</p>
<ol>
<li><strong>「进大学前唯分数和同质化教育」</strong>导致了太多人去大学后根本不知道自己要干嘛，很多人专业根本就不是自己选的更不要说知道自己有没有兴趣了，即便是很多高分考生也路径依赖地以为继续努力填鸭就能成功，没有意识到高考后的人生已经换赛道了。作为解决方案，可以引入类似美国 AP（Advanced Placement）的预科制度以及调整整个社会鼓励向自我发展看而不是向钱看的风气。</li>
<li><strong>「进大学后专业制度没有容错性」</strong>，即便已经发现自己不喜欢被录取专业了也没有办法，因为转专业制度不完善（通常要求你先要在你已经不喜欢了的本专业内卷到班级前多少名）。在不少西方学校，专业可以 undecided（先上课再决定专业，比如经典的哈佛 CS50，你上下来感兴趣了再去选 CS）；学位本身只是某个学科下课程学分累计的自然结果，因此可以灵活的转专业与多学位；班级这种促进内卷的概念也被弱化，强调跟自己比关注个人的成长，学生自己控制上几年课，念几个学位，中间休学一下都没关系。</li>
<li>前两步的结果就是导致大学为了毕业率把<strong>「评判标准搞成了平均主义」</strong>，为了能够每年顺利向社会输送一批（80% 将来都不会从事本专业）的人才，打分根据每年学生情况动态规划自适应，把大学搞成了「严进宽出」。其实大学教育更应该强调「宽进严出」，无论你底子如何，无论重修几次，你只要通过了某个（相对稳定的）客观标准就是合格，为了保证该制度的机械性运作，就要辅以严格的日常作业计分，对「作弊」零容忍（自动化判重，发现一次重修两次退学）。</li>
<li>平均主义进一步导致<strong>「课程设置没有灵活性无法自定义」</strong>，老师不但要照顾及格率还有一颗圣母心希望那些对专业没什么兴趣的人能好歹学到点东西，同时又真心欣赏且想要给予好学的尖子生资源，最后即便绞尽脑汁了也还是只能弄出个在差生里下限高在尖子生里上限低的课程安排两面不当人 —— 尖子生觉得课程要求太低不能激发自己的潜力喂不饱（常见于私下要求加难度或者去无学分旁听），摸鱼的觉得老师影响了我的快乐学习（常见于课堂上一布置作业下面就叫苦连天）该挂还是挂或者 60 分万岁。在不少西方学校学生，课程表可以自行安排，一个课可以开多个班次照顾灵活性，学霸可以比别人多上任意节课，也可以跨专业选课或者减少课程增加实习或研究，而且难度自选只要你点过前置技能就行。</li>
</ol>
<p>有类似迟先生这样诉求的人很多，可是一个系统很难由系统内的个体改变，所以很多个体选择了做局部优化趋利避害陪玩成为既得利益者，或者全局优化更换自己所处的系统。</p>
<p>只要所处系统里的大部分个体都已经默许了这个游戏规则，无论迟先生是「凡尔赛」还是「理想主义」，改变赛道规则就会被其他个体认为侵害到利益。小孩才分对错，成年人的屁股都是歪得，都是各取所需。</p>
<blockquote>
<p>作者：黄玄<br>链接：<a href="https://www.zhihu.com/question/439622084/answer/1685314467">https://www.zhihu.com/question/439622084/answer/1685314467</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
]]></content>
      <categories>
        <category>Share</category>
      </categories>
      <tags>
        <tag>Zhihu</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware桥接模式连接失败</title>
    <url>/2021/10/27/vmware-bridge-ping-nowhere/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习<code>Linux</code>以及<code>Oracle</code>数据库，为出差<code>AMD</code>做准备。（未知）顺便顺点CPU回来😂</p>
<p>🐂*吹过头了，话不多说，上图：</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204530933.png" alt="image-20211027204530933" style="zoom:67%;" />

<p>使用<strong>VMware</strong>安装<strong>Oracle Linux</strong>,使用<u>桥接模式(Bridge)</u>连接网络。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.2.1</span><br></pre></td></tr></table></figure>

<p>在<code>ping</code>本机时发现无法连接。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="检查网络设置"><a href="#检查网络设置" class="headerlink" title="检查网络设置"></a>检查网络设置</h3><p>查看<strong>Linux</strong>中<strong>IPv4</strong>设置，</p>
<p>这里使用的手动模式获取，</p>
<ul>
<li>地址：192.168.2.51</li>
<li>掩码：255.255.255.0</li>
<li>网关：192.168.2.1</li>
</ul>
<img data-src="https://cdn.jonty.top/img/image-20211027204554710.png" alt="image-20211027204554710" style="zoom:67%;" />

<p>与本机地址对比，检查是否配置错误</p>
<p>使用以下命令查看<code>win</code>的网络配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：linux中为：ifconfig</p>
</blockquote>
<img data-src="https://cdn.jonty.top/img/image-20211027200202788.png" style="zoom:67%;" />

<p>对比发现：掩码和网关一致，IP也未冲突。所以Linux中配置无误。</p>
<h3 id="检查虚拟网络编辑器"><a href="#检查虚拟网络编辑器" class="headerlink" title="检查虚拟网络编辑器"></a>检查虚拟网络编辑器</h3><p>查看一下<strong>VMware</strong>网络编辑器中<strong>桥接模式</strong>的配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204653746.png" alt="image-20211027204653746" style="zoom:67%;" />

<p>点击更改设置，一般桥接模式<strong>桥接地址</strong>为<strong>自动</strong>选择，建议配置为电脑网络连接使用的网卡地址。</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204735327.png" alt="image-20211027204735327" style="zoom:67%;" />

<h3 id="检查本机网卡"><a href="#检查本机网卡" class="headerlink" title="检查本机网卡"></a>检查本机网卡</h3><p>打开<strong>控制面板</strong>，找到当前连接网络</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204905408.png" alt="image-20211027204905408" style="zoom:67%;" />

<p>查看连接网络属性</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204929950.png" alt="image-20211027204929950" style="zoom:67%;" />

<p>可以看到，当前连接网络使用的网卡为：<code>Realtek PCIe GbE Family Controller</code>,我们将VMware虚拟网络编辑器中桥接模式的网卡设置为本机当前网络使用的网卡。</p>
<p>选择后点击<strong>应用</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211027205006171.png" alt="image-20211027205006171" style="zoom:67%;" />

<h3 id="检查连接状态"><a href="#检查连接状态" class="headerlink" title="检查连接状态"></a>检查连接状态</h3><p>回到<strong>Linux</strong>中，再次<code>ping</code>连接成功。</p>
<img data-src="https://cdn.jonty.top/img/image-20211027205030251.png" alt="image-20211027205030251" style="zoom:67%;" />

<p>这是一个很小的问题，记录一下。</p>
<blockquote>
<p>有时候问题很复杂，答案却很简单</p>
</blockquote>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>VMware桥接模式</strong>：</p>
<p>VMware桥接模式，也就是将虚拟机的虚拟网络适配器与主机的物理网络适配器进行交接，虚拟机中的虚拟网络适配器可通过主机中的物理网络适配器直接访问到外部网络。</p>
<p>简而言之，这就好像在上图所示的局域网中添加了一台新的、独立的计算机一样。因此，虚拟机也会占用局域网中的一个IP地址，并且可以和其他终端进行相互访问。</p>
<p>桥接模式网络连接支持有线和无线主机网络适配器。如果你想把虚拟机当做一台完全独立的计算机看待，并且允许它和其他终端一样的进行网络通信，那么桥接模式通常是虚拟机访问网络的最简单途径。因为”桥接模式”下虚拟机相当于局域网中的一台电脑，所以IP同主机的IP在同一网段</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 美化</title>
    <url>/2021/10/03/windows-terminal-beautify/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用了很久的<code>Terminal+PowerShell</code>,加上装了<code>oh-my-posh</code>这个插件，不管用起来还是看起来都很舒服。</p>
<img data-src="https://cdn.jonty.top/img/image-20211003000724702.png" alt="image-20211003000724702" style="zoom: 80%;" />

<p>由于电脑恢复了，重新配置一下，记录以供参考。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>1、下载<code>Terminal</code></p>
<p>可以直接在微软商店下载，我这里已经安装过了。</p>
<img data-src="https://cdn.jonty.top/img/image-20211003001214531.png" alt="image-20211003001214531" style="zoom:80%;" />

<p>2、安装<code>PowerShell</code></p>
<blockquote>
<p>这里的PowerShell并非<code>win</code>系统自带的<code>PowerShell</code>,而是它的一个跨平台版本，类似于<code>.NET</code>与<code>.NET Core</code>的关系。</p>
</blockquote>
<p><a href="https://github.com/PowerShell/PowerShell/releases">下载地址</a>，找到系统对应的版本下载安装，我这里下载的是这个版本</p>
<img data-src="https://cdn.jonty.top/img/image-20211003001938075.png" alt="image-20211003001938075" style="zoom:80%;" />

<p>3、安装插件</p>
<ul>
<li><code>PSReadLine</code>:提供自动补全等功能，GitHub地址：<a href="https://github.com/PowerShell/PSReadLine">https://github.com/PowerShell/PSReadLine</a></li>
<li><code>posh-git</code>:提供git的状态显示和命令补全。</li>
<li><code>oh-my-posh</code>:提供自定义主题和配色等,官网：<a href="https://ohmyposh.dev/">https://ohmyposh.dev/</a></li>
</ul>
<p>使用管理员打开新安装的<code>PowerShell</code>,执行下列命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Install-Module PSReadline</span><br><span class="line">Install-Module posh-git</span><br><span class="line">winget install oh-my-posh</span><br></pre></td></tr></table></figure>

<p>安装时提示则直接输入<code>y</code>信任即可。</p>
<p>4、安装字体</p>
<p><a href="https://www.nerdfonts.com/font-downloads">下载字体</a> 选择合适的字体，我这里使用的是<code>FiraCode</code></p>
<blockquote>
<p>顺便推荐一下使用<code>FiraCode</code>码代码也挺爽的</p>
<p>使用Nerd Font不会导致乱码，特殊的一些符号会乱码，如图</p>
</blockquote>
<img data-src="https://cdn.jonty.top/img/image-20211003003954813.png" alt="image-20211003003954813" style="zoom:80%;" />

<p>将下载下来的字体文件全选，拖入安装</p>
<img data-src="https://cdn.jonty.top/img/image-20211003004813071.png" alt="image-20211003004813071" style="zoom:80%;" />

<p>5、编辑<code>$Profile</code>文件</p>
<p>Windows:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">notepad<span class="selector-class">.exe</span> <span class="variable">$Profile</span></span><br></pre></td></tr></table></figure>

<p>没有文件则创建，配置一下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$OutputEncoding</span> = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding</span><br><span class="line"><span class="comment">#------------------------------- Import Modules BEGIN -------------------------------</span></span><br><span class="line"><span class="comment"># 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 PowerShell 主题 jandedobbeleer替换成主题名称</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot;</span> | Invoke-Expression</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------- Import Modules END   -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------  Set Hot-keys BEGIN  -------------------------------</span></span><br><span class="line"><span class="comment"># 设置 Tab 键补全</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key Tab -Function Complete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+d 为菜单补全和 Intellisense</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Tab&quot;</span> -Function MenuComplete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key <span class="string">&quot;Ctrl+d&quot;</span> -Function ViExit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置预测文本来源为历史记录</span></span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+z 为撤销</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Ctrl+z&quot;</span> -Function Undo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置向上键为后向搜索历史记录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置向下键为前向搜索历史纪录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line"><span class="comment">#-------------------------------  Set Hot-keys END    -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------   Set Alias Begin    -------------------------------</span></span><br><span class="line"><span class="comment"># 1. 编译函数 make</span></span><br><span class="line"><span class="keyword">function</span> MakeThings &#123;</span><br><span class="line">    nmake.exe <span class="variable">$args</span> -nologo</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name make -Value MakeThings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 更新系统 os-update</span></span><br><span class="line">Set-Alias -Name os-update -Value Update-Packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看目录 ls &amp; ll</span></span><br><span class="line"><span class="keyword">function</span> ListDirectory &#123;</span><br><span class="line">    (Get-ChildItem).Name</span><br><span class="line">    Write-Host(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name ls -Value ListDirectory</span><br><span class="line">Set-Alias -Name ll -Value Get-ChildItem</span><br><span class="line"><span class="comment">#-------------------------------    Set Alias END     -------------------------------</span></span><br></pre></td></tr></table></figure>

<p>主题可以通过<code>Get-PoshThemes</code>命令查看，选择喜欢的然后将主题名称替换即可。</p>
<p>6、配置<code>Terminal</code></p>
<p>打开配置文件<img data-src="https://cdn.jonty.top/img/image-20211003005518036.png" alt="image-20211003005518036" style="zoom:80%;" /></p>
<p>加入以下配置：</p>
<p>视各自的情况配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;defaultProfile&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, # 设置默认</span><br><span class="line">&quot;profiles&quot;: </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;defaults&quot;: &#123;&#125;,</span><br><span class="line">        &quot;list&quot;: </span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;acrylicOpacity&quot;: 0.5,</span><br><span class="line">                &quot;backgroundImage&quot;: null,</span><br><span class="line">                &quot;commandline&quot;: &quot;C:/Program Files/PowerShell/7/pwsh.exe -nologo&quot;,</span><br><span class="line">                &quot;fontSize&quot;: 11,</span><br><span class="line">                &quot;fontFace&quot;: &quot;FiraCode Nerd Font&quot;,</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,</span><br><span class="line">                &quot;hidden&quot;: false,</span><br><span class="line">                &quot;historySize&quot;: 9001,</span><br><span class="line">                &quot;name&quot;: &quot;pwsh&quot;,</span><br><span class="line">                &quot;padding&quot;: &quot;5, 5, 20, 25&quot;,</span><br><span class="line">                &quot;snapOnInput&quot;: true,</span><br><span class="line">                &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;,</span><br><span class="line">                &quot;startingDirectory&quot;: &quot;.&quot;,</span><br><span class="line">                &quot;useAcrylic&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>7、<code>VsCode</code>配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211003005954791.png" alt="image-20211003005954791" style="zoom:80%;" />

<p>至此大功告成，这下是不是卷的更有动力了。</p>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装Linux</title>
    <url>/2021/10/27/vmware-install-linux/</url>
    <content><![CDATA[<h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机(Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。<br>虚拟系统通过生成现有操作系统的全新虚拟镜像，它具有真实windows系统完全一样的功能，进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有自己的独立桌面，不会对真正的系统产生任何影响，而且具有能够在现有系统与虚拟镜像之间灵活切换的一类操作系统。<br>流行的虚拟机厂家有VMware、 loracle Virtual Bo、微软Virtua PC，它们都能在Windows系统上虚拟出多个计算机(Win/Linux)</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用VMware安装Oracle Linux 7.6</p>
<p>需要安装好<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation</a></p>
<h4 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h4><h5 id="新建向导"><a href="#新建向导" class="headerlink" title="新建向导"></a>新建向导</h5><img data-src="https://cdn.jonty.top/img/image-20211027184244784.png" alt="image-20211027184244784"  />

<h5 id="选择兼容版本"><a href="#选择兼容版本" class="headerlink" title="选择兼容版本"></a>选择兼容版本</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027184306364.png" alt="image-20211027184306364"></p>
<h5 id="稍后安装操作系统"><a href="#稍后安装操作系统" class="headerlink" title="稍后安装操作系统"></a>稍后安装操作系统</h5><p>方便后续自定义配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027184359980.png" alt="image-20211027184359980"></p>
<h5 id="选择Linux"><a href="#选择Linux" class="headerlink" title="选择Linux"></a>选择Linux</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027191801120.png" alt="image-20211027191801120"></p>
<h5 id="名称和存储位置"><a href="#名称和存储位置" class="headerlink" title="名称和存储位置"></a>名称和存储位置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192047604.png" alt="image-20211027192047604"></p>
<h5 id="处理器配置"><a href="#处理器配置" class="headerlink" title="处理器配置"></a>处理器配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192100304.png" alt="image-20211027192100304"></p>
<h5 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192129135.png" alt="image-20211027192129135"></p>
<h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192149657.png" alt="image-20211027192149657"></p>
<h5 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h5><p>控制器类型</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192206105.png" alt="image-20211027192206105"></p>
<p>磁盘类型</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192223604.png" alt="image-20211027192223604"></p>
<p>创建磁盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192248532.png" alt="image-20211027192248532"></p>
<p>指定磁盘容量，存储为单个文件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192321137.png" alt="image-20211027192321137"></p>
<p>指定磁盘文件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192421162.png" alt="image-20211027192421162"></p>
<h5 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192428709.png" alt="image-20211027192428709"></p>
<h4 id="镜像设置"><a href="#镜像设置" class="headerlink" title="镜像设置"></a>镜像设置</h4><img data-src="https://cdn.jonty.top/img/image-20211027192737113.png" alt="image-20211027192737113" style="zoom:67%;" />

<h4 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h4><h5 id="禁用内存页面休整"><a href="#禁用内存页面休整" class="headerlink" title="禁用内存页面休整"></a>禁用内存页面休整</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192833894.png" alt="image-20211027192833894"></p>
<h5 id="添加共享文件夹"><a href="#添加共享文件夹" class="headerlink" title="添加共享文件夹"></a>添加共享文件夹</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192934066.png" alt="image-20211027192934066"></p>
<h4 id="Linux系统设置"><a href="#Linux系统设置" class="headerlink" title="Linux系统设置"></a>Linux系统设置</h4><h5 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h5><p>点击启动虚拟机，选择安装Oracle,按<code>Enter</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027193123710.png" alt="image-20211027193123710"></p>
<h5 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027193415173.png" alt="image-20211027193415173"></p>
<h5 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027194247111.png" alt="image-20211027194247111"></p>
<p>可按照自己的需求配置，这里选择了带有操作界面的服务器选项</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027194812583.png" alt="image-20211027194812583"></p>
<p>添加附加选项，按实际需求选择</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027194850975.png" alt="image-20211027194850975"></p>
<h5 id="安装目标位置"><a href="#安装目标位置" class="headerlink" title="安装目标位置"></a>安装目标位置</h5><p>自定义分区，选择<code>我要配置分区</code>后点击完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195039952.png" alt="image-20211027195039952"></p>
<p>选择标准分区 自动创建</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195251934.png" alt="image-20211027195251934"></p>
<p>将/home的挂载点更改为/opt/oracle,点击完成</p>
<p>方便后续安装<code>Oracle</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195443704.png" alt="image-20211027195443704"></p>
<p>接受更改</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195634673.png" alt="image-20211027195634673"></p>
<h5 id="更改网络配置"><a href="#更改网络配置" class="headerlink" title="更改网络配置"></a>更改网络配置</h5><p>打开网卡，点击配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200029445.png" alt="image-20211027200029445"></p>
<p>选择IPV4地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200121652.png" alt="image-20211027200121652"></p>
<p>需要对应本机电脑的网络配置，下面是我的，仅供参考</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200202788.png" alt="image-20211027200202788"></p>
<h5 id="关闭安全策略"><a href="#关闭安全策略" class="headerlink" title="关闭安全策略"></a>关闭安全策略</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027200302409.png" alt="image-20211027200302409"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200314652.png" alt="image-20211027200314652"></p>
<h5 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h5><p>点击开始安装后，配置<strong>root</strong>用户密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200422604.png" alt="image-20211027200422604"></p>
<p>可以顺便创建一个普通用户</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200540510.png" alt="image-20211027200540510"></p>
<h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><p>安装完成后重启进入系统</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027202258848.png" alt="image-20211027202258848"></p>
<p>记得接受许可证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027202457891.png" alt="image-20211027202457891"></p>
<p>至此就安装完成。不当之处欢迎指正</p>
<blockquote>
<p>种一棵树最好的时间是十年前,其次是现在</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server故障转移集群 - 02</title>
    <url>/2021/12/02/sqlserver-ha-02/</url>
    <content><![CDATA[<h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><table>
<thead>
<tr>
<th>节点</th>
<th>public ip</th>
<th>private ip</th>
<th>域名</th>
<th>配置</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>ws21</td>
<td>192.168.1.21</td>
<td>10.10.10.21</td>
<td>ws21.gctsql.com</td>
<td>4G 2C 100G</td>
<td></td>
</tr>
<tr>
<td>ws22</td>
<td>192.168.1.22</td>
<td>10.10.10.22</td>
<td>ws22.gctsql.com</td>
<td>4G 2C 100G</td>
<td></td>
</tr>
<tr>
<td>ws30</td>
<td>192.168.1.30</td>
<td>10.10.10.30</td>
<td>ws30.gctsql.com</td>
<td>4G 2C 100G + 200G(数据盘)</td>
<td></td>
</tr>
<tr>
<td>集群IP</td>
<td>192.168.1.25</td>
<td></td>
<td>gctcluster</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DTC</td>
<td>192.168.1.26</td>
<td></td>
<td></td>
<td></td>
<td>分布式事务协调器</td>
</tr>
<tr>
<td>VIP</td>
<td>192.168.1.27</td>
<td></td>
<td>gctvip</td>
<td></td>
<td>访问IP</td>
</tr>
</tbody></table>
<h3 id="配置共享存储"><a href="#配置共享存储" class="headerlink" title="配置共享存储"></a>配置共享存储</h3><p>共享磁盘</p>
<table>
<thead>
<tr>
<th>磁盘</th>
<th>盘符</th>
<th>大小</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>data1</td>
<td>S</td>
<td>50G</td>
<td></td>
</tr>
<tr>
<td>data2</td>
<td>T</td>
<td>50G</td>
<td></td>
</tr>
<tr>
<td>log</td>
<td>L</td>
<td>10G</td>
<td>分布式事务协调器使用</td>
</tr>
<tr>
<td>qdisk</td>
<td>Q</td>
<td>5G</td>
<td>仲裁盘</td>
</tr>
</tbody></table>
<h4 id="添加硬盘"><a href="#添加硬盘" class="headerlink" title="添加硬盘"></a>添加硬盘</h4><p><code>ws30</code>节点添加一块<strong>200G</strong>的磁盘用作共享存储</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201185835015.png" alt="image-20211201185835015"></p>
<h4 id="更改虚拟机文件"><a href="#更改虚拟机文件" class="headerlink" title="更改虚拟机文件"></a>更改虚拟机文件</h4><p>在<strong>每个节点</strong>的虚拟机文件下添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">disk.locking = <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>



<img data-src="https://cdn.jonty.top/img/image-20211201190155960.png" alt="image-20211201190155960" style="zoom:80%;" />



<h4 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h4><p><code>ws30</code>节点</p>
<p>将磁盘初始化</p>
<img data-src="https://cdn.jonty.top/img/image-20211201190818354.png" alt="image-20211201190818354" style="zoom:80%;" />

<p>新建简单卷</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201191011475.png" alt="image-20211201191011475"></p>
<h4 id="添加ISCSI"><a href="#添加ISCSI" class="headerlink" title="添加ISCSI"></a>添加ISCSI</h4><p>打开服务器管理器 选择添加角色和功能</p>
<img data-src="https://cdn.jonty.top/img/image-20211201192103693.png" alt="image-20211201192103693" style="zoom:67%;" />



<p>服务器角色之前一直默认下一步，选择添加<code>ISCSI</code>功能，下一步到<strong>安装</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201192249064.png" alt="image-20211201192249064" style="zoom:80%;" />

<img data-src="https://cdn.jonty.top/img/image-20211201192625843.png" alt="image-20211201192625843" style="zoom:80%;" />



<p>点击<strong>文件和存储服务</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201192744209.png" alt="image-20211201192744209" style="zoom:80%;" />



<h4 id="创建虚拟磁盘"><a href="#创建虚拟磁盘" class="headerlink" title="创建虚拟磁盘"></a>创建虚拟磁盘</h4><p>选择<strong>ISCSI</strong>,点击添加</p>
<img data-src="https://cdn.jonty.top/img/image-20211201192819064.png" alt="image-20211201192819064" style="zoom:80%;" />

<h5 id="step1-存储位置"><a href="#step1-存储位置" class="headerlink" title="step1 存储位置"></a>step1 存储位置</h5><p>选择存储位置为添加的共享存储<code>F:</code>盘，下一步</p>
<img data-src="https://cdn.jonty.top/img/image-20211201192910694.png" alt="image-20211201192910694" style="zoom:80%;" />

<h5 id="step2-磁盘名称"><a href="#step2-磁盘名称" class="headerlink" title="step2 磁盘名称"></a>step2 磁盘名称</h5><img data-src="https://cdn.jonty.top/img/image-20211201193035095.png" alt="image-20211201193035095" style="zoom:80%;" />



<h5 id="step2-磁盘大小"><a href="#step2-磁盘大小" class="headerlink" title="step2 磁盘大小"></a>step2 磁盘大小</h5><p>新建数据盘1，大小50G,选择动态扩展</p>
<img data-src="https://cdn.jonty.top/img/image-20211201193155029.png" alt="image-20211201193155029" style="zoom:80%;" />



<h5 id="step3-新建目标"><a href="#step3-新建目标" class="headerlink" title="step3 新建目标"></a>step3 新建目标</h5><img data-src="https://cdn.jonty.top/img/image-20211201193321361.png" alt="image-20211201193321361" style="zoom:80%;" />



<img data-src="https://cdn.jonty.top/img/image-20211201193348497.png" alt="image-20211201193348497" style="zoom:80%;" />



<h5 id="step4-添加访问服务器"><a href="#step4-添加访问服务器" class="headerlink" title="step4 添加访问服务器"></a>step4 添加访问服务器</h5><img data-src="https://cdn.jonty.top/img/image-20211201193518559.png" alt="image-20211201193518559" style="zoom:80%;" />

<h5 id="step5-验证服务"><a href="#step5-验证服务" class="headerlink" title="step5 验证服务"></a>step5 验证服务</h5><p><strong>不启用</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201193600540.png" alt="image-20211201193600540" style="zoom:80%;" />



<h5 id="step6-创建"><a href="#step6-创建" class="headerlink" title="step6 创建"></a>step6 创建</h5><img data-src="https://cdn.jonty.top/img/image-20211201193618040.png" alt="image-20211201193618040" style="zoom:80%;" />



<img data-src="https://cdn.jonty.top/img/image-20211201193625413.png" alt="image-20211201193625413" style="zoom:80%;" />



<p>按照step1 - step6 依次创建：data02|logdisk|qdisk</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201193937062.png" alt="image-20211201193937062"></p>
<h4 id="连接ISCSI"><a href="#连接ISCSI" class="headerlink" title="连接ISCSI"></a>连接ISCSI</h4><p><code>ws21</code>、<code>ws22</code>节点连接共享存储，在管理工具打开<code>ISCSI发起程序</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194248998.png" alt="image-20211201194248998"></p>
<p>系统启动的<code>ISCSI</code>服务</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194354735.png" alt="image-20211201194354735"></p>
<p>目标为<code>ws30</code>节点的<code>private ip</code> ，参考上一篇配置<strong>网卡属性</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194554980.png" alt="image-20211201194554980"></p>
<p>选择卷和设备，点击自动配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194628569.png" alt="image-20211201194628569"></p>
<p>计算机管理 -&gt; 磁盘管理，可以看到共享磁盘已经挂载</p>
<img data-src="https://cdn.jonty.top/img/image-20211201194955729.png" alt="image-20211201194955729" style="zoom:80%;" />



<p>这时候可以看到<code>ws30</code>节点<code>ISCSI</code>已连接</p>
<img data-src="https://cdn.jonty.top/img/image-20211201195058797.png" alt="image-20211201195058797" style="zoom: 67%;" />

<p><img data-src="https://cdn.jonty.top/img/image-20211201195659064.png" alt="image-20211201195659064"></p>
<h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><p>在<code>ws21</code>节点操作，先将<code>ws22</code>挂起</p>
<p>磁盘管理</p>
<h5 id="联机"><a href="#联机" class="headerlink" title="联机"></a>联机</h5><p>右键共享的磁盘，点击<strong>联机</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201200524618.png" alt="image-20211201200524618"></p>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p><img data-src="https://cdn.jonty.top/img/image-20211201200623970.png" alt="image-20211201200623970"></p>
<h5 id="新建卷"><a href="#新建卷" class="headerlink" title="新建卷"></a>新建卷</h5><img data-src="https://cdn.jonty.top/img/image-20211201201324395.png" alt="image-20211201201324395" style="zoom:80%;" />

<p><img data-src="https://cdn.jonty.top/img/image-20211201201341777.png" alt="image-20211201201341777"></p>
<p>将<code>ws22</code>节点重启，然后将盘符修改与<code>ws21</code>节点一致</p>
<img data-src="https://cdn.jonty.top/img/image-20211201201927696.png" alt="image-20211201201927696" style="zoom:80%;" />

<p>将两台节点机器重启</p>
<p>查看<code>ws30</code>节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201202418405.png" alt="image-20211201202418405"></p>
<h3 id="配置域环境"><a href="#配置域环境" class="headerlink" title="配置域环境"></a>配置域环境</h3><h4 id="设置网卡DNS"><a href="#设置网卡DNS" class="headerlink" title="设置网卡DNS"></a>设置网卡DNS</h4><p>将<code>ws30</code>节点设为<strong>DNS</strong>服务器，更改为本机IP</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201202650666.png" alt="image-20211201202650666"></p>
<h4 id="添加域服务"><a href="#添加域服务" class="headerlink" title="添加域服务"></a>添加域服务</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>添加角色和功能向导，选择添加<code>Active Directory域服务</code>和<code>DNS</code>服务器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201202841391.png" alt="image-20211201202841391"></p>
<p>安装完成后点击<code>将此服务器提升为域服务器</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201203328080.png" alt="image-20211201203328080"></p>
<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>选择添加<code>新林</code>,自定义一个<code>根域名</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201203602401.png" alt="image-20211201203602401"></p>
<p>设置DNS密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201210755796.png" alt="image-20211201210755796"></p>
<p>下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201210837952.png" alt="image-20211201210837952"></p>
<p>下一步 <code>Net BIOS</code>域名会自动配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201211035339.png" alt="image-20211201211035339"></p>
<p>路径默认 ， 下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201211100277.png" alt="image-20211201211100277"></p>
<p>检查，警告可忽略，点击安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201211327973.png" alt="image-20211201211327973"></p>
<p>安装完成后会自动重启，并使用域用户登录</p>
<img data-src="https://cdn.jonty.top/img/image-20211202092241661.png" style="zoom:80%;" />

<p>禁用windows更新服务</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202092911752.png" alt="image-20211202092911752"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202093234791.png" alt="image-20211202093234791"></p>
<h4 id="加入域"><a href="#加入域" class="headerlink" title="加入域"></a>加入域</h4><p><code>ws21</code>、<code>ws22</code>节点更改DNS</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202095606856.png" alt="image-20211202095606856"></p>
<p>高级系统设置，更改<strong>计算机域</strong>，需要输入<strong>域服务器</strong><code>ws30</code>服务器的<strong>账号密码</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202095208317.png" alt="image-20211202095208317"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202100254263.png" alt="image-20211202100254263"></p>
<p>两个节点加入域完成后重启，查看是否配置成功：</p>
<p>node<code>ws21</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202100717557.png" alt="image-20211202100717557"></p>
<p>node<code>ws22</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202100757069.png" alt="image-20211202100757069"></p>
<h3 id="安装故障转移集群"><a href="#安装故障转移集群" class="headerlink" title="安装故障转移集群"></a>安装故障转移集群</h3><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><p>节点<code>ws21</code>、节点<code>ws22</code>均配置</p>
<p>重命名网卡</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101040029.png" alt="image-20211202101040029"></p>
<h5 id="配置public网卡"><a href="#配置public网卡" class="headerlink" title="配置public网卡"></a>配置<code>public</code>网卡</h5><p>跃点配置为5</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101150519.png" alt="image-20211202101150519"></p>
<h5 id="配置private网卡"><a href="#配置private网卡" class="headerlink" title="配置private网卡"></a>配置<code>private</code>网卡</h5><p>跃点配置为75</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101314516.png" alt="image-20211202101314516"></p>
<p>取消<code>DNS</code>注册</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101436509.png" alt="image-20211202101436509"></p>
<p>禁用<code>NET BIOS</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101526718.png" alt="image-20211202101526718"></p>
<p>查看</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101716057.png" alt="image-20211202101716057"></p>
<h4 id="配置故障转移集群"><a href="#配置故障转移集群" class="headerlink" title="配置故障转移集群"></a>配置故障转移集群</h4><h5 id="安装管理工具"><a href="#安装管理工具" class="headerlink" title="安装管理工具"></a>安装管理工具</h5><p>功能，选择故障转移集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202102733214.png" alt="image-20211202102733214"></p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>打开故障转移集群管理器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103144127.png" alt="image-20211202103144127"></p>
<p>选择验证配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103337978.png" alt="image-20211202103337978"></p>
<p>加入<code>ws21</code>、<code>ws22</code>节点</p>
<p>运行测试：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103502122.png" alt="image-20211202103502122"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104126258.png" alt="image-20211202104126258"></p>
<p>配置集群地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104427813.png" alt="image-20211202104427813"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104545164.png" alt="image-20211202104545164"></p>
<p>查看集群状态</p>
<img data-src="https://cdn.jonty.top/img/image-20211202104602813.png" alt="image-20211202104602813" style="zoom:80%;" />



<p><img data-src="https://cdn.jonty.top/img/image-20211202104618644.png" alt="image-20211202104618644"></p>
<p>查看DNS</p>
<img data-src="https://cdn.jonty.top/img/image-20211202104828009.png" alt="image-20211202104828009" style="zoom:67%;" />



<h4 id="配置仲裁"><a href="#配置仲裁" class="headerlink" title="配置仲裁"></a>配置仲裁</h4><p><img data-src="https://cdn.jonty.top/img/image-20211202105123405.png" alt="image-20211202105123405"></p>
<h5 id="配置仲裁选项"><a href="#配置仲裁选项" class="headerlink" title="配置仲裁选项"></a>配置仲裁选项</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202105231712.png" alt="image-20211202105231712"></p>
<h5 id="配置仲裁鉴证"><a href="#配置仲裁鉴证" class="headerlink" title="配置仲裁鉴证"></a>配置仲裁鉴证</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202105316643.png" alt="image-20211202105316643"></p>
<h5 id="选择存储"><a href="#选择存储" class="headerlink" title="选择存储"></a>选择存储</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202105357931.png" alt="image-20211202105357931"></p>
<h4 id="DTC"><a href="#DTC" class="headerlink" title="DTC"></a>DTC</h4><p>分布式事务协调器</p>
<p>右键角色</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105532266.png" alt="image-20211202105532266"></p>
<p>配置访问点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105610048.png" alt="image-20211202105610048"></p>
<p>选择磁盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105640231.png" alt="image-20211202105640231"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105743893.png" alt="image-20211202105743893"></p>
<h4 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h4><p><code>ws22</code>节点连接到集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110245478.png" alt="image-20211202110245478"></p>
<h3 id="安装SQL-Server集群"><a href="#安装SQL-Server集群" class="headerlink" title="安装SQL Server集群"></a>安装SQL Server集群</h3><h4 id="创建域用户"><a href="#创建域用户" class="headerlink" title="创建域用户"></a>创建域用户</h4><p>节点<code>ws21</code>、<code>ws22</code>均添加</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110727927.png" alt="image-20211202110727927"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110800147.png" alt="image-20211202110800147"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110832905.png" alt="image-20211202110832905"></p>
<p>节点添加用户</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202111030952.png" alt="image-20211202111030952"></p>
<h4 id="安装SQL-Server故障转移集群"><a href="#安装SQL-Server故障转移集群" class="headerlink" title="安装SQL Server故障转移集群"></a>安装SQL Server故障转移集群</h4><p>安装 选择新的SQL Server 故障转移集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202152449061.png" alt="image-20211202152449061"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202152922581.png" alt="image-20211202152922581"></p>
<h5 id="功能选择"><a href="#功能选择" class="headerlink" title="功能选择"></a>功能选择</h5><ul>
<li>数据库引擎服务</li>
<li>SQL Server复制</li>
<li>全文和语义提取搜索</li>
<li>Data Quality  Services</li>
<li>Analysis Services</li>
<li>客户端工具连接</li>
<li>客户端工具向后兼容性</li>
<li>客户端工具SDK</li>
<li>SQL 客户端连接SDK</li>
<li>Master Data Services</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153040769.png" alt="image-20211202153040769"></p>
<h5 id="实例配置"><a href="#实例配置" class="headerlink" title="实例配置"></a>实例配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202153359073.png" alt="image-20211202153359073"></p>
<p>默认 下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153438066.png" alt="image-20211202153438066"></p>
<h5 id="磁盘配置"><a href="#磁盘配置" class="headerlink" title="磁盘配置"></a>磁盘配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202153530002.png" alt="image-20211202153530002"></p>
<h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><p>数据库访问地址：<code>192.168.1.27</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153604512.png" alt="image-20211202153604512"></p>
<h5 id="服务账号"><a href="#服务账号" class="headerlink" title="服务账号"></a>服务账号</h5><p>使用<strong>域账号</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153802375.png" alt="image-20211202153802375"></p>
<h5 id="SQL-引擎"><a href="#SQL-引擎" class="headerlink" title="SQL 引擎"></a>SQL 引擎</h5><p>添加当前账号和<strong>域账号</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153925390.png" alt="image-20211202153925390"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202154129079.png" alt="image-20211202154129079"></p>
<p>开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202154152284.png" alt="image-20211202154152284"></p>
<p>安装完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202155144057.png" alt="image-20211202155144057"></p>
<h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><p>在<code>ws22</code>节点运行SQL Server安装程序</p>
<p>安装 选择向<code>SQL Server</code>故障转移集群添加节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161254273.png" alt="image-20211202161254273"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161846649.png" alt="image-20211202161846649"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161904992.png" alt="image-20211202161904992"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161935343.png" alt="image-20211202161935343"></p>
<p>输入密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202162029727.png" alt="image-20211202162029727"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202164930282.png" alt="image-20211202164930282"></p>
<h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><p>使用<strong>SSMS</strong>工具连接到数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202165230001.png" alt="image-20211202165230001"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">&#x27;Jonty&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">&#x27;Juila&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到 DTC、集群、以及VIP 都在<code>ws21</code>节点，我们把<code>ws21</code>节点关闭,然后操作数据库，可以发现数据库已经故障转移到<code>ws22</code>节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202165611603.png" alt="image-20211202165611603"></p>
]]></content>
      <categories>
        <category>SQL Server</category>
      </categories>
      <tags>
        <tag>SQL Server 2019</tag>
        <tag>DB Cluster</tag>
      </tags>
  </entry>
</search>
