<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Lazy延迟初始化</title>
    <url>/2023/10/31/about-of-csharp-lazy-initialization/</url>
    <content><![CDATA[<div class="note info"><p>从net 4.0开始，C#开始支持延迟初始化，通过Lazy关键字，可以声明某个对象在第一次使用的时候再初始化，如果一直没有调用，那就不初始化，省去了一部分不必要的开销，提升了效率，同时Lazy是天生<strong>线程安全</strong>的。</p>
</div>

<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul>
<li><p>对象创建成本高且程序可能不会使用它。 </p>
<p>例如，假定内存中有具有 <code>Orders</code> 属性的 <code>Customer</code> 对象，该对象包含大量 <code>Order</code> 对象，初始化这些对象需要数据库连接。 如果用户不需要显示 Orders 或在计算中使用该数据，则无需使用系统内存或计算周期来创建它。 通过使用 <code>Lazy&lt;Orders&gt;</code> 来声明 <code>Orders</code> 对象用于迟缓初始化，可以避免在不使用该对象时浪费系统资源。</p>
</li>
<li><p>对象创建成本高，且希望将其创建推迟到其他高成本操作完成后。</p>
<p>例如，假定程序在启动时加载多个对象实例，但是只需立即加载其中一部分。 可以通过推迟初始化不需要的对象，直到创建所需对象，提升程序的启动性能。</p>
</li>
</ul>
<blockquote>
<p>建议使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy<T></a>。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy<T></a> 及其相关的类型支持线程安全并提供一致的异常传播策略。</p>
<p><a href="https://learn.microsoft.com/zh-cn/dotnet/framework/performance/lazy-initialization">延迟初始化 - .NET Framework | Microsoft Learn</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/202310310935922.png" alt="image-20231031093457833"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h3><p>在使用Lazy时，如果没有在构造函数中传入委托，则在首次访问值属性时，将会使用<code>Activator.CreateInstance</code>来创建类型的对象，如果此类型没有无参数的构造函数时将会引发运行时异常。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LazyUsage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">LazyDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Lazy&lt;Data&gt; lazyData = <span class="keyword">new</span> Lazy&lt;Data&gt;();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line">            lazyData.Value.Print();<span class="comment">//此处访问时才会将Data真正的初始化</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Data</span>(<span class="params"></span>)</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::.ctor-&gt;Initialized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::Print-&gt;println&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Main-&gt;is lazyData Initialized? value = False</span><br><span class="line">Data::.ctor-&gt;Initialized</span><br><span class="line">Data::Print-&gt;println</span><br><span class="line">Main-&gt;is lazyData Initialized? value = True</span><br></pre></td></tr></table></figure>

<h3 id="委托初始化"><a href="#委托初始化" class="headerlink" title="委托初始化"></a>委托初始化</h3><p>指定委托来初始化</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LazyUsage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">LazyDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//指定委托来初始化Data</span></span><br><span class="line">            Lazy&lt;Data&gt; lazyData = <span class="keyword">new</span> Lazy&lt;Data&gt;(</span><br><span class="line">                () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Main-&gt;lazyData will be Initialized!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Data(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line">            lazyData.Value.Print();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Data</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::.ctor-&gt;Initialized,name = &quot;</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::Print-&gt;name = &quot;</span> + Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Main-&gt;is lazyData Initialized? value = False</span><br><span class="line">Main-&gt;lazyData will be Initialized!</span><br><span class="line">Data::.ctor-&gt;Initialized,name = Test</span><br><span class="line">Data::Print-&gt;name = Test</span><br><span class="line">Main-&gt;is lazyData Initialized? value = True</span><br></pre></td></tr></table></figure>

<h3 id="线程安全初始化"><a href="#线程安全初始化" class="headerlink" title="线程安全初始化"></a>线程安全初始化</h3><p>默认情况下，<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy</a> 对象是线程安全的。也就是说，如果构造函数没有指定线程安全性的类型，该函数创建的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy</a> 对象是线程安全的。 </p>
<p>在多线程方案中，访问线程安全 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy</a> 对象的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1.value">Value</a> 属性的第一个线程会为所有线程上的所有后续访问对其初始化，且所有线程共享相同的数据。 因此，哪个线程初始化对象并不重要，争用条件是良性的。</p>
<p>以下示例演示了相同的 <code>Lazy&lt;int&gt;</code> 实例对于三个单独的线程输出相同的值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Initialize the integer to the managed thread id of the</span></span><br><span class="line"><span class="comment">// first thread that accesses the Value property.</span></span><br><span class="line">Lazy&lt;<span class="built_in">int</span>&gt; number = <span class="keyword">new</span> Lazy&lt;<span class="built_in">int</span>&gt;(() =&gt; Thread.CurrentThread.ManagedThreadId);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(() =&gt; Console.WriteLine(<span class="string">&quot;number on t1 = &#123;0&#125; ThreadID = &#123;1&#125;&quot;</span>,</span><br><span class="line">                                        number.Value, Thread.CurrentThread.ManagedThreadId));</span><br><span class="line">t1.Start();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() =&gt; Console.WriteLine(<span class="string">&quot;number on t2 = &#123;0&#125; ThreadID = &#123;1&#125;&quot;</span>,</span><br><span class="line">                                        number.Value, Thread.CurrentThread.ManagedThreadId));</span><br><span class="line">t2.Start();</span><br><span class="line"></span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(() =&gt; Console.WriteLine(<span class="string">&quot;number on t3 = &#123;0&#125; ThreadID = &#123;1&#125;&quot;</span>, number.Value,</span><br><span class="line">                                        Thread.CurrentThread.ManagedThreadId));</span><br><span class="line">t3.Start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure that thread IDs are not recycled if the</span></span><br><span class="line"><span class="comment">// first thread completes before the last one starts.</span></span><br><span class="line">t1.Join();</span><br><span class="line">t2.Join();</span><br><span class="line">t3.Join();</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">/* Sample Output:</span><br><span class="line">    number on t1 = 11 ThreadID = 11</span><br><span class="line">    number on t3 = 11 ThreadID = 13</span><br><span class="line">    number on t2 = 11 ThreadID = 12</span><br><span class="line">    Press any key to exit.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果每个线程需要单独的数据，使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadlocal-1">ThreadLocal</a> 类型</p>
</blockquote>
<h3 id="Lazy-Value"><a href="#Lazy-Value" class="headerlink" title="Lazy.Value"></a>Lazy.Value</h3><p>Lazy对象创建后，并不会立即创建对应的对象，只有在变量的Value属性被首次访问时才会真正的创建，同时会将其缓存到Value中，以便将来访问。</p>
<p>Value属性是只读的，也就意味着如果Value存储了引用类型，将无法为其分配新对象，只可以更改此对象公共的属性或者字段等，如果Value存储的是值类型，那么就不能修改其值了，只能通过再次调用变量的函数使用新的参数来创建新的变量。</p>
<p>在Lazy对象创建后，在首次访问变量的Value属性前。</p>
<h3 id="延迟属性"><a href="#延迟属性" class="headerlink" title="延迟属性"></a>延迟属性</h3><p>要使用延迟初始化实现公共属性，则将该属性的支持字段定义为 Lazy，并从该属性的 <code>get</code> 访问器返回 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1.value">Value</a> 属性。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Lazy&lt;Orders&gt; _orders;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerID &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span>(<span class="params"><span class="built_in">string</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CustomerID = id;</span><br><span class="line">        _orders = <span class="keyword">new</span> Lazy&lt;Orders&gt;(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Orders(<span class="keyword">this</span>.CustomerID);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Orders MyOrders</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _orders.Value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<a href="#Lazy.Value">Lazy.Value</a>中可以得知：Value的属性是只读的，所以示例中只提供了Get的访问器，并未提供Set的访问器。</p>
<p>如果需要支持读取与写入属性的话，则Set访问器必须创建一个新的Lazy对象，同时必须编写自己的线程安全代码才能执行此操作。</p>
<h2 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h2><p>在构建应用程序时，良好的设计应该避免服务之间的循环依赖，循环依赖是指某些组件直接或间接相互依赖。</p>
<p>比如下面这样：</p>
<p><img data-src="https://cdn.jonty.top/img/202310310951075.png" alt="Circular dependency"></p>
<p>在.NET Core中使用依赖注入，如果产生循环依赖关系，则会报一下错误：</p>
<blockquote>
<p><em><strong>System.InvalidOperationException</strong>: A circular dependency was detected for the service of type ‘Demo.IA’</em></p>
</blockquote>
<h3 id="注入IServiceProvider"><a href="#注入IServiceProvider" class="headerlink" title="注入IServiceProvider"></a>注入IServiceProvider</h3><p>当应用复杂度达到一定程度时，很难避免造成服务循环依赖的问题，理想的情况下，应该是选择重构。</p>
<blockquote>
<p>但是项目时间紧，任务重，没有时间重构代码</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/202310311009917.png" alt="image-20231031100909845"></p>
<p>我们可以通过注入<code>IServiceProvider </code>去获取服务</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">IC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IA _a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">IA a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bar</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        _a.Foo()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了避免依赖性循环，可以注入<code> IServiceProvider</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">IC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _services;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">IServiceProvider services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _services = services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bar</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> a = _services.GetRequiredService&lt;IA&gt;();</span><br><span class="line">        a.Foo();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式有一定弊端，例如强制依赖IOC，并且很难看到类的依赖关系。</p>
<h3 id="巧用-Lazy-lt-T-gt"><a href="#巧用-Lazy-lt-T-gt" class="headerlink" title="巧用 Lazy&lt;T&gt;"></a><strong>巧用</strong> <code>Lazy&lt;T&gt;</code></h3><p>新建一个 <code>IServiceCollection</code> 的扩展类<code>AddLazyResolution</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddLazyResolution</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> services.AddTransient(</span><br><span class="line">        <span class="keyword">typeof</span>(Lazy&lt;&gt;),</span><br><span class="line">        <span class="keyword">typeof</span>(LazilyResolved&lt;&gt;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">LazilyResolved</span>&lt;<span class="title">T</span>&gt; : <span class="title">Lazy</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LazilyResolved</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">serviceProvider.GetRequiredService&lt;T&gt;</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>Startup.cs</code>中注册</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">services.AddLazyResolution();</span><br></pre></td></tr></table></figure>

<p>在依赖的类中IA，注入Lazy，当要使用IA时，只需访问Lazy的值 Value 即可：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">IC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Lazy&lt;IA&gt; _a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">Lazy&lt;IA&gt; a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bar</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        _a.Value.Foo();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个方法不是最完美的，但是解决了根本问题，并且依赖项在构造函数中有明确声明。</p>
<p>为了打破循环依赖关系，我们需要一个服务工厂，而不是实际的对象，在示例中，<code>IServiceProvider</code> 和 <code>Lazy</code>都被用作工厂。</p>
</blockquote>
<p>可以看到在<code>ABP</code>中也提供了<code>IAbpLazyServiceProvider</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">object</span>? GetService(Type serviceType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> CachedServices.GetOrAdd(</span><br><span class="line">        serviceType,</span><br><span class="line">        _ =&gt; <span class="keyword">new</span> Lazy&lt;<span class="built_in">object</span>?&gt;(() =&gt; ServiceProvider.GetService(serviceType))</span><br><span class="line">    ).Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/202310311028274.webp" alt="img"></p>
<blockquote>
<p>参考：<a href="https://stackoverflow.com/questions/44934511/does-net-core-dependency-injection-support-lazyt">c# - Does .net core dependency injection support Lazy - Stack Overflow</a></p>
<p><a href="https://thomaslevesque.com/2020/03/18/lazily-resolving-services-to-fix-circular-dependencies-in-net-core/">[Lazily resolving services to fix circular dependencies in .NET Core - Thomas Levesque’s .NET Blog]</a></p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>C#</tag>
        <tag>ASP.NET Core</tag>
        <tag>ABP</tag>
      </tags>
  </entry>
  <entry>
    <title>【分享】IP 基础知识“全家桶”</title>
    <url>/2023/08/27/about-of-IP/</url>
    <content><![CDATA[<blockquote>
<p>以下文章来源于小林coding ，作者小林coding</p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，有读者希望我写一篇关于 IP 分类地址、子网划分等的文章，他反馈常常混淆，摸不着头脑。</p>
<p>那么，说来就来！而且要盘就盘全一点，顺便挑战下小林的图解功力，所以就来个 <strong>IP 基础知识全家桶</strong>。</p>
<p>吃完这个 IP 基础知识全家桶全家桶，包你撑着肚子喊出：“<strong>真香！</strong>”</p>
<p>不多说，直接上菜，共分为<strong>三道菜</strong>：</p>
<ul>
<li>首先是前菜 「 IP 基本认识 」</li>
<li>其次是主菜 「IP 地址的基础知识」</li>
<li>最后是点心 「IP 协议相关技术」</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="IP基础知识全家桶"></p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前菜-——-IP-基本认识"><a href="#前菜-——-IP-基本认识" class="headerlink" title="前菜 —— IP 基本认识"></a>前菜 —— IP 基本认识</h3><p>IP 在 TCP/IP 参考模型中处于第三层，也就是<strong>网络层</strong>。</p>
<p>网络层的主要作用是：<strong>实现主机与主机之间的通信，也叫点对点（end to end）通信。</strong></p>
<p><img data-src="https://cdn.jonty.top/img/640.png" alt="IP的作用"></p>
<blockquote>
<p>网络层与数据链路层有什么关系呢？</p>
</blockquote>
<p>有的小伙伴分不清 IP（网络层） 和 MAC （数据链路层）之间的区别和关系。</p>
<p>其实很容易区分，在上面我们知道 IP 的作用是主机之间通信中的，而 <strong>MAC 的作用则是实现「直连」的两个设备之间通信，而 IP 则负责在「没有直连」的两个网络之间进行通信传输。</strong></p>
<p>举个生活的栗子，小林要去一个很远的地方旅行，制定了一个行程表，其间需先后乘坐飞机、地铁、公交车才能抵达目的地，为此小林需要买飞机票，地铁票等。</p>
<p>飞机票和地铁票都是去往特定的地点的，每张票只能够在某一限定区间内移动，此处的「区间内」就如同通信网络中数据链路。</p>
<p>在区间内移动相当于数据链路层，充当区间内两个节点传输的功能，区间内的出发点好比源 MAC 地址，目标地点好比目的 MAC 地址。</p>
<p>整个旅游行程表就相当于网络层，充当远程定位的功能，行程的开始好比源 IP，行程的终点好比目的 IP 地址。</p>
<p><img data-src="https://cdn.jonty.top/img/202308272207889.png" alt="IP 的作用与 MAC 的作用"></p>
<p>如果小林只有行程表而没有车票，就无法搭乘交通工具到达目的地。相反，如果除了车票而没有行程表，恐怕也很难到达目的地。因为小林不知道该坐什么车，也不知道该在哪里换乘。</p>
<p>因此，只有两者兼备，既有某个区间的车票又有整个旅行的行程表，才能保证到达目的地。与此类似，<strong>计算机网络中也需要「数据链路层」和「网络层」这个分层才能实现向最终目标地址的通信。</strong></p>
<p>还有重要一点，旅行途中我们虽然不断变化了交通工具，但是旅行行程的起始地址和目的地址始终都没变。其实，在网络中数据包传输中也是如此，<strong>源IP地址和目标IP地址在传输过程中是不会变化的，只有源 MAC 地址和目标 MAC 一直在变化。</strong></p>
<hr>
<h3 id="主菜-——-IP-地址的基础知识"><a href="#主菜-——-IP-地址的基础知识" class="headerlink" title="主菜 —— IP 地址的基础知识"></a>主菜 —— IP 地址的基础知识</h3><p>在 TCP/IP 网络通信时，为了保证能正常通信，每个设备都需要配置正确的 IP 地址，否则无法实现正常的通信。</p>
<p>IP 地址（IPv4 地址）由 <code>32</code> 位正整数来表示，IP 地址在计算机是以二进制的方式处理的。</p>
<p>而人类为了方便记忆采用了<strong>点分十进制</strong>的标记方式，也就是将 32 位 IP 地址以每 8 位为组，共分为 <code>4</code> 组，每组以「<code>.</code>」隔开，再将每组转换成十进制。</p>
<p><img data-src="https://cdn.jonty.top/img/202308272208690.png" alt="点分十进制"></p>
<p>那么，IP 地址最大值也就是</p>
<p><img data-src="https://cdn.jonty.top/img/202308272209488.png"></p>
<p>也就说，最大允许 43 亿台计算机连接到网络。</p>
<p>实际上，IP 地址并不是根据主机台数来配置的，而是以网卡。像服务器、路由器等设备都是有 2 个以上的网卡，也就是它们会有 2 个以上的 IP 地址。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071006166.png" alt="每块网卡可以分配一个以上的IP地址"></p>
<p>因此，让 43 亿台计算机全部连网其实是不可能的，更何况 IP 地址是由「网络标识」和「主机标识」这两个部分组成的，所以实际能够连接到网络的计算机个数更是少了很多。</p>
<blockquote>
<p>可能有的小伙伴提出了疑问，现在不仅电脑配了 IP， 手机、IPad 等电子设备都配了 IP 呀，照理来说肯定会超过 43 亿啦，那是怎么能够支持这么多 IP 的呢？</p>
</blockquote>
<p>因为会根据一种可以更换 IP 地址的技术 <code>NAT</code>，使得可连接计算机数超过 43 亿台。<code>NAT</code> 技术后续会进一步讨论和说明。</p>
<h4 id="IP-地址的分类"><a href="#IP-地址的分类" class="headerlink" title="IP 地址的分类"></a>IP 地址的分类</h4><p>互联网诞生之初，IP 地址显得很充裕，于是计算机科学家们设计了<strong>分类地址</strong>。</p>
<p>IP 地址分类成了 5 种类型，分别是 A 类、B 类、C 类、D 类、E 类。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071006808.png" alt="IP 地址分类"></p>
<p>上图中黄色部是分类号，用以区分 IP 地址类别。</p>
<blockquote>
<p>什么是 A、B、C 类地址？</p>
</blockquote>
<p>其中对于 A、B、C 类主要分为两个部分，分别是<strong>网络号和主机号</strong>。这很好理解，好比小林是 A 小区 1 栋 101 号，你是 B 小区 1 栋 101 号。</p>
<p>我们可以用下面这个表格， 就能很清楚的知道 A、B、C 分类对应的地址范围、最大主机个数。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071006375.png" alt="A、B、C 分类地址"></p>
<blockquote>
<p>A、B、C 分类地址最大主机个数是如何计算的呢？</p>
</blockquote>
<p>最大主机个数，就是要看主机号的位数，如 C 类地址的主机号占 8 位，那么 C 类地址的最大主机个数：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071007734.png"></p>
<p>为什么要减 2 呢？</p>
<p>因为在 IP 地址中，有两个 IP 是特殊的，分别是主机号全为 1 和 全为 0 地址。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071007166.png"></p>
<ul>
<li>主机号全为 1 指定某个网络下的所有主机，用于广播</li>
<li>主机号全为 0 指定某个网络</li>
</ul>
<p>因此，在分配过程中，应该去掉这两种情况。</p>
<blockquote>
<p>广播地址用于什么？</p>
</blockquote>
<p>广播地址用于在<strong>同一个链路中相互连接的主机之间发送数据包</strong>。</p>
<p>学校班级中就有广播的例子，在准备上课的时候，通常班长会喊：“上课， 全体起立！”，班里的同学听到这句话是不是全部都站起来了？这个句话就有广播的含义。</p>
<p>当主机号全为 1 时，就表示该网络的广播地址。例如把 <code>172.20.0.0/16</code> 用二进制表示如下：</p>
<p>10101100.00010100.00000000.00000000</p>
<p>将这个地址的<strong>主机部分全部改为 1</strong>，则形成广播地址：</p>
<p>10101100.00010100.<strong>11111111.11111111</strong></p>
<p>再将这个地址用十进制表示，则为 <code>172.20.255.255</code>。</p>
<p>广播地址可以分为本地广播和直接广播两种。</p>
<ul>
<li><strong>在本网络内广播的叫做本地广播</strong>。例如网络地址为 192.168.0.0/24 的情况下，广播地址是 192.168.0.255 。因为这个广播地址的 IP 包会被路由器屏蔽，所以不会到达 192.168.0.0/24 以外的其他链路上。</li>
<li><strong>在不同网络之间的广播叫做直接广播</strong>。例如网络地址为 192.168.0.0/24 的主机向 192.168.1.255/24 的目标地址发送 IP 包。收到这个包的路由器，将数据转发给192.168.1.0/24，从而使得所有 192.168.1.1~192.168.1.254 的主机都能收到这个包（由于直接广播有一定的安全问题，多数情况下会在路由器上设置为不转发）。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/202309071007094.jpg" alt="本地广播与直接广播"></p>
<blockquote>
<p>什么是 D、E 类地址？</p>
</blockquote>
<p>而 D 类和 E 类地址是没有主机号的，所以不可用于主机 IP，D 类常被用于<strong>多播</strong>，E 类是预留的分类，暂时未使用。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071007132.png" alt="D、E 分类地址"></p>
<blockquote>
<p>多播地址用于什么？</p>
</blockquote>
<p>多播用于<strong>将包发送给特定组内的所有主机。</strong></p>
<p>还是举班级的栗子，老师说：“最后一排的同学，上来做这道数学题。”，老师是指定的是最后一排的同学，也就是多播的含义了。</p>
<p>由于广播无法穿透路由，若想给其他网段发送同样的包，就可以使用可以穿透路由的多播（组播）。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071008044.png" alt="单播、广播、多播通信"></p>
<p>多播使用的 D 类地址，其前四位是 <code>1110</code> 就表示是多播地址，而剩下的 28 位是多播的组编号。</p>
<p>从 224.0.0.0 ~ 239.255.255.255 都是多播的可用范围，其划分为以下三类：</p>
<ul>
<li>224.0.0.0 ~ 224.0.0.255 为预留的组播地址，只能局域网中，路由器是不会进行转发的</li>
<li>224.0.1.0 ~ 238.255.255.255  为用户可用的组播地址，可以用于 Internet 上</li>
<li>239.0.0.0 ~ 239.255.255.255 为本地管理组播地址，可供内部网在内部使用，仅在特定的本地范围内有效</li>
</ul>
<blockquote>
<p>IP 分类的优点</p>
</blockquote>
<p>不管是路由器还是主机解析到一个 IP 地址时候，我们判断其 IP 地址的首位是否为 0，为 0 则为 A 类地址，那么就能很快的找出网络地址和主机地址。</p>
<p>其余分类判断方式参考如下图：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071009420.png" alt="IP 分类判断"></p>
<p>所以，这种分类地址的优点就是<strong>简单明了、选路（基于网络地址）简单</strong>。</p>
<blockquote>
<p>IP 分类的缺点</p>
</blockquote>
<p><em>缺点一</em></p>
<p><strong>同一网络下没有地址层次</strong>，比如一个公司里用了 B 类地址，但是可能需要根据生产环境、测试环境、开发环境来划分地址层次，而这种 IP 分类是没有地址层次划分的功能，所以这就<strong>缺少地址的灵活性</strong>。</p>
<p><em>缺点二</em></p>
<p>A、B、C类有个尴尬处境，就是<strong>不能很好的与现实网络匹配</strong>。</p>
<ul>
<li>C 类地址能包含的最大主机数量实在太少了，只有 254 个，估计一个网吧都不够用。</li>
<li>而 B 类地址能包含的最大主机数量又太多了，6 万多台机器放在一个网络下面，一般的企业基本达不到这个规模，闲着的地址就是浪费。</li>
</ul>
<p>这两个缺点，都可以在 <code>CIDR</code> 无分类地址解决。</p>
<h4 id="无分类地址-CIDR"><a href="#无分类地址-CIDR" class="headerlink" title="无分类地址 CIDR"></a>无分类地址 CIDR</h4><p>正因为 IP 分类存在许多缺点，所有后面提出了无分类地址的方案，即 <code>CIDR</code>。</p>
<p>这种方式不再有分类地址的概念，32 比特的 IP 地址被划分为两部分，前面是<strong>网络号</strong>，后面是<strong>主机号</strong>。</p>
<blockquote>
<p>怎么划分网络号和主机号的呢？</p>
</blockquote>
<p>表示形式 <code>a.b.c.d/x</code>，其中 <code>/x</code> 表示前 x 位属于<strong>网络号</strong>， x 的范围是 <code>0 ~ 32</code>，这就使得 IP 地址更加具有灵活性。</p>
<p>比如 10.100.122.2/24，这种地址表示形式就是 CIDR，<code>/24</code> 表示前 24 位是网络号，剩余的 8 位是主机号。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071010223.png"></p>
<p>还有另一种划分网络号与主机号形式，那就是<strong>子网掩码</strong>，掩码的意思就是掩盖掉主机号，剩余的就是网络号。</p>
<p><strong>将子网掩码和 IP 地址按位计算 AND，就可得到网络号。</strong></p>
<p><img data-src="https://cdn.jonty.top/img/202309071010949.png"></p>
<blockquote>
<p>为什么要分离网络号和主机号？</p>
</blockquote>
<p>因为两台计算机要通讯，首先要判断是否处于同一个广播域内，即网络地址是否相同。如果网络地址相同，表明接受方在本网络上，那么可以把数据包直接发送到目标主机，</p>
<p>路由器寻址工作中，也就是通过这样的方式来找到对应的网络号的，进而把数据包转发给对应的网络内。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071017210.png" alt="IP地址的网络号"></p>
<blockquote>
<p>怎么进行子网划分？</p>
</blockquote>
<p>在上面我们知道可以通过子网掩码划分出网络号和主机号，那实际上子网掩码还有一个作用，那就是<strong>划分子网</strong>。</p>
<p><strong>子网划分实际上是将主机地址分为两个部分：子网网络地址和子网主机地址</strong>。形式如下：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071010496.png" alt=" "></p>
<ul>
<li>未做子网划分的 ip 地址：网络地址＋主机地址</li>
<li>做子网划分后的 ip 地址：网络地址＋（子网网络地址＋子网主机地址）</li>
</ul>
<p>假设对 C 类地址进行子网划分，网络地址 192.168.1.0，使用子网掩码 255.255.255.192 对其进行子网划分。</p>
<p>C 类地址中前 24 位 是网络号，最后 8 位是主机号，根据子网掩码可知<strong>从 8 位主机号中借用 2 位作为子网号</strong>。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071010498.png" alt=" "></p>
<p>由于子网网络地址被划分成 2 位，那么子网地址就有 4 个，分别是 00、01、10、11，具体划分如下图：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071017676.png"></p>
<p>划分后的 4 个子网如下表格：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071018562.png"></p>
<h4 id="公有-IP-地址与私有-IP-地址"><a href="#公有-IP-地址与私有-IP-地址" class="headerlink" title="公有 IP 地址与私有 IP 地址"></a>公有 IP 地址与私有 IP 地址</h4><p>在 A、B、C 分类地址，实际上有分公有 IP 地址和 私有 IP 地址。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071018330.png"></p>
<p>平时我们办公室、家里、学校用的 IP 地址，一般都是私有 IP 地址。因为这些地址允许组织内部的 IT 人员自己管理、自己分配，而且可以重复。因此，你学校的某个私有 IP 地址和我学校的可以是一样的。</p>
<p>就像每个小区都有自己的楼编号和门牌号，你小区家可以叫  1 栋 101 号，我小区家也可以叫 1 栋 101，没有任何问题。但一旦出了小区，就需要带上中山路 666 号（公网 IP 地址），是国家统一分配的，不能两个小区都叫中山路 666。</p>
<p>所以，公有 IP 地址是有个组织统一分配的，假设你要开一个博客网站，那么你就需要去申请购买一个公有 IP，这样全世界的人才能访问。并且公有 IP 地址基本上要在整个互联网范围内保持唯一。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071018546.png" alt="公有 IP 地址与私有 IP 地址"></p>
<blockquote>
<p>公有 IP 地址由谁管理呢？</p>
</blockquote>
<p>私有 IP 地址通常是内部的 IT 人员值管理，公有 IP 地址是由 <code>ICANN</code> 组织管理，中文叫「互联网名称与数字地址分配机构」。</p>
<p>IANA 是 ICANN 的其中一个机构，它负责分配互联网 IP 地址，是按州的方式层层分配。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071018715.png"></p>
<ul>
<li>ARIN 北美地区</li>
<li>LACNIC 拉丁美洲和一些加勒比群岛</li>
<li>RIPE NCC 欧洲、中东和中亚</li>
<li>AfriNIC 非洲地区</li>
<li>APNIC 亚太地区</li>
</ul>
<p>其中，在中国是由 CNNIC 的机构进行管理，它是中国国内唯一指定的全局 IP 地址管理的组织。</p>
<h4 id="IP-地址与路由控制"><a href="#IP-地址与路由控制" class="headerlink" title="IP 地址与路由控制"></a>IP 地址与路由控制</h4><p>IP地址的<strong>网络地址</strong>这一部分是用于进行路由控制。</p>
<p>路由控制表中记录着网络地址与下一步应该发送至路由器的地址，在主机和路由器上都会有各自的路由器控制表。</p>
<p>在发送 IP 包时，首先要确定 IP 包首部中的目标地址，再从路由控制表中找到与该地址具有<strong>相同网络地址</strong>的记录，根据该记录将 IP 包转发给相应的下一个路由器。如果路由控制表中存在多条相同网络地址的记录，就选择相同位数最多的网络地址，也就是最长匹配。</p>
<p>下面以下图的网络链路作为例子说明：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071018655.png" alt="IP 地址与路由控制"></p>
<ol>
<li>主机 A 要发送一个 IP 包，其源地址是 <code>10.1.1.30</code> 和目标地址是 <code>10.1.2.10</code>，由于没有在主机 A 的路由表找到与目标地址 <code>10.1.2.10</code> 的网络地址，于是把包被转发到默认路由（路由器 <code>1</code> ）</li>
<li>路由器 <code>1</code> 收到 IP 包后，也在路由器 <code>1</code> 的路由表匹配与目标地址相同的网络地址记录，发现匹配到了，于是就把 IP 数据包转发到了 <code>10.1.0.2</code> 这台路由器 <code>2</code></li>
<li>路由器 <code>2</code> 收到后，同样对比自身的路由表，发现匹配到了，于是把 IP 包从路由器 <code>2</code> 的 <code>10.1.2.1</code> 这个接口出去，最终经过交换机把 IP 数据包转发到了目标主机</li>
</ol>
<blockquote>
<p>环回地址是不会流向网络</p>
</blockquote>
<p>环回地址是在同一台计算机上的程序之间进行网络通信时所使用的一个默认地址。</p>
<p>计算机使用一个特殊的 IP 地址 <strong>127.0.0.1 作为环回地址，</strong>与该地址具有相同意义的是一个叫做 <code>localhost</code> 的主机名。</p>
<p>使用这个 IP 或主机名时，数据包不会流向网络。</p>
<h4 id="IP-分片与重组"><a href="#IP-分片与重组" class="headerlink" title="IP 分片与重组"></a>IP 分片与重组</h4><p>每种数据链路的最大传输单元 <code>MTU</code> 都是不相同的，如 FDDI 数据链路 MTU 4352、以太网的 MTU 是 1500 字节等。</p>
<p>每种数据链路的 MTU 之所以不同，是因为每个不同类型的数据链路的使用目的不同。使用目的不同，可承载的 MTU 也就不同。</p>
<p>其中，我们最常见数据链路是以太网，它的 MTU 是 <code>1500</code> 字节。</p>
<p>那么当 IP 数据包大小大于 MTU 时， IP 数据包就会被分片。</p>
<p>经过分片之后的 IP 数据报在被重组的时候，只能由目标主机进行，路由器是不会进行重组的。</p>
<p>假设发送方发送一个 4000 字节的大数据报，若要传输在以太网链路，则需要把数据报分片成 3 个小数据报进行传输，再交由接收方重组成大数据报。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071018909.png" alt="分片与重组"></p>
<p>在分片传输中，一旦某个分片丢失，则会造成整个 IP 数据报作废，所以 TCP 引入了 <code>MSS</code> 也就是在 TCP 层进行分片不由 IP 层分片，那么对于 UDP 我们尽量不要发送一个大于 <code>MTU</code> 的数据报文。</p>
<h4 id="IPv6-基本认识"><a href="#IPv6-基本认识" class="headerlink" title="IPv6 基本认识"></a>IPv6 基本认识</h4><p>IPv4 的地址是 32 位的，大约可以提供 42 亿个地址，但是早在 2011 年 IPv4 地址就已经被分配完了。</p>
<p>但是 IPv6 的地址是 <code>128</code> 位的，这可分配的地址数量是大的惊人，说个段子 <strong>IPv6 可以保证地球上的每粒沙子都能被分配到一个 IP 地址。</strong></p>
<p>但 IPv6 除了有更多的地址之外，还有更好的安全性和扩展性，说简单点就是 IPv6 相比于 IPv4 能带来更好的网络体验。</p>
<p>但是因为 IPv4 和 IPv6 不能相互兼容，所以不但要我们电脑、手机之类的设备支持，还需要网络运营商对现有的设备进行升级，所以这可能是 IPv6 普及率比较慢的一个原因。</p>
<blockquote>
<p>IPv6 的亮点</p>
</blockquote>
<p>IPv6 不仅仅只是可分配的地址变多了，他还有非常多的亮点。</p>
<ul>
<li>IPv6 可自动配置，即使没有 DHCP 服务器也可以实现自动分配IP地址，真是<strong>便捷到即插即用</strong>啊。</li>
<li>IPv6 包头包首部长度采用固定的值 <code>40</code> 字节，去掉了包头校验和，简化了首部结构，减轻了路由器负荷，大大<strong>提高了传输的性能</strong>。</li>
<li>IPv6 有应对伪造 IP 地址的网络安全功能以及防止线路窃听的功能，大大<strong>提升了安全性</strong>。</li>
<li><strong>…</strong> （由你发现更多的亮点）</li>
</ul>
<blockquote>
<p>IPv6 地址的标识方法</p>
</blockquote>
<p>IPv4 地址长度共 32 位，是以每 8 位作为一组，并用点分十进制的表示方式。</p>
<p>IPv6 地址长度是 128 位，是以每 16 位作为一组，每组用冒号 「:」 隔开。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071019953.png" alt="IPv6 地址表示方法"></p>
<p>如果出现连续的 0 时还可以将这些 0 省略，并用两个冒号 「::」隔开。但是，一个 IP 地址中只允许出现一次两个连续的冒号。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071019678.png" alt="Pv6 地址缺省表示方"></p>
<blockquote>
<p>IPv6 地址的结构</p>
</blockquote>
<p>IPv6 类似 IPv4，也是通过 IP 地址的前几位标识 IP 地址的种类。</p>
<p>IPv6 的地址主要有一下类型地址：</p>
<ul>
<li>单播地址，用于一对一的通信</li>
<li>组播地址，用于一对多的通信</li>
<li>任播地址，用于通信最近的节点，最近的节点是由路由协议决定</li>
<li>没有广播地址</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/202309071020170.png" alt="IPv6地址结构"></p>
<blockquote>
<p>IPv6 单播地址类型</p>
</blockquote>
<p>对于一对一通信的 IPv6 地址，主要划分了三类单播地址，每类地址的有效范围都不同。</p>
<ul>
<li>在同一链路单播通信，不经过路由器，可以使用<strong>链路本地单播地址</strong>，IPv4 没有此类型</li>
<li>在内网里单播通信，可以使用<strong>唯一本地地址</strong>，相当于 IPv4 的私有 IP</li>
<li>在互联网通信，可以使用<strong>全局单播地址</strong>，相当于 IPv4 的公有 IP</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/202309071020294.png" alt="IPv6 中的单播通信"></p>
<h4 id="IPv4-首部与-IPv6-首部"><a href="#IPv4-首部与-IPv6-首部" class="headerlink" title="IPv4 首部与 IPv6 首部"></a>IPv4 首部与 IPv6 首部</h4><p>IPv4 首部与 IPv6 首部的差异如下图：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071021885.png" alt="IPv4 首部与 IPv6 首部的差异"></p>
<p>IPv6 相比 IPv4 的首部改进：</p>
<ul>
<li><strong>取消了首部校验和字段。</strong> 因为在数据链路层和传输层都会校验，因此 IPv6 直接取消了 IP 的校验。</li>
<li><strong>取消了分片/重新组装相关字段。</strong> 分片与重组是耗时的过程，IPv6 不允许在中间路由器进行分片与重组，这种操作只能在源与目标主机，这将大大提高了路由器转发的速度。</li>
<li><strong>取消选项字段。</strong> 选项字段不再是标准 IP 首部的一部分了，但它并没有消失，而是可能出现在 IPv6 首部中的「下一个首部」指出的位置上。删除该选项字段是的 IPv6 的首部成为固定长度的 <code>40</code> 字节。</li>
</ul>
<hr>
<h3 id="点心-——-IP-协议相关技术"><a href="#点心-——-IP-协议相关技术" class="headerlink" title="点心 —— IP 协议相关技术"></a>点心 —— IP 协议相关技术</h3><p>跟 IP 协议相关的技术也不少，接下来说说与 IP 协议相关的重要且常见的技术。</p>
<ul>
<li>DNS 域名解析</li>
<li>ARP 与 RARP 协议</li>
<li>DHCP 动态获取 IP 地址</li>
<li>NAT 网络地址转换</li>
<li>ICMP 互联网控制报文协议</li>
<li>IGMP 因特网组管理协</li>
</ul>
<h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>我们在上网的时候，通常使用的方式域名，而不是 IP 地址，因为域名方便人类记忆。</p>
<p>那么实现这一技术的就是 <strong>DNS 域名解析</strong>，DNS 可以将域名网址自动转换为具体的 IP 地址。</p>
<blockquote>
<p>域名的层级关系</p>
</blockquote>
<p>DNS 中的域名都是用<strong>句点</strong>来分隔的，比如 <code>www.server.com</code>，这里的句点代表了不同层次之间的<strong>界限</strong>。</p>
<p>在域名中，<strong>越靠右</strong>的位置表示其层级<strong>越高</strong>。</p>
<p>毕竟域名是外国人发明，所以思维和中国人相反，比如说一个城市地点的时候，外国喜欢从小到大的方式顺序说起（如 XX 街道 XX 区 XX 市 XX 省），而中国则喜欢从大到小的顺序（如 XX 省 XX 市 XX 区 XX 街道）。</p>
<p>根域是在最顶层，它的下一层就是 com 顶级域，再下面是 server.com。</p>
<p>所以域名的层级关系类似一个树状结构：</p>
<ul>
<li>根 DNS 服务器</li>
<li>顶级域 DNS 服务器（com）</li>
<li>权威 DNS 服务器（server.com）</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/202309071021280.png" alt="DNS 树状结构"></p>
<p>根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。</p>
<p>因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。</p>
<blockquote>
<p>域名解析的工作流程</p>
</blockquote>
<p>浏览器首先看一下自己的缓存里有没有，如果没有就向操作系统的缓存要，还没有就检查本机域名解析文件 <code>hosts</code>，如果还是没有，就会 DNS 服务器进行查询，查询的过程如下：</p>
<ol>
<li>客户端首先会发出一个 DNS 请求，问 <a href="http://www.server.com/">www.server.com</a> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。</li>
<li>本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 <a href="http://www.server.com,则它直接返回/">www.server.com，则它直接返回</a> IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 <a href="http://www.server.com/">www.server.com</a> 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</li>
<li>根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“<a href="http://www.server.com/">www.server.com</a> 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”</li>
<li>本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 <a href="http://www.server.com/">www.server.com</a>  的 IP 地址吗？”</li>
<li>顶级域名服务器说：“我给你负责 <a href="http://www.server.com/">www.server.com</a> 区域的权威 DNS 服务器的地址，你去问它应该能问到”。</li>
<li>本地 DNS 于是转向问权威 DNS 服务器：“老三，<a href="http://www.server.com对应的IP是啥呀？”">www.server.com对应的IP是啥呀？”</a> server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</li>
<li>权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。</li>
<li>本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</li>
</ol>
<p>至此，我们完成了 DNS 的解析过程。现在总结一下，整个过程我画成了一个图。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071021815.png" alt="域名解析的工作流程"></p>
<p>DNS 域名解析的过程蛮有意思的，整个过程就和我们日常生活中找人问路的过程类似，<strong>只指路不带路</strong>。</p>
<h4 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h4><p>在传输一个 IP 数据报的时候，确定了源 IP 地址和目标 IP 地址后，就会通过主机「路由表」确定 IP 数据包下一跳。然而，网络层的下一层是数据链路层，所以我们还要知道「下一跳」的 MAC 地址。</p>
<p>由于主机的路由表中可以找到下一条的 IP 地址，所以可以通过 <strong>ARP 协议</strong>，求得下一跳的 MAC 地址。</p>
<blockquote>
<p>那么 ARP 又是如何知道对方 MAC 地址的呢？</p>
</blockquote>
<p>简单地说，ARP 是借助 <strong>ARP 请求与 ARP 响应</strong>两种类型的包确定 MAC 地址的。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071021309.png" alt="ARP 广播"></p>
<ul>
<li>主机会通过<strong>广播发送 ARP 请求</strong>，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。</li>
<li>当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 <strong>ARP 响应包</strong>返回给主机。</li>
</ul>
<p>操作系统通常会把第一次通过 ARP 获取的 MAC 地址缓存起来，以便下次直接从缓存中找到对应 IP 地址的 MAC 地址。</p>
<p>不过，MAC 地址的缓存是有一定期限的，超过这个期限，缓存的内容将被清除。</p>
<blockquote>
<p>RARP 协议你知道是什么吗？</p>
</blockquote>
<p>ARP 协议是已知 IP 地址 求 MAC 地址，那 RARP 协议正好相反。</p>
<p>它是<strong>已知 MAC 地址求 IP 地址</strong>。例如将打印机服务器等小型嵌入式设备接入到网络时就经常会用得到。</p>
<p>通常这需要架设一台 <code>RARP</code> 服务器，在这个服务器上注册设备的 MAC 地址及其 IP 地址。然后再将这个设备接入到网络，接着：</p>
<ul>
<li>该设备会发送一条「我的 MAC 地址是XXXX，请告诉我，我的IP地址应该是什么」的请求信息。</li>
<li>RARP 服务器接到这个消息后返回「MAC地址为 XXXX 的设备，IP地址为 XXXX」的信息给这个设备。</li>
</ul>
<p>最后，设备就根据从 RARP 服务器所收到的应答信息设置自己的 IP 地址。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071022117.png" alt="RARP"></p>
<h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><p>DHCP 在生活中我们是很常见的了，我们的电脑通常都是通过 DHCP 动态获取 IP 地址，大大省去了配 IP 信息繁琐的过程。</p>
<p>接下来，我们来看看我们的电脑是如何通过 4 个步骤的过程，获取到 IP 的。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071022333.png" alt="DHCP 工作流程"></p>
<p>先说明一点，DHCP 客户端进程监听的是 68 端口号，DHCP 服务端进程监听的是 67 端口号。</p>
<p>DHCP 交互的 4 个步骤：</p>
<ul>
<li>客户端首先发起 <strong>DHCP 发现报文（DHCP DISCOVER）</strong> 的 IP 数据报，由于客户端没有 IP 地址，也不知道 DHCP 服务器的地址，所以使用的是 UDP <strong>广播</strong>通信，其使用的广播目的地址是 255.255.255.255（端口 67） 并且使用 0.0.0.0（端口 68） 作为源 IP 地址。DHCP 客户端将该 IP 数据报传递给链路层，链路层然后将帧广播到所有的网络中设备。</li>
<li>DHCP 服务器收到 DHCP 发现报文时，用 <strong>DHCP 提供报文（DHCP OFFER）</strong> 向客户端做出响应。该报文仍然使用 IP 广播地址 255.255.255.255，该报文信息携带服务器提供可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及 <strong>IP 地址租用期</strong>。</li>
<li>客户端收到一个或多个服务器的 DHCP 提供报文后，从中选择一个服务器，并向选中的服务器发送 <strong>DHCP 请求报文（DHCP REQUEST</strong>进行响应，回显配置的参数。</li>
<li>最后，服务端用 <strong>DHCP ACK 报文</strong>对 DHCP 请求报文进行响应，应答所要求的参数。</li>
</ul>
<p>一旦客户端收到 DHCP ACK 后，交互便完成了，并且客户端能够在租用期内使用 DHCP 服务器分配的 IP 地址。</p>
<p>如果租约的 DHCP IP 地址快期后，客户端会向服务器发送 DHCP 请求报文：</p>
<ul>
<li>服务器如果同意继续租用，则用 DHCP ACK 报文进行应答，客户端就会延长租期。</li>
<li>服务器如果不同意继续租用，则用 DHCP NACK 报文，客户端就要停止使用租约的 IP 地址。</li>
</ul>
<p>可以发现，DHCP 交互中，<strong>全程都是使用 UDP 广播通信</strong>。</p>
<blockquote>
<p>咦，用的是广播，那如果 DHCP 服务器和客户端不是在同一个局域网内，路由器又不会转发广播包，那不是每个网络都要配一个 DHCP 服务器？</p>
</blockquote>
<p>所以，为了解决这一问题，就出现了 <strong>DHCP 中继代理</strong>。</p>
<p>有了 DHCP 中继代理以后，<strong>对不同网段的 IP 地址分配也可以由一个 DHCP 服务器统一进行管理。</strong></p>
<p><img data-src="https://cdn.jonty.top/img/202309071022612.png" alt="DHCP 中继代理"></p>
<ul>
<li>DHCP 客户端会向 DHCP 中继代理发送 DHCP 请求包，而 DHCP 中继代理在收到这个广播包以后，再以<strong>单播</strong>的形式发给 DHCP 服务器。</li>
<li>服务器端收到该包以后再向 DHCP 中继代理返回应答，并由 DHCP 中继代理将此包转发给 DHCP 客户端 。</li>
</ul>
<p>因此，DHCP 服务器即使不在同一个链路上也可以实现统一分配和管理IP地址。</p>
<h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><p>IPv4 的地址是非常紧缺的，在前面我们也提到可以通过无分类地址来减缓 IPv4 地址耗尽的速度，但是互联网的用户增速是非常惊人的，所以 IPv4 地址依然有被耗尽的危险。</p>
<p>于是，提出了一个种<strong>网络地址转换 NAT</strong> 的方法，再次缓解了 IPv4 地址耗尽的问题。</p>
<p>简单的来说 NAT 就是在同个公司、家庭、教室内的主机对外部通信时，把私有 IP 地址转换成公有 IP 地址。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071022779.png" alt="NAT"></p>
<blockquote>
<p>那不是 N 个 私有 IP 地址，你就要 N 个公有 IP 地址？这怎么就缓解了 IPv4 地址耗尽的问题？这不瞎扯吗？</p>
</blockquote>
<p>确实是，普通的 NAT 转换没什么意义。</p>
<p>由于绝大多数的网络应用都是使用传输层协议 TCP 或 UDP 来传输数据的。</p>
<p>因此，可以把 IP 地址 + 端口号一起进行转换。</p>
<p>这样，就用一个全球 IP 地址就可以了，这种转换技术就叫<strong>网络地址与端口转换 NAPT。</strong></p>
<p>很抽象？来，看下面的图解就能瞬间明白了。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071023670.png" alt="NAPT">NAPT</p>
<p>图中有两个客户端 192.168.1.10 和 192.168.1.11 同时与服务器 183.232.231.172 进行通信，并且这两个客户端的本地端口都是 1025。</p>
<p>此时，<strong>两个私有 IP 地址都转换 IP 地址为公有地址 120.229.175.121，但是以不同的端口号作为区分。</strong></p>
<p>于是，生成一个 NAPT 路由器的转换表，就可以正确地转换地址跟端口的组合，令客户端 A、B 能同时与服务器之间进行通信。</p>
<p>这种转换表在 NAT 路由器上自动生成。例如，在 TCP 的情况下，建立 TCP 连接首次握手时的 SYN 包一经发出，就会生成这个表。而后又随着收到关闭连接时发出 FIN 包的确认应答从表中被删除。</p>
<blockquote>
<p>NAT 那么牛逼，难道就没缺点了吗？</p>
</blockquote>
<p>当然有缺陷，肯定没有十全十美的方案。</p>
<p>由于 NAT/NAPT 都依赖于自己的转换表，因此会有以下的问题：</p>
<ul>
<li>外部无法主动与 NAT 内部服务器建立连接，因为 NAPT 转换表没有转换记录。</li>
<li>转换表的生产与转换操作都会产生性能开销。</li>
<li>通信过程中，如果 NAT 路由器重启了，所有的 TCP 连接都将被重置。</li>
</ul>
<blockquote>
<p>如何解决 NAT 潜在的问题呢？</p>
</blockquote>
<p>解决的方法主要两种方法。</p>
<p><em>第一种就是改用 IPv6</em></p>
<p>IPv6 可用范围非常大，以至于每台设备都可以配置一个公有 IP 地址，就不搞那么多花里胡哨的地址转换了，但是 IPv6 普及速度还需要一些时间。</p>
<p><em>第二种 NAT 穿透技术</em></p>
<p>NAT 穿越技术拥有这样的功能，它能够让网络应用程序主动发现自己位于 NAT 设备之后，并且会主动获得 NAT 设备的公有 IP，并为自己建立端口映射条目，注意这些都是 NAT设备后的应用程序自动完成的。</p>
<p>也就是说，在 NAT 穿越技术中，NAT 设备后的应用程序处于主动地位，它已经明确地知道 NAT 设备要修改它外发的数据包，于是它主动配合 NAT 设备的操作，主动地建立好映射，这样就不像以前由 NAT 设备来建立映射了。</p>
<p>说人话，就是客户端主动从 NAT 设备获取公有 IP 地址，然后自己建立端口映射条目，然后用这个条目对外通信，就不需要 NAT 设备来进行转换了。</p>
<h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><p>ICMP 全称是 <strong>Internet Control Message Protocol</strong>，也就是<strong>互联网控制报文协议</strong>。</p>
<p>里面有个关键词 —— <strong>控制</strong>，如何控制的呢？</p>
<p>网络包在复杂的网络传输环境里，常常会遇到各种问题。</p>
<p>当遇到问题的时候，总不能死个不明不白，没头没脑的作风不是计算机网络的风格。所以需要传出消息，报告遇到了什么问题，这样才可以调整传输策略，以此来控制整个局面。</p>
<blockquote>
<p>ICMP 功能都有啥？</p>
</blockquote>
<p><code>ICMP</code> 主要的功能包括：<strong>确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。</strong></p>
<p>在 <code>IP</code> 通信中如果某个 <code>IP</code> 包因为某种原因未能达到目标地址，那么这个具体的原因将<strong>由 ICMP 负责通知</strong>。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071023492.png" alt="ICMP 目标不可达消息"></p>
<p>如上图例子，主机 <code>A</code> 向主机 <code>B</code> 发送了数据包，由于某种原因，途中的路由器 <code>2</code> 未能发现主机 <code>B</code> 的存在，这时，路由器 <code>2</code> 就会向主机 <code>A</code> 发送一个 <code>ICMP</code> 目标不可达数据包，说明发往主机 <code>B</code> 的包未能成功。</p>
<p>ICMP 的这种通知消息会使用 <code>IP</code> 进行发送 。</p>
<p>因此，从路由器 <code>2</code> 返回的 ICMP 包会按照往常的路由控制先经过路由器 <code>1</code> 再转发给主机 <code>A</code> 。收到该 ICMP 包的主机 <code>A</code> 则分解 ICMP 的首部和数据域以后得知具体发生问题的原因。</p>
<blockquote>
<p>ICMP 类型</p>
</blockquote>
<p>ICMP 大致可以分为两大类：</p>
<ul>
<li>一类是用于诊断的查询消息，也就是「<strong>查询报文类型</strong>」</li>
<li>另一类是通知出错原因的错误消息，也就是「<strong>差错报文类型</strong>」</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/202309071023450.png" alt="常见的 ICMP 类型"></p>
<h4 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h4><p>ICMP 跟 IGMP 是一点关系都没有的，就好像周杰与周杰伦的区别，大家不要混淆了。</p>
<p>在前面我们知道了组播地址，也就是 D 类地址，既然是组播，那就说明是只有一组的主机能收到数据包，不在一组的主机不能收到数组包，怎么管理是否是在一组呢？那么，就需要 <code>IGMP</code> 协议了。</p>
<p><img data-src="https://cdn.jonty.top/img/202309071023807.png" alt="组播模型"></p>
<p><strong>IGMP 是因特网组管理协议，工作在主机（组播成员）和最后一跳路由之间</strong>，如上图中的蓝色部分。</p>
<ul>
<li>IGMP 报文向路由器申请加入和退出组播组，默认情况下路由器是不会转发组播包到连接中的主机，除非主机通过 IGMP 加入到组播组，主机申请加入到组播组时，路由器就会记录 IGMP 路由器表，路由器后续就会转发该组播地址的数据包了。</li>
<li>IGMP 报文采用 IP 封装，IP 头部的协议号为 2，而且 TTL 字段值通常 为 1，因为 IGMP 是工作在主机与连接的路由器之间。</li>
</ul>
<blockquote>
<p>IGMP 工作机制</p>
</blockquote>
<p>IGMP 分为了三个版本分别是，IGMPv1、IGMPv2、IGMPv3。</p>
<p>接下来，以 <code>IGMPv2</code> 作为例子，说说<strong>常规查询与响应和离开组播组</strong>这两个工作机制。</p>
<p><em>常规查询与响应工作机制</em></p>
<p><img data-src="https://cdn.jonty.top/img/202309071023560.png" alt="IGMP 常规查询与响应工作机制"></p>
<ol>
<li>路由器会周期性发送目的地址为 <code>224.0.0.1</code>（表示同一网段内所有主机和路由器） <strong>IGMP 常规查询报文；</strong></li>
<li>主机1 和 主机 3 收到这个查询，随后会启动「报告延迟计时器」，计时器的时间是随机的，通常是 0~10 秒，计时器超时后主机就会发送 <strong>IGMP 成员关系报告报文</strong>（源 IP 地址为自己主机的 IP 地址，目的 IP 地址为组播地址）。如果在定时器超时之前，收到同一个组内的其他主机发送的成员关系报告报文，则自己不再发送，这样可以减少网络中多余的 IGMP 报文数量；</li>
<li>路由器收到主机的成员关系报告报文后，就会在 IGMP 路由表中加入该组播组，后续网络中一旦该组播地址的数据到达路由器，它会把数据包转发出去；</li>
</ol>
<p><em>离开组播组工作机制</em></p>
<p>离开组播组的情况一，网段中仍有该组播组：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071024282.png" alt="IGMPv2 离开组播组工作机制 情况1"></p>
<ol>
<li>主机 1 要离开组 224.1.1.1，发送 IGMPv2 离组报文，报文的目的地址是 224.0.0.2（表示发向网段内的所有路由器）；</li>
<li>路由器收到该报文后，以 1 秒为间隔连续发送 IGMP 特定组查询报文（共计发送 2 个），以便确认该网络是否还有 224.1.1.1 组的其他成员；</li>
<li>主机 3 仍然是组 224.1.1.1 的成员，因此它立即响应这个特定组查询。路由器知道该网络中仍然存在该组播组的成员，于是继续向该网络转发 224.1.1.1 的组播数据包；</li>
</ol>
<p>离开组播组的情况二，网段中没有该组播组：</p>
<p><img data-src="https://cdn.jonty.top/img/202309071024481.png" alt="IGMPv2 离开组播组工作机制 情况2"></p>
<ol>
<li>主机 1 要离开组播组 224.1.1.1，发送 IGMP 离组报文；</li>
<li>路由器收到该报文后，以 1 秒为间隔连续发送 IGMP 特定组查询报文（共计发送 2 个）。此时在该网段内，组 224.1.1.1 已经没有其他成员了，因此没有主机响应这个查询；</li>
<li>一定时间后，路由器认为该网段中已经没有 224.1.1.1 组播组成员了，将不会再向这个网段转发该组播地址的数据包；</li>
</ol>
<hr>
<h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p>[1] 计算机网络-自顶向下方法.陈鸣 译.机械工业出版社</p>
<p>[2] TCP/IP详解 卷1：协议.范建华 译.机械工业出版社</p>
<p>[3] 图解TCP/IP.竹下隆史.人民邮电出版社</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
      </tags>
  </entry>
  <entry>
    <title>【分享】前端Chrome调试</title>
    <url>/2023/07/13/chrome-debugging-tips/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938457-597264579.png" alt="image.png"></p>
<p>Chrome浏览器调试工具的核心功能：</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938315-1220135849.jpg" alt="img"></p>
<blockquote>
<p>🥷🏻注：本文测试、截图均为Edge浏览器（内核是Chromium），浏览器内核可了解《<a href="https://www.yuque.com/kanding/ktech/fh36v0">有哪些浏览器/内核？</a>》</p>
</blockquote>
<h2 id="基础操作汇总"><a href="#基础操作汇总" class="headerlink" title="基础操作汇总"></a>基础操作汇总</h2><table>
<thead>
<tr>
<th align="left"><strong>操作类型</strong></th>
<th align="left"><strong>快捷键/说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">切换浏览器标签</td>
<td align="left">🔸 <code>Ctrl+1到8</code>切换到对应序号的浏览器标签<br/> 🔸 <code>Ctrl+PgUp/PgDn</code>标签页左右切换</td>
</tr>
<tr>
<td align="left">浏览器全屏</td>
<td align="left"><code>F11</code> (<code>⌘ + shift + F</code> Mac)</td>
</tr>
<tr>
<td align="left">打开调试模式</td>
<td align="left">🔸 <code>F12</code>，<code>Ctrl + Shift + I</code> (Windows) 或<code> Cmd + Opt + I</code> (Mac) <br/>🔸 页面右键菜单“检查”，浏览器菜单“开发者工具”</td>
</tr>
<tr>
<td align="left">切换调试工具位置（下面、右边）</td>
<td align="left"><code>ctrl + shift + D</code> (<code>⌘ + shift + D</code> Mac)</td>
</tr>
<tr>
<td align="left">切换 DevTools 的面板标签</td>
<td align="left"><code>ctrl + [</code> 和 <code>ctrl + ]</code>左右切换调试工具面板</td>
</tr>
<tr>
<td align="left">内容搜索查找</td>
<td align="left"><code>Ctrl+F</code>：元素、控制台、源代码、网络都支持搜索查找</td>
</tr>
<tr>
<td align="left">使用命令Command面板</td>
<td align="left"><code>Ctrl] + [Shift] + [P]</code> （Mac：<code> [⌘] + [Shift]+ [P]</code>） 类似VSCode的命令面板，有大量的隐藏功能，可以在这里搜索使用</td>
</tr>
<tr>
<td align="left">复制元素</td>
<td align="left">🔸 元素面板：选中元素》<code>Ctrl+C</code> <br/>🔸 元素面板：选中元素》右键菜单》复制元素 <br/>🔸 <code>copy($0)</code> 控制台中代码复制当前选中元素</td>
</tr>
<tr>
<td align="left">控制台：快速访问当前元素’$0’</td>
<td align="left"><code>$0</code>代表在元素面板中选中元素，<code>$1</code>是上一个，支持到<code>$4</code></td>
</tr>
<tr>
<td align="left">控制台：全局<code>copy</code>方法</td>
<td align="left">复制任何对象到剪切板，<code>copy(window.location)</code></td>
</tr>
<tr>
<td align="left">控制台：queryObjects(Type)</td>
<td align="left">查询指定类型（构造器）的对象实例有哪些</td>
</tr>
<tr>
<td align="left">控制台：保存堆栈信息( Stack trace )</td>
<td align="left">报错信息可以右键另存为文件，保存完整堆栈信息</td>
</tr>
<tr>
<td align="left">控制台：<code>$</code>、<code>$$</code>查询Dom元素</td>
<td align="left">- <code>$</code> = <code>document.querySelector</code> - <code>$$</code> = <code>document.querySelectorAll</code></td>
</tr>
<tr>
<td align="left">Store as global（存储为全局变量）</td>
<td align="left">🔸 控制台（右键）：把一个对象设置为全局变量，自动命名为<code>temp*</code> <br/>🔸 元素面板（右键）：把一个元素设置全局变量，同上</td>
</tr>
<tr>
<td align="left">元素：<code>h</code>快速隐藏、显示该元素</td>
<td align="left">选中元素，按下<code>h</code>快速隐藏、显示该元素。</td>
</tr>
<tr>
<td align="left">元素：移动元素</td>
<td align="left">🔸 鼠标拖动到任意位置 <br/>🔸 上下移动，<code>[ctrl] + [⬆]</code> / <code>[ctrl] + [⬇]</code> （<code>[⌘] + [⬆] / [⌘] + [⬇]</code>on Mac）</td>
</tr>
</tbody></table>
<p>🔸<strong>Store as global（存储为全局变量）</strong>：类似copy方法，将一个对象保存为全局变量，变量命名依次为<code>temp1</code>、<code>temp2</code></p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938377-948109294.png" alt="image.png"></p>
<p>**🔸保存堆栈信息( Stack trace )**：错误堆栈信息另存为文件，保存完整堆栈信息。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938299-1173868388.png" alt="image.png"></p>
<p><strong>🔸Command面板</strong>：同VSCode的命令面板，可以找到调试工具的所有的（隐藏）功能。<code>Ctrl] + [Shift] + [P]</code> （Mac：<code>[⌘] + [Shift]+ [P]</code>）</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938237-1437141754.png" alt="image.png"></p>
<ul>
<li><strong>设置主题</strong>：打开Command面板，搜索“主题”，可以切换多种主题</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938406-1112736968.png" alt="image.png"></p>
<ul>
<li><strong>分析代码的覆盖率</strong>：打开Command面板，如下图搜索“覆盖”，分析首次页面加载过程中哪些代码执行了，那些没有执行，输出一个报告。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938411-1934457543.png" alt="image.png"></p>
<p>选择文件可进一步查看代码的使用分析，红色 = 尚未执行，青蓝色 = 至少执行了一次。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938364-1323536527.png" alt="image.png"></p>
<p><strong>🔸元素截图</strong>：输出指定元素的截图，包含隐藏滚动的内容，这个功能挺好用的。</p>
<ul>
<li>通过Command面板：搜索“截图”，全屏截图、指定节点截图。</li>
<li>元素面板中，选中元素》右键菜单》“捕获节点屏幕截图”。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938298-493151014.png" alt="image.png"></p>
<h2 id="元素面板（Element）"><a href="#元素面板（Element）" class="headerlink" title="元素面板（Element）"></a>元素面板（Element）</h2><p>可以自由调试DOM、CSS样式，使用评率级高：⭐⭐⭐⭐⭐。</p>
<ul>
<li><strong>DOM树</strong>：左侧为DOM元素树，支持多种操作，如编辑、删除、新增、复制DOM元素，更多可查看右键菜单。</li>
<li><strong>样式</strong>：选中元素的样式，可编辑、添加CSS样式，实时预览。</li>
<li><strong>已计算</strong>：选中元素计算的样式值。</li>
<li><strong>布局</strong>：grid布局、flex布局调试。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623113942060-636325101.png" alt="image"></p>
<h3 id="CSS可视化编辑器"><a href="#CSS可视化编辑器" class="headerlink" title="CSS可视化编辑器"></a>CSS可视化编辑器</h3><p>可视化的颜色、贝塞尔曲线、阴影编辑器，所见即所得，挺好用！</p>
<ul>
<li><strong>颜色编辑器</strong>：只要是颜色属性，都可以点击色块按钮可视化编辑颜色，支持拖动设置颜色、取色、设置对比度。</li>
<li><strong>Grid、Flex布局编辑器</strong>：当使用弹性布局Grid、Flex时，支持可视化编辑布局对齐方式。</li>
<li><strong>阴影编辑器</strong>：阴影<code>shadow</code>属性上，会出现编辑器按钮，可视化编辑阴影效果。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938265-495918130.png" alt="image.png"></p>
<ul>
<li><strong>贝塞尔曲线编辑器</strong>：在动画<code>transition</code>、<code>animation</code>中会用到贝塞尔曲线函数（缓动函数）。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938307-631688298.png" alt="image.png"></p>
<h3 id="强制激活伪类"><a href="#强制激活伪类" class="headerlink" title="强制激活伪类"></a>强制激活伪类</h3><p>强制激活元素的伪类效果。</p>
<ul>
<li>选择Dom节点右键“强制状态”。</li>
<li>如下图CSS样式中“切换元素状态”。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938340-1528296991.png" alt="image.png"></p>
<h3 id="DOM断点"><a href="#DOM断点" class="headerlink" title="DOM断点"></a>DOM断点</h3><p>选中DOM元素，右键设置中断点，可以在元素更改（JS代码修改DOM）时触发断点。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938147-1545031101.png" alt="image.png"></p>
<p>添加后可以在源代码中查看到已添加的DOM断点，或者元素面板中的“DOM断点”。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938405-2021055934.png" alt="image.png"></p>
<h2 id="控制台面板（Console）"><a href="#控制台面板（Console）" class="headerlink" title="控制台面板（Console）"></a>控制台面板（Console）</h2><p>主要功能就是调试JavaScript代码，是比较常用的调试工具，使用频率很高：⭐⭐⭐⭐⭐</p>
<ul>
<li><strong>运行代码</strong>：可执行任意JS代码，包括调用页面已有的JS对象、函数。</li>
<li><strong>console输出</strong>：代码中的Console、异常错误都会在这里输出。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938378-1572840200.png" alt="image.png"></p>
<h3 id="console函数"><a href="#console函数" class="headerlink" title="console函数"></a>console函数</h3><p>用console函数输出变量，是比较常用的调试技巧，console的常用函数：</p>
<table>
<thead>
<tr>
<th align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console"><strong>console</strong></a><strong>函数</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">console.<strong>log</strong>(str)</td>
<td align="left">控制台输出一条消息</td>
</tr>
<tr>
<td align="left">console.<strong>error</strong>(str);</td>
<td align="left">打印一条错误信息，类似的还有<code>info</code>、<code>warn</code></td>
</tr>
<tr>
<td align="left">console.<strong>table</strong>(data [, columns])</td>
<td align="left">将数据以表格的形式显示，很实用，data为数组或对象，第二个参数（数组）可指定输出的列</td>
</tr>
<tr>
<td align="left">console.<strong>dir</strong>(object)</td>
<td align="left">树形方式打印对象，特别是DOM对象非常实用</td>
</tr>
<tr>
<td align="left">console.<strong>assert</strong>(false, ‘false’)</td>
<td align="left">断言输出，为<code>false</code>才会输出</td>
</tr>
<tr>
<td align="left">console.<strong>trace</strong>()</td>
<td align="left">输出当前位置的执行堆栈，用断点会更实用一些。</td>
</tr>
<tr>
<td align="left">console.<strong>time</strong>(label)</td>
<td align="left">计时器，可用来计算耗时（毫秒），三个函数配合使用：<strong>time</strong>(开始计时) &gt; <strong>timeLog</strong>(计时) &gt; <strong>timeEnd</strong>(结束)</td>
</tr>
<tr>
<td align="left">console.<strong>clear</strong>()</td>
<td align="left">清空控制台，并输出 Console was cleared。</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;log&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">&#x27;warn&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.table([<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;egan&quot;</span>, <span class="string">&quot;kettle&quot;</span>])</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了！！！&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>控制台输出效果，右侧链接为对应JS代码的链接。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938407-1186520163.png" alt="image.png"></p>
<p>用<code>console.time()</code>来计算代码的耗时，参数为计时器命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> u = &#123; <span class="attr">name</span>: <span class="string">&#x27;sam&#x27;</span>, <span class="attr">age</span>: i &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算一个函数的耗时</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;sum&#x27;</span>) <span class="comment">// 开始计时</span></span><br><span class="line"><span class="keyword">const</span> total = sum(<span class="number">100000</span>);</span><br><span class="line"><span class="built_in">console</span>.timeLog(<span class="string">&#x27;sum&#x27;</span>);  <span class="comment">// 计时：sum: 4.43994140625 ms</span></span><br><span class="line"><span class="keyword">const</span> total2 = sum(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;sum&#x27;</span>);  <span class="comment">// 计时：sum: 5.0419921875 ms</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; total &#125;);  <span class="comment">//&#123;total: 5000050000&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="增强log"><a href="#增强log" class="headerlink" title="增强log"></a>增强log</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">100</span>, y = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x, y); <span class="comment">// 100 200</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; x, y &#125;); <span class="comment">// &#123;x: 100, y: 200&#125;</span></span><br><span class="line"><span class="built_in">console</span>.table(&#123; x, y &#125;); </span><br></pre></td></tr></table></figure>

<p>如上代码，经常我们会输出一些变量值，如果直接输出值，则不知道值对应的变量。这时可以用字面量对象，输出的可读性立马就提升了，再加上<code>console.table</code>就更完美了。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938292-321740182.png" alt="image.png"></p>
<h3 id="自定义log样式：占位符"><a href="#自定义log样式：占位符" class="headerlink" title="自定义log样式：占位符"></a>自定义log样式：占位符</h3><p><code>console</code>函数支持的占位符：</p>
<table>
<thead>
<tr>
<th align="left">占位符</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>%c</code></td>
<td align="left">CSS样式占位符，值就是CSS样式，如下示例，可用来自定义log的样式</td>
</tr>
<tr>
<td align="left"><code>%o</code> or <code>%O</code></td>
<td align="left">打印 JavaScript 对象。在审阅器点击对象名字可展开更多对象的信息。</td>
</tr>
<tr>
<td align="left"><code>%d</code> or <code>%i</code></td>
<td align="left">打印整数。支持数字格式化。例如，console.log(“Foo %.2d”, 1.1) 会输出有先导 0 的两位有效数字：Foo 01。</td>
</tr>
<tr>
<td align="left"><code>%s</code></td>
<td align="left">打印字符串。</td>
</tr>
<tr>
<td align="left"><code>%f</code></td>
<td align="left">打印浮点数。支持格式化，比如 console.log(“Foo %.2f”, 1.1) 会输出两位小数：Foo 1.10</td>
</tr>
</tbody></table>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938195-1563619369.png" alt="image.png"></p>
<h3 id="监听函数"><a href="#监听函数" class="headerlink" title="监听函数"></a>监听函数</h3><p>通过如下（调试工具）的全局函数可监听一个函数、事件的执行。</p>
<table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>monitor</strong>( function )</td>
<td align="left">监听一个函数，当被监听函数执行的时候，会打印被调用信息</td>
</tr>
<tr>
<td align="left"><strong>monitorEvents</strong> ( event )</td>
<td align="left">监听一个事件，当事件被触发时打印触发事件日志</td>
</tr>
</tbody></table>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938184-1929017682.png" alt="image.png"></p>
<h3 id="监听变量：活动表达式"><a href="#监听变量：活动表达式" class="headerlink" title="监听变量：活动表达式"></a>监听变量：活动表达式</h3><p>一个不错的小功能，点击下图中的眼睛图标，相当于添加了一个动态表达式，然后实时监控（显示）该表达式的值。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938226-1635124708.png" alt="image.png"></p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938696-1137434295.webp" alt="img"></p>
<h2 id="源代码面板（Sources）"><a href="#源代码面板（Sources）" class="headerlink" title="源代码面板（Sources）"></a>源代码面板（Sources）</h2><p>顾名思义，管理网页所有的源代码文件，包括JS、CSS、图片等资源，经常就是在这里断点调试JS代码，使用评率中：⭐⭐⭐⭐。</p>
<p>在调试模式下可以查看（鼠标悬浮在变量上）变量值、上下文作用域、函数调用堆栈信息。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623114401947-402092485.png" alt="image"></p>
<ul>
<li><strong>① 页面资源目录</strong>：页面涉及的所有资源（树）。</li>
<li><strong>② 源代码</strong>：文件源代码，可以在这里添加断点调试JS代码，如果想编辑在线JS代码，也是可以的，详见后文。</li>
<li><strong>③ Debug工具栏</strong>：断点调试的操作工具，可以控制暂停、继续、单步…执行代码。</li>
<li><strong>④ 断点调试器</strong>：这里包含多个断点调试器：</li>
</ul>
<blockquote>
<ul>
<li><strong>监视（Watch）</strong>：可添加对变量的监视。</li>
<li><strong>断点（Breakpoints）</strong>：所有添加的断点，可在这里编辑、删除管理。</li>
<li><strong>作用域（Scope）</strong>：当前代码上下文的作用域，含闭包。</li>
<li><strong>调用堆栈（Call Stack</strong>）：当前函数的调用堆栈，推荐参考《<a href="https://www.yuque.com/kanding/ktech/jsfunctoin2#cuhoC">JavaScript函数(2)原理{深入}执行上下文</a>》。</li>
<li><strong>XHR/提取断点</strong>：可以在这里添加对AJAX请求（XHR、Fetch）的断点，添加URL地址即可。</li>
<li><strong>DOM断点</strong>：在元素页面添加的DOM断点会在这里显示。</li>
</ul>
</blockquote>
<h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>如下图，在源代码行号位置添加断点。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938272-1731314310.png" alt="image.png"></p>
<ul>
<li><strong>添加断点（Add breakpoint）</strong>：添加一个普通断点，最左侧行号处，点击添加断点，或者右键菜单。</li>
</ul>
<p>也可以在JS代码中设置断点，关键字：<code>debugger</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">debugger</span> <span class="comment">// 会在这里断点</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;debugger&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>添加条件断点（Add conditional breakpoint）</strong>：添加一个条件断点，符合条件断点才会生效，条件可使用当前代码上下文中的变量。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938383-147289909.png" alt="image.png"></p>
<ul>
<li><strong>添加记录点（Add logpoint）</strong>：添加一个日志打印，打印当前代码环境的变量，非常方便，不用在源码下添加<code>console</code>了。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938406-1818916486.png" alt="image.png"></p>
<h3 id="调试线上代码：本地工作区"><a href="#调试线上代码：本地工作区" class="headerlink" title="调试线上代码：本地工作区"></a>调试线上代码：本地工作区</h3><p>如果是线上的环境，能不能直接修改源代码（JS、CSS）调试呢？—— 可以的。思路就是创建本地的JS副本，页面加载本地的JS文件，就可以在本地JS文件上修改了。</p>
<p><strong>① 创建本地工作目录</strong>：</p>
<ul>
<li>如下图，源代码下面找到“覆盖（Override）”。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938255-79717952.png" alt="image.png"></p>
<ul>
<li>然后点击“选择替代文件夹”，添加一个本地空的文件夹，作为本地工作目录。</li>
<li>添加后要注意要确认授权。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938618-621276412.png" alt="image.png"></p>
<p><strong>② 创建源代码的本地副本</strong>：选择需要修改的源代码右键“保存以备替代”，就会在本地目录创建副本文件，网页使用本地的JS文件。</p>
<ul>
<li>创建的本地副本，可以在“覆盖”下看到，也可以在本地文件夹下看到。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938458-1154512196.png" alt="image.png"></p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938278-1914798126.png" alt="image.png"></p>
<p><strong>③ 编辑代码</strong>：该JS文件就可以直接在源代码中编辑修改了，实时生效。</p>
<ul>
<li>CSS、HTML、JavaScript都支持。</li>
<li>可以在浏览器的源代码中修改，也可以本地其他工具中打开编辑。</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938469-1983085199.png" alt="image.png"></p>
<h2 id="网络面板（Network）"><a href="#网络面板（Network）" class="headerlink" title="网络面板（Network）"></a>网络面板（Network）</h2><p><img data-src="https://cdn.jonty.top/img/151257-20230623114556140-1411307077.png" alt="image"></p>
<p>工具栏中两个比较实用的小功能：禁用缓存、模拟弱网环境。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938271-33800824.png" alt="image.png"></p>
<p>点击请求的资源项，可以查看详细的请求、响应数据，常用于服务端接口的联调。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623114634987-834374801.png" alt="image"></p>
<p>还可以编辑参数，重新发起请求</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938615-1015835259.png" alt="image.png"></p>
<h2 id="性能面板（Performance）"><a href="#性能面板（Performance）" class="headerlink" title="性能面板（Performance）"></a>性能面板（Performance）</h2><p>先录制，后分析，分析网络、CPU、内存、渲染FPS帧率，用于定位、解决页面性能问题。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623114704972-512414378.png" alt="image"></p>
<blockquote>
<p><strong>🚩特别提示</strong>：调试性能建议在<strong>无痕模式</strong>下进行，尽量避浏览器插件的影响。包括其他异常Bug的调试，也要考虑浏览器插件问题，之前就遇到过类似问题，页面上一个Bug怎么也复现不了，几经波折才发现是测试机上的油猴插件的影响。</p>
</blockquote>
<p><strong>🔸性能监视器</strong>（Performance monitor）面板可以<strong>实时</strong>的监控页面性能参数。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938470-616843507.png" alt="image.png"></p>
<p><strong>🔸Lighthouse</strong>，这个就很厉害了，对页面进行综合分析，包括性能、PWA（Progressive Web App，渐进式Web应用）、SEO、无障碍访问等，分析完后产出报告，给出得分，还给出了页面改进建议。</p>
<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938471-1405739588.png" alt="image.png"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>掘金小册：<a href="https://juejin.cn/book/6844733783166418958">你不知道的 Chrome 调试技巧</a> ，<a href="https://dendoink.github.io/daydream/docs/chrome-tricks/index">开源版</a></li>
<li>掘金小册：<a href="https://juejin.cn/course/bytetech/7180922988034785336/section/7181029728822755385">前端开发调试之 PC 端调试</a></li>
<li><a href="https://bytedance.feishu.cn/file/boxcnAGLgshQ1EKi7ACwx4WI9vc">前端必须知道的开发调试知识.pptx</a></li>
<li><a href="https://www.yuque.com/kanding/ktech/fh36v0">有哪些浏览器/内核？</a></li>
<li><a href="https://www.yuque.com/kanding/ktech/jsfunctoin2#cuhoC">JavaScript函数(2)原理{深入}执行上下文</a></li>
</ul>
<blockquote>
<p><strong>©️版权申明</strong>：版权所有@安木夕，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/kanding/ktech/mh8eqzgf6wnbphuv#q18bL"><em>原文编辑地址-语雀</em></a></p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>Web Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker搭建私有Gitlab</title>
    <url>/2023/07/07/ubuntu-docker-deploy-gitlab/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/R-C.ecb6c01c3a955a63337b4c624a15276f.png" alt="gitlab"></p>
<div class="note info"><p>GitLab is the only place where enterprises build mission‑critical software.</p>
</div>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/gitlab/config/ssl</span><br><span class="line">mkdir /root/gitlab/logs</span><br><span class="line">mkdir /root/gitlab/data</span><br></pre></td></tr></table></figure>

<p>阿里云申请ssl证书，下载Nginx版本</p>
<p>解压到<code>/root/gitlab/config/ssl</code>目录</p>
<p><code>pem</code>后缀改成<code>crt</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230627171654621.png" alt="image-20230627171654621"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230707154229073.png" alt="image-20230707154229073"></p>
<p>创建<code>docker-compose.yaml</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  gitlab:</span><br><span class="line">    environment:</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url <span class="string">&#x27;https://gitlab.jonty.top&#x27;</span></span><br><span class="line">        nginx[<span class="string">&#x27;listen_port&#x27;</span>] = 443</span><br><span class="line">        nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/gitlab.jonty.top.crt&quot;</span></span><br><span class="line">        nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/gitlab.jonty.top.key&quot;</span></span><br><span class="line"></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;501211312@qq.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;your_passwork_key&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;gitlab.jonty.top&#x27;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    container_name: gitlab</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">      - 443:443</span><br><span class="line">    image: gitlab/gitlab-ee:latest</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/gitlab/config:/etc/gitlab</span><br><span class="line">      - /root/gitlab/logs:/var/<span class="built_in">log</span>/gitlab</span><br><span class="line">      - /root/gitlab/data:/var/opt/gitlab</span><br><span class="line">    networks:</span><br><span class="line">      - internal-network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  internal-network:</span><br><span class="line">    external: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line">[root@VM-0-5-centos gitlab]<span class="comment"># docker compose up -d</span></span><br><span class="line">[+] Running 1/1</span><br><span class="line"> ✔ Container gitlab  Started </span><br></pre></td></tr></table></figure>



<p>进入容器查看初始密码，账号为：root</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">cat /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230707155449732.png" alt="image-20230707155449732"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230707155527280.png" alt="image-20230707155527280"></p>
<h2 id="生成许可证"><a href="#生成许可证" class="headerlink" title="生成许可证"></a>生成许可证</h2><blockquote>
<p>安装Ruby:<a href="https://www.cnblogs.com/livelab/p/12960670.html">如何在Ubuntu 20.04上安装Ruby2.7.0 - GlaryJoker - 博客园 (cnblogs.com)</a></p>
</blockquote>
<p>安装Ruby</p>
<p>版本大于2.7</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ruby-full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">root@gitlab:/home/jonty/gitlab<span class="comment"># ruby -v</span></span><br><span class="line">ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-linux-gnu]</span><br></pre></td></tr></table></figure>

<p>安装gitlab-license</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install gitlab-license</span><br></pre></td></tr></table></figure>

<p>创建目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /root/gitlab/license &amp; <span class="built_in">cd</span></span><br></pre></td></tr></table></figure>

<p>创建<code>license.rb</code>文件</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">require &quot;openssl&quot;</span><br><span class="line">require &quot;gitlab/license&quot;</span><br><span class="line">key<span class="built_in">_</span>pair = OpenSSL::PKey::RSA.generate(2048)</span><br><span class="line">File.open(&quot;license<span class="built_in">_</span>key&quot;, &quot;w&quot;) &#123; |f| f.write(key<span class="built_in">_</span>pair.to<span class="built_in">_</span>pem) &#125;</span><br><span class="line">public<span class="built_in">_</span>key = key<span class="built_in">_</span>pair.public<span class="built_in">_</span>key</span><br><span class="line">File.open(&quot;license<span class="built_in">_</span>key.pub&quot;, &quot;w&quot;) &#123; |f| f.write(public<span class="built_in">_</span>key.to<span class="built_in">_</span>pem) &#125;</span><br><span class="line">private<span class="built_in">_</span>key = OpenSSL::PKey::RSA.new File.read(&quot;license<span class="built_in">_</span>key&quot;)</span><br><span class="line">Gitlab::License.encryption<span class="built_in">_</span>key = private<span class="built_in">_</span>key</span><br><span class="line">license = Gitlab::License.new</span><br><span class="line">license.licensee = &#123;</span><br><span class="line">&quot;Name&quot; =&gt; &quot;Jonty&quot;,</span><br><span class="line">&quot;Company&quot; =&gt; &quot;Jonty.tEd&quot;,</span><br><span class="line">&quot;Email&quot; =&gt; &quot;gitlab@jonty.top&quot;,</span><br><span class="line">&#125;</span><br><span class="line">license.starts<span class="built_in">_</span>at = Date.new(2021, 1, 1) <span class="params">#</span> 开始时间</span><br><span class="line">license.expires<span class="built_in">_</span>at = Date.new(2050, 1, 1) <span class="params">#</span> 结束时间</span><br><span class="line">license.notify<span class="built_in">_</span>admins<span class="built_in">_</span>at = Date.new(2049, 12, 1)</span><br><span class="line">license.notify<span class="built_in">_</span>users<span class="built_in">_</span>at = Date.new(2049, 12, 1)</span><br><span class="line">license.block<span class="built_in">_</span>changes<span class="built_in">_</span>at = Date.new(2050, 1, 1)</span><br><span class="line">license.restrictions = &#123;</span><br><span class="line">active<span class="built_in">_</span>user<span class="built_in">_</span>count: 10000,</span><br><span class="line">&#125;</span><br><span class="line">puts &quot;License:&quot;</span><br><span class="line">puts license</span><br><span class="line">data = license.export</span><br><span class="line">puts &quot;Exported license:&quot;</span><br><span class="line">puts data</span><br><span class="line">File.open(&quot;GitLabBV.gitlab-license&quot;, &quot;w&quot;) &#123; |f| f.write(data) &#125;</span><br><span class="line">public<span class="built_in">_</span>key = OpenSSL::PKey::RSA.new File.read(&quot;license<span class="built_in">_</span>key.pub&quot;)</span><br><span class="line">Gitlab::License.encryption<span class="built_in">_</span>key = public<span class="built_in">_</span>key</span><br><span class="line">data = File.read(&quot;GitLabBV.gitlab-license&quot;)</span><br><span class="line"><span class="built_in">$</span>license = Gitlab::License.import(data)</span><br><span class="line">puts &quot;Imported license:&quot;</span><br><span class="line">puts <span class="built_in">$</span>license</span><br><span class="line">unless <span class="built_in">$</span>license</span><br><span class="line">raise &quot;The license is invalid.&quot;</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.restricted?(:active<span class="built_in">_</span>user<span class="built_in">_</span>count)</span><br><span class="line">active<span class="built_in">_</span>user<span class="built_in">_</span>count = 10000</span><br><span class="line">if active<span class="built_in">_</span>user<span class="built_in">_</span>count &gt; <span class="built_in">$</span>license.restrictions[:active<span class="built_in">_</span>user<span class="built_in">_</span>count]</span><br><span class="line">    raise &quot;The active user count exceeds the allowed amount!&quot;</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.notify<span class="built_in">_</span>admins?</span><br><span class="line">puts &quot;The license is due to expire on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;.&quot;</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.notify<span class="built_in">_</span>users?</span><br><span class="line">puts &quot;The license is due to expire on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;.&quot;</span><br><span class="line">end</span><br><span class="line">module Gitlab</span><br><span class="line">class GitAccess</span><br><span class="line">    def check(cmd, changes = nil)</span><br><span class="line">    if <span class="built_in">$</span>license.block<span class="built_in">_</span>changes?</span><br><span class="line">        return build<span class="built_in">_</span>status<span class="built_in">_</span>object(false, &quot;License expired&quot;)</span><br><span class="line">    end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">puts &quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span><br><span class="line"><span class="built_in">$</span>license.licensee.each do |key, value|</span><br><span class="line">puts &quot;<span class="params">#</span>&#123;key&#125;: <span class="params">#</span>&#123;value&#125;&quot;</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.expired?</span><br><span class="line">puts &quot;The license expired on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;&quot;</span><br><span class="line">elsif <span class="built_in">$</span>license.will<span class="built_in">_</span>expire?</span><br><span class="line">puts &quot;The license will expire on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;&quot;</span><br><span class="line">else</span><br><span class="line">puts &quot;The license will never expire.&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>执行<code>license.rb</code></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">ruby license.rb</span><br></pre></td></tr></table></figure>

<p>生成以下文件</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">GitLabBV.gitlab-license  license.rb  license<span class="built_in">_</span>key  license<span class="built_in">_</span>key.pub</span><br></pre></td></tr></table></figure>

<ul>
<li>GitLabBV.gitlab-license : 页面导入的License文件</li>
<li>license_key.pub ：覆盖原有的key</li>
</ul>
<p>查看<code>license_key.pub </code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@gitlab:/home/jonty/gitlab/backups<span class="comment"># cat license_key.pub </span></span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtRXZpH9H6EXFEohYjLcZ</span><br><span class="line">uAYoSVJfZjdpRnT/76JlNfHOOA6RbCBzzwN5FJkyCev/wXCe5P+jR1+jqp0DErrF</span><br><span class="line">3/tYe3ZkUyDkD8c54AMpNqeXeevB+EEz4KqdsO9Q5260jlKxfTEVSQLZaItRfi0s</span><br><span class="line">kq25nPRghOSX7kTL/riQA9dg2L0/of5ewgS164cTtgjeTKBCoOKN/vfw/GC0PDWn</span><br><span class="line">Mf9OaR0C7NtOGesJBCWR47QjnPOjXHFip/yt0K8ytc42XGgzdJjFjPrUuZ1hbzJ7</span><br><span class="line">Y8W9EvWu9+k9iupBK9XeeTORZDZYBvpHvAT2orEoLN1IUX7Bo12c2ddagfoSWp0v</span><br><span class="line">swIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>

<p>复制后进入容器内，替换密钥</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<p>重启容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose restart</span><br></pre></td></tr></table></figure>

<p>导入License文件，进入管理中心=&gt; 通用=&gt;添加许可证</p>
<p>导入<code>GitLabBV.gitlab-license</code>文件 </p>
<p><img data-src="https://cdn.jonty.top/img/image-20230627174050150.png" alt="image-20230627174050150"></p>
<p>激活完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230627174223096.png" alt="image-20230627174223096"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis分布式锁以及ABP应用</title>
    <url>/2023/06/09/redis-distributed-locking/</url>
    <content><![CDATA[<div class="note info"><p>分布式锁其实就是，控制分布式系统不同进程共同访问共享资源的一种锁的实现。如果不同的系统或同一个系统的不同主机之间共享了某个临界资源，往往需要互斥来防止彼此干扰，以保证一致性。</p>
</div>

<h2 id="分布式锁的特征"><a href="#分布式锁的特征" class="headerlink" title="分布式锁的特征"></a>分布式锁的特征</h2><p>一把靠谱的分布式锁应该有哪些特征：</p>
<p><img data-src="https://cdn.jonty.top/img/Distributed-Locking.png" alt="Distributed-Locking"></p>
<ul>
<li><strong>互斥性</strong>：任意时刻，只有一个客户端能持有锁</li>
<li><strong>锁超时释放</strong>：持有锁超时，可以释放，防止不必要的资源浪费，也可以防止死锁</li>
<li><strong>可重入性</strong>：一个线程如果获取了锁之后，可以再次对其请求加锁</li>
<li><strong>高性能和高可用</strong>：加锁和解锁需要开销尽可能低，同时也要保证高可用，避免分布式锁失效</li>
<li><strong>安全性</strong>：锁只能被持有的客户端删除，不能被其他客户端删除</li>
</ul>
<h2 id="ABP使用分布式锁"><a href="#ABP使用分布式锁" class="headerlink" title="ABP使用分布式锁"></a>ABP使用分布式锁</h2><blockquote>
<p>ABP当前的分布式锁实现基于<a href="https://github.com/madelson/DistributedLock">DistributedLock</a>库.</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装依赖包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">abp add-package Volo.Abp.DistributedLocking</span><br></pre></td></tr></table></figure>

<h3 id="配置提供程序"><a href="#配置提供程序" class="headerlink" title="配置提供程序"></a>配置提供程序</h3><p><a href="https://github.com/madelson/DistributedLock">DistributedLock</a>库对<a href="https://github.com/madelson/DistributedLock/blob/master/docs/DistributedLock.Redis.md">Redis</a>和<a href="https://github.com/madelson/DistributedLock/blob/master/docs/DistributedLock.ZooKeeper.md">ZooKeeper</a>提供<a href="https://github.com/madelson/DistributedLock#implementations">多种实现</a>。</p>
<p>如果要Redis，需要将<a href="https://www.nuget.org/packages/DistributedLock.Redis">DistributedLock.Redis</a> NuGet包添加到项目中，然后在模块类中注册，如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Medallion.Threading;</span><br><span class="line"><span class="keyword">using</span> Medallion.Threading.Redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AbpDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DependsOn(</span></span><br><span class="line"><span class="meta">            typeof(AbpDistributedLockingModule)</span></span><br><span class="line"><span class="meta">            //If you have the other dependencies, you should do here</span></span><br><span class="line"><span class="meta">    )</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">AbpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">ServiceConfigurationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> configuration = context.Services.GetConfiguration();</span><br><span class="line">        </span><br><span class="line">            context.Services.AddSingleton&lt;IDistributedLockProvider&gt;(sp =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> connection = ConnectionMultiplexer</span><br><span class="line">                    .Connect(configuration[<span class="string">&quot;Redis:Configuration&quot;</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> </span><br><span class="line">                    RedisDistributedSynchronizationProvider(connection.GetDatabase());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置<code>appsettings.json</code>文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;Redis&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Configuration&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>有两种方法可以使用分布式锁API：ABP的<code>IAbpDistributedLock</code>抽象和<a href="https://github.com/madelson/DistributedLock">DistributedLock</a>库的API。</p>
<h4 id="使用IAbpDistributedLock服务"><a href="#使用IAbpDistributedLock服务" class="headerlink" title="使用IAbpDistributedLock服务"></a>使用IAbpDistributedLock服务</h4><p>示例：使用<code>IAbpDistributedLock.TryAcquireAsync</code>方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Volo.Abp.DistributedLocking; </span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AbpDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span> : <span class="title">ITransientDependency</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IAbpDistributedLock _distributedLock;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">MyService</span>(<span class="params">IAbpDistributedLock distributedLock</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _distributedLock = distributedLock;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MyMethodAsync</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">using</span> (<span class="keyword">var</span> handle = </span><br><span class="line">                         <span class="keyword">await</span> _distributedLock.TryAcquireAsync(<span class="string">&quot;MyLockName&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (handle != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// your code that access the shared resource</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>TryAcquireAsync</code>可能无法获取锁. 如果无法获取锁, 则返回<code>null</code>. 在这种情况下, 你不应该访问资源. 如果句柄不为<code>null</code>, 则表示你已获得锁, 并且可以安全地访问资源.</p>
<p><code>TryAcquireAsync</code>方法拥有以下参数:</p>
<ul>
<li><code>name</code> (<code>string</code>, 必须): 锁的唯一名称. 不同的锁命名用于访问不同的资源.</li>
<li><code>timeout</code> (<code>TimeSpan</code>): 等待获取锁的超时值. 默认值为<code>TimeSpan.Zero</code>, 这意味着如果锁已经被另一个应用程序拥有, 它不会等待.</li>
<li><code>cancellationToken</code>: 取消令牌可在触发后取消操作.</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="AbpDistributedLockOptions"><a href="#AbpDistributedLockOptions" class="headerlink" title="AbpDistributedLockOptions"></a>AbpDistributedLockOptions</h4><p><code>AbpDistributedLockOptions</code> 是配置分布式锁的主要选项类.</p>
<p>示例: 设置应用程序的分布式锁Key前缀</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Configure&lt;AbpDistributedLockOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.KeyPrefix = <span class="string">&quot;MyApp1&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Redis实现分布式锁方案"><a href="#Redis实现分布式锁方案" class="headerlink" title="Redis实现分布式锁方案"></a>Redis实现分布式锁方案</h2><h3 id="方案1：SETNX-EXPIRE"><a href="#方案1：SETNX-EXPIRE" class="headerlink" title="方案1：SETNX + EXPIRE"></a>方案1：SETNX + EXPIRE</h3><p>使用<code>setnx</code>+ <code>expire</code>命令，即先用<code>setnx</code>来抢锁，如果抢到之后再用<code>expire</code>给锁设置一个过期时间，防止忘记释放</p>
<blockquote>
<p>SETNX 是SET IF NOT EXISTS的简写.日常命令格式是SETNX key value，如果 key不存在，则SETNX成功返回1，如果这个key已经存在了，则返回0。</p>
</blockquote>
<p>假设某电商网站的某商品做秒杀活动，key可以设置为key_resource_id,value设置任意值，伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.setnx(key_resource_id,lock_value) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    expire（key_resource_id，<span class="number">100</span>）; <span class="comment">//设置过期时间</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务请求</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">       jedis.del(key_resource_id); <span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个方案中，<code>setnx</code>和<code>expire</code>两个命令分开了，不是原子操作。如果执行完<code>setnx</code>加锁，正要执行<code>expire</code>设置过期时间时，进程crash或者要重启维护了，那么这个锁就“长生不老”了，别的线程永远获取不到锁。</p>
<h3 id="方案2：SETNX-Value值"><a href="#方案2：SETNX-Value值" class="headerlink" title="方案2：SETNX + Value值"></a>方案2：SETNX + Value值</h3><p>为了解决方案1：发生异常锁得不到释放的场景，可以把过期时间放到<code>setnx</code>的<code>value</code>值里面。如果加锁失败，再拿出value值校验一下即可。</p>
<p>加锁代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> expires = System.currentTimeMillis() + expireTime; <span class="comment">//系统时间+设置的过期时间</span></span><br><span class="line">String expiresStr = String.valueOf(expires);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line"><span class="keyword">if</span> (jedis.setnx(key_resource_id, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 如果锁已经存在，获取锁的过期时间</span></span><br><span class="line">String currentValueStr = jedis.get(key_resource_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果获取到的过期时间，小于系统当前时间，表示已经过期</span></span><br><span class="line"><span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间（不了解redis的getSet命令的小伙伴，可以去官网看下哈）</span></span><br><span class="line">    String oldValueStr = jedis.getSet(key_resource_id, expiresStr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldValueStr != <span class="keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">         <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才可以加锁</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//其他情况，均返回加锁失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<p>这个方案的优点是，巧妙移除<code>expire</code>单独设置过期时间的操作，把过期时间放到<code>setnx</code>的<code>value</code>值里面来。解决了方案一发生异常，锁得不到释放的问题。</p>
<p>但是这个方案还有别的缺点：</p>
<ul>
<li>过期时间是客户端自己生成的（<code>System.currentTimeMillis()</code>是当前系统的时间），必须要求分布式环境下，每个客户端的时间必须同步。</li>
<li>如果锁过期的时候，并发多个客户端同时请求过来，都执行<code>jedis.getSet()</code>，最终只能有一个客户端加锁成功，但是该客户端锁的过期时间，可能被别的客户端覆盖</li>
<li>该锁没有保存持有者的唯一标识，可能被别的客户端释放/解锁。</li>
</ul>
<h3 id="方案3：使用Lua脚本"><a href="#方案3：使用Lua脚本" class="headerlink" title="方案3：使用Lua脚本"></a>方案3：使用Lua脚本</h3><p>可以使用Lua脚本来保证原子性（包含<code>setnx</code>和<code>expire</code>两条指令），<code>lua</code>脚本如下：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;setnx&#x27;</span>,KEYS[<span class="number">1</span>],ARGV[<span class="number">1</span>]) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">   redis.call(<span class="string">&#x27;expire&#x27;</span>,KEYS[<span class="number">1</span>],ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<p>加锁代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String lua_scripts = <span class="string">&quot;if redis.call(&#x27;setnx&#x27;,KEYS[1],ARGV[1]) == 1 then&quot;</span> +</span><br><span class="line">            <span class="string">&quot; redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2]) return 1 else return 0 end&quot;</span>;   </span><br><span class="line">Object result = jedis.eval(lua_scripts, Collections.singletonList(key_resource_id), Collections.singletonList(values));</span><br><span class="line"><span class="comment">//判断是否成功</span></span><br><span class="line"><span class="keyword">return</span> result.equals(<span class="number">1L</span>);</span><br></pre></td></tr></table></figure>

<h3 id="方案4：SET的扩展命令"><a href="#方案4：SET的扩展命令" class="headerlink" title="方案4：SET的扩展命令"></a>方案4：SET的扩展命令</h3><p>除了使用Lua脚本保证<code>SETNX + EXPIRE</code>两条指令的原子性，=还可以巧用Redis的SET指令扩展参数（<code>SET key value[EX seconds][PX milliseconds][NX|XX]</code>），也是原子性的。</p>
<blockquote>
<p>SET key value[ EX seconds ][PX milliseconds][NX|XX]</p>
<ul>
<li>NX :表示key不存在的时候，才能set成功，也即保证只有第一个客户端请求才能获得锁，而其他客户端请求只能等其释放锁，才能获取。</li>
<li>EX seconds :设定key的过期时间，时间单位是秒。</li>
<li>PX milliseconds: 设定key的过期时间，单位为毫秒</li>
<li>XX: 仅当key存在时设置值</li>
</ul>
</blockquote>
<p>伪代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.set(key_resource_id, lock_value, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, 100s) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务处理</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">       jedis.del(key_resource_id); <span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方案还是可能存在问题：</p>
<ul>
<li>问题一：<strong>锁过期释放了，业务还没执行完</strong>，假设线程a获取锁成功，一直在执行临界区的代码。但是100s过去后，它还没执行完。但是这时候锁已经过期了，此时线程b又请求过来。显然线程b就可以获得锁成功，也开始执行临界区的代码。那么问题就来了，临界区的业务代码都不是严格串行执行。</li>
<li>问题二：<strong>锁被别的线程误删</strong>，假设线程a执行完后，去释放锁。但是它不知道当前的锁可能是线程b持有的（线程a去释放锁时，有可能过期时间已经到了，此时线程b进来占有了锁）。那线程a就把线程b的锁释放掉了，但是线程b临界区业务代码可能都还没执行完。</li>
</ul>
<h3 id="方案5：方案4-唯一随机值"><a href="#方案5：方案4-唯一随机值" class="headerlink" title="方案5：方案4+唯一随机值"></a>方案5：方案4+唯一随机值</h3><p>既然锁可能被别的线程误删，给value值设置一个标记当前线程唯一的随机数，在删除的时候，校验一下。</p>
<p>伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.set(key_resource_id, uni_request_id, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, 100s) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务处理</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="comment">//判断是不是当前线程加的锁,是才释放</span></span><br><span class="line">       <span class="keyword">if</span> (uni_request_id.equals(jedis.get(key_resource_id))) &#123;</span><br><span class="line">        jedis.del(lockKey); <span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里，判断是不是当前线程加的锁和释放锁不是一个原子操作。如果调用<code>jedis.del()</code>释放锁的时候，可能这把锁已经不属于当前客户端，会解除他人加的锁。</p>
<p>为了更严谨，一般也是用<code>lua</code>脚本代替:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> </span><br><span class="line">   <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>]) </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>

<h3 id="方案6：Redisson框架"><a href="#方案6：Redisson框架" class="headerlink" title="方案6：Redisson框架"></a>方案6：Redisson框架</h3><p>方案5还是可能存在<strong>锁过期释放，业务没执行完</strong>的问题。设想一下，是否可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。</p>
<p>当前开源框架<strong>Redisson</strong>解决了这个问题。</p>
<p><img data-src="https://cdn.jonty.top/img/redisson.png" alt="redisson"></p>
<p>只要线程一加锁成功，就会启动一个<code>watch dog</code>看门狗，它是一个后台线程，会每隔10秒检查一下，如果线程1还持有锁，那么就会不断的延长锁key的生存时间。因此，<code>Redisson</code>就解决了<strong>锁过期释放，业务没执行完</strong>问题。</p>
<h3 id="方案7：集群分布式锁Redlock-Redisson"><a href="#方案7：集群分布式锁Redlock-Redisson" class="headerlink" title="方案7：集群分布式锁Redlock+Redisson"></a>方案7：集群分布式锁Redlock+Redisson</h3><p>Redis一般都是集群部署</p>
<p><img data-src="https://cdn.jonty.top/img/redis-cluster-redisson.png" alt="redis-cluster-redisson"></p>
<p>如果线程一在Redis的master节点上拿到了锁，但是加锁的key还没同步到slave节点。恰好这时，master节点发生故障，一个slave节点就会升级为master节点。线程二就可以获取同个key的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。</p>
<p>为了解决这个问题，Redis作者 antirez提出一种高级的分布式锁算法：<code>Redlock</code>：</p>
<blockquote>
<p>搞多个Redis master部署，以保证它们不会同时宕掉。并且这些master节点是完全相互独立的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是与在Redis单实例，使用相同方法来获取和释放锁。</p>
</blockquote>
<p>假设当前有5个Redis master节点，在5台服务器上面运行这些Redis实例。</p>
<p><img data-src="https://cdn.jonty.top/img/redis-cluster.png" alt="redis-cluster"></p>
<p><code>RedLock</code>的实现步骤:</p>
<ul>
<li>获取当前时间，以毫秒为单位。</li>
<li>按顺序向5个master节点请求加锁。客户端设置网络连接和响应超时时间，并且超时时间要小于锁的失效时间。（假设锁自动失效时间为10秒，则超时时间一般在5-50毫秒之间）。如果超时，跳过该master节点，尽快去尝试下一个master节点。</li>
<li>客户端使用当前时间减去开始获取锁时间（即步骤1记录的时间），得到获取锁使用的时间。当且仅当超过一半（N/2+1，这里是5/2+1=3个节点）的Redis master节点都获得锁，并且使用的时间小于锁失效时间时，锁才算获取成功。（如上图，10s&gt; 30ms+40ms+50ms+4m0s+50ms）</li>
<li>如果取到了锁，key的真正有效时间就变，需要减去获取锁所使用的时间。</li>
<li>如果获取锁失败（没有在至少N/2+1个master实例取到锁，有或者获取锁时间已经超过了有效时间），客户端要在所有的master节点上解锁（即便有些master节点根本就没有加锁成功，也需要解锁，以防止有些漏网之鱼）。</li>
</ul>
<p>简化下步骤就是：</p>
<ul>
<li>按顺序向5个master节点请求加锁。</li>
<li>根据设置的超时时间来判断，是不是要跳过该master节点。</li>
<li>如果大于等于3个节点加锁成功，并且使用的时间小于锁的有效期，即可认定加锁成功啦。</li>
<li>如果获取锁失败，解锁。</li>
</ul>
<blockquote>
<p><a href="https://redis.io/docs/manual/patterns/distributed-locks/">Distributed Locks with Redis | Redis</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>ABP</tag>
        <tag>Redis</tag>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>给博客装个空调</title>
    <url>/2023/06/01/air-conditioner/</url>
    <content><![CDATA[<iframe height="840" width="100%" src="https://ac.yunyoujun.cn"></iframe>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Share</tag>
      </tags>
  </entry>
  <entry>
    <title>【游记】河南宝泉崖天下</title>
    <url>/2023/05/15/travelogue-henan-baoquan/</url>
    <content><![CDATA[<div class="note info"><p>太行八百里，最美在薄壁</p>
</div>

<img data-src="https://cdn.jonty.top/img/image-20230515153548260.png" alt="宝上路拍摄" style="width:600px" />

<p>仍在出差，恰逢周末想着出去逛逛，既然来了河南，那就见见河南的风土人情~</p>
<p>很早是看短视频发现了这个地方，<code>宝泉崖天下</code>也是今年4月份刚开业的景点，实际上是分为两个部分：大峡谷景区和崖天下景区</p>
<p>大峡谷景区：大巴+门票大概是100￥</p>
<p>崖天下景区：门票+索道 160￥</p>
<p>大峡谷偏向于风景、绿水青山，而崖天下侧重于刺激的体验，比如空中玻璃栈道、悬崖过山车等（而且每个项目还需要单独收费）</p>
<p>花100大洋进大峡谷逛逛，至于崖天下，详见下文🤪</p>
<h2 id="宝泉大峡谷"><a href="#宝泉大峡谷" class="headerlink" title="宝泉大峡谷"></a>宝泉大峡谷</h2><p>乘坐大巴大概20分钟到达景区入口，开始一路逛逛逛，最终的目标是峡谷的尽头：飞龙瀑</p>
<img data-src="https://cdn.jonty.top/img/image-20230515163410673.png" alt="景交车进山" style="width:400px" />

<p>途径的乱石滩</p>
<img data-src="https://cdn.jonty.top/img/image-20230515163944981.png" alt="乱石滩" style="width:400px" />

<p>第一道瀑布，还以为到了终点，看路牌到核心景区还有2.5公里</p>
<img data-src="https://cdn.jonty.top/img/image-20230515164040802.png" alt="飞女瀑" style="width:400px" />

<p>干脆飞个无人机探探路，一不小心游玩了全程~由于实在是太饿了（还特别热），乘坐景交车（15￥到景区入口）+大巴返回游客中心</p>
<p>下图便是大峡谷的终点站：飞龙瀑</p>
<img data-src="https://cdn.jonty.top/img/image-20230515164658578.png" alt="飞龙瀑" style="width:400px" />

<h2 id="网红打卡点"><a href="#网红打卡点" class="headerlink" title="网红打卡点"></a>网红打卡点</h2><p>简单吃点东西，返回游客中心后驾车上山，导航宝上路大概到双泉凹</p>
<p>下图是导航信息，不得不说，开山路很刺激，特别多回头弯</p>
<img data-src="https://cdn.jonty.top/img/image-20230515165847700.png" alt="宝上路，86上山了" style="zoom:33%;" />

<p>也过隧道后第一道桥，往下大概200m可以看到有几家商店，然后穿过小溪，顺着小路可以一直开到崖边（建议越野车），步行前往大概15min，山顶有小旗子，进入树林后，小路后分成两条路，一条去小庙，向下的一条到观景台</p>
<p>以下多图预警！！！风景绝美</p>
<img data-src="https://cdn.jonty.top/img/image-20230515171011523.png" alt="俯瞰全景" style="width:400px" />

<p>下图便是打卡点位置，沿着小路可以直达悬崖边，也就是突出的崖顶那~</p>
<img data-src="https://cdn.jonty.top/img/image-20230515171351991.png" alt="打卡点" style="width:400px" />

<img data-src="https://cdn.jonty.top/img/image-20230515171120710.png" alt="打卡点航拍图" style="width:400px" />

<p>对比外面的平原地区</p>
<img data-src="https://cdn.jonty.top/img/image-20230515171500338.png" alt="山脉外的平原" style="width:400px" />

<img data-src="https://cdn.jonty.top/img/89e79d1bdfb8062920093312248180d.jpg" alt="俯拍" style="width:400px" />

<img data-src="https://cdn.jonty.top/img/image-20230515172210737.png" alt="远眺" style="width:400px" />

<p>最后扔一张打卡照，腿软……</p>
<img data-src="https://cdn.jonty.top/img/image-20230515172643641.png" alt="打卡照" style="width:400px" />

<p>打卡完成，下山返程，下山的路边有特别多桃李园，可以尝尝</p>
<img data-src="https://cdn.jonty.top/img/image-20230515173820585.png" alt="高山与平原" style="width:400px;" />

<img data-src="https://cdn.jonty.top/img/image-20230515173832900.png" alt="绝美太行山" style="width:400px"  />

<img data-src="https://cdn.jonty.top/img/image-20230515173917653.png" alt="达尔文效应" style="width:400px" />

<p>对了，下山后薄壁供销社加油站旁烧烤店的大盘鸡很不错~</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Travelogue</tag>
      </tags>
  </entry>
  <entry>
    <title>左耳听风</title>
    <url>/2023/05/15/coolshell/</url>
    <content><![CDATA[<p>以陈皓老师的座右铭纪念他</p>
<blockquote>
<p>芝兰生于深谷，不以无人而不芳<br>君子修身养德，不以穷困而改志</p>
</blockquote>
<p><a href="https://coolshell.cn/haoel">关于陈皓 | 酷 壳 - CoolShell</a></p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Share</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署Keepalived</title>
    <url>/2023/05/11/docker-keepalived-vip-ip/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于heartbeat，用来防止单点故障。</p>
<p>但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。</p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li><a href="https://github.com/acassen/keepalived">https://github.com/acassen/keepalived</a> （源码）</li>
<li><a href="https://keepalived.readthedocs.io/en/latest/">https://keepalived.readthedocs.io/en/latest/</a> （官方）</li>
<li><a href="https://www.cnblogs.com/centos2017/p/7896780.html">https://www.cnblogs.com/centos2017/p/7896780.html</a></li>
<li><a href="https://www.cnblogs.com/getbird/p/11703027.html">https://www.cnblogs.com/getbird/p/11703027.html</a></li>
</ul>
<h2 id="功能示例"><a href="#功能示例" class="headerlink" title="功能示例"></a>功能示例</h2><h3 id="实现虚拟IP（IP漂移）"><a href="#实现虚拟IP（IP漂移）" class="headerlink" title="实现虚拟IP（IP漂移）"></a>实现虚拟IP（IP漂移）</h3><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><p><a href="https://github.com/osixia/docker-keepalived">https://github.com/osixia/docker-keepalived</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/c206d5a99274">https://www.jianshu.com/p/c206d5a99274</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/zwh0910/p/16518416.html">https://www.cnblogs.com/zwh0910/p/16518416.html</a></p>
</li>
</ul>
<h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>使用docker运行keepalived，实现主备切换虚拟IP，实现宕机一台另一台IP自动变更，不影响原有使用，环境配置信息如下</p>
<h5 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h5><ul>
<li>虚拟IP: 192.168.2.153</li>
<li>主节点IP: 192.168.2.151</li>
<li>备节点IP: 192.168.2.152</li>
</ul>
<h5 id="网卡信息"><a href="#网卡信息" class="headerlink" title="网卡信息"></a>网卡信息</h5><ul>
<li>主节点： ens160</li>
<li>备节点： ens160</li>
</ul>
<h5 id="硬件配置与操作系统版本"><a href="#硬件配置与操作系统版本" class="headerlink" title="硬件配置与操作系统版本"></a>硬件配置与操作系统版本</h5><ul>
<li>2C+4G+40G</li>
<li>Ubuntu 18.04</li>
</ul>
<h4 id="本地配置路径"><a href="#本地配置路径" class="headerlink" title="本地配置路径"></a>本地配置路径</h4><blockquote>
<p>此路径根据实际进行调整</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /home/yh/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure>

<h4 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h4><h5 id="主配置"><a href="#主配置" class="headerlink" title="主配置"></a>主配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   #notification_email &#123;</span><br><span class="line">   #    root@localhost</span><br><span class="line">   #&#125;</span><br><span class="line">   #notification_email_from root@localhost</span><br><span class="line">   #smtp_server 127.0.0.1</span><br><span class="line">   #smtp_connect_timeout 30</span><br><span class="line">   router_id ka1 # 主从id区分</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">	#vrrp_strict # 单播模式需要注释</span><br><span class="line">	#vrrp_mcast_group4 224.100.100.100 # 单播模式需要注释</span><br><span class="line">   vrrp_iptables</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER  #设为主</span><br><span class="line">    interface ens160  #绑定的网卡名称，按需修改</span><br><span class="line">    virtual_router_id 11  #两台服务器保持一致</span><br><span class="line">    priority 100  # 主服务器优先级高一些</span><br><span class="line">    advert_int 1</span><br><span class="line">    #nopreempt  #注释，表示打开VIP漂移，在优先级高的服务器上线后自动漂移VIP</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_src_ip 192.168.2.151  # 本机IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.2.152  #单播，通知的目标IP，可以写多个</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.153  #要保持和实际IP在同一网段，使用192.168.1.*，否则会因为缺少路由规则，两台服务器直接无法相互ping通</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="从配置"><a href="#从配置" class="headerlink" title="从配置"></a>从配置</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   #notification_email &#123;</span><br><span class="line">   #    root@localhost</span><br><span class="line">   #&#125;</span><br><span class="line">   #notification_email_from root@localhost</span><br><span class="line">   #smtp_server 127.0.0.1</span><br><span class="line">   #smtp_connect_timeout 30</span><br><span class="line">   router_id ka2 # 主从id区分</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   #vrrp_mcast_group4 224.100.100.100</span><br><span class="line">   vrrp_iptables</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP  # 设为备</span><br><span class="line">    interface ens160</span><br><span class="line">    virtual_router_id 11</span><br><span class="line">    priority 80  #优先级低于主</span><br><span class="line">    advert_int 1</span><br><span class="line">    #nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_src_ip 192.168.2.152  # 本机IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.2.151  #单播，通知的目标IP，可以写多个</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.153  #要保持和实际IP在同一网段，使用192.168.1.*，否则会因为缺少路由规则，两台服务器直接无法相互ping通</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主备服务器均使用此命令启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注意此处的keepalived.conf文件路径调整</span></span></span><br><span class="line">docker run -d --restart=always \</span><br><span class="line">--net=host \</span><br><span class="line">-v /root/keepalived/keepalived.conf:/container/service/keepalived/assets/keepalived.conf \</span><br><span class="line">--cap-add=NET_ADMIN \</span><br><span class="line">--cap-add=NET_BROADCAST \</span><br><span class="line">--cap-add=NET_RAW \</span><br><span class="line">--name keepalived \</span><br><span class="line">osixia/keepalived:2.0.20 --copy-service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">sudo docker logs -f keepalived</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除keepalived服务</span></span><br><span class="line">sudo docker rm -f keepalived</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除网卡其他ip</span></span><br><span class="line">ip addr del 192.168.2.xx dev ens192</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker注册Gitlab Runner</title>
    <url>/2023/05/11/use-docker-register-gitlab-runner/</url>
    <content><![CDATA[<h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GitLabServer=&#x27;https://git.xxx.com/&#x27; # gitlab服务器地址</span><br><span class="line">GitLabToken=&#x27;xxxxx&#x27; # gitlab 仓库token</span><br><span class="line">GitLabRunnerNamePrefix=&#x27;xxxx&#x27; # gitlab runner 前缀</span><br><span class="line">GitLabRunnerTags=&#x27;xxx&#x27; # gitlab runner tags</span><br><span class="line">GitLabRunnerDesc=&#x27;xxx&#x27; # gitlab runner desc</span><br><span class="line">GitLabRunnerImg=&#x27;gitlab/gitlab-runner:v14.10.1&#x27; # gitlab runner img</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建配置数据卷"><a href="#创建配置数据卷" class="headerlink" title="创建配置数据卷"></a>创建配置数据卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;</span><br></pre></td></tr></table></figure>

<h3 id="创建runner"><a href="#创建runner" class="headerlink" title="创建runner"></a>创建runner</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --network host -d --restart always \</span><br><span class="line">-e TZ=Asia/Beijing \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;:/etc/gitlab-runner \</span><br><span class="line">--name &quot;$GitLabRunnerNamePrefix-gitlab-runner&quot; $GitLabRunnerImg</span><br></pre></td></tr></table></figure>

<h3 id="注册runner"><a href="#注册runner" class="headerlink" title="注册runner"></a>注册runner</h3><blockquote>
<p><a href="https://docs.gitlab.com/runner/examples/gitlab.html">https://docs.gitlab.com/runner/examples/gitlab.html</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">-v &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;:/etc/gitlab-runner \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">--name &quot;$GitLabRunnerNamePrefix-gitlab-runner-register&quot; $GitLabRunnerImg register \</span><br><span class="line">--url &quot;$GitLabServer&quot; \</span><br><span class="line">--registration-token &quot;$GitLabToken&quot; \</span><br><span class="line">--description &quot;$GitLabRunnerDesc&quot; \</span><br><span class="line">--tag-list &quot;$GitLabRunnerTags&quot; \</span><br><span class="line">--non-interactive \</span><br><span class="line">--executor &quot;docker&quot; \</span><br><span class="line">--docker-image docker:23.0.2 \</span><br><span class="line">--docker-privileged=&quot;true&quot; \</span><br><span class="line">--docker-volumes &quot;/certs/client&quot; \</span><br><span class="line">--run-untagged=&quot;true&quot; \</span><br><span class="line">--locked=&quot;false&quot; \</span><br><span class="line">--access-level=&quot;not_protected&quot; \</span><br><span class="line">--docker-volumes /var/run/docker.sock:/var/run/docker.sock </span><br></pre></td></tr></table></figure>

<h3 id="删除runner"><a href="#删除runner" class="headerlink" title="删除runner"></a>删除runner</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop &quot;$GitLabRunnerNamePrefix-gitlab-runner&quot;</span><br><span class="line">docker rm &quot;$GitLabRunnerNamePrefix-gitlab-runner&quot;</span><br><span class="line">docker volume rm &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Runner</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab Runner 实现内网自动部署</title>
    <url>/2023/05/11/gitlab-runner-intranet-job/</url>
    <content><![CDATA[<div class="note info"><p>最近出差支持项目上线，我们的部署流程是Gitlab CI打包<code>Docker</code>镜像上传到云镜像服务，现场部署由于内网无法访问公网，没办法直接使用脚本实现自动部署(Runner没办法连接~)。目前的情况是，客户提供了一台可访问外网的机器（不提供也可以使用本机），并且在同一个网段，也算是放开一个口子，可以基于这一台机器去实现不同操作，以下便是提供的一种解决思路，减少工作量。</p>
</div>

<h2 id="Ubuntu安装Gitlab-Runner"><a href="#Ubuntu安装Gitlab-Runner" class="headerlink" title="Ubuntu安装Gitlab Runner"></a>Ubuntu安装Gitlab Runner</h2><h3 id="添加Gitlab-Runner仓库"><a href="#添加Gitlab-Runner仓库" class="headerlink" title="添加Gitlab Runner仓库"></a>添加Gitlab Runner仓库</h3><p>首先，添加Gitlab Runner的官方仓库，运行一下命令添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230511103118473.png" alt="image-20230511103118473"></p>
<h3 id="安装Gitlab-Runner"><a href="#安装Gitlab-Runner" class="headerlink" title="安装Gitlab Runner"></a>安装Gitlab Runner</h3><p>使用<code>apt</code>包管理器安装<code>Gitlab Runner</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230511103303074.png" alt="image-20230511103303074"></p>
<h3 id="检查Gitlab-Runner状态"><a href="#检查Gitlab-Runner状态" class="headerlink" title="检查Gitlab Runner状态"></a>检查Gitlab Runner状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner status</span><br></pre></td></tr></table></figure>

<p>查看Runner运行状态</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">root@runner:/home/jonty<span class="params">#</span> sudo gitlab-runner status</span><br><span class="line">Runtime platform                                    arch=amd64 os=linux pid=2966404 revision=436955cb version=15.11.0</span><br><span class="line">gitlab-runner: Service is running</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230511103329891.png" alt="image-20230511103329891"></p>
<p>成功在Ubuntu安装Gitlab Runner</p>
<h3 id="卸载Gitlab-Runner"><a href="#卸载Gitlab-Runner" class="headerlink" title="卸载Gitlab Runner"></a>卸载Gitlab Runner</h3><p>停止服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-runner stop</span><br></pre></td></tr></table></figure>

<p>卸载服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitlab-runner uninstall</span><br></pre></td></tr></table></figure>



<h2 id="注册Gitlab-Runner"><a href="#注册Gitlab-Runner" class="headerlink" title="注册Gitlab Runner"></a>注册Gitlab Runner</h2><p>将Runner注册到Gitlab项目中</p>
<p>1、获取Gitlab项目注册令牌：</p>
<ul>
<li>仓库RUL地址</li>
<li>仓库注册令牌</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20230511102811943.png" alt="image-20230511102811943"></p>
<p>2、 注册Gitlab Runner</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure>

<p>按照提示输入Gitlab 示例的URL、项目的注册令牌以及Runner描述信息、Tag</p>
<p>这里<code>executor</code>选择<code>shell</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230511103545979.png" alt="image-20230511103545979"></p>
<p>3、激活Gitlab Runner</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner verify</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230511103918535.png" alt="image-20230511103918535"></p>
<p>在项目Runner中可以看到已经注册完成：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230511103934445.png" alt="image-20230511103934445"></p>
<p>4、Gitlab Runner后台运行</p>
<p>使用“&amp;”将在后台启动，即使关闭 SSH 会话，它仍然存在，只有在服务器重新启动或关闭时才会停止</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gitlab-runner run&amp;</span><br></pre></td></tr></table></figure>

<h2 id="定义Job"><a href="#定义Job" class="headerlink" title="定义Job"></a>定义Job</h2><p>在<code>.gitlab-ci.yml</code>中定义Job</p>
<p><code>script</code>执行<code>runner</code>宿主机<code>/bin/bash /images_194/deploy_194.sh</code>脚本，实现<code>曲线救国</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy_dev:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build_host_dev</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-1.5</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">retry:</span></span><br><span class="line">    <span class="attr">max:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/bin/bash</span> <span class="string">/images_194/deploy_194.sh</span></span><br></pre></td></tr></table></figure>

<p>最后贴出连接局域网另一台机器部署的脚本:</p>
<ul>
<li>拉取公网镜像，重新打Tag，推送到内网<code>Registry</code></li>
<li>ssh连接到内网机器，执行部署脚本</li>
<li>完成部署</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">imgAppNames=(<span class="string">&#x27;server&#x27;</span> <span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">AppFile</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  WMS_VERSION=dev</span><br><span class="line">  REGISTRY_URL=ccr.ccs.tencentyun.com/xxx</span><br><span class="line">  LocalRegistryUrl=192.168.2.89:8232</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$WMS_VERSION</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$REGISTRY_URL</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$LocalRegistryUrl</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在处理应用镜像&quot;</span></span><br><span class="line">  PullImage</span><br><span class="line">  TagImage</span><br><span class="line">  PushImage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">PullImage</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> imgName <span class="keyword">in</span> <span class="variable">$&#123;imgAppNames[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  targetImgName=<span class="string">&quot;<span class="variable">$REGISTRY_URL</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在拉取: <span class="variable">$targetImgName</span>&quot;</span></span><br><span class="line">  docker pull <span class="variable">$targetImgName</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;拉取完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">TagImage</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> imgName <span class="keyword">in</span> <span class="variable">$&#123;imgAppNames[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  targetImgName=<span class="string">&quot;<span class="variable">$REGISTRY_URL</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line">  localImgName=<span class="string">&quot;<span class="variable">$LocalRegistryUrl</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在打标签: <span class="variable">$targetImgName</span>&quot;</span></span><br><span class="line">  docker tag <span class="variable">$targetImgName</span> <span class="variable">$localImgName</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;打标签完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">PushImage</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> imgName <span class="keyword">in</span> <span class="variable">$&#123;imgAppNames[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  localImgName=<span class="string">&quot;<span class="variable">$LocalRegistryUrl</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在推送: <span class="variable">$localImgName</span>&quot;</span></span><br><span class="line">  docker push <span class="variable">$localImgName</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;推送完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">REMOTE_IP=<span class="string">&quot;192.168.2.194&quot;</span></span><br><span class="line">REMOTE_USER=<span class="string">&quot;wms&quot;</span></span><br><span class="line">REMOTE_PASS=<span class="string">&quot;wmstest@123&quot;</span></span><br><span class="line">ROOT_PASS=<span class="string">&quot;wmstest@123&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到远程服务器</span></span><br><span class="line">sshpass -p <span class="string">&quot;<span class="variable">$&#123;REMOTE_PASS&#125;</span>&quot;</span> ssh -o StrictHostKeyChecking=no -l <span class="string">&quot;<span class="variable">$&#123;REMOTE_USER&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;REMOTE_IP&#125;</span>&quot;</span> &lt;&lt;- <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 切换到 root 用户</span></span><br><span class="line"><span class="string">echo &quot;$&#123;ROOT_PASS&#125;&quot; | sudo -S su</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 切换到指定目录</span></span><br><span class="line"><span class="string">cd /home/wms/wms_app/07_app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;移除当前服务：test_app&quot;</span></span><br><span class="line"><span class="string">sudo docker stack rm test_app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sleep 20s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;启动服务中...&quot;</span></span><br><span class="line"><span class="string"># 执行 run.sh</span></span><br><span class="line"><span class="string">sudo /bin/bash ./run.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;服务启动完成...&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sudo docker service ls -f name=test_app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 退出 root 用户</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 退出远程服务器</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Runner</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 的奇技淫巧</title>
    <url>/2023/05/04/git-tips/</url>
    <content><![CDATA[<blockquote>
<p>Git 常用命令集合，Fork 自 <a href="https://github.com/git-tips/tips">tips</a> 项目</p>
<p>分享自：<a href="https://github.com/521xueweihan/git-tips">521xueweihan/git-tips: Git的奇技淫巧 (github.com)</a></p>
</blockquote>
<p>Git 是一个分布式版本管理工具，版本管理工具就是大家在写东西的时候都用过 <strong>回撤</strong>这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用回撤是找不回来的。而<strong>版本管理工具能记录每次的修改</strong>，只要提交到版本仓库，就可以找到之前任何时刻的状态（文本状态）。</p>
<p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过页面内查找的方式 <code>Ctrl/Command+f</code> 进行快速查找。</p>
<h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <a href="https://rogerdudler.github.io/git-guide/index.zh.html">Git 小白教程</a>入门</em></p>
<ol>
<li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li>
<li>所有的命令都在 <code>git version 2.7.4 (Apple Git-66)</code> 下测试通过</li>
<li>统一概念：<ul>
<li>工作区：改动（增删文件和内容）</li>
<li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li>
<li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了本地仓库，每个 commit，我叫它为一个版本。</li>
<li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了远程仓库（GitHub 等)</li>
<li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li>
</ul>
</li>
<li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a>😊</li>
</ol>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E8%84%91%E5%9B%BE">脑图</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li>
<li><a href="#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AA-commit">重设第一个commit</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8">查看冲突文件列表</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li>
<li><a href="#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">快速切换到上一个分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0-master-%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到 master 的分支</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%86%B5">展示本地分支关联远程仓库的情况</a></li>
<li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出所有远程分支</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">查看远程分支和本地分支的对应关系</a></li>
<li><a href="#%E8%BF%9C%E7%A8%8B%E5%88%A0%E9%99%A4%E4%BA%86%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E4%B9%9F%E6%83%B3%E5%88%A0%E9%99%A4">远程删除了分支本地也想删除</a></li>
<li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">创建并切换到本地分支</a></li>
<li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程分支中创建并切换到本地分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li>
<li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">重命名本地分支</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">查看标签详细信息</a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li>
<li><a href="#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li>
<li><a href="#%E5%88%87%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA%E6%A0%87%E7%AD%BE">切回到某个标签</a></li>
<li><a href="#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li>
<li><a href="#%E6%81%A2%E5%A4%8D%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6">恢复删除的文件</a></li>
<li><a href="#%E4%BB%A5%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E4%BF%AE%E6%94%B9">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-commit-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84-commit">回到某个 commit 的状态，并删除后面的 commit</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个 commit 的描述</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B-commit-%E5%8E%86%E5%8F%B2">查看 commit 历史</a></li>
<li><a href="#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0%E8%BF%87-head-%E7%9A%84-git-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95">显示本地更新过 HEAD 的 git 命令记录</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li>
<li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84-url">修改远程仓库的 url</a></li>
<li><a href="#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li>
<li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li>
<li><a href="#%E6%8A%8A-A-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA-commit%E6%94%BE%E5%88%B0-B-%E5%88%86%E6%94%AF%E4%B8%8A">把 A 分支的某一个 commit，放到 B 分支上</a></li>
<li><a href="#%E7%BB%99-git-%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给 git 命令起别名</a></li>
<li><a href="#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4-commit">存储当前的修改，但不用提交 commit</a></li>
<li><a href="#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%AC-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括 untracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-stashes">展示所有 stashes</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81">回到某个 stash 的状态</a></li>
<li><a href="#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AA-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84-stash">删除所有的 stash</a></li>
<li><a href="#%E4%BB%8E-stash-%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从 stash 中拿出某个文件的修改</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-tracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 tracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 untracked 的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">强制删除 untracked 的文件</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除 untracked 的目录</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84-commit-%E5%8E%86%E5%8F%B2">展示简化的 commit 历史</a></li>
<li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li>
<li><a href="#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支导出成一个文件</a></li>
<li><a href="#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li>
<li><a href="#%E6%89%A7%E8%A1%8C-rebase-%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8-stash">执行 rebase 之前自动 stash</a></li>
<li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AE-ID-%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81-%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>
<li><a href="#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li>
<li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 <code>.gitignore</code> 文件中记录的文件</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-alias-%E5%92%8C-configs">展示所有 alias 和 configs</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li>
<li><a href="#commit-%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BA-Branch1-%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AF-Branch2-%E6%B2%A1%E6%9C%89-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>
<li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%98%BE%E7%A4%BA-GPG-%E7%AD%BE%E5%90%8D">在 commit log 中显示 GPG 签名</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li>
<li><a href="#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>
<li><a href="#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li>
<li><a href="#clone-%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone 下来指定的单一分支</a></li>
<li><a href="#clone-%E6%9C%80%E6%96%B0%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4">clone 最新一次提交</a></li>
<li><a href="#%E5%BF%BD%E7%95%A5%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8">忽略某个文件的改动</a></li>
<li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li>
<li><a href="#%E4%BB%A5%E6%9C%80%E5%90%8E%E6%8F%90%E4%BA%A4%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-Git-%E5%88%86%E6%94%AF">以最后提交的顺序列出所有 Git 分支</a></li>
<li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在 commit log 中查找相关内容</a></li>
<li><a href="#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9A-file-%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定 file 放到工作区中</a></li>
<li><a href="#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li>
<li><a href="#git-%E9%85%8D%E7%BD%AE-http-%E5%92%8C-socks-%E4%BB%A3%E7%90%86">git 配置 http 和 socks 代理</a></li>
<li><a href="#git-%E9%85%8D%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86">git 配置 ssh 代理</a></li>
<li><a href="#%E4%BC%98%E9%9B%85%E7%9A%84Commit%E4%BF%A1%E6%81%AF">优雅的Commit信息</a></li>
<li><a href="#commit%E5%B7%A5%E5%85%B7">commit工具</a></li>
<li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li>
</ul>
<h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">help</span> -g</span><br></pre></td></tr></table></figure>

<p>The command output as below:</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">The common Git guides are:</span><br><span class="line">   attributes          Defining attributes per path</span><br><span class="line">   <span class="keyword">cli</span>                 Git command-<span class="keyword">line</span> interface and conventions</span><br><span class="line">   core-<span class="keyword">tutorial</span>       A Git core <span class="keyword">tutorial</span> <span class="keyword">for</span> developers</span><br><span class="line">   cvs-migration       Git <span class="keyword">for</span> CVS users</span><br><span class="line">   diffcore            Tweaking diff output</span><br><span class="line">   everyday            A useful minimum <span class="keyword">set</span> of commands <span class="keyword">for</span> Everyday Git</span><br><span class="line">   glossary            A Git Glossary</span><br><span class="line">   hooks               Hooks used <span class="keyword">by</span> Git</span><br><span class="line">   ignore              Specifies intentionally untracked files to ignore</span><br><span class="line">   modules             Defining submodule properties</span><br><span class="line">   namespaces          Git namespaces</span><br><span class="line">   repository-layout    Git Repository Layout</span><br><span class="line">   revisions           Specifying revisions and ranges <span class="keyword">for</span> Git</span><br><span class="line">   <span class="keyword">tutorial</span>            A <span class="keyword">tutorial</span> introduction to Git</span><br><span class="line">   <span class="keyword">tutorial</span>-2          A <span class="keyword">tutorial</span> introduction to Git: part <span class="keyword">two</span></span><br><span class="line">   workflows           <span class="keyword">An</span> overview of recommended workflows with Git</span><br><span class="line"></span><br><span class="line">&#x27;git <span class="keyword">help</span> -a&#x27; and &#x27;git <span class="keyword">help</span> -<span class="keyword">g</span>&#x27; <span class="keyword">list</span> available subcommands and some concept guides. See &#x27;git <span class="keyword">help</span> &lt;command&gt;&#x27; or &#x27;git <span class="keyword">help</span> &lt;concept&gt;&#x27; to <span class="keyword">read</span> <span class="keyword">about</span> a specific subcommand or concept.</span><br></pre></td></tr></table></figure>

<h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>

<h2 id="查看冲突文件列表"><a href="#查看冲突文件列表" class="headerlink" title="查看冲突文件列表"></a>查看冲突文件列表</h2><p>展示工作区的冲突文件列表</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br></pre></td></tr></table></figure>

<h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure>

<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure>

<h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure>

<h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure>

<h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">&#x27;^\*\|  master&#x27;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>

<h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>

<h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure>

<p>或者在 push 时加上 <code>-u</code> 参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin/mybranch -u</span><br></pre></td></tr></table></figure>

<h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>

<h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h2 id="查看远程分支和本地分支的对应关系"><a href="#查看远程分支和本地分支的对应关系" class="headerlink" title="查看远程分支和本地分支的对应关系"></a>查看远程分支和本地分支的对应关系</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure>

<h2 id="远程删除了分支本地也想删除"><a href="#远程删除了分支本地也想删除" class="headerlink" title="远程删除了分支本地也想删除"></a>远程删除了分支本地也想删除</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure>

<h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;local-branchname&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>

<h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<p>展示当前分支的最近的 tag</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>

<h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -ln</span><br></pre></td></tr></table></figure>

<h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>

<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git tag -a &lt;version-number&gt; -m <span class="string">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin &lt;local-version-number&gt;</span><br></pre></td></tr></table></figure>

<p>一次性推送所有标签，同步到远程仓库：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure>

<h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure>

<h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<p>放弃所有修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="comment">#得到 deleting_commit</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="comment">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure>

<h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit-id&gt;  <span class="comment">#默认就是-mixed参数。</span></span><br><span class="line"></span><br><span class="line">git reset --mixed HEAD^  <span class="comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD~3  <span class="comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit-id&gt;  <span class="comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure>

<h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure>

<h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote set-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>

<h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>

<h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure>

<h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git whatchanged --since=<span class="string">&#x27;2 weeks ago&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928">参考</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>

<h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;handle&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">比如：git status 改成 git st，这样可以简化命令</span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure>

<h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000">廖雪峰老师的 git 教程</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure>

<h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash -u</span><br></pre></td></tr></table></figure>

<h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>

<h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure>

<h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files -t</span><br></pre></td></tr></table></figure>

<h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure>

<h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>

<h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>
<ol>
<li>clean 后，删除的文件无法找回</li>
<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>

<h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure>

<h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>

<h2 id="把某一个分支导出成一个文件"><a href="#把某一个分支导出成一个文件" class="headerlink" title="把某一个分支导出成一个文件"></a>把某一个分支导出成一个文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rebase --autostash</span><br></pre></td></tr></table></figure>

<h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git diff --word-diff</span><br></pre></td></tr></table></figure>

<h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git clean -X -f</span><br></pre></td></tr></table></figure>

<h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --list (当前目录)</span><br><span class="line">git config --global --list (全局)</span><br></pre></td></tr></table></figure>

<h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure>

<h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>

<h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --show-signature</span><br></pre></td></tr></table></figure>

<h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>

<h2 id="clone-最新一次提交"><a href="#clone-最新一次提交" class="headerlink" title="clone 最新一次提交"></a>clone 最新一次提交</h2><p>只会 clone 最近一次提交，将减少 clone 时间</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>

<h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>

<p>恢复 track 指定文件的改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>

<h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config core.fileMode <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git for-each-ref --sort=-committerdate --format=<span class="string">&#x27;%(refname:short)&#x27;</span> refs/heads/</span><br></pre></td></tr></table></figure>

<h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --grep=<span class="string">&#x27;&lt;given-text&gt;&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>

<h2 id="git-配置-http-和-socks-代理"><a href="#git-配置-http-和-socks-代理" class="headerlink" title="git 配置 http 和 socks 代理"></a>git 配置 http 和 socks 代理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span>   <span class="comment"># 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span></span><br><span class="line">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span></span><br><span class="line">git config --global socks.proxy <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="git-配置-ssh-代理"><a href="#git-配置-ssh-代理" class="headerlink" title="git 配置 ssh 代理"></a>git 配置 ssh 代理</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ cat ~/.ssh/config</span><br><span class="line">Host gitlab.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    <span class="comment"># 直接使用 shadowsocks 提供的 socks5 代理端口</span></span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    </span><br></pre></td></tr></table></figure>


<h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img data-src="https://cdn.jonty.top/img/git.png"></p>
<h2 id="优雅的Commit信息"><a href="#优雅的Commit信息" class="headerlink" title="优雅的Commit信息"></a>优雅的Commit信息</h2><p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular团队提交规范</a></p>
<p>主要有以下组成</p>
<ul>
<li>标题行: 必填, 描述主要修改类型和内容</li>
<li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li>
<li>页脚注释: 放 Breaking Changes 或 Closed Issues</li>
</ul>
<p>常用的修改项</p>
<ul>
<li>type: commit 的类型</li>
<li>feat: 新特性</li>
<li>fix: 修改问题</li>
<li>refactor: 代码重构</li>
<li>docs: 文档修改</li>
<li>style: 代码格式修改, 注意不是 css 修改</li>
<li>test: 测试用例修改</li>
<li>chore: 其他修改, 比如构建流程, 依赖管理.</li>
<li>scope: commit 影响的范围, 比如: route, component, utils, build…</li>
<li>subject: commit 的概述</li>
<li>body: commit 具体修改内容, 可以分为多行</li>
<li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li>
</ul>
<h2 id="commit工具"><a href="#commit工具" class="headerlink" title="commit工具"></a>commit工具</h2><p>可以使用<a href="https://github.com/commitizen/cz-cli">cz-cli</a>工具代替 <code>git commit</code></p>
<p>全局安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure>

<p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p>
<p><img data-src="https://cdn.jonty.top/img/gitcz.png"></p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh"><img alt="知识共享许可协议" style="border-width: 0" data-src="https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png"></a><br>本作品采用 <a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh">署名-非商业性使用-禁止演绎 4.0 国际</a> 进行许可。</p>
<p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-07】- Blazor学生列表组件</title>
    <url>/2023/04/26/blazor-component/</url>
    <content><![CDATA[<p>在此节中，我们实现一个Blazor组件—<strong>StudentList</strong>组件。</p>
<p>组件用于展示学生列表，如下图所示：</p>
<p><img data-src="https://cdn.jonty.top/img/202204241334464.png" alt="image-20220424133441270"></p>
<h2 id="StudentList-razor"><a href="#StudentList-razor" class="headerlink" title="StudentList.razor"></a>StudentList.razor</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@page &quot;/students&quot;</span><br><span class="line">@inherits StudentListListBase</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>StudentList<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    @foreach (var student in Students)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card m-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@student.FirstName @student.LastName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top imageThumbnail&quot;</span> <span class="attr">src</span>=<span class="string">&quot;@student.PhotoPath&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer text-center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger m-1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 指定当我们导航到此路径时显示此组件</span></span><br><span class="line">@page <span class="string">&quot;/&quot;</span> </span><br><span class="line">    </span><br><span class="line"><span class="meta"># 定义此组件的基类</span></span><br><span class="line">@inherits SutdentListBase </span><br></pre></td></tr></table></figure>

<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>使用 Bootstrap Card 显示， 为了遍历学生列表，我们使用了<code> foreach</code> 循环</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    @foreach (var student in Students)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card m-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@student.FirstName @student.LastName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top imageThumbnail&quot;</span> <span class="attr">src</span>=<span class="string">&quot;@student.PhotoPath&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer text-center&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger m-1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="StudentListBase"><a href="#StudentListBase" class="headerlink" title="StudentListBase"></a>StudentListBase</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Components;</span><br><span class="line"><span class="keyword">using</span> StudentManagement.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StudentManagement.Web.Pages</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentListListBase</span>: <span class="title">ComponentBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">OnInitializedAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        LoadStudents();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.OnInitializedAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadStudents</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">1</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;John&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Hastings&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;David@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1980</span>, <span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">            Gender = Gender.Male,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123;ClassId = <span class="number">1</span>, ClassName = <span class="string">&quot;计算机科学&quot;</span>&#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/john.png&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">2</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;Sam&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Galloway&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;Sam@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">22</span>),</span><br><span class="line">            Gender = Gender.Male,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123; ClassId = <span class="number">2</span>, ClassName = <span class="string">&quot;软件工程&quot;</span> &#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/sam.jpg&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s3 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">3</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;mary@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1979</span>, <span class="number">11</span>, <span class="number">11</span>),</span><br><span class="line">            Gender = Gender.Female,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123; ClassId = <span class="number">3</span>, ClassName = <span class="string">&quot;通信工程&quot;</span> &#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/mary.png&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s4 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">4</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;Sara&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Longway&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;sara@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1982</span>, <span class="number">9</span>, <span class="number">23</span>),</span><br><span class="line">            Gender = Gender.Female,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123; ClassId = <span class="number">3</span>, ClassName = <span class="string">&quot;移动互联网&quot;</span> &#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/sara.png&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Students = <span class="keyword">new</span> List&lt;Student&gt; &#123;s1, s2, s3, s4&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Blazor 组件有多种生命周期方法。<strong>OnInitializedAsync</strong>是较常用的生命周期方法。我们重写此方法用来加载学生数据。 </p>
<p>目前，我们在组件中<strong>硬编码</strong>了学生数据。随着我们课程的深入，我们将学习如何通过调用 RESTful API从数据库中加载这些数据。</p>
<p><strong>MainLayout.razor</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@inherits LayoutComponentBase</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PageTitle</span>&gt;</span>S<span class="tag">&lt;/<span class="name">PageTitle</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NavMenu</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;content px-4&quot;</span>&gt;</span></span><br><span class="line">            @Body</span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>并在<code>Site.css</code>中添加头像的样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// Site<span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.imageThumbnail</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-06】- Blazor模型类</title>
    <url>/2023/04/26/blazor-model-classes/</url>
    <content><![CDATA[<p>按照教程进度，我们会开发一个员工管理系统，可以实现创建、读取、更新和删除员工等操作。</p>
<p>以下是需要的模型类：</p>
<ol>
<li>Student</li>
<li>ClassName</li>
<li>Gender</li>
</ol>
<h2 id="创建模型类"><a href="#创建模型类" class="headerlink" title="创建模型类"></a>创建模型类</h2><p>创建一个新的.NET类库项目，将项目命名为StudentManagement.Models。将解决方案命名为BlazorTutorial。</p>
<p><img data-src="https://cdn.jonty.top/img/202204191015829.png" alt="image-20220419101511752"></p>
<p>并创建对应的模型类</p>
<p><strong>Student.cs</strong>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 学生</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学生Id</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> StudentId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 姓</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 名</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 邮箱</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 生日</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> DateTime DateOfBrith &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 性别</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> Gender Gender &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 班级</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> StudentClass StudentClass &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 头像地址</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> PhotoPath &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>StudentName.cs</strong>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 班级</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 班级Id</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ClassId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 班级名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Gender.cs</strong>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Gender</span><br><span class="line">&#123;</span><br><span class="line">    Male,</span><br><span class="line">    Female,</span><br><span class="line">    Other</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选择创建类库项目，可以在不同的项目中<strong>重用</strong>这些模型</p>
<p><img data-src="https://cdn.jonty.top/img/202204191439071.png" alt="image-20220419143947010"></p>
<p>我们会在<strong>Blazor Web</strong>应用程序中使用这些模型，随着课程的推进，我们会创建ASP.NET Core RESTful API，这些服务会提供<strong>Blazor</strong> 项目所需要的数据。同样的，我们的RESTful API项目中也会使用这些模型类。</p>
<h2 id="创建Blazor-Web项目"><a href="#创建Blazor-Web项目" class="headerlink" title="创建Blazor Web项目"></a>创建Blazor Web项目</h2><p>我们再创建一个新的<code>Blazor Server</code>项目，将其命名为<code>StudentManagement.Web</code>，这是一个允许我们对员工信息进行增删改查操作的Web应用程序。</p>
<p><code>StudentManagement.Web</code>依赖我们上面创建的模型类库，我们在<code>StudentManagement.Web</code>中添加对<code>StudentManagement.Models</code>项目的引用，并将<code>StudentManagement.Web</code>设为<strong>启动项目</strong></p>
<p><img data-src="https://cdn.jonty.top/img/202204191440212.png" alt="image-20220419144054166"></p>
<p>从<code>StudentManagement.Web</code>项目中删除以下文件和文件夹</p>
<ul>
<li>Data文件夹</li>
<li>Pages/Counter.razor</li>
<li>Pages/FetchData.razor</li>
<li>Pages/index.razor</li>
<li>Shared/SurveyPrompt.razor</li>
</ul>
<p>更改<strong>Program.cs</strong>：</p>
<p>删除以下引用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> StudentManagement.Web.Data;</span><br></pre></td></tr></table></figure>

<p>删除以下代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">builder.Services.AddSingleton&lt;WeatherForecastService&gt;();</span><br></pre></td></tr></table></figure>

<p>如果你跟着步骤操作，现在的项目目录应该是这样的：</p>
<p><img data-src="https://cdn.jonty.top/img/202204191444223.png" alt="image-20220419144412162"></p>
<h2 id="创建StudentList组件"><a href="#创建StudentList组件" class="headerlink" title="创建StudentList组件"></a>创建StudentList组件</h2><p>在<code>StudentManagement.Web</code>项目中，右键单击<code>Pages</code>文件夹添加一个新的<strong>razor</strong>组件。命名为<code>StudentList.razor</code>组件，我们使用这个组件显示员工列表。</p>
<p>在<code>StudentList.razor</code>组件中包含以下<code>@page</code>指令，用来告诉Blazor在我们导航到<code>/student</code>路径时展示此组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@page &quot;/student&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>StudentList<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更改NvaMenu-razor组件"><a href="#更改NvaMenu-razor组件" class="headerlink" title="更改NvaMenu.razor组件"></a>更改NvaMenu.razor组件</h2><p><strong>删除</strong>以下2个导航栏菜单项</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item px-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;oi oi-plus&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Counter</span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;nav-item px-3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">class</span>=<span class="string">&quot;nav-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;fetchdata&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;oi oi-list-rich&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> Fetch data</span><br><span class="line">    <span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-05】-拆分Razor组件</title>
    <url>/2023/04/26/split-razor-component/</url>
    <content><![CDATA[<p>有2种方法可以将Razor组件HTML和C#代码拆分为各自独立的文件。</p>
<ol>
<li>部分类方法（partial class）</li>
<li>基类方法（base class）</li>
</ol>
<h2 id="单文件"><a href="#单文件" class="headerlink" title="单文件"></a>单文件</h2><p>HTML和C#代码都在<strong>一个文件</strong>中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Counter.razor</span><br><span class="line"></span><br><span class="line">@page &quot;/counter&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Current count: @currentCount<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;IncrementCount&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    private int currentCount = 0;</span><br><span class="line"></span><br><span class="line">    private void IncrementCount()</span><br><span class="line">    &#123;</span><br><span class="line">        currentCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="部分类文件"><a href="#部分类文件" class="headerlink" title="部分类文件"></a>部分类文件</h2><p>HTML保留在<code>Counter.razor</code>文件中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Counter.razor</span><br><span class="line"></span><br><span class="line">@page &quot;/counter&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Current count: @currentCount<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;IncrementCount&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在编译组件时，会生成一个与组件文件同名的类。我们手动创建一个<code>Counter.razor.cs</code>的类文件，并在其中包含<code>@code</code>中的代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Counter.razor.cs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> currentCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">IncrementCount</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        currentCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基类方法"><a href="#基类方法" class="headerlink" title="基类方法"></a>基类方法</h2><p>和部分类一样，使用基类方法HTML依旧保留在<code>Counter.razor</code>文件中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// Counter.razor</span><br><span class="line"></span><br><span class="line">@page &quot;/counter&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Current count: @currentCount<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;IncrementCount&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>把C#代码移动到单独的类<code>CounterBase</code>中，你可以将类名命名为任何名称，按照约定应该是组件名称+Base后缀</p>
<p>在示例中，组件名称为<code>Counter</code>，所以基类命名为<code>CounterBase</code>，继承自内置的<code>ComponentBase</code>类。此类位于Microsoft.AspNetCore.Components命名空间中。</p>
<p>最后，在Counter.razor文件中不要忘记包含以下继承指令。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@inherits CounterBase</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@page &quot;/counter&quot;</span><br><span class="line"></span><br><span class="line">@inherits CounterBase</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PageTitle</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">PageTitle</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">role</span>=<span class="string">&quot;status&quot;</span>&gt;</span>Current count: @currentCount<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;IncrementCount&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker-修改docker数据存储目录</title>
    <url>/2023/04/12/how-to-change-docker-data-folder-configuration/</url>
    <content><![CDATA[<p>1、停止正在运行的docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop docker</span><br></pre></td></tr></table></figure>

<p>2、创建文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /data/docker </span><br></pre></td></tr></table></figure>

<p>3、移动/var/lib/docker/目录到新目录中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /var/lib/docker/* /data/docker</span><br></pre></td></tr></table></figure>

<p>4、修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>增加以下配置即可</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">&quot;data-root&quot;</span>: <span class="string">&quot;/data/docker&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>v17.05.0 之后使用 data-root，旧版本请使用 graph</p>
</blockquote>
<p>5、删除/var/lib/docker/目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<p>6、启动docker：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<p>如果启动失败，参考 <a href="https://medium.com/developer-space/how-to-change-docker-data-folder-configuration-33d372669056">How To Change Docker Data Folder Configuration</a> 进行更改</p>
<h3 id="其他方式："><a href="#其他方式：" class="headerlink" title="其他方式："></a>其他方式：</h3><p>通过软链接修改docker数据存储目录，软连接/data/docker 到 /var/lib/里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -s /data/docker /var/lib/docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-04】- Razor组件</title>
    <url>/2023/03/23/razor-components/</url>
    <content><![CDATA[<ul>
<li>Blazor是一个<strong>组件驱动</strong>的框架，这意味着组件是<strong>Blazor</strong>应用的<strong>基本构建块</strong>。</li>
<li>它们可以嵌套、复用，甚至可以在多个项目之间共享。</li>
<li>组件文件的扩展名为 <strong>.razor</strong></li>
</ul>
<p>下面是我们新建项目时创建的<strong>Counter</strong>组件</p>
<p><code>Counter.razor</code></p>
<hr>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@page &quot;/counter&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PageTitle</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">PageTitle</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">role</span>=<span class="string">&quot;status&quot;</span>&gt;</span>Current count: @currentCount<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;IncrementCount&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    private int currentCount = 0;</span><br><span class="line"></span><br><span class="line">    private void IncrementCount()</span><br><span class="line">    &#123;</span><br><span class="line">        currentCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 可以看到这是两种语言的结合</p>
<ul>
<li>HTML标记定义了组件的用户界面（即外观）。</li>
<li>定义处理逻辑的C#代码</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20220412230131617.png" alt="image-20220412230131617"></p>
<p>在这个例子中：</p>
<ol>
<li>每次单击按钮时，C#代码都会将<code>currentCount</code>变量的值增加<code>1</code></li>
<li>单击按钮时，必须调用<code>IncrementCount()</code>函数，使用<code>onclick</code>属性调用的</li>
<li>在HTML中，要访问私有变量<code>currentCount</code>，需要使用<code>@</code>符号</li>
<li>C#代码放在<code>@code</code>块中，可以有多个<code>@code</code>块</li>
</ol>
<p>编译应用程序时，将 HTML 和 C# 代码转换为组件类。生成的类的名称与组件文件的名称匹配。组件文件名必须<strong>以大写字符开头</strong>。如果添加以小写字符开头的组件文件，则代码将无法编译，并且会出现以下编译器错误。</p>
<blockquote>
<p><strong>组件名称不能以小写字符开头</strong></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220412225942530.png" alt="image-20220412225942530"></p>
<p>请记住，Blazor Server项目在服务器上运行。</p>
<ul>
<li>在服务器和客户端浏览器之间建立 SignalR 连接。在最初呈现计数器组件之后并且当用户单击按钮时。</li>
<li>有关单击事件的信息通过 SignalR 连接发送到服务器。</li>
<li>作为对该事件的响应，组件会重新生成，但不会将整个 HTML 发送回客户端。它只是差异，即渲染树中的差异，在这种情况下，是发送到客户端浏览器的新计数器值。</li>
<li>由于仅更新页面的更改部分而不是重新加载和更新整个页面，因此应用程序感觉更快，对用户的响应更快。</li>
</ul>
<h2 id="嵌套Blazor组件"><a href="#嵌套Blazor组件" class="headerlink" title="嵌套Blazor组件"></a>嵌套Blazor组件</h2><p>呈现Counter组件的一种方法是在浏览器中导航到<code>/counter</code>。此路径由组件顶部的<code>@page</code>指令指定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@page &quot;/counter&quot;</span><br></pre></td></tr></table></figure>

<p>一个组件也可以使用 HTML 语法嵌套在另一个组件中。例如，使用**&lt; Counter /&gt;<strong>将</strong>Counter**组件嵌套在其他组件中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@page <span class="string">&quot;/test&quot;</span></span><br><span class="line">&lt;PageTitle&gt;test&lt;/PageTitle&gt;</span><br><span class="line">&lt;h3&gt;test&lt;/h3&gt;</span><br><span class="line">    </span><br><span class="line">@* 嵌套组件 *@</span><br><span class="line">&lt;Counter&gt;&lt;/Counter&gt;</span><br><span class="line">@code &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220412230557300.png" alt="image-20220412230557300"></p>
<h2 id="组件存放位置"><a href="#组件存放位置" class="headerlink" title="组件存放位置"></a>组件存放位置</h2><p>组件可以放在Blazor项目中任何位置。将生成网页的组件放置在<strong>Pages</strong>文件夹中并将可重用的非页面组件放置在<strong>Shared</strong>文件夹中是一种很好的做法。</p>
<p>如果需要，还可以将它们放在项目中完全不同的<strong>自定义文件夹</strong>中。</p>
<h2 id="拆分组件HTML和C-代码"><a href="#拆分组件HTML和C-代码" class="headerlink" title="拆分组件HTML和C#代码"></a>拆分组件HTML和C#代码</h2><p>在此示例中，HTML 和 C# 都在一个文件中。这对于像这个计数器这样的简单组件来说很好，但是将 HTML 和 C# 代码分离到它们自己的文件中通常是一个好习惯。它不仅从维护的角度来看很好，而且也很容易进行单元测试。</p>
<p>有 2 种方法，将组件 HTML 和 C# 代码拆分为各自独立的文件。</p>
<ol>
<li>部分文件方法</li>
<li>基类方法</li>
</ol>
<p>我们将在下一节中讨论这两种方法。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-03】- Blazor项目结构</title>
    <url>/2023/03/23/blazor-project-structure/</url>
    <content><![CDATA[<p>了解ASP.NET Core Blazor项目中的文件和文件夹</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220411230426968.png" alt="image-20220411230426968"></p>
<h2 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h2><p>应用程序启动代码，用于：</p>
<ul>
<li>配置应用所需服务</li>
<li>请求管道注册中间件</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> StudentManagement.Api.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the HTTP request pipeline.</span></span><br><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>

<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><code>builder</code> 是一个 <code>WebApplicationBuilder</code>，用于将配置、日志和其他服务添加到<strong>DI</strong>容器中。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务到容器中</span></span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br></pre></td></tr></table></figure>



<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>请求处理管道由一系列中间件组件组成。 每个组件在 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-6.0"><code>HttpContext</code></a> 上执行操作，调用管道中的下一个中间件或终止请求。</p>
<p>通过调用 <code>Use&#123;Feature&#125;</code> 扩展方法，向管道添加中间件组件。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册HTTP请求管道</span></span><br><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure>



<h2 id="wwwroot"><a href="#wwwroot" class="headerlink" title="wwwroot"></a>wwwroot</h2><p>对于所有项目类型，这个文件夹包含了静态文件，如图片、样式表等。</p>
<h2 id="App-razor"><a href="#App-razor" class="headerlink" title="App.razor"></a>App.razor</h2><p>这是应用程序的根组件。它使用了内置的Router组件，并设置了客户端路由。正是这个Router组件拦截了浏览器的导航，并渲染出与请求地址匹配的页面。当找到匹配后，Router使用Found属性来显示内容。如果没有找到匹配的内容，NotFound属性用于显示消息–对不起，这个地址没有任何内容。</p>
<h2 id="页面文件夹"><a href="#页面文件夹" class="headerlink" title="页面文件夹"></a>页面文件夹</h2><p>这个文件夹包含_Host  Razor Pages和组成Brazor应用程序的可路由组件。这些组件的扩展名是**.razor**。</p>
<ul>
<li>索引组件 (Index.razor) - 当我们导航到根应用程序的URL时显示。</li>
<li>Counter组件 (Counter.razor) - 当我们导航到路径/counter时显示。</li>
<li>FetchData组件(FetchData.razor) - 当我们导航到路径/fetchdata时显示。</li>
<li>Error组件(Error.razor) - 当blazor应用程序中出现未处理的异常时，会被渲染。</li>
</ul>
<h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><p>当我们导航到/fetchdata的路径时显示。顾名思义，包含了共享的组件</p>
<h2 id="MainLayout组件-MainLayout-razor"><a href="#MainLayout组件-MainLayout-razor" class="headerlink" title="MainLayout组件 (MainLayout.razor)"></a>MainLayout组件 (MainLayout.razor)</h2><p>应用程序的主要布局组件</p>
<h2 id="NavMenu组件-NavMenu-razor"><a href="#NavMenu组件-NavMenu-razor" class="headerlink" title="NavMenu组件 (NavMenu.razor)"></a>NavMenu组件 (NavMenu.razor)</h2><p>实现了侧边栏上的导航菜单。NavLink组件，渲染导航链接到其他Razor组件，如索引、计数器和fetchdata组件。这个NavLink组件足够智能，如果导航菜单项当前显示的是它的组件，那么它可以高亮显示导航菜单项。</p>
<h2 id="Imports-razor"><a href="#Imports-razor" class="headerlink" title="_Imports.razor"></a>_Imports.razor</h2><p>这就像<strong>Asp.Net Core MVC</strong>项目中的**_ViewImports.cshtml**文件。这个文件包含了常用的命名空间，所以我们不需要在每一个razor组件中都包含它们。</p>
<h2 id="wwwroot-index-html"><a href="#wwwroot-index-html" class="headerlink" title="wwwroot/index.html"></a>wwwroot/index.html</h2><p>这是<strong>Blazor WebAssembly</strong>项目中的根页面，以<strong>html</strong>页面的形式实现。当第一个请求进入应用程序时，最初服务的就是这个页面。它有标准的HTML、HEAD和BODY标记。它指定了根应用程序组件<strong>App.razor</strong>应该被渲染到哪里。可以在根项目文件夹中找到这个App.razor根组件。它作为一个HTML元素<app>包含在页面中。我们将在接下来的视频中详细讨论razor组件。</p>
<p>这个<strong>index.html</strong>页面还加载了<strong>Blazor WebAssembly JavaScript</strong>文件（**_framework/blazor.webassembly.js**）。这个文件就是负责下载的文件。</p>
<ul>
<li>编译后的blazor应用程序，它的依赖关系和.NET运行时。</li>
<li>它还会初始化运行时，以便在浏览器中运行blazor应用程序。</li>
</ul>
<h2 id="Pages-Host-cshtml"><a href="#Pages-Host-cshtml" class="headerlink" title="Pages/_Host.cshtml"></a>Pages/_Host.cshtml</h2><p>这是应用程序的根页面，通过调用 MapFallbackToPage(“/_Host”) 方法指定。它的实现是<strong>Razor</strong>页面。</p>
<p>这个页面是在第一个请求到达应用程序时提供的。它具有标准的 HTML、HEAD 和 BODY 标签。它还指定了根应用程序组件 App 组件 (App.razor) 必须呈现的位置。最后，它还加载 blazor.server.js JavaScript 文件，该文件在服务器和客户端浏览器之间建立实时 SignalR 连接。此连接用于在客户端和服务器之间交换信息。SignalR 是一个很好的框架，用于向应用程序添加实时 Web 功能。 </p>
<h2 id="Data-folder-Blazor-Server"><a href="#Data-folder-Blazor-Server" class="headerlink" title="Data folder (Blazor Server)"></a>Data folder (Blazor Server)</h2><p>包含与示例 WeatherForecast 服务相关的代码文件</p>
<h2 id="appsettings-json-Blazor-Server"><a href="#appsettings-json-Blazor-Server" class="headerlink" title="appsettings.json (Blazor Server)"></a>appsettings.json (Blazor Server)</h2><p>就像 <strong>ASP.NET Core MVC</strong>项目一样，Blazor 项目也使用此文件来存储配置设置。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Blazor Server 和 Blazor WebAssembly 只是我们托管 Blazor 应用程序的两种不同方式。</p>
<p>Blazor 应用程序中的所有内容都是 razor 组件。组件是 Blazor 应用程序的基本构建块。</p>
<p>对于 Blazor 服务器应用和 Blazor WebAssembly 应用，我们构建这些组件的方式是相同的。</p>
<p>因此，只有一个 Blazor 框架，而构建的方式，<strong>Blazor Server</strong>应用程序和 <strong>Blazor WebAssembly</strong> 应用程序非常相似。</p>
<p><strong>唯一的区别</strong>在于应用程序的<strong>托管方式</strong>。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-02】- Blazor的托管模型</title>
    <url>/2023/03/23/blazor-hosting-models/</url>
    <content><![CDATA[<p>你如果还没有安装开发环境，可以前往<a href="./what-is-blazor.md#Blazor%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">Blazor介绍</a>的下方有机器配置说明</p>
<p>我们将创建我们的第一个Blazor项目。</p>
<p>事实上，我们将创建2个Blazor项目。</p>
<ul>
<li>一个是服务器端托管:Blazor Server</li>
<li>另一个是客户端托管: Blazor WebAssembly</li>
</ul>
<p>然后，我们将运行这两个项目，看看它们在执行中的区别。</p>
<ul>
<li>了解这两种托管模式的区别以及各自的优缺点。</li>
</ul>
<h2 id="创建Blazor应用程序"><a href="#创建Blazor应用程序" class="headerlink" title="创建Blazor应用程序"></a>创建Blazor应用程序</h2><p><img data-src="https://cdn.jonty.top/img/image-20220411221907210.png" alt="image-20220411221907210"></p>
<h2 id="Bloazor托管模式"><a href="#Bloazor托管模式" class="headerlink" title="Bloazor托管模式"></a>Bloazor托管模式</h2><p>Blazor有两种托管模式：Blazor WebAssembly（客户端托管模式）和Blazor Server（服务器托管模式）。</p>
<p><img data-src="https://cdn.jonty.top/img/blazorhostingmodelsexplained.png"></p>
<p>正如模板名称所暗示的那样，使用Blazor Server App模板来创建一个带有服务器托管模式的Blazor应用程序，使用Blazor WebAssembly模板来创建一个带有客户端托管模式的Blazor应用程序。</p>
<p>Blazor服务器与Blazor WebAssembly的比较<br>2种项目类型的项目结构和布局没有太大的区别。</p>
<h2 id="blazor-server-vs-blazor-webassembly"><a href="#blazor-server-vs-blazor-webassembly" class="headerlink" title="blazor server vs blazor webassembly"></a>blazor server vs blazor webassembly</h2><p>我们将在下一个节中详细讨论这些不同文件和文件夹的目的。</p>
<p><img data-src="https://cdn.jonty.top/img/blazorservervsblazorwebassembly.png"></p>
<h2 id="在-Visual-Studio-中配置多个启动项目"><a href="#在-Visual-Studio-中配置多个启动项目" class="headerlink" title="在 Visual Studio 中配置多个启动项目"></a>在 Visual Studio 中配置多个启动项目</h2><p>我们可以在Visual Studio中配置多个项目作为<strong>StartUp项目</strong>。</p>
<p>具体步骤如下:</p>
<p>在解决方案资源管理器中右键点击解决方案名称，选择设置<strong>StartUp项目</strong>选项</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220411222732534.png" alt="image-20220411222732534"></p>
<p>选择 <strong>多个启动项目</strong>单选按钮。针对每个要设置为启动项目的项目，从 <strong>操作</strong>下拉列表中选择 <strong>启动</strong>。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220411222844570.png" alt="image-20220411222844570"></p>
<h2 id="Blazor-WebAssembly托管模式"><a href="#Blazor-WebAssembly托管模式" class="headerlink" title="Blazor WebAssembly托管模式"></a>Blazor WebAssembly托管模式</h2><p>在这种托管模式下，应用程序直接在浏览器中的WebAssembly上。</p>
<p>因此，应用程序所需要的一切，即编译后的应用程序，它的依赖关系和.NET运行时都会从服务器下载到客户端浏览器，这一点和Angular、Vue、React等开发模式是一致的。<br>Blazor WebAssembly应用程序可以完全在客户端上运行，而不需要连接到服务器，或者可以使用Web API调用或SignalR来配置它与服务器进行交互。</p>
<p><img data-src="https://cdn.jonty.top/img/BlazorWebAssemblyhostingmodel.png" alt="Blazor WebAssembly 托管模型"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220411223744216.png" alt="image-20220411223744216"></p>
<h3 id="Blazor-WebAssembly托管模式的好处。"><a href="#Blazor-WebAssembly托管模式的好处。" class="headerlink" title="Blazor WebAssembly托管模式的好处。"></a>Blazor WebAssembly托管模式的好处。</h3><ul>
<li>一个Blazor WebAssembly应用程序可以完全在客户端机器上运行。它可以离线工作。当失去了与服务器的网络连接时，客户端应用程序可以继续运行</li>
</ul>
<ul>
<li><p>它也可以很容易地作为一个渐进式的Web App运行，这意味着客户可以选择将我们的App安装到他们的设备上，在没有任何网络连接的情况下随时运行。</p>
</li>
<li><p>Web Assembly在客户端上运行，在浏览器内部，因此可以作为静态文件部署。尽管如此，由于浏览器的安全限制，Blazor Wasm应用程序不会直接从本地文件系统中运行。</p>
</li>
</ul>
<ul>
<li>当应用程序从服务器下载到客户端后，平时的计算工作使用的是客户端的资源和能力。在客户机上运行的代码，意味着服务器的负载大大降低。</li>
</ul>
<ul>
<li>我们不需要一个完整的ASP.NET Core web服务器来托管应用程序。我们只需要一台服务器，便可以将应用程序传送到客户端的浏览器上。这意味着我们可以在互联网上的任何地方，在云端，在Azure上作为静态网站，甚至在CDN内容交付网络上，将应用程序托管在自己的服务器上。</li>
</ul>
<h3 id="Blazor-WebAssembly托管的缺点"><a href="#Blazor-WebAssembly托管的缺点" class="headerlink" title="Blazor WebAssembly托管的缺点"></a>Blazor WebAssembly托管的缺点</h3><p>Blazor WebAssembly简称为Blazor Wasm。</p>
<ul>
<li><p>第一次请求通常需要较长的时间，因为<code>blazor.webassembly.js</code>文件对客户端应用程序进行引导,所以整个应用程序、其依赖关系和.NET运行时必须下载到客户端浏览器。但请记住，这只是第一次请求所花费的时间比平时长。如果那个相同的客户端稍后访问该应用程序，通常会快速启动，因为浏览器会缓存文件。</p>
</li>
<li><p>由于应用程序完全在客户端浏览器上运行，所以它受限于浏览器的计算能力。</p>
</li>
<li><p>根据应用的性质，需要有一定能力的客户端硬件和软件。例如，从软件的角度来看，至少需要一个支持WebAssembly的浏览器。</p>
</li>
</ul>
<ul>
<li><p>Mono框架解释的是.NET中间语言，因此比运行服务器端Blazor要慢。Ahead-of-time (AOT) 编译计划在未来的一个版本中进行。</p>
</li>
<li><p>Blazor Wasm还不支持一个以上的线程，所以所有的处理都发生在UI线程上–但服务器/JavaScript等的调用是异步进行的，所以不会阻碍UI的响应速度。</p>
</li>
<li><p>与服务器端不同的是，Blazor Wasm还不支持在Visual Studio中进行调试。在浏览器内调试C#代码是可能的，但尽管可行，但这并不是最好的体验。</p>
</li>
<li><p>此外，Blazor Wasm只适用于较新的浏览器，并且不支持搜索引擎（除非我们启用服务器端预渲染）。</p>
</li>
</ul>
<h2 id="Blazor-Server服务器托管模式"><a href="#Blazor-Server服务器托管模式" class="headerlink" title="Blazor Server服务器托管模式"></a>Blazor Server服务器托管模式</h2><p>在这种托管模式下，应用程序需要在服务器上执行。在客户端和服务器之间建立了一个SignalR连接。当一个事件发生在客户端，例如点击按钮，事件的信息通过SignalR连接发送到服务器。服务器处理该事件，并计算出生成的HTML的差异（差值）。整个HTML不会再次被发送到客户端，只有差值通过SignalR连接发送到客户端。然后浏览器更新UI。由于只应用了差异化的内容来更新UI，所以应用程序感觉更快，对用户的响应也更快。</p>
<p><img data-src="https://cdn.jonty.top/img/BlazorServerhostingmodel.png" alt="Blazor 服务器托管模型"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220411223908163.png" alt="image-20220411223908163"></p>
<h3 id="Blazor服务器托管模式的好处"><a href="#Blazor服务器托管模式的好处" class="headerlink" title="Blazor服务器托管模式的好处"></a>Blazor服务器托管模式的好处</h3><ul>
<li><p>Blazor服务器端在将HTML内容发送到客户端的浏览器之前，会预先渲染HTML内容。这使得它对搜索引擎友好，而且没有明显的启动时间。</p>
</li>
<li><p>由于下载量明显小于Blazor WebAssembly应用程序，因此加载速度更快</p>
</li>
<li><p>由于该应用程序运行在服务器上，因此它可以充分利用服务器的功能，包括使用任何.NET Core兼容的API。<br>客户端只需要一个浏览器就可以使用该应用。即使是不支持WebAssembly的浏览器也可以使用。</p>
</li>
<li><p>更加安全，因为应用程序的.NET/C#代码不会被发送到客户端。</p>
</li>
</ul>
<ul>
<li>Blazor服务器端应用程序可以在旧的浏览器上运行，因为不需要Web汇编，只需要HTML和JavaScript。由于代码是在服务器上执行的，所以也可以在Visual Studio中调试我们的.NET代码。</li>
</ul>
<h3 id="Blazor服务器托管-NET的缺点。"><a href="#Blazor服务器托管-NET的缺点。" class="headerlink" title="Blazor服务器托管.NET的缺点。"></a>Blazor服务器托管.NET的缺点。</h3><ul>
<li>需要一个完整的ASP.NET Core服务器来托管应用程序。在无服务器部署场景，比如希望从CDN中运行应用程序，是不可能实现的。</li>
<li>需要始终保持与服务器的主动连接。这意味着需要保持服务器24小时不间断地运行。如果服务器瘫痪，应用程序就会停止工作。</li>
<li>由于每个用户的交互都需要往返于服务器之间，与Blazor WebAssembly托管相比，通常会有较高的延迟。</li>
</ul>
<ul>
<li>Blazor服务器端为当前客户端建立一个内存内会话，并使用SignalR在服务器上运行的.NET和客户端的浏览器之间进行通信。所有的内存和CPU的使用都是以服务器为代价的，对所有用户来说。这也意味着客户端被绑定到最初服务于它的服务器上，所以不具备负载均衡功能，但是我们可以通过使用Azure SignalR服务与Blazor服务器应用程序来克服这个可扩展性问题。这个服务可以让Blazor Server app通过支持大量的并发SignalR连接来实现良好的扩展性。</li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>AQL抽样方法介绍</title>
    <url>/2023/02/17/acceptance-quality-limit/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/AQL-rev-8.jpg" alt="AQL-rev-8"></p>
<h2 id="AQL的定义"><a href="#AQL的定义" class="headerlink" title="AQL的定义"></a>AQL的定义</h2><p>AQL原来叫<strong>合格质量水平（Acceptable Quality Level）</strong>，在新版国家标准《GB/T 2828.1-2003 计数抽样检验程序 第1部分：按接收质量限（AQL）检索的逐批检验抽样计划》中，AQL的全称被改为了<strong>接收质量限制（Acceptance Quality Limit）</strong>，其定义为：当一个连续系列批被提交验收抽样时，可允许的最差过程平均质量水平。</p>
<h2 id="检验水平"><a href="#检验水平" class="headerlink" title="检验水平"></a>检验水平</h2><p>在AQL中，有三种一般检验水平（Ⅰ、Ⅱ、Ⅲ）和四种特殊检验水平（S-1、S-2、S-3、S-4）。<br>在三种一般检验水平中，LEVELⅡ是常规水平，也是最经常采用的水平。从LEVELⅠ到LEVELⅢ抽样的数量逐渐增加。LEVELⅠ的抽样数是LEVELⅡ的40％，适用于品质较为稳定或产品出现不一致可能性极小的状况。LEVELⅢ的抽样数是LEVELⅡ的160％，加大检验的样本数量可以降低接受不合格产品的可能性。<br>四种特殊检验水平的特点是抽样数量少，因为在某些情况下，例如检验的成本高、检验所花费的时间长、货物的品质比较稳定（单一产品的重复加工），通过少量的抽样检验就可以反应总体的品质水平。从S-1到S-4抽样检验数逐步增加。在服装辅料的检验中有时会采用特殊检验水平，例如拉链、纽扣等的检验。</p>
<h2 id="抽样方案"><a href="#抽样方案" class="headerlink" title="抽样方案"></a>抽样方案</h2><p>AQL有一次、二次、多次（五次）3种抽样方案。确定抽样方案可以从下面几个方面来考虑：<br>1）简便易行：一次优于二次，二次优于五次。<br>2）平均样本量：五次少于二次，二次少于一次。<br>3）管理难度：五次难于二次，二次难于一次。<br>4）取样的难易程度：取样麻烦时，一次优于二次，二次优于五次。<br>5）试验时间的长短：根据单个试验时间的长短和是否可以多个样品同时进行试验来确定总的试验时间。</p>
<h2 id="严格程度"><a href="#严格程度" class="headerlink" title="严格程度"></a>严格程度</h2><p>AQL中制定了三种严格程度：正常（NORMAL）、加严（TIGHTENED）、放宽（REDUCED）。<br>正常检验是最常用的检验水平，刚开始检验新的供应商生产的货物时，应采用正常检验。<br>一旦采用了正常、严格、放宽中的任何一种，那么在以后对同系列或同类型产品的检验中都应采取这一标准，除非供应商的产品品质发生了变动。</p>
<h3 id="AQL值"><a href="#AQL值" class="headerlink" title="AQL值"></a>AQL值</h3><p>对于不同的质量水平或要求，AQL有多种规定的数值，从0.010~1000。服装业最常用的AQL值是2.5，要求高一些的用1.5，要求稍低的用4.0。不同的AQL值体现了不同的质量水平，通常AQL值越小代表品质要求越高。</p>
<h2 id="转移规则和程序"><a href="#转移规则和程序" class="headerlink" title="转移规则和程序"></a>转移规则和程序</h2><h3 id="正常到加严"><a href="#正常到加严" class="headerlink" title="正常到加严"></a>正常到加严</h3><p>当正在采用正常检验时，只要初次检验中连续5批或少于5批中有2批是不可接收的，则转移到加严检验。<br>（注：初次检验指第一次检验，区别于拒收后的再次提交批的检验。再次提交批的检验结果不参与转移。）</p>
<h3 id="加严到正常"><a href="#加严到正常" class="headerlink" title="加严到正常"></a>加严到正常</h3><p>当正在采用加严检验时，如果初次检验的接连5批已被认为是可接收的，应恢复正常检验。</p>
<h3 id="正常到放宽"><a href="#正常到放宽" class="headerlink" title="正常到放宽"></a>正常到放宽</h3><p>当正在采用正常检验时，如果连续10次检验都合格、并且生产处于稳定状态的话，可以转移到放宽检验。<br>（注：这个跟GB/T 2828.1-2003的规定不同，因为GB/T 2828.1-2003的条件比较负责，所以可以考虑采用这个比较简单的方法。）</p>
<h3 id="放宽到正常"><a href="#放宽到正常" class="headerlink" title="放宽到正常"></a>放宽到正常</h3><p>当正在执行放宽检验时，如果初次检验出现下列任一情况，应恢复正常检验：<br>a）一个批未被接收；<br>b）生产不稳定或延迟；<br>c）认为恢复正常检验是正当的其他情况。</p>
<h3 id="暂停检验"><a href="#暂停检验" class="headerlink" title="暂停检验"></a>暂停检验</h3><p>如果在初次加严检验的一系列连续批中未接受批的累计数达到5批，应暂时停止检验。直到供应商为改进所提供产品或服务的质量已采取行动，而且负责部门承认此行动可能有效时，才能恢复检验。恢复检验应从使用加严检验开始。</p>
<p>放宽检验是非强制性的，在条件不成熟或无把握的情况下可以不执行。<br>暂停检验也可以不执行。<br>至少要执行正常和加严检验之间的转移规则。</p>
<h3 id="二次抽样方案"><a href="#二次抽样方案" class="headerlink" title="二次抽样方案"></a>二次抽样方案</h3><p>第一次检验的样品数量应等于该方案给出的第一样本量。如果第一样本中发现的不合格数小于或等于第一接收数，则该批可接收；如果第一样本中发现的不合格品数大于或等于第一拒收数，则该批不可接收。<br>如果第一样本中发现的不合格品数介于第一接收数与第二拒收数之间，应检验由方案给出样本量的第二样本并累计在第一样本和第二样本中发现的不合格品数。如果不合格品累计数小于或等于第二接收数，则判定批可接收；如果不合格品累计数大于或等于第二拒收数，则判定该批不可接收。<br>二次抽样方案的目的是通过检验较少样品数而节约时间，然而当必须进行第二次检验时，抽样检验的总数要超过一次抽样检验的数量，所以二次抽样方案适合于质量比较稳定的产品。</p>
<h3 id="不合格产品的判定"><a href="#不合格产品的判定" class="headerlink" title="不合格产品的判定"></a>不合格产品的判定</h3><p>根据不同类型的服装可参考相应的行业标准或企业标准，如T恤和Polo衫可参考纺织行业标准《FZ/T 73008-2002 针织T恤衫》。<br>有的公司以一件衣服上有一个或以上严重疵点为一个不合格品，一件衣服上有3个轻微疵点也算一件不合格品。<br>有的公司采用的是记点的方式，即计算样本中的不合格数来判定。</p>
<p>当样本数超过批量时，应该以整批作为样本（全检），判定数不变。</p>
<h3 id="AQL抽样检验的方法和步骤"><a href="#AQL抽样检验的方法和步骤" class="headerlink" title="AQL抽样检验的方法和步骤"></a>AQL抽样检验的方法和步骤</h3><p>1、决定检验方案（检验水平、抽样方案、严格程度和AQL值）。检验方案一般由客户决定，也有客户和供应商协商决定的。<br>2、根据检验方案查找样本量字码。<br>3、抽样方案。在AQL中给出了一系列的抽样方案表格，这些表格给出了在不同的品质水平下抽样检验的样本数和接收数（Ac）、拒收数（Re）。<br>4、产品检验。从所要检验的产品中，按照以上所述的样本数，随机抽取样品。在检验中应保证100％地检验所抽取的样本，既使在检验若干件后，发现不合格数已经超过拒收数，仍然应该继续检验剩余的样本，因为检验的目的除了要知道“接受”或“拒收”的结果外，还需要了解货物究竟处于何种质量水平，并且可以通过积累历史数据来判断供应商是否合格和决定以后对供应商的检验方案。对供应商来说，也可以清楚如何去改善产品的品质。<br>5、统计不合格数。<br>6、判定是否接受。对照抽样方案表格中的接收数和拒收数来决定是“接受”还是“拒收”。</p>
<p>例一：<br>检验方案为一般检验水平Ⅱ、正常检验一次抽样方案、AQL 2.5。<br>如有一批衣服的数量为5000件，则找到对应的“样本量字码”为“L”。<br>在“正常检验一次抽样方案（主表）”中找到样本量字码L，对应的样本量为“200”，表示要抽查200件衣服；AQL 2.5对应的“接收/拒收数”为“10 11”，表示抽查的200件样本中，如果发现的不合格品小于或等于10件的话，则该批产品可接受；如果不合格品等于或大于11的话，则该批产品不可接受。</p>
<p>例二：<br>检验方案为一般检验水平Ⅱ、正常检验二次抽样方案、AQL 4.0。<br>如有一批衣服的数量为20000件，则找到对应的样本量字码为“M”。<br>从“正常检验二次抽样方案（主表）”中查找到对应的样本量和接收/拒收数。<br>第一次抽样200件，接收/拒收数为“11 16”，不合格品数小于或等于11则接受，不合格品数等于或大于16则拒收，不合格品数为12~15之间则进行第二次抽查；<br>第二次再抽查200件，接收/拒收数为“26 27”，累计不合格品数（加上第一次抽查发现的不合格品数）小于或等于26则接受，累计不合格品数等于或大于27则拒收。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>AQL</tag>
      </tags>
  </entry>
  <entry>
    <title>【Blazor-01】-什么是Blazor?</title>
    <url>/2023/02/15/what-is-blazor/</url>
    <content><![CDATA[<h2 id="现如今如何开发Web应用程序"><a href="#现如今如何开发Web应用程序" class="headerlink" title="现如今如何开发Web应用程序"></a>现如今如何开发Web应用程序</h2><p><img data-src="https://cdn.jonty.top/img/whatisblazor.png" alt="img"></p>
<ul>
<li>对于服务端开发，我们使用C#、Java、PHP等编程语言，这些都是服务端编程语言。</li>
<li>对于客户端开发，使用 Angular、React、Vue 等<strong>JavaScript</strong>框架，这些JavaScript框架也是最近几年开始主导客户端开发。</li>
</ul>
<p>作为开发人员，为了在业务中持续保持竞争力，我们不可避免的要同时学习服务端编程语言和客户端编程语言。但问题是，我们为什么要学习和使用两套不同的编程语言和框架呢？</p>
<h2 id="使用C-同时进行服务端和客户端开发"><a href="#使用C-同时进行服务端和客户端开发" class="headerlink" title="使用C#同时进行服务端和客户端开发"></a>使用C#同时进行服务端和客户端开发</h2><p><img data-src="https://cdn.jonty.top/img/whyshouldweuseblazor.png" alt="我们为什么要使用 blazor"></p>
<p>可以使用C#同时进行服务端和客户端开发吗？答案是可以的，借助<strong>Blazor</strong>,我们可以使用C#而不是JavaScript构建交互式的Web UI。C#代码可以在服务器和客户端浏览器上执行。这意味着.Net开发人员可以重用他们的C#技能，而不是学习新的JavaScript框架而带来的巨大的学习成本。</p>
<h2 id="浏览器如何执行C-代码"><a href="#浏览器如何执行C-代码" class="headerlink" title="浏览器如何执行C#代码"></a>浏览器如何执行C#代码</h2><p>众所周知，浏览器只能执行JavaScript代码。那么如何在客户端浏览器执行C#代码？答案是<strong>WebAssembly</strong></p>
<p><img data-src="https://cdn.jonty.top/img/blazorandwebassembly.png" alt="blazor 和 webassembly"></p>
<p>Blazor 可以使用 WebAssembly 在浏览器中直接运行 C# 代码。它与 Angular、React、Vue 等 JavaScript 框架在同一个安全沙箱中运行。</p>
<p>事实上，不仅仅是 C#，我们可以使用 WebAssembly 在浏览器中运行任何类型的代码。</p>
<p>WebAssembly 基于开放的 Web 标准。所以它是所有现代浏览器的原生部分，包括移动浏览器。这意味着要是Blazor应用程序正常工作，不需要安装任何插件。</p>
<h2 id="Blazor托管模型"><a href="#Blazor托管模型" class="headerlink" title="Blazor托管模型"></a>Blazor托管模型</h2><p>Blazor 提供 2 种托管模型。</p>
<ul>
<li> Blazor WebAssembly</li>
<li> Blazor Server</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20220411220906408.png" alt="image-20220411220906408"></p>
<h3 id="Blazor-WebAssembly"><a href="#Blazor-WebAssembly" class="headerlink" title="Blazor WebAssembly"></a>Blazor WebAssembly</h3><p>客户端托管模型：应用程序直接在 WebAssembly 的浏览器中运行。</p>
<p>因此，应用程序所需的一切，即编译后的应用程序代码本身、它的依赖项和 .NET 运行时都下载到浏览器。</p>
<blockquote>
<p> 使用 <code>Blazor WebAssembly App </code>模板来创建具有客户端托管模型的 Blazor 应用程序。</p>
</blockquote>
<h3 id="Blazor-server"><a href="#Blazor-server" class="headerlink" title="Blazor server"></a>Blazor server</h3><p>服务器托管模型：应用程序在 ASP.NET Core 应用程序内的服务器上执行。</p>
<p>在客户端和服务器之间，建立了 <strong>SignalR</strong> 连接。</p>
<p>例如，当客户端上发生事件（例如单击按钮）时，有关事件的信息将通过 SignalR 连接发送到服务器。服务器处理事件并为生成的 HTML 计算差异。整个 HTML 不会再次发送回客户端，它只是通过已建立的 SignalR 连接发送给客户端的差异。然后浏览器更新 UI。Blazor 采用单页面应用程序体系结构。</p>
<blockquote>
<p>使用 Blazor Server应用程序模板来创建具有服务器托管模型的 Blazor 应用程序</p>
</blockquote>
<h2 id="Blazor开发环境"><a href="#Blazor开发环境" class="headerlink" title="Blazor开发环境"></a>Blazor开发环境</h2><p><a href="https://dotnet.microsoft.com/en-us/download/dotnet/6.0">安装.NET6或更高版本</a></p>
<p>验证本地安装的.NET SDK</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet --list-sdks</span><br></pre></td></tr></table></figure>

<p>可以使用Visual Studio、Visual Studio Code 或 .NET Core CLI 构建 Blazor 应用程序。 </p>
<p><a href="https://visualstudio.microsoft.com/zh-hans/?rr=https://www.microsoft.com/zh-cn">下载Visual Studio</a></p>
<h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p><img data-src="https://cdn.jonty.top/img/image-20220411220940383.png" alt="image-20220411220940383"></p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>Blazor系列文章目录</title>
    <url>/2023/02/15/blazor-server-basic-tutorial/</url>
    <content><![CDATA[<div class="note info"><p>Blazor可以直接在浏览器中运行C#代码，使用WebAssembly。它和Angular、React、Vue等JavaScript框架一样，在相同的安全沙盒中运行。不仅仅是C#，我们可以使用WebAssembly在浏览器中运行任何类型的代码。</p>
<p>WebAssembly是基于开放的Web标准。所以它是所有现代浏览器包括移动浏览器的原生部分。这意味着blazor应用程序的工作，不需要像<code>silverlight</code>和<code>flash</code>时代那样安装任何特殊的插件。</p>
</div>

<h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/02/15/what-is-blazor/" title="Blazor 简介">Blazor 简介</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/03/23/blazor-hosting-models/" title="Blazor 托管模型">Blazor 托管模型</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/03/23/blazor-project-structure/" title="Blazor 项目结构">Blazor 项目结构</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/03/23/razor-components/" title="Blazor Razor 组件">Blazor Razor 组件</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/04/26/split-razor-component/" title="Blazor 拆分组件">Blazor 拆分组件</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/04/26/blazor-model-classes/" title="Blazor 模型类">Blazor 模型类</a></li>
<li><input checked="" disabled="" type="checkbox"> <a href="/2023/04/26/blazor-component/" title="员工列表组件">员工列表组件</a></li>
<li><input disabled="" type="checkbox"> Blazor 加载指示器</li>
<li><input disabled="" type="checkbox"> Blazor 数据访问策略</li>
<li><input disabled="" type="checkbox"> 什么是 RESTful API</li>
<li><input disabled="" type="checkbox"> 创建 REST API</li>
<li><input disabled="" type="checkbox"> REST API 数据库上下文</li>
<li><input disabled="" type="checkbox"> REST API 中的存储库模式</li>
<li><input disabled="" type="checkbox"> REST API 获取列表</li>
<li><input disabled="" type="checkbox"> REST API 通过 ID 获取</li>
<li><input disabled="" type="checkbox"> 在 REST API 中发布</li>
<li><input disabled="" type="checkbox"> REST API 模型验证</li>
<li><input disabled="" type="checkbox"> 使用 REST API</li>
<li><input disabled="" type="checkbox"> 在 REST API 中删除</li>
<li><input disabled="" type="checkbox"> 在 REST API 中搜索</li>
<li><input disabled="" type="checkbox"> 从 Blazor 调用 REST API</li>
<li><input disabled="" type="checkbox"> Blazor 路由参数</li>
<li><input disabled="" type="checkbox"> 来自多个表的数据</li>
<li><input disabled="" type="checkbox"> Blazor 事件处理</li>
<li><input disabled="" type="checkbox"> Blazor 数据绑定</li>
<li><input disabled="" type="checkbox"> Blazor 双向绑定</li>
<li><input disabled="" type="checkbox"> 组件参数</li>
<li><input disabled="" type="checkbox"> Blazor 事件回调</li>
<li><input disabled="" type="checkbox"> 构建 Blazor 表单</li>
<li><input disabled="" type="checkbox"> Blazor 选择列表</li>
<li><input disabled="" type="checkbox"> 自定义输入组件</li>
<li><input disabled="" type="checkbox"> RCL 项目</li>
<li><input disabled="" type="checkbox"> 将枚举绑定到选择</li>
<li><input disabled="" type="checkbox"> Blazor 日期选择器</li>
<li><input disabled="" type="checkbox"> Blazor 表单验证</li>
<li><input disabled="" type="checkbox"> 自定义表单验证</li>
<li><input disabled="" type="checkbox"> 比较验证</li>
<li><input disabled="" type="checkbox"> 复杂模型验证</li>
<li><input disabled="" type="checkbox"> ASP.NET Core 中的 AutoMapper</li>
<li><input disabled="" type="checkbox"> 编辑和更新</li>
<li><input disabled="" type="checkbox"> 创建操作</li>
<li><input disabled="" type="checkbox"> 强制重新加载组件</li>
<li><input disabled="" type="checkbox"> 删除操作</li>
<li><input disabled="" type="checkbox"> 组件通信</li>
<li><input disabled="" type="checkbox"> 删除确认</li>
<li><input disabled="" type="checkbox"> 属性溅射</li>
<li><input disabled="" type="checkbox"> 任意属性</li>
<li><input disabled="" type="checkbox"> 级联值</li>
<li><input disabled="" type="checkbox"> 多个级联参数</li>
<li><input disabled="" type="checkbox"> 级联值性能</li>
<li><input disabled="" type="checkbox"> Blazor 中的身份设置</li>
<li><input disabled="" type="checkbox"> Cookie 身份验证</li>
<li><input disabled="" type="checkbox"> 身份验证 - 登录页面</li>
<li><input disabled="" type="checkbox"> 身份验证 - 注销页面</li>
<li><input disabled="" type="checkbox"> Blazor 中的授权</li>
<li><input disabled="" type="checkbox"> Blazor 授权属性</li>
<li><input disabled="" type="checkbox"> 代码中的 Blazor 授权</li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>Blazor</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高可用集群部署-Cluster</title>
    <url>/2023/02/03/docker-swarm-redis-cluster/</url>
    <content><![CDATA[<p>Redis cluster是redis的官方集群方案，但是要求客户端自己做重定向，所以连接单机redis和集群redis的客户端会有些不同，连接集群版redis的时候要客户端连接6个redis实例。</p>
<p>官方为了屏蔽这种差异，做了一个redis-cluster-proxy，经过这个proxy的代理后，连接redis集群就和连接单机redis一样了。</p>
<blockquote>
<p><a href="https://github.com/RedisLabs/redis-cluster-proxy">RedisLabs/redis-cluster-proxy: A proxy for Redis clusters. (github.com)</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20230203142147518.png" alt="image-20230203142147518"></p>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><p>搭建3master+3slave+1proxy，共三个节点，如下：</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>hostname</th>
<th>部署实例</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.2.213</td>
<td>manager</td>
<td>redis1、redis2、proxy(1实例)</td>
</tr>
<tr>
<td>192.168.2.214</td>
<td>worker1</td>
<td>redis3、redis4</td>
</tr>
<tr>
<td>192.168.2.215</td>
<td>worker2</td>
<td>redis5、redis5</td>
</tr>
</tbody></table>
<h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux manager 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@manager ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure>

<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>查看Docker版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.23</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.18.10</span><br><span class="line"> Git commit:        7155243</span><br><span class="line"> Built:             Thu Jan 19 17:36:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.23</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.10</span><br><span class="line">  Git commit:       6051f14</span><br><span class="line">  Built:            Thu Jan 19 17:34:26 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.15</span><br><span class="line">  GitCommit:        5b842e528e99d4d4c1686467debf2bd4b88ecd86</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>

<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>所有节点执行以下命令，打开集群初始化所需端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br></pre></td></tr></table></figure>

<p>重启防火墙以及Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p>创建3个manager节点，如下：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203101937613.png" alt="image-20230203101937613"></p>
<p>manager节点初始化集群：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.213</span><br></pre></td></tr></table></figure>

<p>manager节点获取加入manager token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure>

<p>worker节点以<code>manager</code>身份加入集群</p>
<pre><code>docker swarm join \
--token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 \
192.168.2.213:2377
</code></pre>
<h2 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h2><img data-src="https://cdn.jonty.top/img/2020-12-02-150023.jpg" alt="redis_cluster" style="zoom: 33%;" />

<h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir redis-cluster</span><br><span class="line"><span class="built_in">cd</span> redis-cluster</span><br></pre></td></tr></table></figure>

<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>编写<code>docker-compose.yml</code>文件，需要根据实际IP地址做调整</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  redis-node1:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node1</span><br><span class="line">    ports:</span><br><span class="line">      - 7001:6379</span><br><span class="line">      - 17001:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node1-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;redis-server&quot;</span></span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.213&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7001&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17001&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == manager</span><br><span class="line"></span><br><span class="line">  redis-node2:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node2</span><br><span class="line">    ports:</span><br><span class="line">      - 7002:6379</span><br><span class="line">      - 17002:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node2-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;redis-server&quot;</span></span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.213&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7002&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17002&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == manager</span><br><span class="line"></span><br><span class="line">  redis-node3:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node3</span><br><span class="line">    ports:</span><br><span class="line">      - 7003:6379</span><br><span class="line">      - 17003:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node3-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;redis-server&quot;</span></span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.214&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7003&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17003&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker1</span><br><span class="line"></span><br><span class="line">  redis-node4:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node4</span><br><span class="line">    ports:</span><br><span class="line">      - 7004:6379</span><br><span class="line">      - 17004:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node4-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.214&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7004&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17004&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker1</span><br><span class="line"></span><br><span class="line">  redis-node5:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node5</span><br><span class="line">    ports:</span><br><span class="line">      - 7005:6379</span><br><span class="line">      - 17005:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node5-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.215&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7005&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17005&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker2</span><br><span class="line"></span><br><span class="line">  redis-node6:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node6</span><br><span class="line">    ports:</span><br><span class="line">      - 7006:6379</span><br><span class="line">      - 17006:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node6-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.215&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7006&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17006&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker2</span><br><span class="line"></span><br><span class="line">  redis-cluster:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-cluster</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis-node1</span><br><span class="line">      - redis-node2</span><br><span class="line">      - redis-node3</span><br><span class="line">      - redis-node4</span><br><span class="line">      - redis-node5</span><br><span class="line">      - redis-node6</span><br><span class="line">    <span class="built_in">command</span>: <span class="string">&#x27;redis-cli --cluster create</span></span><br><span class="line"><span class="string">    192.168.2.213:7001 192.168.2.213:7002 192.168.2.214:7003</span></span><br><span class="line"><span class="string">    192.168.2.214:7004 192.168.2.215:7005 192.168.2.215:7006</span></span><br><span class="line"><span class="string">    --cluster-yes --cluster-replicas 1 -a bb123456&#x27;</span></span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">        delay: 5s</span><br><span class="line">        max_attempts: 5</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == manager</span><br><span class="line"></span><br><span class="line">  redis-proxy:</span><br><span class="line">    image: jontymax/redis-cluster-proxy:dev</span><br><span class="line">    hostname: redis-proxy</span><br><span class="line">    ports: </span><br><span class="line">      - <span class="string">&quot;7777:7777&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis-cluster</span><br><span class="line">    <span class="built_in">command</span>: <span class="string">&#x27;redis-cluster-proxy --auth bb123456 192.168.2.213:7001 192.168.2.213:7002 192.168.2.214:7003 192.168.2.214:7004 192.168.2.215:7005 192.168.2.215:7006&#x27;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: global</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  redis-swarm:</span><br><span class="line">    driver: overlay</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  redis-node1-data:</span><br><span class="line">  redis-node2-data:</span><br><span class="line">  redis-node3-data:</span><br><span class="line">  redis-node4-data:</span><br><span class="line">  redis-node5-data:</span><br><span class="line">  redis-node6-data:</span><br></pre></td></tr></table></figure>

<h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml redis-cluster-proxy</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230203145125983.png" alt="image-20230203145125983"></p>
<h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service ls | grep redis-cluster</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230203145230510.png" alt="image-20230203145230510"></p>
<p>redis-cluster服务用于初始化集群，启动完成日志如下:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.2.214:7004 to 192.168.2.213:7001</span><br><span class="line">Adding replica 192.168.2.215:7006 to 192.168.2.214:7003</span><br><span class="line">Adding replica 192.168.2.213:7002 to 192.168.2.215:7005</span><br><span class="line">M: 9ee907ba218b782c264be77e4dd5ca53a79b7350 192.168.2.213:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">S: 567cbca6ba03a2c4d1f4461882cf64a369daaafb 192.168.2.213:7002</span><br><span class="line">   replicates 98719ee5734cdc8b9b06519e2ebcf23b66041266</span><br><span class="line">M: c912e5bc90cdaed6159a5ca83725848556a8e68d 192.168.2.214:7003</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">S: 257d31f2f29f658103e9032584de8c2803bfb7b9 192.168.2.214:7004</span><br><span class="line">   replicates 9ee907ba218b782c264be77e4dd5ca53a79b7350</span><br><span class="line">M: 98719ee5734cdc8b9b06519e2ebcf23b66041266 192.168.2.215:7005</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: de5dbc1a51252d1c2ccf863470a85e5bd9e168bd 192.168.2.215:7006</span><br><span class="line">   replicates c912e5bc90cdaed6159a5ca83725848556a8e68d</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">......</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.2.213:7001)</span><br><span class="line">M: 9ee907ba218b782c264be77e4dd5ca53a79b7350 192.168.2.213:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: c912e5bc90cdaed6159a5ca83725848556a8e68d 192.168.2.214:7003</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 567cbca6ba03a2c4d1f4461882cf64a369daaafb 192.168.2.213:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98719ee5734cdc8b9b06519e2ebcf23b66041266</span><br><span class="line">S: 257d31f2f29f658103e9032584de8c2803bfb7b9 192.168.2.214:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9ee907ba218b782c264be77e4dd5ca53a79b7350</span><br><span class="line">S: de5dbc1a51252d1c2ccf863470a85e5bd9e168bd 192.168.2.215:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c912e5bc90cdaed6159a5ca83725848556a8e68d</span><br><span class="line">M: 98719ee5734cdc8b9b06519e2ebcf23b66041266 192.168.2.215:7005</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>

<p>redis-proxy服务用于代理redis-cluster，等待redis-cluster初始化完成，启动完成日志如下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[2023-02-03 06:28:08.955/M] Redis Cluster Proxy v999.999.999 (unstable)</span><br><span class="line">[2023-02-03 06:28:08.955/M] Commit: (ac83840d/0)</span><br><span class="line">[2023-02-03 06:28:08.955/M] Git Branch: unstable</span><br><span class="line">[2023-02-03 06:28:08.955/M] PID: 1</span><br><span class="line">[2023-02-03 06:28:08.955/M] OS: Linux 3.10.0-957.el7.x86<span class="built_in">_</span>64 x86<span class="built_in">_</span>64</span><br><span class="line">[2023-02-03 06:28:08.955/M] Bits: 64</span><br><span class="line">[2023-02-03 06:28:08.955/M] Log level: info</span><br><span class="line">[2023-02-03 06:28:08.955/M] Connections pool size: 10 (respawn 2 every 50ms if below 10)</span><br><span class="line">[2023-02-03 06:28:08.955/M] The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">[2023-02-03 06:28:08.955/M] Listening on *:7777</span><br><span class="line">[2023-02-03 06:28:08.955/M] Starting 8 threads...</span><br><span class="line">[2023-02-03 06:28:08.955/M] Fetching cluster configuration...</span><br><span class="line">[2023-02-03 06:28:08.962/M] Cluster Address: 192.168.2.213:7001</span><br><span class="line">[2023-02-03 06:28:08.962/M] Cluster has 3 masters and 3 replica(s)</span><br><span class="line">[2023-02-03 06:28:09.057/M] All thread(s) started!</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果初始化或代理启动失败，可以尝试移除服务重新创建</p>
</blockquote>
<h4 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack rm redis-cluster</span><br></pre></td></tr></table></figure>

<h2 id="服务连接"><a href="#服务连接" class="headerlink" title="服务连接"></a>服务连接</h2><h3 id="连接到集群"><a href="#连接到集群" class="headerlink" title="连接到集群"></a>连接到集群</h3><p>连接任意节点<code>IP:700x</code>可连接到集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203145831336.png" alt="image-20230203145831336"></p>
<p>可正常使用</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203150113829.png" alt="image-20230203150113829"></p>
<p>查看集群节点信息</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203150222570.png" alt="image-20230203150222570"></p>
<h3 id="连接到代理"><a href="#连接到代理" class="headerlink" title="连接到代理"></a>连接到代理</h3><p><img data-src="https://cdn.jonty.top/img/image-20230203145814034.png" alt="image-20230203145814034"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203150312909.png" alt="image-20230203150312909"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Swarm</tag>
        <tag>Redis</tag>
        <tag>Redis Cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高可用集群部署-Sentinel</title>
    <url>/2023/02/03/docker-swarm-redis-sentinel/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/redis-sentinel-haproxy.png" alt="redis-sentinel-haproxy"></p>
<p>Redis使用使用<strong>哨兵模式</strong>进行组网，哨兵负责主节点的故障转移。<br>HAProxy作为Redis集群的代理(HAProxy工作在TCP层)，屏蔽底层redis的组网细节，对上层应用来看就是单节点的redis。</p>
<blockquote>
<p>关于<a href="https://mp.weixin.qq.com/s?__biz=MzI3MjY1ODI2Ng==&mid=2247486094&idx=1&sn=f727b9fe6f53f4ebc5280dd09d6161ed&chksm=eb2e70bbdc59f9ad8157859f0c6eb5fa881c9e147d7e03ca9693633f7d2bff7215d0f813c847&scene=27">Redis集群方案介绍+优缺点对比</a></p>
</blockquote>
<h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><p>搭建1主2从3哨兵，共三个节点，如下：</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>hostname</th>
<th>部署实例</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.2.213</td>
<td>manager</td>
<td>redis1、sentinel1、Haproxy(1实例)</td>
</tr>
<tr>
<td>192.168.2.214</td>
<td>worker1</td>
<td>redis2、sentinel2</td>
</tr>
<tr>
<td>192.168.2.215</td>
<td>worker2</td>
<td>redis3、sentinel3</td>
</tr>
</tbody></table>
<h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux manager 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@manager ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure>

<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>查看Docker版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.23</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.18.10</span><br><span class="line"> Git commit:        7155243</span><br><span class="line"> Built:             Thu Jan 19 17:36:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.23</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.10</span><br><span class="line">  Git commit:       6051f14</span><br><span class="line">  Built:            Thu Jan 19 17:34:26 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.15</span><br><span class="line">  GitCommit:        5b842e528e99d4d4c1686467debf2bd4b88ecd86</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>

<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>所有节点执行以下命令，打开集群初始化所需端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br></pre></td></tr></table></figure>

<p>重启防火墙以及Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p>创建3个manager节点，如下：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203101937613.png" alt="image-20230203101937613"></p>
<p>manager节点初始化集群：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.213</span><br></pre></td></tr></table></figure>

<p>manager节点获取加入manager token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure>

<p>worker节点以<code>manager</code>身份加入集群</p>
<pre><code>docker swarm join \
--token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 \
192.168.2.213:2377
</code></pre>
<h2 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h2><h3 id="部署架构图"><a href="#部署架构图" class="headerlink" title="部署架构图"></a>部署架构图</h3><p><img data-src="https://cdn.jonty.top/img/image-20230203103602363.png" alt="redis-sentinel"></p>
<h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir redis-sentinel</span><br><span class="line"><span class="built_in">cd</span> redis-sentinel</span><br><span class="line">mkdir haproxy</span><br></pre></td></tr></table></figure>

<h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>编写<code>docker-compose.yml</code>文件，需要根据实际IP地址做调整</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="comment"># cpus: &#x27;0.001&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">5120M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="comment"># cpus: &#x27;0.001&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">512M</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">manager</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/redis.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 6379&#x27; &gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;bind 0.0.0.0&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-ip 192.168.2.213&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-port 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;masterauth bb123456&#x27; &gt;&gt; /conf/redis.conf;</span></span><br><span class="line"><span class="string">      echo &#x27;requirepass bb123456&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;appendonly yes&#x27; &gt;&gt; /conf/redis.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/redis.conf&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/redis.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 6379&#x27; &gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;bind 0.0.0.0&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-ip 192.168.2.214&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-port 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;masterauth bb123456&#x27; &gt;&gt; /conf/redis.conf;</span></span><br><span class="line"><span class="string">      echo &#x27;requirepass bb123456&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;replicaof 192.168.2.213 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;appendonly yes&#x27; &gt;&gt; /conf/redis.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/redis.conf&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">redis3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker2</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/redis.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 6379&#x27; &gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;bind 0.0.0.0&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-ip 192.168.2.215&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-port 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;masterauth bb123456&#x27; &gt;&gt; /conf/redis.conf;</span></span><br><span class="line"><span class="string">      echo &#x27;requirepass bb123456&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;replicaof 192.168.2.213 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;appendonly yes&#x27; &gt;&gt; /conf/redis.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/redis.conf&quot;</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">manager</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/sentinel.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 26379&#x27; &gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel announce-ip 192.168.2.213&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel monitor mymaster 192.168.2.213 6379 2&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel auth-pass mymaster bb123456&#x27; &gt;&gt; /conf/sentinel.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/sentinel.conf --sentinel&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/sentinel.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 26379&#x27; &gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel announce-ip 192.168.2.214&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel monitor mymaster 192.168.2.213 6379 2&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel auth-pass mymaster bb123456&#x27; &gt;&gt; /conf/sentinel.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/sentinel.conf --sentinel&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker2</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/sentinel.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 26379&#x27; &gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel announce-ip 192.168.2.215&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel monitor mymaster 192.168.2.213 6379 2&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel auth-pass mymaster bb123456&#x27; &gt;&gt; /conf/sentinel.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/sentinel.conf --sentinel&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">haproxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">haproxytech/haproxy-alpine:2.4</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sentinel1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sentinel2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sentinel3</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">haproxy_conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/local/etc/haproxy/haproxy.cfg</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16379:16379&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis-sentinel:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br><span class="line">  <span class="attr">redis-conf:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">haproxy_conf:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./haproxy/haproxy.cfg</span></span><br></pre></td></tr></table></figure>

<h4 id="haproxy-cfg"><a href="#haproxy-cfg" class="headerlink" title="haproxy.cfg"></a>haproxy.cfg</h4><p>创建<code>haproxy.cfg</code>配置文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Global settings</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="attribute">global</span></span><br><span class="line">    <span class="comment"># to have these messages end up in /var/log/haproxy.log you will</span></span><br><span class="line">    <span class="comment"># need to:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 1) configure syslog to accept network log events.  This is done</span></span><br><span class="line">    <span class="comment">#    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span></span><br><span class="line">    <span class="comment">#    /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 2) configure local2 events to go to the /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment">#   file. A line like the following can be added to</span></span><br><span class="line">    <span class="comment">#   /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#    local2.*                       /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">  log stdout format raw local0 <span class="literal">info</span>  </span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span></span><br><span class="line"><span class="comment"># use if not designated in their block</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode tcp</span><br><span class="line">    retries <span class="number">3</span></span><br><span class="line">    option redispatch</span><br><span class="line">    maxconn <span class="number">20000</span></span><br><span class="line">    timeout connect <span class="number">600s</span></span><br><span class="line">    timeout client <span class="number">600s</span></span><br><span class="line">    timeout server <span class="number">600s</span></span><br><span class="line">listen stats</span><br><span class="line">    bind <span class="number">0.0.0.0:8080</span> <span class="comment"># 面板代理</span></span><br><span class="line">    mode http </span><br><span class="line">    stats uri /haproxy-status <span class="comment"># 面板地址</span></span><br><span class="line">    stats auth admin:admin <span class="comment"># 面板user:pwd</span></span><br><span class="line">    stats hide-version</span><br><span class="line">    stats refresh <span class="number">30s</span></span><br><span class="line">frontend redis16379 </span><br><span class="line">    bind :<span class="number">16379</span> <span class="comment"># 代理端口</span></span><br><span class="line">    default_backend redis_16379_backend</span><br><span class="line">backend redis_16379_backend</span><br><span class="line">    option tcp-check</span><br><span class="line">    tcp-check connect</span><br><span class="line">    tcp-check send AUTH\ bb123456\r\n <span class="comment"># redis 密码 按需调整</span></span><br><span class="line">    tcp-check expect string +OK</span><br><span class="line">    tcp-check send PING\r\n</span><br><span class="line">    tcp-check expect string +PONG</span><br><span class="line">    tcp-check send <span class="literal">info</span>\ replication\r\n</span><br><span class="line">    tcp-check expect string role:master <span class="comment"># 轮询 master节点</span></span><br><span class="line">    tcp-check send QUIT\r\n</span><br><span class="line">    tcp-check expect string +OK</span><br><span class="line">    server redis1 <span class="number">192.168.2.213:6379</span> check inter <span class="number">1s</span></span><br><span class="line">    server redis2 <span class="number">192.168.2.214:6379</span> check inter <span class="number">1s</span></span><br><span class="line">    server redis3 <span class="number">192.168.2.215:6379</span> check inter <span class="number">1s</span></span><br></pre></td></tr></table></figure>

<p>文件目录如下：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203105159275.png" alt="image-20230203105159275"></p>
<h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml redis-sentinel</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230203105502431.png" alt="image-20230203105502431"></p>
<h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service ls | grep redis-sentinel</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230203105609286.png" alt="image-20230203105609286"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203110439408.png" alt="image-20230203110439408"></p>
<h5 id="服务日志"><a href="#服务日志" class="headerlink" title="服务日志"></a>服务日志</h5><p>redis:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1:S 03 Feb 2023 09:07:22.284 * MASTER &lt;-&gt; REPLICA sync: receiving 214 bytes from master to disk</span><br><span class="line">1:S 03 Feb 2023 09:07:22.284 * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line">1:S 03 Feb 2023 09:07:22.284 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * Loading RDB produced by version 6.2.4</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * RDB age 0 seconds</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * RDB memory usage when created 1.85 Mb</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">1:S 03 Feb 2023 09:07:22.286 * Background append only file rewriting started by pid 13</span><br><span class="line">1:S 03 Feb 2023 09:07:22.308 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">13:C 03 Feb 2023 09:07:22.308 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">13:C 03 Feb 2023 09:07:22.308 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">13:C 03 Feb 2023 09:07:22.309 * SYNC append only file rewrite performed</span><br><span class="line">13:C 03 Feb 2023 09:07:22.309 * AOF rewrite: 4 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 09:07:22.348 * Background AOF rewrite terminated with success</span><br><span class="line">1:S 03 Feb 2023 09:07:22.348 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">1:S 03 Feb 2023 09:07:22.348 * Background AOF rewrite finished successfully</span><br><span class="line">1:S 03 Feb 2023 10:07:14.007 * 1 changes in 3600 seconds. Saving...</span><br><span class="line">1:S 03 Feb 2023 10:07:14.009 * Background saving started by pid 15</span><br><span class="line">15:C 03 Feb 2023 10:07:14.012 * DB saved on disk</span><br><span class="line">15:C 03 Feb 2023 10:07:14.013 * RDB: 4 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 10:07:14.109 * Background saving terminated with success</span><br></pre></td></tr></table></figure>

<p>sentinel:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1:X 03 Feb 2023 09:07:24.787 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:X 03 Feb 2023 09:07:24.787 # Redis version=6.2.4, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">1:X 03 Feb 2023 09:07:24.787 # Configuration loaded</span><br><span class="line">1:X 03 Feb 2023 09:07:24.788 * monotonic clock: POSIX clock_gettime</span><br><span class="line">1:X 03 Feb 2023 09:07:24.788 * Running mode=sentinel, port=26379.</span><br><span class="line">1:X 03 Feb 2023 09:07:24.788 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">1:X 03 Feb 2023 09:07:24.789 # Sentinel ID is 49d6ef4a1346ec4a05bec6a6387e6fd66c2a177e</span><br><span class="line">1:X 03 Feb 2023 09:07:24.789 # +monitor master mymaster 192.168.2.12 6379 quorum 2</span><br><span class="line">1:X 03 Feb 2023 09:09:48.027 # +sdown sentinel 32c2d1980d2d054c811f474140f17bb60c1a6dde 192.168.2.214 26379 @ mymaster 192.168.2.215 6379</span><br><span class="line">1:X 03 Feb 2023 09:09:48.099 # +sdown slave 192.168.2.214:6379 192.168.2.11 6379 @ mymaster 192.168.2.12 6379</span><br><span class="line">1:X 03 Feb 2023 09:11:54.402 * +reboot slave 192.168.2.214:6379 192.168.2.11 6379 @ mymaster 192.168.2.12 6379</span><br><span class="line">1:X 03 Feb 2023 09:11:54.502 # -sdown slave 192.168.2.214:6379 192.168.2.11 6379 @ mymaster 192.168.2.12 6379</span><br><span class="line">1:X 03 Feb 2023 09:11:54.502 # -sdown sentinel 32c2d1980d2d054c811f474140f17bb60c1a6dde 192.168.2.11 26379 @ mymaster 192.168.2.215 6379</span><br></pre></td></tr></table></figure>

<p>haproxy:</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[NOTICE]   (1) : New worker <span class="params">#1</span> (8) forked</span><br><span class="line">Connect from 10.0.0.2:3768 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3767 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3769 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis1 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 2 active and 0 backup servers left. 2 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">[WARNING]  (8) : Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis1 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 2 active and 0 backup servers left. 2 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">[WARNING]  (8) : Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis2 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 1 active and 0 backup servers left. 1 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis2 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 1 active and 0 backup servers left. 1 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">Connect from 10.0.0.2:3765 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3764 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3770 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3771 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3766 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3772 to 10.0.0.249:16379 (redis16379/TCP)</span><br></pre></td></tr></table></figure>

<h5 id="代理面板"><a href="#代理面板" class="headerlink" title="代理面板"></a>代理面板</h5><p>访问<code>IP:8080/haproxy-status</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112402342.png" alt="image-20230203112402342"></p>
<h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stack rm redis-sentinel</span><br></pre></td></tr></table></figure>

<h2 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h2><p>使用redis连接工具测试连接</p>
<h3 id="连接到Redis单实例"><a href="#连接到Redis单实例" class="headerlink" title="连接到Redis单实例"></a>连接到Redis单实例</h3><p>正常连接<code>IP:6379</code>即可</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203110812313.png" alt="image-20230203110812313"></p>
<h3 id="连接到Redis哨兵"><a href="#连接到Redis哨兵" class="headerlink" title="连接到Redis哨兵"></a>连接到Redis哨兵</h3><p>连接到<code>IP:26379</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203110947077.png" alt="image-20230203110947077"></p>
<h3 id="连接到Haproxy代理"><a href="#连接到Haproxy代理" class="headerlink" title="连接到Haproxy代理"></a>连接到Haproxy代理</h3><p>连接到<code>haproxy:16379</code>端口</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203111030197.png" alt="image-20230203111030197"></p>
<h3 id="测试数据同步"><a href="#测试数据同步" class="headerlink" title="测试数据同步"></a>测试数据同步</h3><p>通过Haproxy添加新的键值：name:jonty</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203111202530.png" alt="image-20230203111202530"></p>
<p>新增成功</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203111313941.png" alt="image-20230203111313941"></p>
<p>查看哨兵连接：</p>
<p>可以看到已经同步成功</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203111344072.png" alt="image-20230203111344072"></p>
<p>查看同步日志</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1:S 03 Feb 2023 11:11:55.079 * 1 changes in 3600 seconds. Saving...</span><br><span class="line">1:S 03 Feb 2023 11:11:55.081 * Background saving started by pid 16</span><br><span class="line">16:C 03 Feb 2023 11:11:55.083 * DB saved on disk</span><br><span class="line">16:C 03 Feb 2023 11:11:55.084 * RDB: 4 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 11:11:55.181 * Background saving terminated with success</span><br></pre></td></tr></table></figure>



<h2 id="容灾测试"><a href="#容灾测试" class="headerlink" title="容灾测试"></a>容灾测试</h2><p>将214也就是<code>worker1</code>停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">systemctl stop docker.socket</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20230203111954001.png" alt="image-20230203111954001"></p>
<p>可以看到<code>worker1</code>节点状态为<code>down</code></p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">[root@manager redis-swarm]<span class="params">#</span> docker node ls</span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">eyufo1vxn0m5xksslcns6gdau *   manager    Ready     Active         Reachable        20.10.23</span><br><span class="line">xki7hv7tw44394vqyhidco14w     worker1    Down      Active         Unreachable      20.10.23</span><br><span class="line">xv4fw7yzwg5iwypea65z9n9yn     worker2    Ready     Active         Leader           20.10.23</span><br></pre></td></tr></table></figure>

<p>214实例已无法访问</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112527481.png" alt="image-20230203112527481"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112729076.png" alt="image-20230203112729076"></p>
<p>连接HaProxy，Redis服务正常</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112443957.png" alt="image-20230203112443957"></p>
<p>添加新的键值</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112635960.png" alt="image-20230203112635960"></p>
<p>并重新恢复worker1，查看数据是否同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@worker1 ~]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@worker1 ~]<span class="comment"># systemctl start docker.socket</span></span><br></pre></td></tr></table></figure>

<p>可以看到<code>redis2</code>服务已经恢复</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112739424.png" alt="image-20230203112739424"></p>
<p>查看<code>redis2</code>日志，可以看到已经同步成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1:S 03 Feb 2023 11:26:55.825 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">1:S 03 Feb 2023 11:26:55.825 * Background append only file rewriting started by pid 13</span><br><span class="line">1:S 03 Feb 2023 11:26:55.850 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">13:C 03 Feb 2023 11:26:55.850 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">13:C 03 Feb 2023 11:26:55.850 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">13:C 03 Feb 2023 11:26:55.850 * SYNC append only file rewrite performed</span><br><span class="line">13:C 03 Feb 2023 11:26:55.851 * AOF rewrite: 6 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 11:26:55.927 * Background AOF rewrite terminated with success</span><br><span class="line">1:S 03 Feb 2023 11:26:55.927 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">1:S 03 Feb 2023 11:26:55.927 * Background AOF rewrite finished successfully</span><br></pre></td></tr></table></figure>

<p>使用连接工具查看，没问题~</p>
<p><img data-src="https://cdn.jonty.top/img/image-20230203112848725.png" alt="image-20230203112848725"></p>
<p><img data-src="https://cdn.jonty.top/img/bar2.gif"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Swarm</tag>
        <tag>Redis</tag>
        <tag>Redis Cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Swarm 节点管理</title>
    <url>/2022/12/01/docker-swarm-manage-nodes/</url>
    <content><![CDATA[<h1 id="Docker-Swarm节点操作"><a href="#Docker-Swarm节点操作" class="headerlink" title="Docker Swarm节点操作"></a>Docker Swarm节点操作</h1><h2 id="列出节点"><a href="#列出节点" class="headerlink" title="列出节点"></a>列出节点</h2><p>从manager节点中运行<code>docker node ls</code>查看节点列表</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">ls</span></span><br><span class="line"></span><br><span class="line">ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line"><span class="number">46</span>aqrk4e473hjbt745z53cr3t    <span class="keyword">node</span><span class="title">-5</span>    Ready   Active        Reachable</span><br><span class="line"><span class="number">61</span>pi3d91s0w3b90ijw3deeb2q    <span class="keyword">node</span><span class="title">-4</span>    Ready   Active        Reachable</span><br><span class="line">a5b2m3oghd48m8eu391pefq5u    <span class="keyword">node</span><span class="title">-3</span>    Ready   Active</span><br><span class="line">e7p8btxeu3ioshyuj6lxiv6g0    <span class="keyword">node</span><span class="title">-2</span>    Ready   Active</span><br><span class="line">ehkv3bcimagdese79dn78otj5 *  <span class="keyword">node</span><span class="title">-1</span>    Ready   Active        Leader</span><br></pre></td></tr></table></figure>

<p>AVAILABILITY：是否可以分配任务给节点</p>
<ul>
<li>Active：调度器可以将任务分配给节点。</li>
<li>Pause：调度器不给节点分配新任务，但现有的任务仍在运行。</li>
<li>Drain：调度器不给该节点分配新的任务。调度器会关闭现有的任务，并将它们安排在一个可用的节点上。</li>
</ul>
<p>MANAGER STATUS：显示节点参与Raft共识的情况</p>
<ul>
<li>worker&lt;小弟&gt;：无值表示一个不参与Swarm管理的工作节点。</li>
<li>Leader&lt;头目&gt;：表示该节点是主要的管理节点，为集群做出所有的管理和协调决定。</li>
<li>Reachable&lt;被选举者&gt;：表示该节点是参与Raft共识法定人数的管理节点。如果管理节点变得不可用，该节点有资格当选为新的领导者。</li>
<li>Unavailable&lt;不可用&gt;：意味着该节点是一个无法与其他管理器进行通信的管理器。如果一个管理器节点变得不可用，你应该加入一个新的管理器节点到集群中，或者提升一个工作节点为管理器。</li>
</ul>
<p>有关群管理的更多信息，请参阅<a href="https://docs.docker.com/engine/swarm/admin_guide/">管理和维护大量 Docker 引擎|码头工人文档</a></p>
<h2 id="查看单个节点"><a href="#查看单个节点" class="headerlink" title="查看单个节点"></a>查看单个节点</h2><p>你可以在管理器节点上运行，查看单个节点信息，输出格式默认为JSON，可以通过标志来打印可读格式的结果。</p>
<p>例如：<code>docker node inspect &lt;NODE-ID&gt; --pretty</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">node</span> <span class="string">inspect</span> <span class="string">self</span> <span class="string">--pretty</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ID:</span>                     <span class="string">ehkv3bcimagdese79dn78otj5</span></span><br><span class="line"><span class="attr">Hostname:</span>               <span class="string">node-1</span></span><br><span class="line"><span class="attr">Joined at:</span>              <span class="number">2016-06-16 22:52:44.9910662</span> <span class="string">+0000</span> <span class="string">utc</span></span><br><span class="line"><span class="attr">Status:</span></span><br><span class="line"> <span class="attr">State:</span>                 <span class="string">Ready</span></span><br><span class="line"> <span class="attr">Availability:</span>          <span class="string">Active</span></span><br><span class="line"><span class="attr">Manager Status:</span></span><br><span class="line"> <span class="attr">Address:</span>               <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span><span class="string">:2377</span></span><br><span class="line"> <span class="attr">Raft Status:</span>           <span class="string">Reachable</span></span><br><span class="line"> <span class="attr">Leader:</span>                <span class="literal">Yes</span></span><br><span class="line"><span class="attr">Platform:</span></span><br><span class="line"> <span class="attr">Operating System:</span>      <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span>          <span class="string">x86_64</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line"> <span class="attr">CPUs:</span>                  <span class="number">2</span></span><br><span class="line"> <span class="attr">Memory:</span>                <span class="number">1.954</span> <span class="string">GiB</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Network:</span>              <span class="string">overlay,</span> <span class="string">host,</span> <span class="string">bridge,</span> <span class="string">overlay,</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">Volume:</span>               <span class="string">local</span></span><br><span class="line"><span class="attr">Engine Version:</span>         <span class="number">1.12</span><span class="number">.0</span><span class="string">-dev</span></span><br></pre></td></tr></table></figure>

<h2 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h2><h3 id="更改节点可用性"><a href="#更改节点可用性" class="headerlink" title="更改节点可用性"></a>更改节点可用性</h3><p>通过更改节点可用性，可以：</p>
<ul>
<li>清空管理节点，以便仅执行集群管理任务，并且不可用于任务分配</li>
<li>排空节点，以便将其脱机维护</li>
<li>暂停节点，使其无法接收新任务</li>
<li>恢复不可用或暂停的节点可用状态</li>
</ul>
<p>例如，要将一个管理节点改为可用性改为：Drain</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">update</span> --availability drain <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">node</span><span class="title">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="删除或添加标签"><a href="#删除或添加标签" class="headerlink" title="删除或添加标签"></a>删除或添加标签</h3><p>节点标签提供了一种灵活的节点组织方法，可以在服务约束中使用节点标签。</p>
<p>当创建一个服务时，应用约束来限制调度器为服务分配任务的节点。</p>
<p>在管理器节点上运行，向节点添加标签元数据。标签支持单个或1对</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">docker node <span class="meta">update</span> --<span class="meta">label</span>-<span class="meta">add</span>--<span class="meta">label</span>-<span class="meta">add</span>&lt;<span class="meta">key</span>&gt;&lt;<span class="meta">key</span>&gt;=&lt;value&gt;</span><br></pre></td></tr></table></figure>

<p>使用<code>--label-add</code>给节点添加标签</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">update</span> --label-add foo --label-add <span class="attr">bar=</span>baz <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">node</span><span class="title">-1</span></span><br></pre></td></tr></table></figure>

<p>使用docker节点更新为节点设置的标签仅适用于集群中的节点实体。不要将它们与<code>dockerd</code>的<code>docker</code>守护程序标签混淆。</p>
<p>因此，节点标签可用于将关键任务限制在满足某些要求的节点上。例如，只在应该运行特殊工作负载的机器上安排，如符合PCI-SS标准的机器。</p>
<p>受损的工作线程无法破坏这些特殊工作负载，因为它无法更改节点标签。</p>
<p>然而，引擎标签仍然是有用的，因为一些不影响容器安全协调的功能可能最好以分散的方式设置。例如，一个引擎可以有一个标签来表明它有某种类型的磁盘设备，这可能与安全没有直接关系。这些标签更容易被集群协调器 “信任”。</p>
<p>有关服务约束的详细信息，请参阅<a href="https://docs.docker.com/engine/reference/commandline/service_create/">CLI 参考</a>。<code>docker service create</code></p>
<h2 id="节点降级或升级"><a href="#节点降级或升级" class="headerlink" title="节点降级或升级"></a>节点降级或升级</h2><p>可以将一个工作节点提升为管理角色，当一个管理节点变得不可用，或者当一个管理脱机维护时，这很有用。</p>
<p>同样地，可以将一个管理节点降级为工作节点。</p>
<blockquote>
<p>注意：无论出于什么原因要提升或降级一个节点，都必须始终保持集群管理节点的法定数量</p>
</blockquote>
<p>要升级一个节点或一组节点：<code>docker node promote</code></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">promote</span> <span class="keyword">node</span><span class="title">-3</span> <span class="keyword">node</span><span class="title">-2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Node</span> <span class="title">node-3</span> promoted to a manager <span class="keyword">in</span> the swarm.</span><br><span class="line"><span class="keyword">Node</span> <span class="title">node-2</span> promoted to a manager <span class="keyword">in</span> the swarm.</span><br></pre></td></tr></table></figure>

<p>要降级一个节点或一组节点：<code>docker node demote</code></p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">demote</span> <span class="keyword">node</span><span class="title">-3</span> <span class="keyword">node</span><span class="title">-2</span></span><br><span class="line"></span><br><span class="line">Manager <span class="keyword">node</span><span class="title">-3</span> demoted <span class="keyword">in</span> the swarm.</span><br><span class="line">Manager <span class="keyword">node</span><span class="title">-2</span> demoted <span class="keyword">in</span> the swarm.</span><br></pre></td></tr></table></figure>

<p>等同于以下命令的快捷指令</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">promote</span>`：`docker <span class="keyword">node</span> <span class="title">update</span> --<span class="keyword">role</span> <span class="title">manager</span></span><br><span class="line">docker <span class="keyword">node</span> <span class="title">demote</span>`：`docker <span class="keyword">node</span> <span class="title">update</span> --<span class="keyword">role</span> <span class="title">worker</span></span><br></pre></td></tr></table></figure>

<h2 id="离开集群"><a href="#离开集群" class="headerlink" title="离开集群"></a>离开集群</h2><p>在节点上运行<code>docker swarm leave</code>以将其从集群中删除。</p>
<p>例如，要将集群留在工作节点上：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker swarm leave</span><br><span class="line"></span><br><span class="line"><span class="keyword">Node</span> <span class="title">left</span> the swarm.</span><br></pre></td></tr></table></figure>

<p>当节点离开群集时，Docker引擎停止以群集模式运行，编排器不再将任务调度到节点。</p>
<p>如果该节点是管理器节点，则会收到有关维护仲裁的警告。要覆盖警告，请使用<code>--force</code>。如果最后一个管理器节点离开群，则群将变得不可用，需要采取灾难恢复措施。</p>
<p>有关维护法定人数和灾难恢复的信息，请参阅Swarm管理指南。 节点离开群集后，可以在管理器节点上运行<code>docker node rm</code>命令，从节点列表中删除该节点。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">rm</span> <span class="keyword">node</span><span class="title">-2</span></span><br></pre></td></tr></table></figure>

<h2 id="解散集群"><a href="#解散集群" class="headerlink" title="解散集群"></a>解散集群</h2><ol>
<li>排空节点上的集群容器</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> node update --availabiltity drain g<span class="number">36</span>lvv<span class="number">23</span>ypjd<span class="number">8</span>v<span class="number">7</span>ovlst<span class="number">2</span>n<span class="number">3</span>yt</span><br></pre></td></tr></table></figure>

<ol>
<li>主动离开集群，让节点处于<code>down</code>状态，才能删除</li>
</ol>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker swarm leave</span></span><br></pre></td></tr></table></figure>

<ol>
<li>删除指定节点（管理节点操作）</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> node rm g<span class="number">36</span>lvv<span class="number">23</span>ypjd<span class="number">8</span>v<span class="number">7</span>ovlst<span class="number">2</span>n<span class="number">3</span>yt</span><br></pre></td></tr></table></figure>

<ol>
<li>管理节点、解散集群</li>
</ol>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">docker swarm <span class="literal">leave</span> --<span class="literal">force</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Docker Swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署SQL Server集群</title>
    <url>/2022/10/20/sql-server-2019-alwayson-availability-group-on-docker-containers/</url>
    <content><![CDATA[<div class="note info"><p>SQL Server在2016年开始支持Linux。随着2017和2019版本的发布，它开始支持Linux和容器平台上的HA/DR、Kubernetes和大数据集群解决方案。</p>
<p>在本文中，我们将在3个节点的Docker容器上安装SQL Server 2019，并创建AlwaysOn可用性组。</p>
<p>我们的目标是使用单个配置文件快速准备好环境。</p>
<p>因此，开发人员或测试团队可以快速执行诸如兼容性、连通性、代码功能等测试。</p>
<p>重要提示：<strong>不建议在生产环境中执行操作</strong>。</p>
</div>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p><a href="../install-docker-on-centos/">快速安装Docker</a></p>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><table>
<thead>
<tr>
<th>主机名</th>
<th>IP</th>
<th>端口</th>
<th>角色</th>
</tr>
</thead>
<tbody><tr>
<td>sqlNode1</td>
<td>宿主机IP</td>
<td>1501:1433</td>
<td>主</td>
</tr>
<tr>
<td>sqlNode2</td>
<td>宿主机IP</td>
<td>1502:1433</td>
<td>副</td>
</tr>
<tr>
<td>sqlNode3</td>
<td>宿主机IP</td>
<td>1503:1433</td>
<td>副</td>
</tr>
</tbody></table>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>环境准备完毕后，开始正式的配置安装。</p>
<h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>通过<code>docker-compose</code>文件来创建、配置3个容器，具体内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>插入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  db1:</span><br><span class="line">    container_name: sqlNode1</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode1</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1501:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode2.labl.local: <span class="string">&quot;172.16.238.22&quot;</span></span><br><span class="line">      sqlNode3.labl.local: <span class="string">&quot;172.16.238.23&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.21</span><br><span class="line"> </span><br><span class="line">  db2:</span><br><span class="line">    container_name: sqlNode2</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode2</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1502:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode1.lab.local: <span class="string">&quot;172.16.238.21&quot;</span></span><br><span class="line">      sqlNode3.lab.local: <span class="string">&quot;172.16.238.23&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.22</span><br><span class="line"> </span><br><span class="line">  db3:</span><br><span class="line">    container_name: sqlNode3</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode3</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1503:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode1.lab.local: <span class="string">&quot;172.16.238.21&quot;</span></span><br><span class="line">      sqlNode2.lab.local: <span class="string">&quot;172.16.238.22&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.23</span><br><span class="line"> </span><br><span class="line">networks:</span><br><span class="line">    internal:</span><br><span class="line">      ipam:</span><br><span class="line">            driver: default</span><br><span class="line">            config:</span><br><span class="line">                - subnet: 172.16.238.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>然后通过<code>docker-compose up -d</code>命令启动三个容器，其中<code>-d</code>表示在后台运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20221020160443178.png" alt="image-20221020160443178"></p>
<p>查看容器状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@acme-1 ~]<span class="comment"># docker compose ps</span></span><br><span class="line">NAME                COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">sqlNode1            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db1                 running             0.0.0.0:1501-&gt;1433/tcp, :::1501-&gt;1433/tcp</span><br><span class="line">sqlNode2            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db2                 running             0.0.0.0:1502-&gt;1433/tcp, :::1502-&gt;1433/tcp</span><br><span class="line">sqlNode3            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db3                 running             0.0.0.0:1503-&gt;1433/tcp, :::1503-&gt;1433/tcp</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>通过宿主机的外网IP+端口连接相应的数据库，如下：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20221020161204446.png" alt="image-20221020161204446"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20221020161232090.png" alt="image-20221020161232090"></p>
<h3 id="配置互信"><a href="#配置互信" class="headerlink" title="配置互信"></a>配置互信</h3><h4 id="主库-生成密钥"><a href="#主库-生成密钥" class="headerlink" title="主库-生成密钥"></a>主库-生成密钥</h4><p>连接到主库，也就是节点1，端口是<code>1501</code></p>
<p>将证书和私钥提取到<code>/tmp/dbm_certificate.cer</code>和<code>/tmp/dbm_certificate.pvk</code>文件中</p>
<p>将文件复制到其他节点，并根据以下文件创建主密钥和证书：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE master</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> LOGIN dbm_login <span class="keyword">WITH</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbm_user <span class="keyword">FOR</span> LOGIN dbm_login;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line">go</span><br><span class="line"><span class="keyword">CREATE</span> CERTIFICATE dbm_certificate <span class="keyword">WITH</span> SUBJECT <span class="operator">=</span> <span class="string">&#x27;dbm&#x27;</span>;</span><br><span class="line">BACKUP CERTIFICATE dbm_certificate</span><br><span class="line"><span class="keyword">TO</span> FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.cer&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> PRIVATE KEY (</span><br><span class="line">        FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.pvk&#x27;</span>,</span><br><span class="line">        ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span></span><br><span class="line">    );</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>将文件拷贝到其他两个节点：</p>
<p>在服务器中执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp sqlNode1:/tmp/dbm_certificate.cer .</span><br><span class="line">docker cp sqlNode1:/tmp/dbm_certificate.pvk .</span><br><span class="line">docker cp dbm_certificate.cer sqlNode2:/tmp/</span><br><span class="line">docker cp dbm_certificate.pvk sqlNode2:/tmp/</span><br><span class="line">docker cp dbm_certificate.cer sqlNode3:/tmp/</span><br><span class="line">docker cp dbm_certificate.pvk sqlNode3:/tmp/</span><br></pre></td></tr></table></figure>

<h4 id="从库-导入密钥"><a href="#从库-导入密钥" class="headerlink" title="从库-导入密钥"></a>从库-导入密钥</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> LOGIN dbm_login <span class="keyword">WITH</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbm_user <span class="keyword">FOR</span> LOGIN dbm_login;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> CERTIFICATE dbm_certificate   </span><br><span class="line">    <span class="keyword">AUTHORIZATION</span> dbm_user</span><br><span class="line">    <span class="keyword">FROM</span> FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.cer&#x27;</span></span><br><span class="line">    <span class="keyword">WITH</span> PRIVATE KEY (</span><br><span class="line">    FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.pvk&#x27;</span>,</span><br><span class="line">    DECRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span></span><br><span class="line">);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="监听和重启"><a href="#监听和重启" class="headerlink" title="监听和重启"></a>监听和重启</h3><p>最后在所有节点执行以下命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ENDPOINT [Hadr_endpoint]</span><br><span class="line">    <span class="keyword">AS</span> TCP (LISTENER_IP <span class="operator">=</span> (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>), LISTENER_PORT <span class="operator">=</span> <span class="number">5022</span>)</span><br><span class="line">    <span class="keyword">FOR</span> DATA_MIRRORING (</span><br><span class="line">        ROLE <span class="operator">=</span> <span class="keyword">ALL</span>,</span><br><span class="line">        AUTHENTICATION <span class="operator">=</span> CERTIFICATE dbm_certificate,</span><br><span class="line">        ENCRYPTION <span class="operator">=</span> REQUIRED ALGORITHM AES</span><br><span class="line">        );</span><br><span class="line"><span class="keyword">ALTER</span> ENDPOINT [Hadr_endpoint] STATE <span class="operator">=</span> STARTED;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">ON</span> ENDPOINT::[Hadr_endpoint] <span class="keyword">TO</span> [dbm_login];</span><br></pre></td></tr></table></figure>

<p>启用开机自启动ALWAYON，在所有节点执行以下命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> EVENT SESSION  AlwaysOn_health <span class="keyword">ON</span> SERVER <span class="keyword">WITH</span> (STARTUP_STATE<span class="operator">=</span><span class="keyword">ON</span>);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<h3 id="创建高可用组"><a href="#创建高可用组" class="headerlink" title="创建高可用组"></a>创建高可用组</h3><p>行以下脚本在主节点中创建一个可用性组。 </p>
<blockquote>
<p>请注意，选择CLUSTER_TYPE = NONE选项是因为它是在没有诸如Pacemaker或Windows Server故障转移群集之类的群集管理平台的情况下安装的。</p>
<p>如果要在Linux上安装AlwaysOn AG，则应为Pacemaker选择CLUSTER_TYPE = EXTERNAL：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> AVAILABILITY <span class="keyword">GROUP</span> [AG1]</span><br><span class="line">        <span class="keyword">WITH</span> (CLUSTER_TYPE <span class="operator">=</span> <span class="keyword">NONE</span>)</span><br><span class="line">        <span class="keyword">FOR</span> REPLICA <span class="keyword">ON</span></span><br><span class="line">        N<span class="string">&#x27;sqlNode1&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode1:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                ),</span><br><span class="line">        N<span class="string">&#x27;sqlNode2&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode2:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                ),</span><br><span class="line">        N<span class="string">&#x27;sqlNode3&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode3:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                );</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>在从库中执行以下命令，将从库加入到AG组中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] <span class="keyword">JOIN</span> <span class="keyword">WITH</span> (CLUSTER_TYPE <span class="operator">=</span> <span class="keyword">NONE</span>);</span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> DATABASE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>至此在Docker容器中安装SQL Server Alwayson集群已经完成了</p>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>注意：当指定<code>CLUSTER_TYPE = NONE</code>创建可用组时无法自动故障转移，在执行故障转移时需执行以下命令，并检查要执行故障转移的辅助节点的<strong>最后提交时间</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] FORCE_FAILOVER_ALLOW_DATA_LOSS</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在主库上创建一个数据库，并加入到可用组AG中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE agtestdb;</span><br><span class="line">GO</span><br><span class="line">ALTER DATABASE agtestdb SET RECOVERY FULL;</span><br><span class="line">GO</span><br><span class="line">BACKUP DATABASE agtestdb TO DISK = <span class="string">&#x27;/var/opt/mssql/data/agtestdb.bak&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line">ALTER AVAILABILITY GROUP [ag1] ADD DATABASE [agtestdb];</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文档：</p>
<p><a href="https://learn.microsoft.com/zh-cn/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15">为 Linux 上的 SQL Server 配置环境变量 - SQL Server | Microsoft Learn</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>SQL Server</tag>
        <tag>AlwaysOn</tag>
        <tag>HA高可用</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS中快速安装Docker</title>
    <url>/2022/10/20/install-docker-on-centos/</url>
    <content><![CDATA[<h2 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.daocloud.io/docker | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure>

<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="设置yum仓库"><a href="#设置yum仓库" class="headerlink" title="设置yum仓库"></a>设置yum仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker引擎"><a href="#安装Docker引擎" class="headerlink" title="安装Docker引擎"></a>安装Docker引擎</h3><blockquote>
<p>注意：docker-compose-plugin即安装docker-compose，不需要再进行手动安装</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>

<h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><p>停止Docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop docker</span><br><span class="line">sudo systemctl stop docker.socket</span><br></pre></td></tr></table></figure>

<p>卸载 Docker Engine、CLI、Containerd 和 Docker Compose 软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras</span><br></pre></td></tr></table></figure>

<p>清除镜像、容器、数据卷或自定义配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>二十行代码，搞懂 Observable</title>
    <url>/2022/09/15/implement-observable/</url>
    <content><![CDATA[<p>上帝说，要有代码，于是沐浴焚香，大笔一挥，一个 Hello World</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可是上帝对此并不高兴，他只想在需要的时候，才展示结果，于是我们把它放进了一个名为  <code>callback</code> 的<strong>函数</strong>盒子里：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>放在盒子里的程序不会自己执行，只有我们调用它的时候，才会执行，满足了上帝的需求，我们也学到一个知识点：</p>
<blockquote>
<p>函数可以作为延迟代码执行的一种手段</p>
</blockquote>
<h3 id="演员就位"><a href="#演员就位" class="headerlink" title="演员就位"></a>演员就位</h3><p>想象一个场景，我们需要一个提醒器，提醒我们该喝水了，于是可以像下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">reminder() <span class="comment">// Time to drink water!</span></span><br></pre></td></tr></table></figure>

<p>看起来可行，但是我们更希望它只负责提醒，至于提醒之后做什么（行 1），由自己来决定，为了实现这个目的，可以将具体逻辑作为函数参数，传入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">&#125;</span><br><span class="line">reminder(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>)) <span class="comment">// Time to drink water!</span></span><br></pre></td></tr></table></figure>

<p>代码效果相同，但是这里我们可以自由地改变提醒事件发生之后的行为，传入不同的函数参数即可。</p>
<p>下面来玩儿一下 <code>reminder</code> 吧：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">reminder(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>上面的代码会先立即进行提醒，然后隔一秒钟再次提醒。</p>
<p>现实不总是那么尽如人意，我们的 <code>reminder</code> 可能会出错，我们也期望知道这一系列的提醒什么时候结束，但是现在 <code>reminder</code> 只有一个 <code>cb</code> 参数，已经满足不了我们了。最简单的方式是传入三个参数以供使用：</p>
<ul>
<li><p>一个在提醒事件发生时，参数命名为 next</p>
</li>
<li><p>一个是错误发生时，命名为 error</p>
</li>
<li><p>一个是提醒结束时，命名为 complete</p>
</li>
</ul>
<p>如果我们使用一个对象来包裹这三个参数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb.next(<span class="number">1</span>)</span><br><span class="line">  cb.complete()</span><br><span class="line">&#125;</span><br><span class="line">reminder(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Time to drink water! 1</span></span><br><span class="line"><span class="comment">// Done</span></span><br></pre></td></tr></table></figure>

<p>我们来把 <code>reminder</code> 放进一个 <code>Reminder</code> 类里面，并重命名为 <code>remind</code> 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reminder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">remind</span>(<span class="params">cb</span>)</span> &#123;</span><br><span class="line">    cb.next(<span class="number">1</span>)</span><br><span class="line">    cb.complete()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reminder = <span class="keyword">new</span> Reminder()</span><br><span class="line"></span><br><span class="line">reminder.remind(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>问题又来了，我们期望 <code>reminder</code> 的逻辑是可以动态注入的，一个解决方法是将函数体的内容通过构造参数传入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reminder</span> </span>&#123;</span><br><span class="line">  constructor(behavior) &#123;</span><br><span class="line">    <span class="keyword">this</span>.behavior = behavior</span><br><span class="line">  &#125;</span><br><span class="line">  remind(cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.behavior(cb)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reminder = <span class="keyword">new</span> Reminder(cb =&gt; &#123;</span><br><span class="line">  cb.next(<span class="number">1</span>)</span><br><span class="line">  cb.complete()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">reminder.remind(&#123;</span><br><span class="line">  next: v =&gt; console.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  error: e =&gt; console.log(e),</span><br><span class="line">  complete: () =&gt; console.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们来做一些重命名</p>
<ul>
<li><p><code>Reminder</code> → <code>Observable</code></p>
</li>
<li><p><code>remind</code> → <code>subscribe</code></p>
</li>
<li><p><code>cb</code> → <code>observer</code></p>
</li>
<li><p><code>reminder</code> → <code>obs$</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">behavior</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.behavior = behavior</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.behavior(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obs$ = <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="number">1</span>)</span><br><span class="line">  observer.complete()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line">obs$.subscribe(observer)</span><br></pre></td></tr></table></figure>

<p>至此，20 行代码，甚至还包含一个文件末尾空行，我们实现了一个 <code>Observable</code></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>通过一系列的需求变更和拥抱变化，我们将最原始的 Hello World 重构成了一个具有基本功能的 <code>Observable</code>。再次观察和思考上面的代码，除了 <code>Observable</code> 的定义之外，存在三个语句：</p>
<ul>
<li><p><code>obs$</code> 的定义，最重要的是定义了被观察者的行为</p>
</li>
<li><p><code>observer</code> 的定义，定义了在所观察的事件发生时候的行为</p>
</li>
<li><p><code>subscribe</code> 的调用，连接了 <code>Observable</code> 和 <code>observer</code>，如果没有这个连接，什么都不会发生</p>
</li>
</ul>
<p>这三个语句职责单一且分明，提供了一种非常好的代码组织方式。</p>
<h4 id="问题-1：Observable-是异步的吗？"><a href="#问题-1：Observable-是异步的吗？" class="headerlink" title="问题 1：Observable 是异步的吗？"></a>问题 1：<code>Observable</code> 是异步的吗？</h4><p>看一下其内部实现，这完全取决于它的实现是否是异步调用了 <code>next</code>、<code>error</code> 和 <code>complete</code>。</p>
<h4 id="问题-2-RxJS-和-Observable-的关系"><a href="#问题-2-RxJS-和-Observable-的关系" class="headerlink" title="问题 2: RxJS 和 Observable 的关系"></a>问题 2: RxJS 和 Observable 的关系</h4><p>RXJS 在 <code>Observable</code> 的基础上，提供了大量的操作符，来帮助实现复杂的 <code>Observable</code> 行为定义。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Observable</tag>
      </tags>
  </entry>
  <entry>
    <title>让泛型的思维扎根在脑海</title>
    <url>/2022/09/14/csharp-generic-review-03/</url>
    <content><![CDATA[<div class="note info"><p>往往一些刚接触C#编程的初学者，对于泛型的认识就是直接跳到对泛型集合的使用上，虽然微软为我们提供了很多内置的泛型类型，但是如果我们只是片面的了解调用方式，这会导致我们对泛型盲目的使用。至于<strong>为什么要使用泛型，什么情况下定义属于自己的泛型，定义泛型又能为程序带来哪些好处。</strong>要理清这些问题，我们就必须深刻理解泛型的本质，形成泛型编程的思维方式。</p>
</div>

<h2 id="需求-开发"><a href="#需求-开发" class="headerlink" title="需求 - 开发"></a>需求 - 开发</h2><p>接下来将基于一个基础示例，然后通过需求不断的演化示例，从而让泛型在关键时刻脱颖而出，以便让我们能够深刻体会泛型的作用。</p>
<p>假设.NET没有为我们提供用于存储数据的集合，而我们需要一个能够用于存储string元素的集合，基于这个情况我们自定义了一个用于存储字符串的集合类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayStr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStr</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">100</span>]; <span class="comment">//初始化存储元素的容量，只是为了演示故将容量定义为固定值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] _items; <span class="comment">//存储元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;   <span class="comment">//元素总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">string</span> item</span>) <span class="comment">//新增元素</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] <span class="comment">//索引</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了验证自定义string集合的可行性，我们对其进行了如下的应用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArraryStr arraryStr = <span class="keyword">new</span> ArraryStr();</span><br><span class="line">arraryStr.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Console.WriteLine(arraryStr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<h2 id="新的需求-重复"><a href="#新的需求-重复" class="headerlink" title="新的需求 - 重复"></a>新的需求 - 重复</h2><p>目前对于创建string类型的集合已经大功告成，而此刻我们又接到了一个新的需求，即我们需要一个集合存储int类型的元素。基于自定义string集合的经验来看，我们可以发现，string集合类型和我们即将要创建的int集合类型的结构和内容几乎是一样的。这就意味着我们可以使用江湖盛行的“复制大法”，将之前的代码复制一遍，然后轻微修改下即可。下面是两个集合类型代码的对比图。</p>
<p><img data-src="https://cdn.jonty.top/img/722260-20220909092205696-401431564.png" alt="对比"></p>
<p>在早年有款热门的游戏叫做“大家来找茬”，该游戏主要玩法就是在两个大致相同的图片中，查找两者之间的细微差异之处。我们使用的“复制大法”，促使我们编写的代码形成了可以用于这个游戏游玩的场景。“对于上面的两个代码截图，你能找出图中不同的地方吗？”</p>
<p>对于软件开发者而言，面对的最主要的敌人就是“变化”，假设后面还会出现N个类型的元素需要我们定义集合来存储，那我们是不是要将相同的代码无穷尽的复制下去？</p>
<p><strong>DRY（Don’t Repeat Yourself，不要重复自己）</strong>，请记住这是作为一名软件开发者编码的原则，“复制大法”很明显的违背了这个原则。</p>
<h2 id="新的问题-安全-amp-性能"><a href="#新的问题-安全-amp-性能" class="headerlink" title="新的问题 - 安全&amp;性能"></a>新的问题 - 安全&amp;性能</h2><p>通过“复制，粘贴”的手段可以很明显的感受到我们在做重复的事情，在重复中我们可以发现：集合存储的类型在增加，但是集合的结构和添加元素的方法都是相同的逻辑。</p>
<p>简单来说就是，<strong>不同类型的处理，其处理逻辑都是类似的。</strong></p>
<p>基于这个特点，为了满足自定义集合能够应对所有类型的存储，我们必须使用一个通用类型来作为代表，此时此刻我们脑海中就能浮现出一句话：</p>
<p><strong>object是一切类型的基类</strong>。</p>
<p>这就意味着我们添加的所有类型，都可以隐式的转换为object类型，从而使得自定义集合可以添加任何类型的元素。让我们来运用这个object类型来试试：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span> &#123; _items = <span class="keyword">new</span> <span class="built_in">object</span>[<span class="number">100</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span>[] _items;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">object</span> item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// END ArraryStr</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList arraryList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        arraryList.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        arraryList.Add(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> name = (<span class="built_in">string</span>)arraryList[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> age = (<span class="built_in">int</span>)arraryList[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// END Main（）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，我们结合了object是一切类型基类的特点，对集合类型进行改造，并成功的使用该方式的集合添加了不同类型的元素。</p>
<p>虽然在使用的角度来看已经完美无缺(可以添加任何类型)，但是获取集合元素进行赋值的时候，还使用了类型强制转换的手段。</p>
<p><strong>这种方式存在很严重的问题，主要包括以下两个方面：</strong></p>
<ol>
<li><strong>类型安全方面</strong>：如果集合的第一个元素是sting类型，但是你客观认为是int类型，于是你在获取时进行了int类型的强制转换，这个时候代码不会提示错误且可以正常编译，那么这就意味着程序在运行时会产生一个你无法预料的类型无效转换的异常。</li>
<li><strong>性能方面</strong>：值类型元素添加到集合时，必然会存在装箱操作；而在获取元素并赋值给一个值类型变量时，又会发生相应的拆箱操作。这种拆箱和装箱的操作，在操作大量元素时会大幅度的损失程序的性能。</li>
</ol>
<p>到目前位置，我们还是没有能创建一个能够存储任何类型的集合，但是我们可以对于上述的示例演变的过程进行一个总结：</p>
<p>对于不同类型有相同处理逻辑的情况，如果一味的复制会导致我们出现重复代码，如果使用object来作为解决重复的方案，会存在类型安全和性能的问题。</p>
<p>至于如何让彻底解决这些问题，这就要说到了本文讲解的主题——<strong>泛型</strong>。</p>
<h2 id="解决问题-代码模板"><a href="#解决问题-代码模板" class="headerlink" title="解决问题 - 代码模板"></a>解决问题 - 代码模板</h2><p>C#中有两种不同的机制来编写跨类型（一个类型代替多个类型）可复用的代码：继承和泛型。</p>
<p>继承的复用性来自于基类，而泛型的复用性是通过带有<code>占位符</code>的<strong>代码模板</strong>类型实现的。</p>
<p>继承实现复用是站在面向对象的角度思考的，而泛型的复用是站在实现特定功能上思考的。</p>
<p>相比于继承，泛型不用遵循里氏替换原则，并且能够<strong>提高类型的安全性，减少类型转换带来的拆箱和装箱</strong>。</p>
<h3 id="怎么样理解泛型？"><a href="#怎么样理解泛型？" class="headerlink" title="怎么样理解泛型？"></a>怎么样理解泛型？</h3><p><strong>泛型本质上相当于一种“代码模板”，可以用一套代码，为不同类型的同一逻辑使用统一的方式实现。</strong></p>
<p>其中“模板”一词的概念需要进行深刻的体会。例如，公司在招聘时会与用人方签订劳动合同，而这个劳动合同的主要内容对于所有人来说几乎都是一样的，只是在极个别的地方有所差异，如薪资、姓名等。所以公司不会为某个人（张三或李四）去特意的制定合同，而是会统一制定一份劳动合同作为模板，将其中针对个人存在差异的部分通过“下划线”进行占位预留，“下划线”的值将在签订合同时由具体的聘用者根据自身情况填写。</p>
<p><img data-src="https://cdn.jonty.top/img/722260-20220909094110950-1186053807.png" alt="合同模板"></p>
<p>对于这种模板方式的使用，公司在制定合同时则不用考虑签订合同的人具体是谁，因为劳动合同(模板)和使用者是分开的，所以公司只用专注于合同的主要内容即可。而我们在实际的编程运用中，使用泛型的目的，其实和公司制定通用的劳动合同模板是一个道理。假设你的公司需要雇佣100名员工时，你不希望为每一个人都制定一个专属的合同吧？假设你的代码中，如果遇到10个类型，它们的操作处理逻辑都一样时，你不希望为这个10个类型写10个处理方式吧？</p>
<p>通过上面的介绍和例子，接下来我们将泛型运用到我们的示例中来，代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span> &#123; _items = <span class="keyword">new</span> T[<span class="number">100</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] _items;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// END ArraryStr</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;<span class="built_in">string</span>&gt; arraryStr = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        arraryStr.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Console.WriteLine(arraryStr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;<span class="built_in">int</span>&gt; arraryInt = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        arraryInt.Add(<span class="number">18</span>);</span><br><span class="line">        Console.WriteLine(arraryInt[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// END Main（）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型参数"><a href="#类型参数" class="headerlink" title="类型参数"></a>类型参数</h3><p>在上面的代码中，我们将集合类型定义为了泛型类，该类型中出现的T属于泛型中的**类型参数(Type Parameter)**。</p>
<p>泛型为了达到通用处理的目的，所以不能将某个具体类型作为处理的目标类型，故而将要处理的类型用<code>T</code>作为一个类型占位符。</p>
<p><code>T</code>并不是真正的数据类型，它更像是泛型使用的类型蓝图，所以在使用时，泛型类型的消费者必须将一个具体类型作为<code>类型参数</code>传递到尖括号内，以此构造一个有明确处理类型的泛型实例。</p>
<p>所以我们在外部使用泛型时不能以：<code>ArraryList&lt;T&gt;list =new ArraryList&lt;T&gt;()</code>、<code>T t=new T()</code>这种方式去实例化泛型类型。</p>
<p>另外，<code>T</code>本身仅仅是类型参数的名称，它只是代表了类型参数的标识而已，这意味着我们可以使用其他字符来为类型参数命名，例如<code>TModel</code>、<code>YModel</code>等</p>
<h3 id="类型替换"><a href="#类型替换" class="headerlink" title="类型替换"></a>类型替换</h3><p>通过类型参数的使用我们可以得知，泛型类型代码在静态阶段没有明确的类型。</p>
<p>那么在程序运行的时候，它又是如何和使用时指定的“类型参数”进行对接的呢？</p>
<p>为了搞清楚这个问题，下面我们来了解下泛型运行时的本质。</p>
<p>我们编写的C#程序在编译后生成的代码，并不是计算机可以直接执行的代码，而是会生成<code>CIL</code>（通用中间语言）代码并包含在程序集中，如果想要生成计算机可执行的代码，则还需要<code>JIT</code>（即时编译器）对<code>CIL</code>代码进行二次编译。</p>
<p>然而泛型类型确认其具体类型的时机，就在<code>JIT</code>进行二次编译时，<code>JIT</code>编译的代码如果包含了泛型的内容，那么<strong>它会根据泛型类型的消费者指定的类型参数，将CIL中泛型代码中的占位符T替换为一个具体的类型，</strong>从而明确当前执行的泛型代码是针对哪个类型来使用的，其中替换的过程是由<code>CLR</code>在运行时进行主导，<code>JIT</code>来实际操作完成的。这个在运行时确认了类型的泛型又被称之为<strong>封闭类型</strong>，反之在运行时确认之前的泛型称为<code>开放类型</code>。</p>
<p><img data-src="https://cdn.jonty.top/img/722260-20220909093118831-581937293.png" alt="运行步骤"></p>
<p>泛型使用占位符在运行时替换具体类型的机制，其实和本文中例举劳动合同模板使用<code>下划线</code>的方式有同样的思想。</p>
<p>在指定劳动合同模板时，对于聘用者的姓名并不能写一个具体的名字，因为模板的目的是为了通用化，所以对于名字采用了“下划线”的方式。</p>
<p>当公司与某个具体的人签订合同的时候，劳动合同模板中的下划线将由聘用者根据自身情况填写。</p>
<p>回到泛型中其使用思想也是如此，我们使用泛型的目的是为了让多个类型的处理通用化，所以在定义泛型代码的时候并不能指定一个具体类型，故使用类型参数<code>T</code>进行代替，这个类型参数T就相当于劳动合同模板中的<code>下划线</code></p>
<p>当泛型在实际运行的时候，<code>JIT</code>会根据泛型消费者指定的具体类型与占位符<code>T</code>进行替换。</p>
<h2 id="总结问题"><a href="#总结问题" class="headerlink" title="总结问题"></a>总结问题</h2><p>本文并不是专门适用于介绍泛型的使用细节的文章，而是通过一个实例根据需求不断演化的过程，对泛型一步步深入，从而更加深刻的理解泛型的使用初衷，相比了解泛型<code>只言片语</code>而言，形成泛型的编程概念和思维显得尤为重要。</p>
<p>在泛型的机制中，我们可以将不同类型存在相同处理逻辑的情况，形成一个通用的方案，从而不在为特定的类型进行编码，用一套通用的代码模板会服务于更多的类型，并且在使用上能保证类型安全和提供良好的性能。</p>
<blockquote>
<p>作　　者： <strong><a href="https://home.cnblogs.com/u/green-jcx/">姜承轩</a></strong><br>出　　处：<a href="https://www.cnblogs.com/green-jcx/p/16671687.html">https://www.cnblogs.com/green-jcx/p/16671687.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Generic</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Grafana Loki搭建日志中心</title>
    <url>/2022/08/13/use-lpg-to-build-log-center/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/logo_and_name.png" alt="Grafana loki"></p>
<p>Loki + Promtail + Grafana（简称LPG），LPG日志收集方案内存占用很少，它不像ELK日志系统那样为日志建立索引，而是为每个日志流设置一组标签。下面分别介绍下它的核心组件：</p>
<ul>
<li>Promtail：日志收集器，负责收集日志并将其发送给Loki，对标ELK中的Logstash。</li>
<li>Loki：聚合并存储日志数据和处理查询，可以作为Grafana的数据源，为Grafana提供可视化数据，对标ELK中的Elasticsearch</li>
<li>Grafana：从Loki中获取日志信息，进行可视化展示，对标ELK中的Kibana</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/lokiflow.png" alt="lokiflow"></p>
<p>LPG相较于ELK Stack有以下优势：</p>
<ul>
<li>Elasticsearch中的数据作为非结构化JSON对象存储在磁盘上，Loki以二进制的形式存储。</li>
<li>Elasticsearch采用全文索引，倒排索引的切分和共享的成本较高。Loki仅索引元数据，比如标签。</li>
<li>和Prometheus无缝集成。</li>
</ul>
<blockquote>
<p>官方文档：<a href="https://grafana.com/docs/loki/latest/">Grafana Loki docs</a></p>
<p>扩展阅读：</p>
<ul>
<li><a href="https://prometheus.io/docs/guides/dockerswarm/">Docker Swarm Prometheus</a></li>
<li><a href="https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/">比较|Grafana Loki</a></li>
</ul>
</blockquote>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img data-src="https://cdn.jonty.top/img/640%20(1).png" alt="日志存储架构"></p>
<h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><p>日志数据的写主要依托的是 <strong>Distributor</strong> 和 Ingester 两个组件，整体的流程如下：</p>
<p><img data-src="https://cdn.jonty.top/img/111.png" alt="write"></p>
<h3 id="Distributor"><a href="#Distributor" class="headerlink" title="Distributor"></a>Distributor</h3><p>一旦 Promtail 收集日志并将其发送给 Loki，Distributor 就是第一个接收日志的组件。</p>
<p>由于日志的写入量可能很大，所以不能在它们传入时将它们写入数据库，这会毁掉数据库，需要批处理和压缩数据。</p>
<p>Loki 通过构建压缩数据块来实现这一点，方法是在日志进入时对其进行 Gzip 操作，组件 Ingester 是一个有状态的组件，负责构建和刷新 Chunck，当 Chunk 达到一定的数量或者时间后，刷新到存储中去。</p>
<p>每个流的日志对应一个 Ingester，当日志到达 Distributor 后，根据元数据和 Hash 算法计算出应该到哪个 Ingester 上面。</p>
<p>此外，为了冗余和弹性，会将其复制 n（默认情况下为 3）次。</p>
<p><img data-src="https://cdn.jonty.top/img/Distributor%20.png" alt="Distributor "></p>
<h3 id="Ingester"><a href="#Ingester" class="headerlink" title="Ingester"></a>Ingester</h3><p>Ingester 接收到日志并开始构建 Chunk：</p>
<p><img data-src="https://cdn.jonty.top/img/Ingester.png" alt="Ingester"></p>
<p>将日志进行压缩并附加到 Chunk 上面。一旦 Chunk“填满”（数据达到一定数量或者过了一定期限），Ingester 将其刷新到数据库。</p>
<p>Loki对块和索引使用单独的数据库，因为它们存储的数据类型不同。</p>
<p>刷新一个 Chunk 之后，Ingester 然后创建一个新的空 Chunk 并将新条目添加到该 Chunk 中。</p>
<p><img data-src="https://cdn.jonty.top/img/Ingester1.png" alt="Ingester1"></p>
<h3 id="Querier"><a href="#Querier" class="headerlink" title="Querier"></a>Querier</h3><p>由 Querier 负责给定一个时间范围和标签选择器，Querier 查看索引以确定哪些块匹配，并通过 greps 将结果显示出来。它还从 Ingester 获取尚未刷新的最新数据。</p>
<p>对于每个查询，一个查询器将显示所有相关日志。实现了查询并行化，提供分布式 grep，使即使是大型查询也是足够的</p>
<p><img data-src="https://cdn.jonty.top/img/Querier.png" alt="Querier"></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote>
<p>使用docker compose 统一部署需Loki、Promtail、Grafana这些服务</p>
</blockquote>
<h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><p>创建工作目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p lpg/loki/data</span><br><span class="line">mkdir -p lpg/promtail/logs</span><br><span class="line">mkdir -p lpg/grafana/data/</span><br><span class="line">chmod -R 777 lpg</span><br><span class="line"><span class="built_in">cd</span> lpg</span><br></pre></td></tr></table></figure>

<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>创建docker-compose.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure>

<p>将以下内容复制进去</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-loki</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100:3100&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/loki/:/etc/loki/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/loki/data/:/tmp/loki/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/loki/loki.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">promtail:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-promtail</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/promtail:/etc/promtail/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/promtail/logs/:/var/log/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/promtail/promtail.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-grafana</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">promtail</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># - GF_SERVER_ROOT_URL=http://gct-china.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_SECURITY_ADMIN_PASSWORD=bb123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/grafana/grafana.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/grafana/data/:/var/lib/grafana</span></span><br></pre></td></tr></table></figure>

<p>把Loki、Promtail、Grafana的配置文件挂载到宿主机上，在运行之前，需要先准备好这3个配置文件；</p>
<h3 id="loki-yml"><a href="#loki-yml" class="headerlink" title="loki.yml"></a>loki.yml</h3><p>Loki的配置文件<code>$PWD/loki/loki.yml</code>内容如下，使用的是默认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi loki/loki.yml</span><br></pre></td></tr></table></figure>

<p><code>loki.yml</code></p>
<p>这里使用文件存储，映射目录为<code>/tmp/loki</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingester:</span></span><br><span class="line">  <span class="attr">lifecycler:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment"># loki访问路径</span></span><br><span class="line">    <span class="attr">ring:</span></span><br><span class="line">      <span class="attr">kvstore:</span></span><br><span class="line">        <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">      <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">final_sleep:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">chunk_idle_period:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">chunk_retain_period:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">wal:</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">/tmp/wal</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-05-15</span></span><br><span class="line">    <span class="attr">store:</span> <span class="string">boltdb</span></span><br><span class="line">    <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">    <span class="attr">index:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">      <span class="attr">period:</span> <span class="string">168h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage_config:</span></span><br><span class="line">  <span class="attr">boltdb:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/index</span> <span class="comment">#自定义boltdb目录(在loki目录下新建data文件来存放</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/chunks</span> <span class="comment">#自定义filesystem目录(在loki目录下新建data文件来存放)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limits_config:</span></span><br><span class="line">  <span class="attr">enforce_metric_name:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">reject_old_samples:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">reject_old_samples_max_age:</span> <span class="string">168h</span></span><br></pre></td></tr></table></figure>



<p>官方默认配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">filesystem:</span></span><br><span class="line">      <span class="attr">chunks_directory:</span> <span class="string">/loki/chunks</span></span><br><span class="line">      <span class="attr">rules_directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">instance_addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-10-24</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br></pre></td></tr></table></figure>

<h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingester:</span></span><br><span class="line">  <span class="attr">lifecycler:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">ring:</span></span><br><span class="line">      <span class="attr">kvstore:</span></span><br><span class="line">        <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">      <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">final_sleep:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">chunk_idle_period:</span> <span class="string">1h</span>       <span class="comment"># 在这段时间内没有接收到新日志的任何块都将被刷新</span></span><br><span class="line">  <span class="attr">max_chunk_age:</span> <span class="string">1h</span>           <span class="comment"># 所有块刷新实践，默认为 1h</span></span><br><span class="line">  <span class="attr">chunk_target_size:</span> <span class="number">1048576</span>  <span class="comment"># Loki 将尝试构建最大 1.5MB 的块，如果首先达到 chunk_idle_period 或 max_chunk_age，则首先刷新</span></span><br><span class="line">  <span class="attr">chunk_retain_period:</span> <span class="string">30s</span>    <span class="comment"># 如果使用索引缓存，则必须大于索引读取缓存 TTL（默认索引读取缓存 TTL 为 5m）</span></span><br><span class="line">  <span class="attr">max_transfer_retries:</span> <span class="number">0</span>     <span class="comment"># 块传输已禁用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-10-24</span> <span class="comment"># 展示在此时间之后的数据</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span>  <span class="comment"># 对象存储类型 </span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage_config:</span></span><br><span class="line">  <span class="attr">boltdb_shipper:</span></span><br><span class="line">    <span class="attr">active_index_directory:</span> <span class="string">/loki/boltdb-shipper-active</span></span><br><span class="line">    <span class="attr">cache_location:</span> <span class="string">/loki/boltdb-shipper-cache</span></span><br><span class="line">    <span class="attr">cache_ttl:</span> <span class="string">24h</span>         <span class="comment"># Can be increased for faster performance over longer query periods, uses more disk space</span></span><br><span class="line">    <span class="attr">shared_store:</span> <span class="string">filesystem</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/loki/chunks</span> <span class="comment">#自定义filesystem目录(在loki目录下新建data文件来存放)</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">boltdb:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/index</span> <span class="comment">#自定义boltdb目录(在loki目录下新建data文件来存放</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compactor:</span></span><br><span class="line">  <span class="attr">working_directory:</span> <span class="string">/loki/boltdb-shipper-compactor</span></span><br><span class="line">  <span class="attr">shared_store:</span> <span class="string">filesystem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limits_config:</span></span><br><span class="line">  <span class="attr">reject_old_samples:</span> <span class="literal">true</span>  <span class="comment"># 是否拒绝旧样本</span></span><br><span class="line">  <span class="attr">reject_old_samples_max_age:</span> <span class="string">168h</span> <span class="comment"># 168小时之前的样本被拒绝</span></span><br><span class="line">  <span class="attr">max_entries_limit_per_query:</span> <span class="number">9999</span> <span class="comment"># 最大查询行数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chunk_store_config:</span></span><br><span class="line">  <span class="attr">max_look_back_period:</span> <span class="string">0s</span> <span class="comment"># 为避免查询超过保留期的数据，必须小于或等于下方的时间值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">table_manager:</span></span><br><span class="line">  <span class="attr">retention_deletes_enabled:</span> <span class="literal">false</span>  <span class="comment"># 保留删除是否删除</span></span><br><span class="line">  <span class="attr">retention_period:</span> <span class="string">0s</span> <span class="comment"># 72h 超过72h的块数据将被删除</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">local:</span></span><br><span class="line">      <span class="attr">directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">rule_path:</span> <span class="string">/loki/rules-temp</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">enable_api:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>官方配置示例：<a href="https://grafana.com/docs/loki/latest/configuration/examples/">https://grafana.com/docs/loki/latest/configuration/examples/</a></p>
<p>存储切换：<a href="https://juejin.cn/post/6870533848644616206">https://juejin.cn/post/6870533848644616206</a></p>
<p>集群部署：<a href="https://zhuanlan.zhihu.com/p/373178364">https://zhuanlan.zhihu.com/p/373178364</a></p>
</blockquote>
<h3 id="promtail-yml"><a href="#promtail-yml" class="headerlink" title="promtail.yml"></a>promtail.yml</h3><p>Promtail的配置文件<code>$PWD/promtail/promtail.yml</code>内容如下，使用的也是默认配置，这里的<code>clients.url</code>需要注意下，由于使用的是<code>docker-compose</code>部署，可以将服务名称<code>loki</code>作为域名来访问Loki服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi promtail/promtail.yml</span><br></pre></td></tr></table></figure>

<p><code>promtail.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">9080</span></span><br><span class="line">  <span class="attr">grpc_listen_port:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">positions:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">/tmp/positions.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clients:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://loki:3100/loki/api/v1/push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">job:</span> <span class="string">varlogs</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">promtail</span></span><br><span class="line">      <span class="attr">__path__:</span> <span class="string">/var/log/*log</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置示例：<a href="https://grafana.com/docs/loki/latest/clients/promtail/configuration/#example-static-config">https://grafana.com/docs/loki/latest/clients/promtail/configuration/#example-static-config</a></p>
</blockquote>
<h3 id="grafana-ini"><a href="#grafana-ini" class="headerlink" title="grafana.ini"></a>grafana.ini</h3><p>Grafana的配置文件<code>$PWD/grafana/grafana.ini</code>内容如下，使用的也是默认配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sfL https://cdn.jonty.top/img/grafana.ini -o ./grafana/grafana.ini</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220812143852426.png" alt="image-20220812143852426"></p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>运行<code>docker-compose.yml</code>脚本安装所有服务，使用如下命令即可；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line">docker compose ps</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220812132457250.png" alt="image-20220812132457250"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p>部署完成后登录<code>Grafana</code>，<a href="http://192.168.2.97:3000/">http://192.168.2.97:3000</a></p>
<p>初始账号密码：admin/admin  （根据配置参数：bb123456）</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220812132735723.png" alt="image-20220812132735723"></p>
<p>修改新的密码后进入</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220812132835834.png" alt="image-20220812132835834"></p>
<h4 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h4><p><img data-src="https://cdn.jonty.top/img/image-20220812132952221.png" alt="image-20220812132952221"></p>
<p>选择<code>Loki</code>，可以看到<code>Grafana</code>也支持<code>Elasticseach</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220812133044599.png" alt="image-20220812133044599"></p>
<p>保存并测试</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220812164333736.png" alt="image-20220812164333736"></p>
<h3 id="NuGet集成"><a href="#NuGet集成" class="headerlink" title="NuGet集成"></a>NuGet集成</h3><p>添加Serilog 的Loki扩展</p>
<ul>
<li>Serilog</li>
<li>Serilog.AspNetCore</li>
<li>Serilog.Sinks.Grafana.Loki</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet add package Serilog.Sinks.Grafana.Loki</span><br></pre></td></tr></table></figure>

<p>仓库：<a href="https://github.com/serilog-contrib/serilog-sinks-grafana-loki">https://github.com/serilog-contrib/serilog-sinks-grafana-loki</a></p>
<p>案例：<a href="https://github.com/serilog-contrib/serilog-sinks-grafana-loki/tree/master/sample">https://github.com/serilog-contrib/serilog-sinks-grafana-loki/tree/master/sample</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Serilog.Debugging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Serilog.Sinks.Grafana.Loki.Sample</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> OutputTemplate =</span><br><span class="line">        <span class="string">&quot;&#123;Timestamp:dd-MM-yyyy HH:mm:ss&#125; [&#123;Level:u3&#125;] [&#123;ThreadId&#125;] &#123;Message&#125;&#123;NewLine&#125;&#123;Exception&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SelfLog.Enable(Console.Error);</span><br><span class="line"></span><br><span class="line">        Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">            .MinimumLevel.Debug()</span><br><span class="line">            .Enrich.WithThreadId()</span><br><span class="line">            .Enrich.WithProperty(<span class="string">&quot;meaning_of_life&quot;</span>, <span class="number">42</span>)</span><br><span class="line">            .WriteTo.Console(outputTemplate: OutputTemplate)</span><br><span class="line">            .WriteTo.GrafanaLoki(</span><br><span class="line">                <span class="string">&quot;http://192.168.2.97:3100&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> List&lt;LokiLabel&gt; &#123; <span class="keyword">new</span>() &#123; Key = <span class="string">&quot;app&quot;</span>, Value = <span class="string">&quot;console1&quot;</span> &#125; &#125;, <span class="comment">// label用户查询</span></span><br><span class="line">                credentials: <span class="literal">null</span>)</span><br><span class="line">            .CreateLogger();</span><br><span class="line"></span><br><span class="line">        Log.Debug(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;Billy&quot;</span>, <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        Log.Information(<span class="string">&quot;Person of the day: &#123;@Person&#125;&quot;</span>, person);</span><br><span class="line"></span><br><span class="line">        Log.Warning(<span class="string">&quot;道路千万条，安全第一条，行车不规范，亲人两行泪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccessViolationException(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.Error(ex, <span class="string">&quot;An error occured&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220812174006119.png" alt="image-20220812174006119"></p>
<h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><blockquote>
<p>官方文档：<a href="https://grafana.com/docs/loki/latest/logql/">https://grafana.com/docs/loki/latest/logql/</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220812174254586.png" alt="image-20220812174254586"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>把应用程序日志目录挂载到Promtail &gt; $PWD/promtail/logs/ <a href="#docker-compose.yml">目录</a>上，Promtail可以收集到日志</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  server_logs:</span><br><span class="line">  server_sysfiles:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  net:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  hostapi:</span><br><span class="line">    image: host_server:dev</span><br><span class="line">    networks:</span><br><span class="line">      - net</span><br><span class="line">    volumes:</span><br><span class="line"><span class="deletion">-     - &quot;server_logs:/app/App_Data/Logs&quot;</span></span><br><span class="line"><span class="addition">+     - $PWD/promtail/logs/:/app/App_Data/Logs</span></span><br><span class="line">      - &quot;server_sysfiles:/app/wwwroot/SysFiles&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文档：</p>
<p><a href="https://blog.csdn.net/wayne_primes/article/details/112467639">https://blog.csdn.net/wayne_primes/article/details/112467639</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Grafana</tag>
        <tag>Loki</tag>
        <tag>Promtail</tag>
        <tag>LPG</tag>
      </tags>
  </entry>
  <entry>
    <title>【K8s】Kubernetes入门-02</title>
    <url>/2022/08/11/getting-started-with-kubernetes-02/</url>
    <content><![CDATA[<h2 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h2><h3 id="集群类型"><a href="#集群类型" class="headerlink" title="集群类型"></a>集群类型</h3><p>Kubernetes集群大体上分为两类：</p>
<ul>
<li><p>一主多从：一台Master节点和多台Node节点，搭建简单，但是有单机故障风险，适合用于测试环境</p>
</li>
<li><p>多主多从：多台Master节点和多台Node节点，搭建复杂，安全性高，适合用于生产环境</p>
</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20220807225935670.png" alt="image-20220807225935670"></p>
<h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>Kubernetes有多种部署方式，目前主流的方式有kubeadm、minikube、二进制包</p>
<ul>
<li>minikube：一个用于快速搭建单节点kubernetes的工具</li>
<li>kubeadm：一个用于快速搭建kubernetes集群的工具</li>
<li>二进制包：从官网下载每个组件的二进制包，依次安装，有助于理解kubernetes组件</li>
</ul>
<blockquote>
<p>说明：演示选择使用kubeadm方式安装集群环境</p>
</blockquote>
<h3 id="主机规划"><a href="#主机规划" class="headerlink" title="主机规划"></a>主机规划</h3><table>
<thead>
<tr>
<th>主机</th>
<th>IP</th>
<th>操作体统</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>master</td>
<td>192.168.2.94</td>
<td>CentOS7.6</td>
<td>4U8G 50G</td>
</tr>
<tr>
<td>node1</td>
<td>192.168.2.95</td>
<td>CentOS7.6</td>
<td>4U8G 50G</td>
</tr>
<tr>
<td>node2</td>
<td>192.168.2.96</td>
<td>CentOS7.6</td>
<td>4U8G 50G</td>
</tr>
</tbody></table>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次环境需要安装三台CentOS服务器（一主二从），然后在每台服务器分别安装Docker、Kubeadm、Kubelet、Kubectl</p>
<h3 id="主机安装"><a href="#主机安装" class="headerlink" title="主机安装"></a>主机安装</h3><p>安装三台服务器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220807231215279.png" alt="image-20220807231215279"></p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="检查系统版本"><a href="#检查系统版本" class="headerlink" title="检查系统版本"></a>检查系统版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>此方式安装Kubernetes集群要求CentOS版本在7.5以上</p>
</blockquote>
<h4 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h4><p>配置主机名解析，有DNS也可以直接配置DNS，方便后面集群节点之间的调用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt;/etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.94 master</span></span><br><span class="line"><span class="string">192.168.2.95 node1</span></span><br><span class="line"><span class="string">192.168.2.96 node2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p>集群中节点的时间必须精确一致</p>
<p>使用 <code>chronyd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line">systemctl start chronyd</span><br><span class="line"><span class="comment">## 启用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment">## 停止</span></span><br><span class="line">systemctl stop chronyd</span><br><span class="line"><span class="comment">## 禁用</span></span><br><span class="line">systemctl <span class="built_in">disable</span> chronyd</span><br></pre></td></tr></table></figure>

<p>使用 <code>ntp</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt;/var/spool/cron/root</span></span><br><span class="line"><span class="string">00 12 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">##查看计划任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment">##手动执行</span></span><br><span class="line">/usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220807232320564.png" alt="image-20220807232320564"></p>
<h4 id="禁用iptable和firewalld服务"><a href="#禁用iptable和firewalld服务" class="headerlink" title="禁用iptable和firewalld服务"></a>禁用iptable和firewalld服务</h4><p>Kubernetes和Docker 在运行的中会产生大量的<code>iptables</code>规则，为了不让系统规则跟它们混淆，直接关闭系统的规则</p>
<p>关闭防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure>

<p>关闭iptables服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl stop iptables</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl disable iptables</span></span><br></pre></td></tr></table></figure>

<h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><p><code>selinux</code>是<code>linux</code>系统下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题</p>
<blockquote>
<p>需要重启生效</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">setenforce 0 </span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808141956564.png" alt="image-20220808141956564"></p>
<h4 id="禁用swap分区"><a href="#禁用swap分区" class="headerlink" title="禁用swap分区"></a>禁用swap分区</h4><p>swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响</p>
<p>Kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑分区配置文件/etc/fstab，注释掉swap分区一行</span></span><br><span class="line"><span class="comment"># 注意修改完毕之后需要重启linux服务</span></span><br><span class="line">vi /etc/fstab</span><br><span class="line">注释掉 /dev/mapper/centos-swap swap</span><br><span class="line"><span class="comment"># /dev/mapper/centos-swap swap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i <span class="string">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808141929110.png" alt="image-20220808141929110"></p>
<h4 id="修改linux的内核参数"><a href="#修改linux的内核参数" class="headerlink" title="修改linux的内核参数"></a>修改linux的内核参数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改linux的内核采纳数，添加网桥过滤和地址转发功能</span></span><br><span class="line"><span class="comment"># 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置：</span></span><br><span class="line">vi /etc/sysctl.d/kubernetes.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">[root@master ~]<span class="comment"># sysctl -p</span></span><br><span class="line"><span class="comment"># 加载网桥过滤模块</span></span><br><span class="line">[root@master ~]<span class="comment"># modprobe br_netfilter</span></span><br><span class="line"><span class="comment"># 查看网桥过滤模块是否加载成功</span></span><br><span class="line">[root@master ~]<span class="comment"># lsmod | grep br_netfilter</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808141603448.png" alt="image-20220808141603448"></p>
<h4 id="配置ipvs功能"><a href="#配置ipvs功能" class="headerlink" title="配置ipvs功能"></a>配置ipvs功能</h4><p>在Kubernetes中Service有两种带来模型，一种是基于iptables的，一种是基于ipvs</p>
<p>两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.安装ipset和ipvsadm</span></span><br><span class="line">[root@master ~]<span class="comment"># yum install ipset ipvsadm -y</span></span><br><span class="line"><span class="comment"># 2.添加需要加载的模块写入脚本文件</span></span><br><span class="line">[root@master ~]<span class="comment"># cat &lt;&lt;EOF&gt; /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 3.为脚本添加执行权限</span></span><br><span class="line">[root@master ~]<span class="comment"># chmod +x /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment"># 4.执行脚本文件</span></span><br><span class="line">[root@master ~]<span class="comment"># /bin/bash /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment"># 5.查看对应的模块是否加载成功</span></span><br><span class="line">[root@master ~]<span class="comment"># lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808141545255.png" alt="image-20220808141545255"></p>
<h4 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># getenforce</span></span><br><span class="line">Disabled</span><br><span class="line">[root@master ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7821         149        7478           8         192        7422</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">	&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">	&quot;registry-mirrors&quot;: [&quot;https://evcbq79g.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808144501504.png" alt="image-20220808144501504"></p>
<blockquote>
<p><a href="https://blog.51cto.com/riverxyz/2537914">为什么要修改docker的cgroup driver</a></p>
<p><a href="https://www.simaek.com/archives/280/">修改Docker的Cgroup Driver为systemd，替换默认的cgroupfs</a></p>
</blockquote>
<h3 id="安装Kubernetes组件"><a href="#安装Kubernetes组件" class="headerlink" title="安装Kubernetes组件"></a>安装Kubernetes组件</h3><h4 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgchech=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">			http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure>

<h4 id="安装kubeadm、kubelet和kubectl"><a href="#安装kubeadm、kubelet和kubectl" class="headerlink" title="安装kubeadm、kubelet和kubectl"></a>安装kubeadm、kubelet和kubectl</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span></span><br><span class="line"></span><br><span class="line"> yum install -y kubeadm kubelet kubectl </span><br></pre></td></tr></table></figure>

<h4 id="配置kubelet的cgroup"><a href="#配置kubelet的cgroup" class="headerlink" title="配置kubelet的cgroup"></a>配置kubelet的cgroup</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/sysconfig/kubelet</span></span><br><span class="line"><span class="string">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">KUBE_PROXY_MODE=&quot;ipvs&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="设置kubelet开机自启"><a href="#设置kubelet开机自启" class="headerlink" title="设置kubelet开机自启"></a>设置kubelet开机自启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808145907841.png" alt="image-20220808145907841"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># systemctl enable kubelet</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br></pre></td></tr></table></figure>



<h3 id="准备集群镜像"><a href="#准备集群镜像" class="headerlink" title="准备集群镜像"></a>准备集群镜像</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><p>在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubeadm config images list</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220808153955718.png" alt="image-20220808153955718"></p>
<h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>国内无法拉取上述镜像，可以通过<code>aliyun</code>代理拉取，也可以直接执行下面语句</p>
<blockquote>
<p>我先在香港服务器上拉取然后推送的Docker Hub</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">images=(</span><br><span class="line">	 kube-apiserver:v1.17.17</span><br><span class="line">     kube-controller-manager:v1.17.17</span><br><span class="line">     kube-scheduler:v1.17.17</span><br><span class="line">     kube-proxy:v1.17.17</span><br><span class="line">     pause:3.1</span><br><span class="line">     etcd:3.4.3-0</span><br><span class="line">     coredns:1.6.5</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">	docker pull jontymax/<span class="variable">$imageName</span></span><br><span class="line">	docker tag jontymax/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">	docker rmi jontymax/<span class="variable">$imageName</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><p>对集群进行初始化，并将node节点加入到集群中</p>
<blockquote>
<p><code>master</code>节点执行</p>
</blockquote>
<h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">   --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--apiserver-advertise-address=192.168.2.94 \</span><br><span class="line">--kubernetes-version=v1.17.4 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 </span><br></pre></td></tr></table></figure>

<h4 id="重置集群"><a href="#重置集群" class="headerlink" title="重置集群"></a>重置集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm reset -f</span><br></pre></td></tr></table></figure>

<h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220809102933345.png" alt="image-20220809102933345"></p>
<h4 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm join 192.168.2.94:6443 --token dl0jdc.tby7pc1yd2q37wws \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:0210b33b1b18e09cd32e0c6b3a1afa7f5a1e2f8c93f9fa5ccf156a9245fa51d6</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220809103525615.png" alt="image-20220809103525615"></p>
<h4 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220809103828566.png" alt="image-20220809103828566"></p>
<h3 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h3><p>Kubernetes支持多种网络插件，比如flannel、calico、canal等</p>
<blockquote>
<p>只需要在master节点执行即可，插件使用的是DaemonSet的控制器，会在每个节点运行</p>
</blockquote>
<h4 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h4><p>获取配置文件，根目录即可<code>/root/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p><a href="https://cdn.jonty.top/img/kube-flannel.yml">kube-flannel.yml</a></p>
<h4 id="启动flannel"><a href="#启动flannel" class="headerlink" title="启动flannel"></a>启动flannel</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220809134455940.png" alt="image-20220809134455940"></p>
<h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><p>稍等片刻，集群node节点<code>Ready</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>

<p>至此，Kubernetes集群环境搭建完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220809133903974.png" alt="image-20220809133903974"></p>
<h2 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h2><p>在K8s集群中部署Nginx服务，测试集群是否正常</p>
<blockquote>
<p>master节点执行</p>
</blockquote>
<h3 id="Nginx服务"><a href="#Nginx服务" class="headerlink" title="Nginx服务"></a>Nginx服务</h3><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create deployment nginx  --image=nginx:1.14-alpine</span><br></pre></td></tr></table></figure>

<h4 id="暴露端口"><a href="#暴露端口" class="headerlink" title="暴露端口"></a>暴露端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl expose deploy nginx  --port=80 --target-port=80  --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></table></figure>

<h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl get pod</span><br><span class="line">kubectl get service</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220809135611076.png" alt="image-20220809135611076"></p>
<h4 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h4><p>使用任意node IP 加端口访问</p>
<p>192.168.2.94:32148</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220809135533022.png" alt="image-20220809135533022"></p>
<p><strong>参考文档</strong>：</p>
<ul>
<li><p><a href="https://github.com/containerd/containerd/issues/4581">Kubeadm unknown service runtime.v1alpha2.RuntimeService ·第4581期 ·集装箱/集装箱式 (github.com)</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/a167b80c89b8">初始化 init 报错</a></p>
</li>
<li><p><a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
  </entry>
  <entry>
    <title>【K8s】Kubernetes入门-01</title>
    <url>/2022/08/10/getting-started-with-kubernetes-01/</url>
    <content><![CDATA[<blockquote>
<p>官方文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/">https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/</a></p>
</blockquote>
<h2 id="应用部署方式演变"><a href="#应用部署方式演变" class="headerlink" title="应用部署方式演变"></a>应用部署方式演变</h2><p><img data-src="https://cdn.jonty.top/img/image-20220807221451189.png" alt="image-20220807221451189"></p>
<p>在部署应用程序的方式上，主要经历了三个时代：</p>
<p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p>
<blockquote>
<p>优点：简单，不需要其它技术的参与</p>
<p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p>
</blockquote>
<p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p>
<blockquote>
<p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p>
<p>缺点：增加了操作系统，浪费了部分资源</p>
</blockquote>
<p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p>
<blockquote>
<p>优点：</p>
<p>可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p>
<p>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p>
<p>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p>
</blockquote>
<p>容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：</p>
<ul>
<li>一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器</li>
<li>当并发访问量变大的时候，怎么样做到横向扩展容器数量</li>
</ul>
<p>这些容器管理的问题统称为<strong>容器编排</strong>问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：</p>
<ul>
<li><strong>Swarm</strong>：Docker容器编排工具</li>
<li><strong>Mesos</strong>：Apache的一个资源统一管控的工具，需要和Marathon结合使用</li>
<li><strong>Kubernetes</strong>：Google开源的的容器编排工具</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20220807221546165.png" alt="image-20220807221546165"></p>
<h2 id="Kubernetes简介"><a href="#Kubernetes简介" class="headerlink" title="Kubernetes简介"></a>Kubernetes简介</h2><p><img data-src="https://cdn.jonty.top/img/image-20220807222351461.png" alt="kubbernetes"></p>
<div class="note info"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/">Kubernetes</a>，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p>
<p>Kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p>
<ul>
<li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li>
<li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li>
<li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li>
<li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li>
<li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li>
<li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li>
</ul>
</div>

<h2 id="Kubernetes概念"><a href="#Kubernetes概念" class="headerlink" title="Kubernetes概念"></a>Kubernetes概念</h2><p><img data-src="https://cdn.jonty.top/img/kwob90mh.png" alt="cluster"></p>
<p><strong>Master</strong></p>
<p>主节点，控制平台，不需要很高性能，不跑任务，通常一个就行了，也可以开多个主节点来提高集群可用度。</p>
<p><strong>Worker</strong></p>
<p>工作节点，可以是虚拟机或物理计算机，任务都在这里跑，机器性能需要好点；通常都有很多个，可以不断加机器扩大集群；每个工作节点由主节点管理</p>
<p><strong>Pod</strong></p>
<p>豆荚，K8S 调度、管理的最小单位，一个 Pod 可以包含一个或多个容器，每个 Pod 有自己的虚拟IP。一个工作节点可以有多个 pod，主节点会考量负载自动调度 pod 到哪个节点运行。</p>
<p><strong>Controller</strong></p>
<p>控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p>
<p><strong>Service</strong></p>
<p>pod对外服务的统一入口，下面可以维护者同一类的多个pod</p>
<p><strong>Label</strong></p>
<p>标签，用于对pod进行分类，同一类pod会拥有相同的标签</p>
<p><strong>NameSpace</strong></p>
<p>命名空间，用来隔离pod的运行环境</p>
<p><img data-src="https://cdn.jonty.top/img/kwoccq7d.png" alt="kwoccq7d"></p>
<h2 id="Kubernetes组件"><a href="#Kubernetes组件" class="headerlink" title="Kubernetes组件"></a>Kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p>
<p><strong>master：集群的控制平面，负责集群的决策 ( 管理 )</strong></p>
<blockquote>
<p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p>
<p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p>
<p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p>
<p><strong>Etcd</strong> ：负责存储集群中各种资源对象的信息</p>
</blockquote>
<p><strong>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</strong></p>
<blockquote>
<p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p>
<p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p>
<p><strong>Docker</strong> : 负责节点上容器的各种操作</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220807223447040.png" alt="image-20220807223447040"></p>
<p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：</p>
<ol>
<li><p>首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中</p>
</li>
<li><p>一个nginx服务的安装请求会首先被发送到master节点的apiServer组件</p>
</li>
<li><p>apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p>
<p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer</p>
</li>
<li><p>apiServer调用controller-manager去调度Node节点安装nginx服务</p>
</li>
<li><p>kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod</p>
<p>pod是kubernetes的最小操作单元，容器必须跑在pod中</p>
</li>
<li><p>至此一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理</p>
</li>
</ol>
<p>这样，外界用户就可以访问集群中的nginx服务了</p>
<p><img data-src="https://sjwx.easydoc.xyz/46901064/files/kwonmx7e.png" alt="img"></p>
<h2 id="什么时候需要-Kubernetes"><a href="#什么时候需要-Kubernetes" class="headerlink" title="什么时候需要 Kubernetes"></a>什么时候需要 Kubernetes</h2><ul>
<li>当你的应用只是跑在一台机器，直接一个 docker + docker compose 就够了，方便轻松；</li>
<li>当你的应用需要跑在 3、4 台机器上，依旧可以每台机器单独配置运行环境 + 负载均衡器；</li>
<li>当你应用访问数不断增加，机器逐渐增加到十几台、上百台、上千台时，每次加机器、软件更新、版本回滚，都会变得非常麻烦、痛不欲生，再也不能好好的摸鱼了，人生浪费在那些没技术含量的重复性工作上。</li>
</ul>
<p>这时候，Kubernetes 就可以一展身手了，让你轻松管理百万千万台机器的集群。“谈笑间，樯橹灰飞烟灭”，享受着一手掌控所有，年薪百万指日可待。</p>
<p>Kubernetes 可以为你提供集中式的管理集群机器和应用，加机器、版本升级、版本回滚，那都是一个命令就搞定的事，不停机的灰度更新，确保高可用、高性能、高扩展。</p>
<p><strong>参考文档</strong>：</p>
<blockquote>
<p><a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>K8s</tag>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>【随笔】那就做吧~</title>
    <url>/2022/07/24/220724-share-essays/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/1663124663138.jpg" alt="20220724"></p>
<p>人们总是愿意期望未来，而不是回顾过去，所以总是在一个地方摔倒，再爬起来，拍拍尘土，咒骂一句，头也不回的继续走下去。</p>
<p>至于为什么摔倒了，才不会去深究，毕竟谁会承认自己的无能，和自己过意不去呢。他们这样走下去，走的人多了，同行的也就多了，群体性的行为会给他们力量，让他们在前行的路上彼此温暖和给予勇气。</p>
<p>以上，是一个遵从内心选择，走了一条僻静小路的人，看到一群人的时候，说那是酸葡萄的样子。</p>
<p>小站开通马上一年了，也分享了一些工作记录。在海滩边捡贝壳，觉得每一片都非常漂亮，想要分享给世界，然后久了发现，世界上的这些东西，没有什么是独一无二的。而那些灿烂的星河，在那里早有人总结和分享好了。</p>
<p>如果想的太透彻，大概就没什么意思了，所以还是要像个孩子一样，为一点小发现惊奇激动，欢呼雀跃。</p>
<p>2022年大概是心智启蒙的一年，开始真正意义上的思考这一切。有可能是阅历稍微多了一些，看问题和思考的角度都更多了一些。</p>
<p>我们期望未来，期望改变，而做出的努力太少，所以每年都是一样的满怀憧憬，每年都一样的重蹈覆辙。我不愿如此。</p>
<p>那就做吧。 </p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Share</tag>
      </tags>
  </entry>
  <entry>
    <title>ASP.NET Core DI最佳实践</title>
    <url>/2022/07/24/asp-net-core-dependency-injection/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/v2-3c666abe2c87ada09002ceaf0557ea62_1440w.jpg" alt="Dependency Injection"></p>
<div class="note info"><p>本文主要分享在ASP.NETCore中使用<strong>依赖注入</strong>的经验和建议，主要有以下作用：</p>
<ul>
<li>有效设计服务及其依赖项</li>
<li>防止多线程问题</li>
<li>防止内存泄漏</li>
<li>防止潜在的错误</li>
</ul>
<blockquote>
<p>官方文档<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0">Dependency injection in ASP.NET Core | Microsoft Docs</a></p>
</blockquote>
</div>

<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="构造函数注入-Constructor-injection"><a href="#构造函数注入-Constructor-injection" class="headerlink" title="构造函数注入(Constructor injection)"></a>构造函数注入(Constructor injection)</h3><p>构造函数注入用于声明和获取服务对<strong>服务构造</strong>的依赖关系。例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IProductRepository productRepository</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository = productRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository.Delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ProductService</code> 将 <code>IProductRepository</code> 作为其构造函数中的依赖项注入，然后在<code>Delete</code>方法中使用它。</p>
<p><strong>最佳实践：</strong></p>
<ul>
<li>在服务构造函数中<strong>显示定义</strong>所需的依赖项，如果没有其依赖项，就无法构造服务</li>
<li>将注入的依赖项分配给只读字段/属性（防止在使用过程中意外赋值）</li>
</ul>
<h3 id="属性注入（Property-Injection）"><a href="#属性注入（Property-Injection）" class="headerlink" title="属性注入（Property Injection）"></a>属性注入（Property Injection）</h3><p>ASP.NETCore自带的容器（Microsoft.Extensions.DependencyInjection）<strong>不支持属性注入</strong>，可以使用其他支持属性注入的容器。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging.Abstractions;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ILogger&lt;ProductService&gt; Logger &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IProductRepository productRepository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _productRepository = productRepository;</span><br><span class="line">            Logger = NullLogger&lt;ProductService&gt;.Instance;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _productRepository.Delete(id);</span><br><span class="line">            Logger.LogInformation(</span><br><span class="line">                <span class="string">$&quot;Deleted a product with id = <span class="subst">&#123;id&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ProductService</code> 使用<strong>公共 setter</strong> 声明一个 <code>Logger</code> 属性。依赖注入容器可以设置Logger，如果它是可用的（之前注册给DI容器）。</p>
<p><strong>最佳实践：</strong></p>
<ul>
<li>仅对<strong>可选依赖项</strong>使用属性注入，服务可以在不提供这些依赖项<strong>的情况下</strong>正常工作。</li>
<li>使用Null对象模式，或者在使用时检查<code>null</code></li>
</ul>
<h3 id="服务定位器-Service-Locator"><a href="#服务定位器-Service-Locator" class="headerlink" title="服务定位器(Service Locator)"></a>服务定位器(Service Locator)</h3><p>服务定位器模式是获取依赖项的另一种方法。</p>
<blockquote>
<p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.iserviceprovider?view=net-6.0">IServiceProvider 接口 (System) | Microsoft Docs</a></p>
</blockquote>
<p>例：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ProductService&gt; _logger;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository = serviceProvider</span><br><span class="line">          .GetRequiredService&lt;IProductRepository&gt;();</span><br><span class="line">        _logger = serviceProvider</span><br><span class="line">          .GetService&lt;ILogger&lt;ProductService&gt;&gt;() ??</span><br><span class="line">            NullLogger&lt;ProductService&gt;.Instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository.Delete(id);</span><br><span class="line">        _logger.LogInformation(<span class="string">$&quot;Deleted a product with id = <span class="subst">&#123;id&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ProductService</code> 注入 <strong>IServiceProvider</strong> 并使用它来解析依赖关系。</p>
<p>如果之前未注册所请求的依赖项，<strong>GetRequiredService</strong> 将引发异常。另一方面，在这种情况下，<strong>GetService</strong> 只返回 <code>null</code>。</p>
<p>在<strong>构造函数</strong>中解析服务时，它们会在服务被释放时被释放。因此，不需要关心释放/处置在构造函数中解析的服务（就像构造函数和属性注入一样）</p>
<p><strong>最佳实践</strong>：</p>
<ul>
<li><strong>尽可能不要使用</strong>服务定位器模式,因为它使依赖关系隐含起来。在创建服务实例时不能看到依赖关系，影响单元测试。</li>
<li>在服务<strong>构造函数</strong>中解决依赖关系，在服务方法中解决会使你的应用程序更加复杂和容易出错</li>
</ul>
<h3 id="服务生命周期"><a href="#服务生命周期" class="headerlink" title="服务生命周期"></a>服务生命周期</h3><p><img data-src="https://cdn.jonty.top/img/1_lT0wIkqAgpbxpyY6fw0lOA.png" alt="生命周期"></p>
<p>ASP.NET Core依赖注入中有三种服务生命周期：</p>
<ul>
<li><h3 id="Transient"><a href="#Transient" class="headerlink" title="Transient"></a>Transient</h3><p><strong>瞬时服务</strong>在每次注入或请求服务时都会创建服务</p>
</li>
<li><h3 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h3><p><strong>作用域服务</strong>是按作用域创建的。在 Web 应用程序中，每个 Web 请求都会创建一个新的分隔服务作用域，根据 Web 请求创建作用域服务。</p>
</li>
<li><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p><strong>单例</strong>服务是按 DI 容器创建的。这通常意味着每个应用程序<strong>只创建一次</strong>，然后在整个应用程序生命周期内使用.</p>
</li>
</ul>
<blockquote>
<p> <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes">.NET | 中的依赖关系注入微软文档 (microsoft.com)</a></p>
</blockquote>
<p>DI容器保持对所有已解决的服务的跟踪。服务在其生命周期结束时被释放和处置。</p>
<ul>
<li>如果服务具有依赖项，则还会自动释放和释放这些<strong>依赖项</strong>。</li>
<li>如果服务实现了<strong>IDisposable</strong>接口，<code>Dispose</code>方法会在服务释放时被自动调用。</li>
</ul>
<p><strong>最佳实践</strong>：</p>
<ul>
<li><strong>尽可能地</strong>将服务注册为<strong>瞬时服务</strong>。因为设计瞬时服务很简单。一般不关心<strong>多线程</strong>和<strong>内存泄漏</strong>，服务的生命周期很短。</li>
<li><strong>谨慎</strong>使用作用域服务生命周期，因为如果创建子服务作用域或从非 Web 应用程序使用这些服务可能存在问题。</li>
<li><strong>谨慎</strong>使用<strong>单例生命周期</strong>，需要处理多线程和潜在的内存泄漏问题。</li>
<li><strong>不要依赖单例服务中</strong>的<strong>瞬时</strong>或<strong>范围服务</strong>。 因为当单例服务注入<strong>瞬时服务</strong>时，瞬态服务会变成<strong>单例</strong>实例，如果瞬时服务不是为支持这种情况而设计的，则可能会导致问题。 在这种情况下，ASP.NET Core 的默认 DI 容器已经抛出异常。</li>
</ul>
<h3 id="在方法中解析服务"><a href="#在方法中解析服务" class="headerlink" title="在方法中解析服务"></a>在方法中解析服务</h3><p>在某些情况下，可能需要在服务的方法中解析另一个服务。 </p>
<p>在这种情况下，请确保在使用后释放服务。 </p>
<p>最佳方法是<strong>创建服务范围（Scope）</strong>。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PriceCalculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _serviceProvider;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriceCalculator</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _serviceProvider = serviceProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">Calculate</span>(<span class="params">Product product, <span class="built_in">int</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">      Type taxStrategyServiceType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = _serviceProvider.CreateScope())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> taxStrategy = (ITaxStrategy)scope.ServiceProvider</span><br><span class="line">              .GetRequiredService(taxStrategyServiceType);</span><br><span class="line">            <span class="keyword">var</span> price = product.Price * count;</span><br><span class="line">            <span class="keyword">return</span> price + taxStrategy.CalculateTax(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PriceCalculator</code> 在其构造函数中注入<code>IServiceProvider</code>并将其分配给一个字段。 <code>PriceCalculator</code> 然后在<code>Calculate</code> 方法中使用它来创建子服务范围。 它使用 <code>scope.ServiceProvider</code> 来解析服务，而不是注入的 <code>_serviceProvider</code> 实例。 因此，从范围解析的所有服务都会在 <code>using</code> 语句的末尾<strong>自动释放</strong>。</p>
<p><strong>最佳实践</strong>：</p>
<ul>
<li>如果要解析方法体中的服务，请始终创建<strong>子服务作用域</strong>，以确保正确释放已解析的服务</li>
<li>如果一个方法获取 <strong>IServiceProvider</strong> 作为参数，那么可以直接从中解析服务，而无需关心释放。 创建/管理服务范围是调用方法的代码的责任。 遵循这个原则可以让代码更干净。</li>
<li><strong>不要保留对已解析服务的引用</strong>！否则，它可能会导致内存泄漏，并且稍后使用对象引用时将访问<strong>已释放的服务</strong>（除非已解析的服务是单例）。</li>
</ul>
<h3 id="单例服务-Singleton-Services"><a href="#单例服务-Singleton-Services" class="headerlink" title="单例服务(Singleton Services)"></a>单例服务(Singleton Services)</h3><p>单例服务通常旨在保持应用程序状态。 缓存是应用程序状态的一个很好的例子。</p>
<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt; _cache;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">GetFileContent</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _cache.GetOrAdd(filePath, _ =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> File.ReadAllBytes(filePath);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件服务只是缓存文件内容以减少磁盘读取。此服务应注册为单例，否则，缓存将无法按预期工作。</p>
<p><strong>最佳实践：</strong></p>
<ul>
<li><p>如果服务保持状态，则应以<strong>线程安全</strong>的方式访问该状态。因为所有请求同时使用同一服务<strong>实例</strong>。使用 <strong>ConcurrentDictionary</strong> 而不是 <strong>Dictionary</strong> 来确保线程安全。</p>
</li>
<li><p>不要使用来自<strong>单例服务的作用域或瞬态</strong>服务。因为，<strong>瞬时服务</strong>可能未设计为线程安全。如果必须使用它们，在使用这些服务时注意多线程（例如使用锁）。</p>
</li>
<li><p><strong>内存泄漏</strong>通常是由<strong>单例服务引起</strong>的。在<strong>应用程序结束</strong>之前，它们不会释放。因此，如果它们实例化（或注入）类但不释放放它们，它们将保留在内存中，直到应用程序结束。确保在正确的时间<strong>释放</strong>它们。</p>
</li>
<li><p>如果缓存数据（示例中为文件内容），则应创建一种机制，以便在原始数据源更改时（当磁盘上的缓存文件发生更改时）更新/使缓存数据失效。</p>
</li>
</ul>
<h3 id="作用域服务（Scoped-Services）"><a href="#作用域服务（Scoped-Services）" class="headerlink" title="作用域服务（Scoped Services）"></a>作用域服务（Scoped Services）</h3><p>作用域生存期首先似乎是存储每个 Web 请求数据的良好候选者。</p>
<p>因为 ASP.NET Core<strong>为每个 Web 请求</strong>创建一个服务范围。因此，如果将服务注册为作用域，则可以在 Web 请求期间共享该服务。</p>
<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequestItemsService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; _items;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestItemsService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[name] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _items[name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果将<code> RequestItemsService</code> 注册为作用域，并将其注入到两个不同的服务中，则可以获取从另一个服务添加的项，因为它们将共享同一个<code>RequestItemsService</code>实例。这是我们对作用域服务的猜想。</p>
<p>但并不是这样，如果创建<strong>子服务作用域</strong>并从子作用域解析 <code>RequestItemsService</code>，将获得 <code>RequestItemsService</code> 的新实例，并且它不会按预期工作。</p>
<p>因此，作用域服务并不意味着每个 Web 请求的实例。</p>
<p>你可能认为你没有犯这么明显的错误（在一个子的作用域内解决一个作用域）。 但是，这不是一个错误（一种非常常见的用法），而且情况可能并不那么简单。 如果服务之间存在很大的依赖关系图，无法知道是否有人创建了子作用域并解析了注入另一个服务的服务……最终注入了作用域服务。</p>
<p><strong>最佳实践</strong>：</p>
<ul>
<li><p>可以将<strong>作用域服务</strong>视为一种<strong>优化</strong>，它在 Web 请求中被太多服务注入。 因此，所有这些服务将在同一个 Web 请求期间使用该服务的单个实例。</p>
</li>
<li><p>作用域内服务不需要设计为线程安全。因为它们通常应由单个Web请求/线程使用。但在这种情况下，不应在<strong>不同线程之间共享服务作用域</strong>。</p>
</li>
<li><p>如果设计一个范围服务以在 <strong>Web 请求中</strong>的其他服务之间共享数据（如上所述），可以将每个 Web 请求数据存储在 <strong>HttpContext</strong> 中（注入 <code>IHttpContextAccessor</code> 以访问它），这是更安全的方法。 <strong>HttpContext</strong> 的生命周期<strong>没有作用域</strong>。 实际上，它根本没有注册到 DI（这就是为什么不注入它，而是注入 IHttpContextAccessor 的原因）。 <strong>HttpContextAccessor 实现使用 AsyncLocal 在 Web 请求期间共享相同的 HttpContext</strong>。</p>
</li>
</ul>
<blockquote>
<p><a href="https://github.com/aspnet/HttpAbstractions/blob/master/src/Microsoft.AspNetCore.Http/HttpContextAccessor.cs">HttpAbstractions/HttpContextAccessor.cs at master · aspnet/HttpAbstractions (github.com)</a></p>
</blockquote>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>依赖关系注入似乎很容易使用，但是如果不遵循一些严格的原则，则存在潜在的多线程和内存泄漏问题。</p>
<blockquote>
<p>作者：<a href="https://github.com/hikalkan">hikalkan (Halil İbrahim Kalkan) (github.com)</a></p>
<p>出处：<a href="https://medium.com/volosoft/asp-net-core-dependency-injection-best-practices-tips-tricks-c6e9c67f9d96">ASP.NET Core Dependency Injection Best Practices, Tips &amp; Tricks | by Halil İbrahim Kalkan | Volosoft | Medium</a></p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ASP.NET Core</tag>
        <tag>DI</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonatype Nexus3 搭建私有仓库</title>
    <url>/2022/07/12/docker-nexus3-build-private-repository/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/NexusRepo_Icon.png" alt="Sonatype-Nexus3"></p>
<div class="note info"><p>Nexus是Sonatype提供的仓库管理平台，Nuexus Repository OSS3能够支持Maven、npm、Docker、YUM、Helm等格式数据的存储和发布；并且能够与Jekins、SonaQube和Eclipse等工具进行集成。<br>Nexus支持作为宿主和代理存储库的本地Maven/Docker存储库，可以直接将这些存储库暴露给客户端工具；也可以以存储库组的方式暴露给客户端工具，存储库组是合并了多个存储库的内容的存储库，能够通过一个URL将多个存储库暴露给客户端工具，从而便于用户的使用。通过nexus自建能够有效减少访问获取镜像的时间和对带宽使用，并能够通过自有的镜像仓库共享企业自己的镜像。</p>
</div>



<h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><p>需要 <strong>2</strong> 个域名，一个用来代理 <code>Nexus </code>管理面板，另一个用做 <code>docker </code>仓库，<code>docker </code>需要单独的端口</p>
<p><strong>Nexus</strong> 前台：<code>registry.jonty.top</code></p>
<p><strong>Docker</strong> 仓库：<code>hub.jonty.top</code></p>
<h3 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h3><p>我们通过<code>Nginx</code>代理<code>Nexus</code>服务，需要先生成<strong>自签名</strong>的SSL证书，通过内部DNS域名访问（无需在<code>docker pull</code>的时候还要带一个端口）</p>
<p>使用一键生成工具：<a href="https://github.com/Fishdrowned/ssl">ssl</a>，两个域名都要<strong>签发证书</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Fishdrowned/ssl.git</span><br><span class="line"><span class="built_in">cd</span> ssl</span><br><span class="line"><span class="comment"># 根据你的域名更改</span></span><br><span class="line">/bin/bash ./gen.cert.sh hub.jonty.top </span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：如果是打算做外网仓库服务，可以直接申请一个免费的SSL证书（云厂商都提供），本文使用内网域名，使用自签名证书</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus3 ssl-master]<span class="comment"># ls</span></span><br><span class="line">ca.cnf  docs  flush.sh  gen.cert.sh  gen.root.sh  LICENSE  out  README.md</span><br><span class="line">[root@nexus3 ssl-master]<span class="comment"># cd out/</span></span><br><span class="line">[root@nexus3 out]<span class="comment"># ls</span></span><br><span class="line">cert.key.pem  index.txt  index.txt.attr  index.txt.attr.old  index.txt.old  newcerts  root.crt  root.key.pem  serial  serial.old</span><br><span class="line">[root@nexus3 out]<span class="comment"># cd ..</span></span><br><span class="line">[root@nexus3 ssl-master]<span class="comment"># /bin/bash gen.cert.sh hub.jonty.top # 换成你的域名</span></span><br><span class="line">Using configuration from ./ca.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject<span class="string">&#x27;s Distinguished Name is as follows</span></span><br><span class="line"><span class="string">countryName           :PRINTABLE:&#x27;</span>CN<span class="string">&#x27;</span></span><br><span class="line"><span class="string">stateOrProvinceName   :ASN.1 12:&#x27;</span>Guangdong<span class="string">&#x27;</span></span><br><span class="line"><span class="string">localityName          :ASN.1 12:&#x27;</span>Guangzhou<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationName      :ASN.1 12:&#x27;</span>Fishdrowned<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationalUnitName:ASN.1 12:&#x27;</span>hub.jonty.top<span class="string">&#x27;</span></span><br><span class="line"><span class="string">commonName            :ASN.1 12:&#x27;</span>*.hub.jonty.top<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Certificate is to be certified until Jul 11 08:06:41 2024 GMT (730 days)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Write out database with 1 new entries</span></span><br><span class="line"><span class="string">Data Base Updated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Certificates are located in:</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 44 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.bundle.crt -&gt; ./20220712-1606/hub.jonty.top.bundle.crt</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 37 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.crt -&gt; ./20220712-1606/hub.jonty.top.crt</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 15 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.key.pem -&gt; ../cert.key.pem</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 11 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/root.crt -&gt; ../root.crt</span></span><br><span class="line"><span class="string">[root@nexus3 ssl-master]# cd out/hub.jonty.top/</span></span><br><span class="line"><span class="string">[root@nexus3 hub.jonty.top]# ls</span></span><br><span class="line"><span class="string">20220712-1606  hub.jonty.top.bundle.crt  hub.jonty.top.crt  hub.jonty.top.key.pem  root.crt</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<h3 id="阿里云签发"><a href="#阿里云签发" class="headerlink" title="阿里云签发"></a>阿里云签发</h3><p>如果有域名，可以购买<code>Aliyun</code>免费ssl证书，<strong>一年有效期</strong>，可以有效避免自签名证书不适用的问题</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220801155820025.png" alt="image-20220801155820025"></p>
<p>申请完成后，下载<code>Nginx</code>证书并上传到服务器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220801160226471.png" alt="image-20220801160226471"></p>
<h3 id="本地域名解析"><a href="#本地域名解析" class="headerlink" title="本地域名解析"></a>本地域名解析</h3><p>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>Linux：<code>vi /etc/hosts</code></p>
<p>将以下解析加入，测试是否可以<code>ping</code>通</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">192.168.2.xx hub.jonty.top</span><br><span class="line">192.168.2.xx registry.jonty.top</span><br></pre></td></tr></table></figure>

<blockquote>
<p>服务端和客户端都需要配置</p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>安装<code>Docker-Engine</code></p>
<blockquote>
<p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus3 ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 20.10.17, build 100c701</span><br><span class="line">[root@nexus3 ~]<span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.6.0</span><br></pre></td></tr></table></figure>

<h3 id="创建数据路径并设置权限"><a href="#创建数据路径并设置权限" class="headerlink" title="创建数据路径并设置权限"></a>创建数据路径并设置权限</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="variable">$PWD</span>/nexus3/data </span><br><span class="line">chmod 777 <span class="variable">$PWD</span>/nexus3/data </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PWD</span>/nexus3</span><br></pre></td></tr></table></figure>

<p>将生成的证书<strong>复制</strong>到<code>$PWD/nexus3/certs</code>目录下(2个域名的证书都需要）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cp hub.jonty.top.crt ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cp hub.jonty.top.key.pem ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cd ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 certs]<span class="comment"># ls</span></span><br><span class="line">hub.jonty.top.crt hub.jonty.top.key.pem</span><br></pre></td></tr></table></figure>

<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>在<code>~/nexus3</code>目录下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3:3.33.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/data:/nexus-data</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.1-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/nginx.conf:/etc/nginx/nginx.conf:ro</span>     <span class="comment"># nginx配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/certs:/etc/nginx/certs</span>                    <span class="comment"># SSL证书</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/log:/var/log/nginx</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&quot;5g&quot;</span>  <span class="comment"># 限制日志大小</span></span><br></pre></td></tr></table></figure>

<h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><p>在同目录下创建<code>nginx.conf</code>，<code>nginx</code>配置文件</p>
<p>请参考<a href="#SSL%E8%AF%81%E4%B9%A6">ssl</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">worker_rlimit_nofile 40000;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 8192;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    upstream nexus3_http &#123;</span><br><span class="line">        server nexus3:8081;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name registry.jonty.top;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name registry.jonty.top; </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># SSL</span></span><br><span class="line">        ssl_certificate /etc/nginx/certs/registry.jonty.top/registry.jonty.top.pem;</span><br><span class="line">    	ssl_certificate_key /etc/nginx/certs/registry.jonty.top/registry.jonty.top.key;</span><br><span class="line">		</span><br><span class="line">        client_max_body_size 5000m;  <span class="comment"># 上传大文件</span></span><br><span class="line">		fastcgi_connect_timeout 300s;</span><br><span class="line">        fastcgi_send_timeout 300s;</span><br><span class="line">        fastcgi_read_timeout 300s;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://nexus3_http;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream nexus_docker_get &#123;</span><br><span class="line">        server nexus3:8082;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    upstream nexus_docker_put &#123;</span><br><span class="line">        server nexus3:8083;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name hub.jonty.top;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name hub.jonty.top;</span><br><span class="line">        <span class="comment"># 证书</span></span><br><span class="line">        ssl_certificate /certs/hub.jonty.top/hub.jonty.top.pem;</span><br><span class="line">        ssl_certificate_key /certs/hub.jonty.top/hub.jonty.top.key;</span><br><span class="line">        ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers <span class="string">&#x27;!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:&#x27;</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_cache shared:SSL:10m;</span><br><span class="line">        client_max_body_size 5000m;</span><br><span class="line">        chunked_transfer_encoding on;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$upstream</span> <span class="string">&quot;nexus_docker_put&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$request_method</span> ~* <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$upstream</span> <span class="string">&quot;nexus_docker_get&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://<span class="variable">$upstream</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_connect_timeout 3600;</span><br><span class="line">                proxy_send_timeout 3600;</span><br><span class="line">                proxy_read_timeout 3600;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_buffering off;</span><br><span class="line">                proxy_request_buffering off;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto http;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>查看目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y tree</span><br><span class="line"><span class="built_in">cd</span> nexus3</span><br><span class="line">tree -C -L 2</span><br><span class="line">tree -C</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220805163921371.png" alt="image-20220805163921371"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805164026553.png" alt="image-20220805164026553"></p>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220712162731428.png" alt="image-20220712162731428"></p>
<p>访问：<a href="https://registry.jonty.top/">https://registry.jonty.top</a></p>
<blockquote>
<p>Nexus初始化需要3~5min，初始化完成后可访问</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220712163303455.png" alt="image-20220712163303455"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="密码配置"><a href="#密码配置" class="headerlink" title="密码配置"></a>密码配置</h3><p>查看<code>admin</code>默认密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># cat data/admin.password</span></span><br><span class="line">098fb8d9-e07b-4f7f-b498-806cdce1291d</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220712164027694.png" alt="image-20220712164027694"></p>
<h3 id="Docker存储库"><a href="#Docker存储库" class="headerlink" title="Docker存储库"></a>Docker存储库</h3><h4 id="创建Blob存储"><a href="#创建Blob存储" class="headerlink" title="创建Blob存储"></a>创建Blob存储</h4><p>创建用于存放<code>docker</code>镜像文件的存储区域</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712164443301.png" alt="image-20220712164443301"></p>
<h4 id="创建存储库"><a href="#创建存储库" class="headerlink" title="创建存储库"></a>创建存储库</h4><p>存储库有以下三种类型：</p>
<ul>
<li><p><strong>proxy</strong>：表示代理仓库，请求包(package)的时候，如果本地有，它就从本地提供，如果本地没有，则从代理地址下载到本地，然后提供这个包。</p>
</li>
<li><p><strong>hosted</strong>：表示托管仓库，一般用于推送开发的包到该仓库。</p>
</li>
<li><p><strong>group</strong>：表示仓库组，它结合了proxy和hosted，能对外提供上述两者中的包，<strong>对外的出口</strong></p>
</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20220712164651836.png" alt="image-20220712164651836"></p>
<h5 id="hosted：本地仓库"><a href="#hosted：本地仓库" class="headerlink" title="hosted：本地仓库"></a>hosted：本地仓库</h5><p>创建<code>hosted</code>类型，用于存储<strong>本地</strong>推送的镜像</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220801170444372.png" alt="image-20220801170444372"></p>
<p>端口设置为<code>8083</code>，对应<code>nginx.conf</code>配置<code>nexus_docker_put</code></p>
<img data-src="https://cdn.jonty.top/img/image-20220801170157413.png" alt="image-20220801170157413" style="zoom:67%;" />



<h5 id="proxy-：代理仓库"><a href="#proxy-：代理仓库" class="headerlink" title="proxy ：代理仓库"></a>proxy ：代理仓库</h5><p>代理官方源：<code>https://registry-1.docker.io</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805164336262.png" alt="image-20220805164336262"></p>
<p>代理阿里云私有仓库（可公开拉取）：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805164414466.png" alt="image-20220805164414466"></p>
<p>如果代理的私有库需要<strong>授权</strong>：</p>
<img data-src="https://cdn.jonty.top/img/image-20220801170854550.png" alt="image-20220801170854550" style="zoom:67%;" />

<h5 id="group-仓库组"><a href="#group-仓库组" class="headerlink" title="group : 仓库组"></a>group : 仓库组</h5><p>端口设置为<code>8082</code>，对应<code>nginx.conf</code>配置<code>nexus_docker_get</code></p>
<p>编辑组成员，根据顺序可排<strong>优先级</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805164454963.png" alt="image-20220805164454963"></p>
<h3 id="上传docker镜像"><a href="#上传docker镜像" class="headerlink" title="上传docker镜像"></a>上传docker镜像</h3><h4 id="配置授信"><a href="#配置授信" class="headerlink" title="配置授信"></a>配置授信</h4><blockquote>
<p>使用自签名证书需要配置此步骤</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>加入以下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;https://hub.jonty.top&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启<code>docker</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker登录私库时提示 <code>x509: certificate signed by unknown authority</code></p>
</blockquote>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># docker login hub.jonty.top -u admin</span></span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG             IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx             1.21.1-alpine   1318bf5f63b4   10 months ago   22.8MB</span><br><span class="line">sonatype/nexus3   3.33.1          a0d390a200d2   10 months ago   655MB</span><br><span class="line">[root@nexus3 nexus3]<span class="comment"># docker tag nginx:1.21.1-alpine hub.jonty.top/nginx:1.21.1-alpine</span></span><br><span class="line">[root@nexus3 nexus3]<span class="comment"># docker push hub.jonty.top/nginx:1.21.1-alpine</span></span><br><span class="line">The push refers to repository [hub.jonty.top/nginx]</span><br><span class="line">45d993692050: Pushed</span><br><span class="line">1ea998b95474: Pushed</span><br><span class="line">95b99a5c3767: Pushed</span><br><span class="line">fc03e3cb8568: Pushed</span><br><span class="line">24934e5e6c61: Pushed</span><br><span class="line">e2eb06d8af82: Pushed</span><br><span class="line">1.21.1-alpine: digest: sha256:bd0aa91fe6a182db22032463c17644cd2ff3bbe415e7b84964283bba687acaa6 size: 1568</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220712170930285.png" alt="image-20220712170930285"></p>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><blockquote>
<p>注意，客户端需要<a href="#%E9%85%8D%E7%BD%AE%E6%8E%88%E4%BF%A1">配置授信</a>和<a href="#%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">域名解析</a>，如果开启<strong>允许匿名拉取</strong>则不需授信，配置了路由器DNS则不需要配置<strong>hosts</strong>文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.2.xx hub.jonty.top</span><br><span class="line">192.168.2.xx registry.jonty.top</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://hub.jonty.top&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># docker pull hub.jonty.top/mssql:2019-latest</span></span><br><span class="line">2019-latest: Pulling from mssql</span><br><span class="line">d5fd17ec1767: Already exists </span><br><span class="line">cf291b38357f: Pull complete </span><br><span class="line">af7e8d6f1719: Pull complete </span><br><span class="line">Digest: sha256:584a7fc7e2a378bdd4e8fe3bad36dae18e85527308193cb5c43d90863d7a7d4a</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hub.jonty.top/mssql:2019-latest</span><br><span class="line">hub.jonty.top/mssql:2019-latest</span><br></pre></td></tr></table></figure>

<h4 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab-CI"></a>Gitlab-CI</h4><blockquote>
<p> <a href="https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#access-an-image-from-a-private-container-registry">在 Docker 容器中运行 CI/CD 作业|GitLab</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nexus3 ~]# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">	&quot;auths&quot;: &#123;</span><br><span class="line">		&quot;https://index.docker.io/v1/&quot;: &#123;</span><br><span class="line">			&quot;auth&quot;: &quot;am9udHltYXg6Sm9udHlNYXgzMjE=&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;hub.jonty.top&quot;: &#123;</span><br><span class="line">			&quot;auth&quot;: &quot;YWRtaW46Z2N0bmV4dXMz&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;[root@nexus3 ~]# </span><br><span class="line">[root@nexus3 ~]# echo -n &quot;admin:nexus3&quot; | base64</span><br><span class="line">YWRtaW46Z2N0bmV4dXMz</span><br></pre></td></tr></table></figure>

<p>CI配置：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">variables:</span><br><span class="line">  DOCKER_AUTH_CONFIG: <span class="string">&#x27;&#123;&quot;auths&quot;: &#123;&quot;hub.jonty.top&quot;: &#123;&quot;auth&quot;: &quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="设置匿名拉取"><a href="#设置匿名拉取" class="headerlink" title="设置匿名拉取"></a>设置匿名拉取</h4><p>按需开启，开启则不需要配置以上授信部分</p>
<img data-src="https://cdn.jonty.top/img/image-20220727093218720.png" alt="image-20220727093218720" style="zoom:67%;" />



<h3 id="NuGet存储库"><a href="#NuGet存储库" class="headerlink" title="NuGet存储库"></a>NuGet存储库</h3><h4 id="上传nuget包"><a href="#上传nuget包" class="headerlink" title="上传nuget包"></a>上传nuget包</h4><p>Nexus默认已经创建好了Nuget的仓库，并且是创建了3个不同类型的仓库：nuget-group，nuget-hosted，nuget.org-proxy</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712172140135.png" alt="image-20220712172140135"></p>
<h4 id="添加Nuget-Realms"><a href="#添加Nuget-Realms" class="headerlink" title="添加Nuget Realms"></a>添加Nuget Realms</h4><p>Nexus认证Nuget是通过Realms来认证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712172321065.png" alt="image-20220712172321065"></p>
<h4 id="获取仓库地址以及Nuget-API-Key"><a href="#获取仓库地址以及Nuget-API-Key" class="headerlink" title="获取仓库地址以及Nuget API Key"></a>获取仓库地址以及Nuget API Key</h4><p>仓库列表&gt;复制地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712172440616.png" alt="image-20220712172440616"></p>
<p>获取<code>NuGet API Key</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712172607085.png" alt="image-20220712172607085"></p>
<h4 id="推送本地NuGet包"><a href="#推送本地NuGet包" class="headerlink" title="推送本地NuGet包"></a>推送本地NuGet包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dotnet nuget push .\abp.7.2.1.nupkg -k 238d37fc-9fae-335d-a812-29c2799d8f0e --source https://registry.jonty.top/repository/nuget-hosted/</span><br><span class="line">正在将 abp.7.2.1.nupkg 推送到 &#x27;https://registry.jonty.top/repository/nuget-hosted/&#x27;...</span><br><span class="line">  PUT https://registry.jonty.top/repository/nuget-hosted/</span><br><span class="line">  Created https://registry.jonty.top/repository/nuget-hosted/ 288 毫秒</span><br><span class="line">已推送包。</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220712172736234.png" alt="image-20220712172736234"></p>
<h4 id="配置本地NuGet包源"><a href="#配置本地NuGet包源" class="headerlink" title="配置本地NuGet包源"></a>配置本地NuGet包源</h4><p>在VS中添加了<strong>本地源</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712172917172.png" alt="image-20220712172917172"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220712173030239.png" alt="image-20220712173030239"></p>
<h3 id="新增Nuget代理"><a href="#新增Nuget代理" class="headerlink" title="新增Nuget代理"></a>新增Nuget代理</h3><blockquote>
<p>代理公网的私有源，如Nuget、Gitlab</p>
</blockquote>
<p>启用NuGet V3版本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805165042203.png" alt="image-20220805165042203"></p>
<p>私有源授权<img data-src="https://cdn.jonty.top/img/image-20220801173138755.png" alt="image-20220801173138755"></p>
<h4 id="添加仓库组"><a href="#添加仓库组" class="headerlink" title="添加仓库组"></a>添加仓库组</h4><p><img data-src="https://cdn.jonty.top/img/image-20220805165114055.png" alt="image-20220805165114055"></p>
<h4 id="NuGet-V3"><a href="#NuGet-V3" class="headerlink" title="NuGet V3"></a>NuGet V3</h4><p>正常访问nuget-group:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://registry.jonty.top/repository/nuget-group/</span><br></pre></td></tr></table></figure>

<p>使用V3版本需要添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://registry.jonty.top/repository/nuget-group/index.json</span><br></pre></td></tr></table></figure>

<h4 id="使用私有NuGet源"><a href="#使用私有NuGet源" class="headerlink" title="使用私有NuGet源"></a>使用私有NuGet源</h4><p>如果是代理私有库，先删除本地源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet nuget list <span class="built_in">source</span></span><br><span class="line">dotnet nuget remove <span class="built_in">source</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure>

<p>添加私有源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet nuget add <span class="built_in">source</span> https://registry.jonty.top/repository/nuget-group/index.json -n nexus3 -u admin -p nexus3 --store-password-in-clear-text</span><br></pre></td></tr></table></figure>

<p>清空本地nuget缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dotnet nuget locals http-cache --clear</span><br><span class="line">dotnet nuget locals global-packages --clear</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当代理的源更新后，Nexus本地缓存会导致无法找到最新包，可手动清理</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220801164922446.png" alt="image-20220801164922446"></p>
<h3 id="NPM存储库"><a href="#NPM存储库" class="headerlink" title="NPM存储库"></a>NPM存储库</h3><h4 id="NPM代理"><a href="#NPM代理" class="headerlink" title="NPM代理"></a>NPM代理</h4><p><strong>官方源</strong>：</p>
<p><a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220801175628966.png" alt="image-20220801175628966"></p>
<p>私有库授权：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220801175743567.png" alt="image-20220801175743567"></p>
<h4 id="NPM仓库组"><a href="#NPM仓库组" class="headerlink" title="NPM仓库组"></a>NPM仓库组</h4><p><img data-src="https://cdn.jonty.top/img/image-20220805165359080.png" alt="image-20220805165359080"></p>
<h3 id="使用NPM代理"><a href="#使用NPM代理" class="headerlink" title="使用NPM代理"></a>使用NPM代理</h3><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --legacy-peer-deps  -verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看npm源</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册私有源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.jonty.top/repository/npm-group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录私服</span></span><br><span class="line">npm login registry=<span class="string">&quot;https://registry.jonty.top/repository/npm-group/&quot;</span>  </span><br><span class="line"></span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>

<blockquote>
<p>npm 新版本 <code>-g</code>需要替换为<code>--location=global</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看yarn配置</span></span><br><span class="line">yarn config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置私有源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.jonty.top/repository/npm-group/</span><br><span class="line"></span><br><span class="line">yarn cache clean</span><br></pre></td></tr></table></figure>

<h4 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h4><p>查看私服密钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@nexus3 ~]# cat ~/.npmrc</span><br><span class="line">registry=http://registry.jonty.top/repository/npm-group/</span><br><span class="line">//registry.jonty.top/repository/npm-group/:_authToken=NpmToken.72b83be3-4b24-3dd1-850f-056cd78bb513</span><br></pre></td></tr></table></figure>

<h4 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">@delivery:registry=https:<span class="comment">//registry.jonty.top/repository/npm-group/</span></span><br><span class="line"><span class="comment">//registry.jonty.top/repository/npm-group/:_authToken=NpmToken.612e0fd9-1526-3acd-9165-4e604d49a73d</span></span><br><span class="line">always-auth=<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><img data-src="https://cdn.jonty.top/img/gitlab_workflow_example_extended_v12_3.png" alt="Deeper look into the basic CI/CD workflow"></p>
<p>主要是配合<code>Gitlab Runner CI/CD</code>编译打包</p>
<blockquote>
<p><a href="https://docs.gitlab.com/runner/">Runner执行流程</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220805171720344.png" alt="Runner执行流程"></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>后端项目从平均<code>12min</code>提升到<code>3min</code>以内，包括拉取代码、执行还原、编译打包、推送等操作</p>
<p>前端项目从平均大于10min（30min也很常见）提升到7min以内，<code>restore</code>速度很快，主要是<code>build</code>操作缓慢，并且随着依赖增多变得更慢</p>
<p><strong>使用前</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805165923326.png" alt="ci-before"></p>
<p><strong>使用后</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220805170835741.png" alt="ci-after"></p>
<blockquote>
<p>搞定~</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220712171653152.png" alt="挠屁股"></p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h3><p>配置 nexus3 时使用 http 而非 https</p>
<h3 id="no-basic-auth-credentials"><a href="#no-basic-auth-credentials" class="headerlink" title="no basic auth credentials"></a>no basic auth credentials</h3><p>需要先 docker login 登录</p>
<h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>docker login -u admin -p Harbor12345 hub.haifengat.com 登录时报错</p>
<p><img data-src="https://cdn.jonty.top/img/1631446538601-5b8a97b1-ebb0-4cbb-82d1-d7353c683fb3.png" alt="img"></p>
<p>参考文档：</p>
<p><a href="https://blog.csdn.net/yangkuo024/article/details/121135602">解决Error response from daemon: Get https://: http: server gave HTTP response to HTTPS client_SerryYang的博客-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/liusf1993/article/details/102508663">docker登录私库时提示 x509: certificate signed by unknown authority_舟行于无涯之海的博客-CSDN博客_docker login x509</a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nexus</tag>
        <tag>SSL</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 三剑客之 Docker Swarm</title>
    <url>/2022/07/06/getting-started-with-docker-swarm/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/Moby-run-900x551.png.jpg" alt="docker"></p>
<div class="note info"><p>Docker Swarm是管理跨节点容器的编排工具，相较于Docker Compose而言，Compose只能编排单节点上的容器，Swarm将一群Docker节点虚拟化为一个主机，使得用户只要在单一主机上操作就能完成对整个容器集群的管理工作。</p>
</div>

<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>准备三个节点，要求实现奇数个节点</p>
<blockquote>
<p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/">How nodes work | Docker Documentation</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.1 ————作为manager</span><br><span class="line">192.168.2.2 ————作为node1</span><br><span class="line">192.168.2.3 ————作为node2</span><br></pre></td></tr></table></figure>

<p>三个节点在同一个网段，确保相互之间可以ping通</p>
<p>安装<code>Docker-Engine</code></p>
<blockquote>
<p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p>
</blockquote>
<p>查看是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker --version</span><br><span class="line">Docker version 20.10.17, build 100c701</span><br><span class="line">[root@manager ~]# docker compose version</span><br><span class="line">Docker Compose version v2.6.0</span><br></pre></td></tr></table></figure>

<h2 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h2><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/">节点的工作原理|Docker 文档</a></p>
</blockquote>
<p>如下图所示，swarm 集群由管理节点（manager）和工作节点（work node）构成。</p>
<ul>
<li><strong>swarm mananger</strong>：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。</li>
<li><strong>work node</strong>：即图中的 available node，主要负责运行相应的服务来执行任务（task）</li>
</ul>
<p><img data-src="https://docs.docker.com/engine/swarm/images/swarm-diagram.png" alt="群模式集群"></p>
<p>在创建集群之前，使用<code>docker node ls</code>想查看下集群中节点的信息，反馈目前没有节点信息，并且当前节点并不是<code>manager</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure>

<h3 id="创建一个Swarm"><a href="#创建一个Swarm" class="headerlink" title="创建一个Swarm"></a>创建一个Swarm</h3><p>在创建集群之前，使用<code>docker node ls</code>想查看下集群中节点的信息，反馈目前没有节点信息，并且当前节点并不是<code>manager</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure>

<p>创建新的集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.1 </span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker swarm init --advertise-addr 192.168.2.81</span><br><span class="line">Swarm initialized: current node (44qw5hbq836fryftoc51pnlbn) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-xxxxxxxxxxx-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.</span><br></pre></td></tr></table></figure>

<p><code>docker swarm join-token manager</code>  命令用于获取添加新的 Manager Node 的命令参数</p>
<p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p>
<h3 id="加入Swarm"><a href="#加入Swarm" class="headerlink" title="加入Swarm"></a>加入Swarm</h3><p>可以在其它节点上执行<code>docker swarm join --token......</code>来将该节点设置为工作node，并加入到这个swarm集群中</p>
<p>目前演示的是一个<code>manager</code>，两个工作node的模式，所以在<code>node1</code>和<code>node2</code>上执行第一个命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-xxxxxxxx-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th align="left">命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">docker swarm init</td>
<td>初始化集群</td>
</tr>
<tr>
<td align="left">docker swarm join-token worker</td>
<td>查看工作节点的 token</td>
</tr>
<tr>
<td align="left">docker swarm join-token manager</td>
<td>查看管理节点的 token</td>
</tr>
<tr>
<td align="left">docker swarm join</td>
<td>加入集群</td>
</tr>
</tbody></table>
<blockquote>
<p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/swarm/">docker swarm | Docker Documentation</a></p>
</blockquote>
<h3 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20220704145815755.png" alt="image-20220704145815755" style="zoom:67%;" />



<h3 id="查看节点列表"><a href="#查看节点列表" class="headerlink" title="查看节点列表"></a>查看节点列表</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure>

<p>节点 ID 旁边的<code>*</code>表示当前已在此节点上连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">44qw5hbq836fryftoc51pnlbn *   manager    Ready     Active         Leader           20.10.17</span><br><span class="line">q3yd5vno8t4c9hgi47mqztzbr     node1      Ready     Active                          20.10.17</span><br><span class="line">svwqj9t6g4izhsbnh0oneq4lw     node2      Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure>

<p>注意，<code>manager</code>是管理集群的入口，<code>docke</code>r命令都是在<code>manager</code>上执行，<code>node</code>节点上是不能执行<code>docker</code>命令的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node1 ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Worker nodes can&#x27;t be used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.</span><br></pre></td></tr></table></figure>

<h3 id="查看节点详细信息"><a href="#查看节点详细信息" class="headerlink" title="查看节点详细信息"></a>查看节点详细信息</h3><p>使用以下命令查看节点的详情：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker node inspect --pretty 节点名称</span><br></pre></td></tr></table></figure>

<h3 id="添加新的-Manager-Node-到集群"><a href="#添加新的-Manager-Node-到集群" class="headerlink" title="添加新的 Manager Node 到集群"></a>添加新的 Manager Node 到集群</h3><p>在另一台机器运行 <code>docker swarm join</code> 命令加入已存在的集群中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-5d47eim8blk5jh37ww2eua7ve0r3u4w106j7oaoxuf4ilva0tw-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br></pre></td></tr></table></figure>

<p>Manager Node 必须是单数（Raft），生产环境推荐3台或5台作为 <code>Manager Node</code></p>
<p><img data-src="https://cdn.jonty.top/img/4-1Z41Q25622D1.gif" alt="多数管理节点的分区继续对集群进行管理"></p>
<blockquote>
<p><code>docker swarm join-token manager</code>  命令用于获取添加新的 Manager Node 的命令参数</p>
</blockquote>
<p><img data-src="https://docs.docker.com/engine/swarm/images/replicated-vs-global.png" alt="global vs replicated services"></p>
<h3 id="添加新的-Worker-Node-到集群"><a href="#添加新的-Worker-Node-到集群" class="headerlink" title="添加新的 Worker Node 到集群"></a>添加新的 Worker Node 到集群</h3><p>在另一台机器运行 </p>
<p><code>docker swarm join</code> 命令加入已存在的集群中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-5qv7t73fvawvh795ckh3nxl9vnyo2hwwsqnnjwqyav3spj7ufu-1i7wir7oc3g9fh7yidg19i8p5 192.168.1.80:2377</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p>
</blockquote>
<h3 id="禁用节点"><a href="#禁用节点" class="headerlink" title="禁用节点"></a>禁用节点</h3><blockquote>
<p>在生产环境 Manager Node 不推荐运行任何容器实例，但是 Swarm 调度器会分配给Manager Node，</p>
<p>可以通过 <strong>禁用节点</strong> 告诉 Swarm 调度器不要分配给 Manager Node 任何容器实例。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker node update --availability drain 节点名称</span><br></pre></td></tr></table></figure>

<h3 id="启用节点"><a href="#启用节点" class="headerlink" title="启用节点"></a>启用节点</h3><p>禁用节点后使用以下命令即可启用节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker node update --availability active 节点名称</span><br></pre></td></tr></table></figure>

<h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker node update --label-add foo --label-add bar=baz 节点名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>–label-add：给节点添加标签，可以用来控制服务放置</p>
</blockquote>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>docker node ls</td>
<td>查看所有集群节点</td>
</tr>
<tr>
<td>docker node rm</td>
<td>删除某个节点（<code>-f</code>强制删除）</td>
</tr>
<tr>
<td>docker node inspect</td>
<td>查看节点详情</td>
</tr>
<tr>
<td>docker node demote</td>
<td>节点降级，由管理节点降级为工作节点</td>
</tr>
<tr>
<td>docker node promote</td>
<td>节点升级，由工作节点升级为管理节点</td>
</tr>
<tr>
<td>docker node update</td>
<td>节点升级，由工作节点升级为管理节点</td>
</tr>
<tr>
<td>docker node ps</td>
<td>查看节点中的 Task 任务</td>
</tr>
</tbody></table>
<blockquote>
<p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/node/">docker node | Docker Documentation</a></p>
</blockquote>
<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><blockquote>
<p>参考文档：<a href="https://docs.docker.com/engine/swarm/services/">将服务部署到群|Docker 文档</a></p>
<p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/">How services work | Docker Documentation</a></p>
</blockquote>
<p>将服务部署到 swarm 时，swarm 管理器接收服务定义作为服务的所需状态。然后，它将群中的节点上的服务调度为一个或多个副本任务。这些任务在群中的节点上彼此独立运行。</p>
<p>例如，假设在 HTTP 侦听器的三个实例之间进行负载平衡。下图显示了具有三个副本的 HTTP 侦听器服务。侦听器的三个实例中的每一个都是群中的一个任务。</p>
<p><img data-src="https://cdn.jonty.top/img/services-diagram.png" alt="服务图"></p>
<h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><p>连接到  Manager Node，使用 </p>
<p><code>docker service create</code> 命令创建服务.</p>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>--name</code> 指定服务名称为 <code>helloworld</code></p>
</li>
<li><p><code>--replicas</code> 指定服务运行实例数量为 <code>1</code></p>
</li>
<li><p>参数 <code>alpine</code> 表示运行的镜像为 <code>Alpine Linux</code></p>
</li>
<li><p>参数 <code>ping docker.com</code> 表示在容器中执行的命令</p>
</li>
</ul>
<h3 id="查看运行的服务"><a href="#查看运行的服务" class="headerlink" title="查看运行的服务"></a>查看运行的服务</h3><p>在 Manager Node 运行此命令查看正在运行的服务列表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker service ls</span><br><span class="line">ID             NAME                    MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">82bpay4gdvd0   deploy-demo_nginx       replicated   3/3        nginx:latest                 *:8088-&gt;80/tcp</span><br><span class="line">7cad5hto20ql   deploy-demo_portainer   replicated   1/1        portainer/portainer:latest   *:9000-&gt;9000/tcp</span><br><span class="line">520x2l3lcwyp   redis                   replicated   2/2        redis:3.0.6                  *:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure>

<h3 id="查看服务的详细信息"><a href="#查看服务的详细信息" class="headerlink" title="查看服务的详细信息"></a>查看服务的详细信息</h3><p>在 Manager Node  运行此命令查看服务的运行详情：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service inspect --pretty 服务名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数 <code>--pretty</code> 表示返回格式化后的详细信息，不加这个参数则打印 <code>JSON</code> 格式的信息</p>
</blockquote>
<h3 id="查看服务运行在哪些节点"><a href="#查看服务运行在哪些节点" class="headerlink" title="查看服务运行在哪些节点"></a>查看服务运行在哪些节点</h3><p>在 Manager Node 使用此命令查看服务都在那些节点运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ps 服务名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker-swarm 中的服务实例由 swarm 调度。因此有部分服务的实例运行在 Manager Node 是正常表现。</p>
</blockquote>
<h3 id="伸缩服务"><a href="#伸缩服务" class="headerlink" title="伸缩服务"></a>伸缩服务</h3><p>docker-swarm 支持对服务实例进行动态伸缩，使用以下命令即可实现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service scale 服务名称=实例数量(最少为1)</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker service scale redis=2</span><br><span class="line">redis scaled to 2</span><br><span class="line">overall progress: 2 out of 2 tasks </span><br><span class="line">1/2: running   [==================================================&gt;] </span><br><span class="line">2/2: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>

<h3 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h3><p>在 Manager Node 使用以下命令删除服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service rm 服务名称</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，因为是集群的原因，集群中的Node将会存在延迟的情况，想确认服务是否被删除成功请使用 <code>docker service ls</code> 查看</p>
</blockquote>
<h3 id="滚动更新服务"><a href="#滚动更新服务" class="headerlink" title="滚动更新服务"></a>滚动更新服务</h3><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>进入 Manager Node 创建一个redis服务用于演示滚动更新：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 3 \</span><br><span class="line">  --name redis \</span><br><span class="line">  --update-delay 10s \</span><br><span class="line">  redis:3.0.6</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>--update-dely</code> 表示更新服务或服务集之间的时间延迟：<code>1h10m3s</code>，表示延迟1小时10分钟3秒。</p>
</blockquote>
<blockquote>
<p>调度器默认一次更新一个任务，可以通过 <code>--update-parallelism</code> 参数配置调度器同时更新服务数量。</p>
</blockquote>
<blockquote>
<p>默认情况下，当单个服务更新返回状态为 <code>RUNNING</code>，调度器会让另一个服务更新，直到所有服务都更新完成。</p>
</blockquote>
<blockquote>
<p>如果在更新期间某个服务返回 <code>FAILED</code> ，调度器会暂停更新，可以通过 <code>--update-failure-action</code> 参数配置控制当服务更新发生错误时的行为。</p>
</blockquote>
<h4 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a>检查服务状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service inspect --pretty redis</span><br></pre></td></tr></table></figure>

<h4 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service update --image redis:3.0.7 redis</span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认情况下，调度器将按以下方式更新服务：</p>
</blockquote>
<ul>
<li><blockquote>
<p>停止一个服务</p>
</blockquote>
</li>
<li><blockquote>
<p>更新已停止的服务</p>
</blockquote>
</li>
<li><blockquote>
<p>启动已更新的服务</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>如果更新的服务返回 <code>RUNNING</code> ，等待指定的延迟时间后开始更新下一个服务</p>
</blockquote>
<blockquote>
<p>如果更新期间某个服务返回 <code>FAILED</code> ，则暂停服务更新</p>
</blockquote>
<h4 id="重新启动暂停的服务更新"><a href="#重新启动暂停的服务更新" class="headerlink" title="重新启动暂停的服务更新"></a>重新启动暂停的服务更新</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service update redis</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了避免重复某些失败的更新，可以重新指定更新参数</p>
</blockquote>
<h4 id="查看服务的滚动更新"><a href="#查看服务的滚动更新" class="headerlink" title="查看服务的滚动更新"></a>查看服务的滚动更新</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ps redis</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在swarm更新完成所有服务之前，可以看到一些服务的镜像为 <code>redis:3.0.6</code>，另一些为 <code>redis:3.0.7</code></p>
</blockquote>
<h3 id="指定服务约束"><a href="#指定服务约束" class="headerlink" title="指定服务约束"></a>指定服务约束</h3><blockquote>
<p><a href="https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-constraints---constraint">泊坞窗服务创建|Docker 文档</a></p>
<p><a href="https://docs.docker.com/engine/swarm/services/#control-service-placement">将服务部署到群|Docker 文档</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/placement_prefs.png" alt="placement_prefs"></p>
<h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>docker service create</td>
<td>部署服务</td>
</tr>
<tr>
<td>docker service inspect</td>
<td>查看服务详情</td>
</tr>
<tr>
<td>docker service logs</td>
<td>查看某个服务日志</td>
</tr>
<tr>
<td>docker service ls</td>
<td>查看所有服务详情</td>
</tr>
<tr>
<td>docker service rm</td>
<td>删除某个服务（<code>-f</code>强制删除）</td>
</tr>
<tr>
<td>docker service scale</td>
<td>设置某个服务个数</td>
</tr>
<tr>
<td>docker service update</td>
<td>更新某个服务</td>
</tr>
</tbody></table>
<blockquote>
<p>命令参考：<a href="https://docs.docker.com/engine/reference/commandline/service/">docker service | Docker Documentation</a></p>
</blockquote>
<h2 id="路由网格"><a href="#路由网格" class="headerlink" title="路由网格"></a>路由网格</h2><p>docker swarm支持路由网格。路由网格让处于swarm集群中的任意一个节点都可以作为被访问的入口，即使此节点没有运行任何服务。</p>
<p>要在 swarm 集群中使用使用路由网格，首先需要开启加入swarm集群的节点的以下端口：</p>
<ul>
<li><p><code>7946</code> ：容器网络发现</p>
</li>
<li><p><code>4789</code> ：容器网络入口</p>
</li>
</ul>
<p>其次需要将节点服务实例的端口公开，使服务可以被外部访问（例如使用nginx做负载均衡）</p>
<h3 id="服务原理"><a href="#服务原理" class="headerlink" title="服务原理"></a>服务原理</h3><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/ingress/">使用群模式路由网格|Docker 文档</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/ingress-routing-mesh.png" alt="服务入口映像"></p>
<h3 id="创建服务时公开端口"><a href="#创建服务时公开端口" class="headerlink" title="创建服务时公开端口"></a>创建服务时公开端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  --publish published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>--publish</code> 与 <code>-p</code> 效果相同，其中 <code>--published</code> 值为公布的端口，<code>target</code> 值为容器内部监听的端口。<code>--publish</code> 的写法</p>
</blockquote>
<h3 id="更新现有服务的公开端口"><a href="#更新现有服务的公开端口" class="headerlink" title="更新现有服务的公开端口"></a>更新现有服务的公开端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">  --publish-add published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;SERVICE&gt;</span><br></pre></td></tr></table></figure>

<h3 id="查看服务发布的端口"><a href="#查看服务发布的端口" class="headerlink" title="查看服务发布的端口"></a>查看服务发布的端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service inspect --format=&quot;&#123;&#123;json .Endpoint.Spec.Ports&#125;&#125;&quot; 服务名称</span><br></pre></td></tr></table></figure>

<h3 id="只公开TCP或UDP端口"><a href="#只公开TCP或UDP端口" class="headerlink" title="只公开TCP或UDP端口"></a>只公开TCP或UDP端口</h3><p>默认情况下公开端口都是 TCP 端口，你可以通过参数配置公开端口的类型：</p>
<h4 id="仅TCP"><a href="#仅TCP" class="headerlink" title="仅TCP"></a>仅TCP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<h4 id="仅UDP"><a href="#仅UDP" class="headerlink" title="仅UDP"></a>仅UDP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<h4 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP+UDP"></a>TCP+UDP</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<h3 id="绕过路由网格"><a href="#绕过路由网格" class="headerlink" title="绕过路由网格"></a>绕过路由网格</h3><p>要绕过 swarm 集群的路由网格，需要使用 </p>
<p><code>--publish</code> 参数设置 <code>mode</code> 值为<code>host</code>。</p>
<p>下面的命令使用 </p>
<p><code>host</code> 模式创建全局服务并绕过路由网格：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp,mode=host \</span><br><span class="line">  --mode global \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure>

<blockquote>
<p>绕过路由网格后的注意事项：</p>
<p>如果你访问未运行服务的节点，则无法访问此服务</p>
<p>如果你希望在每个节点运行多个服务，就不能指定静态的端口。要么就允许docker随机分配一个公开端口（通过置空 <code>published</code> 参数的值实现）</p>
</blockquote>
<h2 id="Stack-Deploy"><a href="#Stack-Deploy" class="headerlink" title="Stack-Deploy"></a>Stack-Deploy</h2><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/stack-deploy/">Deploy a stack to a swarm | Docker Documentation</a></p>
</blockquote>
<p>正式部署集群服务，使用<code>nginx</code>镜像做为示例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker service create --replicas 3 -p 8088:80 --name nginx nginx:latest</span><br><span class="line">ap8h8srb8yh3mni0h2nz61njz</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   [==================================================&gt;] </span><br><span class="line">2/3: running   [==================================================&gt;] </span><br><span class="line">3/3: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br></pre></td></tr></table></figure>

<p><code>--replicas 3</code>表示创建服务的实例个数（默认1个），在个Docker节点上，分别创建一个<code>nginx</code>服务，<code>REPLICAS</code>会有进度显示，并且执行是异步的</p>
<p>查看服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker service ls</span><br><span class="line">ID             NAME                    MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">82bpay4gdvd0   deploy-demo_nginx       replicated   3/3        nginx:latest                 *:8088-&gt;80/tcp</span><br><span class="line">520x2l3lcwyp   redis                   replicated   2/2        redis:3.0.6                  *:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure>

<p>访问任一节点8088端口：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220706214254711.png" alt="image-20220706214254711"></p>
<p><code>docker service</code>部署的是单体服务，我使用<code>docker stack</code>进行多服务编排部署，使用的同样是<code>docker-compose.yml</code>配置文件，示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8088</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>] <span class="comment">## 约束服务 仅在manager node 分配</span></span><br></pre></td></tr></table></figure>

<p>部署命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker stack deploy -c docker-compose.yml deploy-demo</span><br><span class="line">Creating service deploy-demo_nginx</span><br><span class="line">Creating service deploy-demo_portainer</span><br></pre></td></tr></table></figure>

<p>查看部署详情：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@manager ~]# docker stack ls</span><br><span class="line">NAME          SERVICES   ORCHESTRATOR</span><br><span class="line">deploy-demo   2          Swarm</span><br></pre></td></tr></table></figure>

<p>访问<code>portainer</code>，可以方便的查看和管理所有的服务和堆栈</p>
<p><img data-src="https://cdn.jonty.top/img/swarm-portainer.gif" alt="swarm-portainer"></p>
<p>编写支持<code>docker stack</code>的<code>docker-compose.yml</code></p>
<blockquote>
<p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Documentation</a></p>
</blockquote>
<p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.0.5</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span> <span class="comment"># 启动实例数量</span></span><br><span class="line">      <span class="attr">placement:</span> <span class="comment"># 配置容器实例位置------------</span></span><br><span class="line">        <span class="attr">max_replicas_per_node:</span> <span class="number">2</span> <span class="comment"># 每个节点最多运行容器实例数量</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="comment"># 将容器分配到匹配标签的节点运行</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;engine.labels.operatingsystem==ubuntu 18.04&quot;</span></span><br><span class="line">        <span class="attr">preferences:</span> <span class="comment"># 将任务平均分配到不同类别的节点上</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">spread:</span> <span class="string">node.labels.zone</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment"># 资源限制------------</span></span><br><span class="line">        <span class="attr">limits:</span> <span class="comment"># 占用上限</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.50&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span> <span class="comment"># 启动占用</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.25&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">    <span class="attr">restart_policy:</span> <span class="comment"># 重启策略------------</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span> <span class="comment"># 发生失败时</span></span><br><span class="line">                <span class="attr">delay:</span> <span class="string">5s</span> <span class="comment"># 重启时间间隔</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span> <span class="comment">#最大尝试次数        </span></span><br><span class="line">                <span class="attr">window:</span> <span class="string">120s</span> <span class="comment"># 判断是否重启成功的等待时长                </span></span><br><span class="line">    <span class="attr">update_config:</span> <span class="comment"># 滚动更新的配置------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 同时更新的数量</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次更新间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 滚动更新出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的更新失败率</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 更新顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)</span></span><br><span class="line">    <span class="attr">rollback_config:</span> <span class="comment"># 更新失败如何回滚------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 每次回滚的数量，如果为0则全部回滚</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次回滚间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 回滚出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的回滚失败率，默认为0</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 回滚顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)       </span></span><br></pre></td></tr></table></figure>

<p><code>docker-stack </code>不支持的<code>docker-compose</code>配置</p>
<ul>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">build</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#cgroup_parent">cgroup_parent</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#container_name">container_name</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#devices">devices</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#tmpfs">tmpfs</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external_links">external_links</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#links">links</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode">network_mode</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#restart">restart</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#security_opt">security_opt</a></p>
</li>
<li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#userns_mode">userns_mode</a></p>
</li>
</ul>
<h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>docker stack deploy</td>
<td>部署新的堆栈或更新现有堆栈</td>
</tr>
<tr>
<td>docker stack ls</td>
<td>列出现有堆栈</td>
</tr>
<tr>
<td>docker stack ps</td>
<td>列出堆栈中的任务</td>
</tr>
<tr>
<td>docker stack rm</td>
<td>删除堆栈</td>
</tr>
<tr>
<td>docker stack services</td>
<td>列出堆栈中的服务</td>
</tr>
<tr>
<td>docker stack down</td>
<td>移除某个堆栈（不会删除数据）</td>
</tr>
</tbody></table>
<blockquote>
<p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/stack/">docker stack | Docker Documentation</a></p>
</blockquote>
<h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><h4 id="普通配置"><a href="#普通配置" class="headerlink" title="普通配置"></a>普通配置</h4><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/configs/">使用 Docker 配置|存储配置数据Docker 文档</a></p>
</blockquote>
<h4 id="加密配置"><a href="#加密配置" class="headerlink" title="加密配置"></a>加密配置</h4><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">锁定您的集群以保护其加密密钥|Docker 文档</a></p>
</blockquote>
<h3 id="锁定集群"><a href="#锁定集群" class="headerlink" title="锁定集群"></a>锁定集群</h3><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">锁定您的集群以保护其加密密钥|Docker 文档</a></p>
</blockquote>
<h3 id="管理指南"><a href="#管理指南" class="headerlink" title="管理指南"></a>管理指南</h3><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/admin_guide/">管理和维护一组 Docker 引擎|Docker 文档</a></p>
</blockquote>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用swarm搭建集群时出现如下错误：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Error </span>response from daemon: rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = &quot;transport: Error while dialing dial tcp 192.168.0.108:2377: connect: no route to host&quot;</span><br></pre></td></tr></table></figure>

<p>这个错误是因为将node节点加入swarm中导致的，原因就是<code>manager</code>节点这台机器上的<strong>防火墙</strong>没有关闭。</p>
<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>把manager这台机器上的防火墙关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看防火墙状态</span></span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 停止防火墙</span></span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 禁用防火墙</span></span></span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure>

<p>Docker Swarm 错误 ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">error creating external connectivity network: Failed to Setup IP tables: Unable to enable SKIP DNAT rule: (iptables failed: iptables --wait -t nat -I DOCKER -i docker_gwbridge -j RETURN: iptables: No chain/target/match by that name. (exit status 1))</span><br></pre></td></tr></table></figure>

<p>关闭防火墙后需要重启Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab迁移服务器无法发送邮件</title>
    <url>/2022/06/30/docker-gitlab-can-not-send-email-after-migration/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/R-C.ecb6c01c3a955a63337b4c624a15276f.png" alt="gitlab"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>gitlab</code>迁移服务器后邮箱无法发送</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote>
<p>官方文档：<a href="https://docs.gitlab.cn/omnibus/settings/smtp.html#%E6%B5%8B%E8%AF%95-smtp-%E9%85%8D%E7%BD%AE">SMTP 配置 | GitLab</a></p>
</blockquote>
<p>进入容器内部测试邮件发送</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it gitlab /bin/bash</span><br><span class="line"></span><br><span class="line">gitlab-rails console</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 测试邮件发送</span></span></span><br><span class="line">Notify.test_email(&#x27;xxx@email.com&#x27;,&#x27;test Gitlab Email&#x27;,&#x27;Test&#x27;).deliver_now  </span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/202204281123533.png" alt="image-20220428112334490"></p>
<p>可以看到无法发送，经过排查发现是安全组未放开<code>465</code>端口</p>
<p><img data-src="https://cdn.jonty.top/img/202204281123146.png" alt="image-20220428112300050"></p>
<p>重新测试，发送成功</p>
<p><img data-src="https://cdn.jonty.top/img/202204281124914.png" alt="image-20220428112433863"></p>
<blockquote>
<p>还有可能是邮箱配置的<strong>密钥过期</strong>导致(也碰到过)，仅供参考</p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Gitlab</tag>
        <tag>Smtp</tag>
      </tags>
  </entry>
  <entry>
    <title>Frp + OpenVpn搭建内网VPN</title>
    <url>/2022/06/20/frp-and-openvpn-to-build-intranet-VPN/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>没有公网IP的前提下，公司内网的服务器资源需要能访问和使用，当然直接使用<code>frp</code>代理出去也行，但是搭配<code>OpenVpn</code>提供内网访问更加合适，下面是我在公司实操的步骤，记录以供借鉴。</p>
<h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>前提，需要有一台有<strong>公网IP</strong>的云服务器，配置不用很高，我这里使用的是腾讯云<strong>竞价实例</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20220620220324477.png" alt="image-20220620220324477" style="zoom: 50%;" />

<p>选择<strong>按流量计费</strong>比较划算，带宽需要根据实际需求设置，后续可以升级带宽</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220620220550695.png" alt="image-20220620220550695"></p>
<h2 id="安装frp"><a href="#安装frp" class="headerlink" title="安装frp"></a>安装frp</h2><blockquote>
<p>需要先安装<a href="https://docs.docker.com/engine/install/centos/">Docker</a>和<a href="https://docs.docker.com/compose/install/compose-plugin/">Docker-Compose</a></p>
</blockquote>
<h3 id="frps-服务端"><a href="#frps-服务端" class="headerlink" title="frps - 服务端"></a>frps - 服务端</h3><p><a href="https://github.com/fatedier/frp">frp</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">--network host \</span><br><span class="line">-v /home/ubuntu/Docker/Volumes/frps/frps.ini:/etc/frp/frps.ini \</span><br><span class="line">--name frps snowdreamtech/frps:0.34.3</span><br></pre></td></tr></table></figure>

<p><code>frps.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务端监听 ip/端口</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建http web服务，监听的端口（例如：80，但由于80端口留给nginx，此处改为其它端口）</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">7080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">7081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置服务器管理看板</span></span><br><span class="line"><span class="comment"># 限定访问ip，如果不限制访问请设置为：0.0.0.0。</span></span><br><span class="line"><span class="comment"># 监听端口，管理员的登录名和密码</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7082</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置记录日志的文件</span></span><br><span class="line"><span class="comment"># 日志级别：trace, debug, info, warn, error，从低到高</span></span><br><span class="line"><span class="comment"># 日志最多保留的天数</span></span><br><span class="line"><span class="attr">log_file</span> = logs/stdout.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证token</span></span><br><span class="line"><span class="attr">token</span> = mytoken</span><br></pre></td></tr></table></figure>

<blockquote>
<p>记得配置云服务器安全组，打开对应的端口</p>
</blockquote>
<h3 id="frpc-客户端"><a href="#frpc-客户端" class="headerlink" title="frpc - 客户端"></a>frpc - 客户端</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">--network host \</span><br><span class="line">-v /home/ubuntu/Docker/Volumes/frpc/frpc.ini:/etc/frp/frpc.ini \</span><br><span class="line">--name frpc snowdreamtech/frpc:0.34.3</span><br></pre></td></tr></table></figure>

<p><code>frpc.ini</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 云服务器公网ip</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = 服务端配置的token</span><br><span class="line"><span class="attr">tls_enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ovpn]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">2.11</span> <span class="comment">#内网的ip</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">1194</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1194</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ovpn-tcp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">2.11</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">1194</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1194</span></span><br></pre></td></tr></table></figure>

<h2 id="安装oepnvpn"><a href="#安装oepnvpn" class="headerlink" title="安装oepnvpn"></a>安装oepnvpn</h2><p><code>docker-compose.yml</code></p>
<p><code>udp</code>协议，远程桌面会丢包</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">openvpn:</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kylemanna/openvpn</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openvpn-udp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;1194:1194/udp&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./openvpn-data/conf:/etc/openvpn</span></span><br></pre></td></tr></table></figure>

<p><code>tcp</code>协议</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">openvpn:</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kylemanna/openvpn</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openvpn-tcp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;1194:1194/tcp&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./openvpn-data/conf:/etc/openvpn</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;ovpn_run --proto tcp&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>TCP/UDP协议都可以，公网</p>
<p>云服务器安全组需要打开对应端口  frp也要配置对应的端口</p>
</blockquote>
<h3 id="初始化配置文件和证书"><a href="#初始化配置文件和证书" class="headerlink" title="初始化配置文件和证书"></a>初始化配置文件和证书</h3><p><code>udp</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm openvpn-udp ovpn_genconfig -u udp://公网ip地址</span><br><span class="line">docker-compose run --rm openvpn-udp ovpn_initpki</span><br></pre></td></tr></table></figure>

<p><code>tcp</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm openvpn-tcp ovpn_genconfig -u tcp://公网ip地址</span><br><span class="line">docker-compose run --rm openvpn-tcp ovpn_initpki</span><br></pre></td></tr></table></figure>

<p>记住配置的<strong>私钥密码</strong></p>
<h3 id="配置文件授权-可选"><a href="#配置文件授权-可选" class="headerlink" title="配置文件授权 (可选)"></a>配置文件授权 (可选)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown -R $(whoami): ./openvpn-data</span><br></pre></td></tr></table></figure>

<h3 id="启动-OpenVPN"><a href="#启动-OpenVPN" class="headerlink" title="启动 OpenVPN"></a>启动 OpenVPN</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d openvpn</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220620224559902.png" alt="image-20220620224559902"></p>
<h3 id="生成连接密钥"><a href="#生成连接密钥" class="headerlink" title="生成连接密钥"></a>生成连接密钥</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CLIENTNAME=&quot;jontywang&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 有密码校验</span></span><br><span class="line">docker-compose run --rm openvpn easyrsa build-client-full $CLIENTNAME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 无密码校验</span></span><br><span class="line">docker-compose run --rm openvpn easyrsa build-client-full $CLIENTNAME nopass </span><br></pre></td></tr></table></figure>

<h3 id="生成证书文件"><a href="#生成证书文件" class="headerlink" title="生成证书文件"></a>生成证书文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm openvpn ovpn_getclient $CLIENTNAME &gt; $CLIENTNAME.ovpn</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220620224912885.png" alt="image-20220620224912885"></p>
<p>这个配置文件就是<strong>连接密钥</strong></p>
<h3 id="撤销证书"><a href="#撤销证书" class="headerlink" title="撤销证书"></a>撤销证书</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保留配置文件</span></span><br><span class="line">docker-compose run --rm openvpn ovpn_revokeclient $CLIENTNAME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除配置文件</span></span><br><span class="line">docker-compose run --rm openvpn ovpn_revokeclient $CLIENTNAME remove</span><br></pre></td></tr></table></figure>

<h2 id="连接VPN"><a href="#连接VPN" class="headerlink" title="连接VPN"></a>连接VPN</h2><p><a href="https://openvpn.net/client-connect-vpn-for-windows/">下载连接工具</a> </p>
<p>安装完成后运行VPN连接工具，运行后右键点击菜单栏图标</p>
<p>选择<code>import</code> =&gt; 导入配置文件，也就是上述生成的连接密钥， <code>用户名.ovpn</code> </p>
<p><img data-src="https://cdn.jonty.top/img/image-20220620225612512.png" alt="image-20220620225612512"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220620225528393.png" alt="image-20220620225528393"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Frp</tag>
        <tag>OpenVpn</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker删除本地所有镜像</title>
    <url>/2022/06/01/docker-how-to-delete-all-local-docker-images/</url>
    <content><![CDATA[<h2 id="删除所有容器和镜像"><a href="#删除所有容器和镜像" class="headerlink" title="删除所有容器和镜像"></a>删除所有容器和镜像</h2><h3 id="对于-Unix"><a href="#对于-Unix" class="headerlink" title="对于 Unix"></a>对于 Unix</h3><p>删除包括其卷在内的所有容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -vf $(docker ps -aq)</span><br></pre></td></tr></table></figure>

<p>删除所有镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>请先删除所有容器，再删除创建这些容器的所有镜像。</p>
</blockquote>
<h3 id="对于-Windows（pwsh）"><a href="#对于-Windows（pwsh）" class="headerlink" title="对于 Windows（pwsh）"></a>对于 Windows（pwsh）</h3><p>如果在 Windows (Powershell) 上操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">images = docker images -a -q</span></span><br><span class="line">foreach ($image in $images) &#123; docker image rm $image -f &#125;</span><br></pre></td></tr></table></figure>

<p>也可以按如下写法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images -a -q | % &#123; docker image rm $_ -f &#125;</span><br></pre></td></tr></table></figure>

<p>对于使用命令行的 Windows，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for /F %i in (&#x27;docker images -a -q&#x27;) do docker rmi -f %i</span><br></pre></td></tr></table></figure>



<h2 id="删除所有未使用的-Docker-对象"><a href="#删除所有未使用的-Docker-对象" class="headerlink" title="删除所有未使用的 Docker 对象"></a>删除所有未使用的 Docker 对象</h2><p>删除所有停止的容器、悬空的图像和未使用的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure>

<p>使用<code>-f</code>( <code>--force</code>) 选项绕过提示。</p>
<p>如果要删除所有未使用的镜像而不仅仅是玄虚镜像，请在命令中添加<code>-a</code>参数（<code>--all</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure>

<p>默认情况下，该命令不会删除未使用的卷以防止丢失重要数据。</p>
<p>要删除所有未使用的卷，使用<code>--volumes</code>参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system prune --volumes</span><br></pre></td></tr></table></figure>



<h2 id="删除-Docker-容器"><a href="#删除-Docker-容器" class="headerlink" title="删除 Docker 容器"></a>删除 Docker 容器</h2><h3 id="移除一个或多个容器"><a href="#移除一个或多个容器" class="headerlink" title="移除一个或多个容器"></a>移除一个或多个容器</h3><p>要删除一个或多个 Docker 容器，使用<code>docker container rm</code>命令，后面跟要删除的容器的 ID。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm xxxxxx xxxxxx</span><br></pre></td></tr></table></figure>

<p>查看所有容器列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure>

<h3 id="删除所有停止的容器"><a href="#删除所有停止的容器" class="headerlink" title="删除所有停止的容器"></a>删除所有停止的容器</h3><p>删除所有停止的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>

<p>列出所有停止容器的列表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls -a --filter status=exited --filter status=created</span><br></pre></td></tr></table></figure>

<h3 id="使用过滤器移除容器"><a href="#使用过滤器移除容器" class="headerlink" title="使用过滤器移除容器"></a>使用过滤器移除容器</h3><p>例如，要删除 12 小时前创建的所有图像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container prune --filter &quot;until=12h&quot;</span><br></pre></td></tr></table></figure>

<h3 id="停止并移除所有容器"><a href="#停止并移除所有容器" class="headerlink" title="停止并移除所有容器"></a>停止并移除所有容器</h3><p>停止所有正在运行的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container stop $(docker container ls -aq)</span><br></pre></td></tr></table></figure>

<p>停止所有容器后，删除所有容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm $(docker container ls -aq)</span><br></pre></td></tr></table></figure>



<h2 id="删除-Docker-镜像"><a href="#删除-Docker-镜像" class="headerlink" title="删除 Docker 镜像"></a>删除 Docker 镜像</h2><p>下载Docker镜像后，会一直保留在服务器上，需要手动删除</p>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>要删除一个或多个 Docker 镜像，首先需要找到镜像的 ID：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image rm xxxxxx xxxxxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Error response from daemon: conflict: unable to remove repository reference “centos” (must force) - container cd20b396a061 is using its referenced image 75835a67d134</p>
<p>需要先删除使用此镜像的容器</p>
</blockquote>
<h3 id="删除玄虚镜像"><a href="#删除玄虚镜像" class="headerlink" title="删除玄虚镜像"></a>删除玄虚镜像</h3><p>玄虚镜像是未标记且未被任何容器使用的镜像。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行此命令时要小心。如果你构建的图像没有标签，它将被删除。</p>
</blockquote>
<h3 id="删除所有未使用的镜像"><a href="#删除所有未使用的镜像" class="headerlink" title="删除所有未使用的镜像"></a>删除所有未使用的镜像</h3><p>要删除任何现有容器未引用的所有图像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure>

<h3 id="使用过滤器删除图像"><a href="#使用过滤器删除图像" class="headerlink" title="使用过滤器删除图像"></a>使用过滤器删除图像</h3><p>例如，要删除超过 7 天（168 小时）前创建的所有图像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image prune -a --filter &quot;until=168h&quot;</span><br></pre></td></tr></table></figure>



<h2 id="删除-Docker-Volume"><a href="#删除-Docker-Volume" class="headerlink" title="删除 Docker Volume"></a>删除 Docker Volume</h2><h3 id="删除一个或多个卷"><a href="#删除一个或多个卷" class="headerlink" title="删除一个或多个卷"></a>删除一个或多个卷</h3><p>删除一个或多个 Docker 卷，列出所有卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>

<p>根据卷ID删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm xxxxx</span><br></pre></td></tr></table></figure>

<h3 id="删除所有未使用的卷"><a href="#删除所有未使用的卷" class="headerlink" title="删除所有未使用的卷"></a>删除所有未使用的卷</h3><p>删除所有未使用的卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume prune -f</span><br></pre></td></tr></table></figure>



<h2 id="删除-Docker-网络"><a href="#删除-Docker-网络" class="headerlink" title="删除 Docker 网络"></a>删除 Docker 网络</h2><h3 id="删除一个或多个-Docker-网络"><a href="#删除一个或多个-Docker-网络" class="headerlink" title="删除一个或多个 Docker 网络"></a>删除一个或多个 Docker 网络</h3><p>查找要删除的网络ID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>

<p>根据ID删除网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network rm c520032c3d31</span><br></pre></td></tr></table></figure>

<h3 id="删除所有未使用的网络"><a href="#删除所有未使用的网络" class="headerlink" title="删除所有未使用的网络"></a>删除所有未使用的网络</h3><p>删除所有未使用的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network prune</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员必备Code Review</title>
    <url>/2022/05/31/code-review/</url>
    <content><![CDATA[<h1 id="程序员必备的代码审查（Code-Review）清单"><a href="#程序员必备的代码审查（Code-Review）清单" class="headerlink" title="程序员必备的代码审查（Code Review）清单"></a>程序员必备的代码审查（Code Review）清单</h1><p>在我们关于高效代码审查的博文中，我们建议使用一个检查清单。</p>
<p>在代码审查中，检查清单是一个非常好的工具——它们保证了审查可以在团队中始终如一的进行。</p>
<p>它们也是一种保证常见问题能够被发现并被解决的便利方式。</p>
<p>软件工程学院的研究表明，程序员们会犯15-20种常见的错误。</p>
<p>所以，把这些错误加入到检查清单当中，可以确保不论什么时候，都能发现这些错误，并且杜绝这些错误。</p>
<p>这里列出了一些重要的内容：代码审查清单。</p>
<h2 id="常规项"><a href="#常规项" class="headerlink" title="常规项"></a>常规项</h2><ul>
<li>代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。</li>
<li>所有的代码是否简单易懂？</li>
<li>代码符合编程规范么？包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。</li>
<li>是否存在冗余或是重复的代码？</li>
<li>代码是否尽可能的模块化了？</li>
<li>是否有可以被替换的全局变量？</li>
<li>是否有被注释掉的代码？</li>
<li>循环是否会造成死循环？</li>
<li>是否有可以被库函数替代的代码？</li>
<li>是否有可以删除的日志或调试代码？</li>
</ul>
<h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul>
<li>所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？</li>
<li>在哪里使用了第三方工具，返回的错误是否被捕获？</li>
<li>输出的值是否进行了检查并且编码？</li>
<li>无效的参数值是否能够处理？</li>
</ul>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul>
<li>是否有注释，并且描述了代码的意图？</li>
<li>所有的函数都有注释吗？</li>
<li>对非常规行为和边界情况处理是否有描述？</li>
<li>第三方库的使用和函数是否有文档？</li>
<li>数据结构和计量单位是否进行了解释？</li>
<li>是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如<code>TODO</code>？</li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul>
<li>代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。</li>
<li>是否存在测试，它们是否可以被理解？比如，至少达到令人满意的代码覆盖(code coverage)。</li>
<li>单元测试是否真正的测试了代码是否可以完成预期的功能？</li>
<li>是否检查了数组的“<strong>越界</strong>“错误？</li>
<li>是否有可以被已经存在的API所替代的测试代码？</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>同样的，需要把特定语言中有可能引起错误的问题添加到清单中。</p>
<p>这个清单特地没有详细的列出所有可能会发生的错误。内容太多了以至于从来没人会去用它，仅仅包含常见的问题会比较好。</p>
<h2 id="优化你的清单"><a href="#优化你的清单" class="headerlink" title="优化你的清单"></a>优化你的清单</h2><p>把使用清单作为你的起点，针对特定的使用案例，你需要对其进行优化。</p>
<p>一个比较棒的方式就是让你的团队记录下那些在代码审查过程中临时发现的问题，有了这些数据，你就能够确定你的团队常犯的错误，然后你就可以量身定制一个审查清单。确保你删除了那些没有出现过的错误。（你也可以保留那些出现概率很小，但是非常关键的项目，比如安全相关的问题）。</p>
<h2 id="得到认可并且保持更新"><a href="#得到认可并且保持更新" class="headerlink" title="得到认可并且保持更新"></a>得到认可并且保持更新</h2><p>基本规则是，清单上的任何条目都必须明确，而且，如果可能的话，对于一些条目你可以对其进行二元判定。这样可以防止判断的不一致。和你的团队分享这份清单并且让他们认同你清单的内容是个好主意。同样的，要定期检查你的清单，以确保各条目仍然是有意义的。</p>
<p>有了一个好的清单，可以提高你在代码审查过程中发现的缺陷个数。这可以帮助你提高代码标准，避免质量参差不齐的代码审查。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>Code Review</tag>
      </tags>
  </entry>
  <entry>
    <title>【翻译】SQL Server优化-索引</title>
    <url>/2022/05/22/sql-optimization-index/</url>
    <content><![CDATA[<h1 id="数据如何存储在SQL数据库中"><a href="#数据如何存储在SQL数据库中" class="headerlink" title="数据如何存储在SQL数据库中"></a>数据如何存储在SQL数据库中</h1><img data-src="https://cdn.jonty.top/img/database-index-structure.jpg" alt="数据库索引结构" style="zoom: 33%;" />

<h2 id="数据如何物理存储在-SQL-Server-中"><a href="#数据如何物理存储在-SQL-Server-中" class="headerlink" title="数据如何物理存储在 SQL Server 中"></a>数据如何物理存储在 SQL Server 中</h2><p>你有没有想过SQL Server 如何在内部物理存储表数据？表中的数据在逻辑上以<strong>行和列</strong>格式存储，但在物理上它将数据存储在称为<strong>数据页</strong>的东西中，数据页是 SQL Server 中数据存储的<strong>基本单位</strong>，大小为 <strong>8KB</strong>。当我们将任何数据插入到 SQL Server 数据库表中时，它会将这些数据保存到一系列 8 KB 数据页中。</p>
<img data-src="https://cdn.jonty.top/img/how-is-data-stored-physically-in-sql-server.png" alt="数据是如何物理存储在 sql server 中的" style="zoom:50%;" />

<h2 id="SQL-Server-中的数据存储在树状结构中"><a href="#SQL-Server-中的数据存储在树状结构中" class="headerlink" title="SQL Server 中的数据存储在树状结构中"></a>SQL Server 中的数据存储在树状结构中</h2><p>SQL Server 中的表数据实际上存储在树状结构中。我们通过一个简单的例子来理解这一点。</p>
<img data-src="https://cdn.jonty.top/img/how-is-data-stored-in-sql-database.jpg" alt="数据是如何物理存储在 sql server 中的" style="zoom: 33%;" />

<ul>
<li><code>EmployeeId</code> 是主键列，所以默认情况下，会在这个<code>EmployeeId </code>列上创建一个<strong>聚集索引</strong></li>
<li>物理存储在数据库中的数据按 <code>EmployeeId</code> 列排序</li>
</ul>
<h2 id="数据实际存储在哪里"><a href="#数据实际存储在哪里" class="headerlink" title="数据实际存储在哪里"></a>数据实际存储在哪里</h2><p>它存储在树状结构中的一系列数据页中。如下所示。</p>
<p>这种树状结构称为 B-Tree、索引 B-Tree 或聚集索引结构（含义相同）。</p>
<img data-src="https://www.pragimtech.com/blog/contribute/article_images/1220210328005839/how-sql-server-stores-data-internally.png" alt="sql server 如何在内部存储数据" style="zoom:33%;" />



<ul>
<li><p>在树底部看到的节点称为<strong>数据页</strong>或树的叶节点，这些叶节点包含我们的表数据。</p>
</li>
<li><p>每个数据页的大小为 8 KB，每个数据页中存储的行数实际上取决于每行的大小。</p>
</li>
</ul>
<p>对于上述示例，假设在<code> Employees</code> 表中有 1200 行数据，在每个数据页中有 200 行数据，但实际上根据行数据的大小，数量可能会有上下浮动。我们假设每个数据页有 200 行。这些数据页中的行按 <code>EmployeeId</code> 列排序，因为<code>EmployeeId</code>是表的主键(聚集索引)。</p>
<p>在第一个数据页中有 1 到 200 行，在第二个数据页中有 201 到 400 行，在第三个 401 到 600 行，依此类推…</p>
<p>树顶部的节点称为<strong>根节点</strong>。根节点和叶节点之间的节点称为<strong>中间层</strong>，可以有多个中间层，中间层的数量取决于基础数据库表中的行数。</p>
<p>根节点和中间层节点包含索引行，叶节点（即树底部的节点）包含实际数据行。每个索引行包含一个键值（在我们的例子中是员工 ID）和一个指向 B Tree中的中间层或叶节点中的数据行的指针。 这种树状结构有一系列指针，可以帮助数据库引擎快速找到数据。</p>
<h2 id="SQL-Server-如何通过-ID-查找行"><a href="#SQL-Server-如何通过-ID-查找行" class="headerlink" title="SQL Server 如何通过 ID 查找行"></a>SQL Server 如何通过 ID 查找行</h2><p>假设我们要查找 <code>EmployeeId = 1120</code> 的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> EmployeeId <span class="operator">=</span> <span class="number">1120</span>;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/how-data-is-stored-in-sql-database.jpg" alt="数据如何存储在sql数据库中" style="zoom:33%;" />

<p>第一步：数据库引擎从根节点开始，它选择右边的索引节点，因为数据库引擎知道这个节点包含从 801 到 1200 的员工 ID。</p>
<p>第二步：选择最右边的叶节点，因为从 1001 到 1200 的员工数据行存在于该叶节点中。</p>
<p>第三步：叶节点中的数据行按员工 ID 排序，因此数据库引擎很容易找到 ID = 1120 的数据行。</p>
<p>只需 3 次操作，SQL Server 就能找到我们要查找的数据。如果有上百甚至上千万条记录，SQL Server 也可以方便快捷地找到我们要查找的数据，前提是有一个<strong>索引</strong>可以帮助查询查找数据。</p>
<h1 id="索引是如何工作的"><a href="#索引是如何工作的" class="headerlink" title="索引是如何工作的"></a>索引是如何工作的</h1><h2 id="创建员工表"><a href="#创建员工表" class="headerlink" title="创建员工表"></a>创建员工表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Employees</span><br><span class="line">(</span><br><span class="line">	Id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,</span><br><span class="line">	[Name] nvarchar(<span class="number">50</span>),</span><br><span class="line">	Email nvarchar(<span class="number">50</span>),</span><br><span class="line">	Department nvarchar(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line">Go</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">Declare</span> <span class="variable">@counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">While(<span class="variable">@counter</span> <span class="operator">&lt;=</span> <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">	<span class="keyword">Declare</span> <span class="variable">@Name</span> nvarchar(<span class="number">50</span>) <span class="operator">=</span> <span class="string">&#x27;ABC &#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>)</span><br><span class="line">	<span class="keyword">Declare</span> <span class="variable">@Email</span> nvarchar(<span class="number">50</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>) <span class="operator">+</span> <span class="string">&#x27;@jonty.top&#x27;</span></span><br><span class="line">	<span class="keyword">Declare</span> <span class="variable">@Dept</span> nvarchar(<span class="number">10</span>) <span class="operator">=</span> <span class="string">&#x27;Dept &#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">Insert</span> <span class="keyword">into</span> Employees <span class="keyword">values</span> (<span class="variable">@Name</span>, <span class="variable">@Email</span>, <span class="variable">@Dept</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">Set</span> <span class="variable">@counter</span> <span class="operator">=</span> <span class="variable">@counter</span> <span class="operator">+</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">	If(<span class="variable">@Counter</span><span class="operator">%</span><span class="number">100000</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">		Print RTRIM(<span class="variable">@Counter</span>) <span class="operator">+</span> <span class="string">&#x27; rows inserted&#x27;</span></span><br><span class="line"><span class="keyword">End</span></span><br></pre></td></tr></table></figure>

<h2 id="聚集索引搜索"><a href="#聚集索引搜索" class="headerlink" title="聚集索引搜索"></a>聚集索引搜索</h2><img data-src="https://cdn.jonty.top/img/include-actual-execution-plan-in-sql-server.png" alt="在 sql server 中包含实际的执行计划" style="zoom:33%;" />

<p>在 SSMS 中单击<code>Include Actual Execution Plan</code>图标，然后执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> Id <span class="operator">=</span> <span class="number">932000</span>;</span><br></pre></td></tr></table></figure>



<p>实际执行计划如下:</p>
<img data-src="https://cdn.jonty.top/img/clustered-index-seek.png" alt="聚集索引查找" style="zoom:33%;" />

<p>这里操作是 Clustered Index Seek，数据库引擎使用员工 Id 列上的<strong>聚集索引</strong>来查找 <code>Id = 932000 </code>的员工行</p>
<ul>
<li>Number of Rows Read (读取的行数) = 1</li>
<li>Actual Number of Rows for All Executions (所有执行的实际行数 )= 1</li>
</ul>
<p>读取的行数，是指SQL 服务器为产生查询结果而必须读取的行数。</p>
<p>在我们的例子中，员工 ID 是唯一的，结果集为 1 行，这由所有执行的实际行数表示。</p>
<p>在索引的帮助下，SQL Server 能够直接读取我们需要的 1 个特定员工行。所以，读取的行数和所有执行的实际行数都是 1。</p>
<p>如果有上百甚至上千万条记录，SQL Server 都可以方便快捷地找到我们要查找的数据，前提是有一个<strong>索引</strong>可以帮助查询数据。</p>
<h2 id="聚集索引扫描"><a href="#聚集索引扫描" class="headerlink" title="聚集索引扫描"></a>聚集索引扫描</h2><p>在这个例子中，<code>EmployeeId </code>列上有一个<strong>聚集索引</strong>，当我们通过员工 id 搜索时，SQL Server 可以快速地找到我们要查找的数据。</p>
<p>那如果我们按员工姓名搜索怎么办？<code>Name</code> 列上没有创建索引，因此 SQL Server 没有简单的方法找到我们要查找的数据，必须读取表中的每条记录，从性能的角度来看，效率是非常低的。</p>
<p><code>Include Actual Execution Plan</code>在打开的情况下执行以下查询:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">Where</span> Name <span class="operator">=</span> <span class="string">&#x27;ABC 932000&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>实际执行计划如下:</p>
<img data-src="https://cdn.jonty.top/img/clustered-index-scan.png" alt="聚集索引扫描" style="zoom:33%;" />

<p>注意，这里操作的操作是<code>Clustered Index Scan</code>。由于没有合适的索引，数据库引擎只能读取表中的每条记录。</p>
<ul>
<li>Number of Rows Read (读取的行数) = 1000000</li>
<li>Actual Number of Rows for All Executions (所有执行的实际行数 )= 1</li>
</ul>
<p>我们需要的结果只有1行，只有一名员工的姓名 = ‘ABC 932000’。而要查询这一条数据，SQL Server 必须从表中读取所有的数据行。</p>
<p>这被称为索引扫描，索引扫描对性能有影响。</p>
<h2 id="SQL-Server-中的非聚集索引"><a href="#SQL-Server-中的非聚集索引" class="headerlink" title="SQL Server 中的非聚集索引"></a>SQL Server 中的非聚集索引</h2><p>在<code>Name</code>字段上创建非聚集索引：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED INDEX IX_Employees_Name</span><br><span class="line"><span class="keyword">ON</span> [dbo].[Employees] ([Name])</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/non-clustered-index-structure-in-sql-server.png" alt="non clustered index structure in sql server" style="zoom:33%;" />

<p>在非集群索引中，我们没有表的数据。我们有键值和行定位器。我们在 Name 列上创建了一个<strong>非聚集索引</strong>，键值（在本例中为 Employee Name）按字母顺序排序和存储。树底部的行定位器包含员工姓名和行主键，也就是<code>Employee Id</code>。</p>
<p>打开<code>包括实际执行计划</code>执行以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">Where</span> Name <span class="operator">=</span> <span class="string">&#x27;ABC 932000&#x27;</span>;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/sql-server-execution-plan-example.png" alt="sql server 执行计划示例" style="zoom: 50%;" />

<h2 id="非聚集索引的运行情况"><a href="#非聚集索引的运行情况" class="headerlink" title="非聚集索引的运行情况"></a>非聚集索引的运行情况</h2><p>当我们执行查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> Name<span class="operator">=</span><span class="string">&#x27;David&#x27;</span></span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/how-does-a-non-clustered-index-point-to-the-data.png" alt="非聚集索引如何指向数据" style="zoom: 33%;" />

<ul>
<li>SQL Server 使用 <code>Name</code> 列上的非聚集索引在索引中快速找到该员工条目。</li>
<li>在非聚集索引以及员工姓名中，我们还有集群键（在我们的例子中是 <code>Employee Id</code>）。</li>
<li>数据库引擎知道<code> Employee Id</code>上有<strong>聚集索引</strong>，使用<code>Employee Id</code>查找相应的员工记录。</li>
</ul>
<blockquote>
<p>注意：在名称列上有和没有非聚集索引的估计查询成本。</p>
</blockquote>
<img data-src="https://cdn.jonty.top/img/how-nonclustered-index-works.png" alt="how nonclustered index works" style="zoom: 50%;" />

]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>索引</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 批量处理表</title>
    <url>/2022/05/08/sqlserver-batch-processing-tables/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><div class="note info"><p>由于平台架构的调整，我所负责的项目也迁移到新的框架中了，加上由于历史遗留问题，对表结构有很大影响，为了不影响生产库的数据，需要对测试库和正式库进行结构同步，于是有了这篇文章。</p>
</div>



<h2 id="转换表名"><a href="#转换表名" class="headerlink" title="转换表名"></a>转换表名</h2><p>如果需要批量转换数据库表名，可以使用以下<code>sql</code>生成的<strong>可执行语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;EXEC sp_rename &#x27;</span></span><br><span class="line"><span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;, &#x27;</span></span><br><span class="line"><span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">+</span> <span class="built_in">Lower</span>(TABLE_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="keyword">as</span> sqlstr</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> OBJECTPROPERTY(OBJECT_ID(QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">QUOTENAME(TABLE_NAME)), <span class="string">&#x27;IsMSShipped&#x27;</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_TYPE <span class="operator">=</span> <span class="string">&#x27;BASE TABLE&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_NAME)</span><br></pre></td></tr></table></figure>

<ul>
<li>Lower(TABLE_NAME) ：将表名转换为小写，如果需要转换成大写可以使用<code>Upper()</code></li>
</ul>
<p>如图是生成的可执行SQL语句：</p>
<p><img data-src="https://cdn.jonty.top/img/202205082319209.png" alt="image-20220508231946150"></p>
<p>操作的对象是<code>INFORMATION_SCHEMA.TABLES</code>，可以根据需求进行筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA.TABLES</span><br></pre></td></tr></table></figure>



<h2 id="转换字段"><a href="#转换字段" class="headerlink" title="转换字段"></a>转换字段</h2><p>由于生产库以前使用的是<code>pgsql</code>，生成的字段全部为小写，所以下面是生成转换字段的<code>sql</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;EXEC sp_rename &#x27;&#x27;&#x27;</span> <span class="operator">+</span> TABLE_SCHEMA <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> TABLE_NAME <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> </span><br><span class="line">COLUMN_NAME <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;</span> <span class="operator">+</span></span><br><span class="line"><span class="built_in">LOWER</span>(COLUMN_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;COLUMN&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> OBJECTPROPERTY(OBJECT_ID(<span class="string">&#x27;[&#x27;</span> <span class="operator">+</span> TABLE_SCHEMA <span class="operator">+</span> <span class="string">&#x27;].[&#x27;</span> <span class="operator">+</span> TABLE_NAME <span class="operator">+</span> <span class="string">&#x27;]&#x27;</span>),</span><br><span class="line"><span class="string">&#x27;isMSShipped&#x27;</span>) <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/202205082331972.png" alt="image-20220508233159927"></p>
<p>这里操作的对象是<code>INFORMATION_SCHEMA.COLUMNS</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA.COLUMNS</span><br></pre></td></tr></table></figure>



<h2 id="批量删除字段"><a href="#批量删除字段" class="headerlink" title="批量删除字段"></a>批量删除字段</h2><p>由于之前迁移<code>pgsql</code>的原因，生成了很多<code>trialxxx</code>的字段，对于这些无用的、历史遗留的也一并解决。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 批量操作所有表中的相同字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;ALTER TABLE [dbo].[&#x27;</span><span class="operator">+</span>tab.name<span class="operator">+</span><span class="string">&#x27;] DROP COLUMN &#x27;</span><span class="operator">+</span> col.name <span class="operator">+</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">as</span> sqlstr <span class="keyword">from</span> </span><br><span class="line">sys.tables tab <span class="keyword">join</span> sys.columns col <span class="keyword">on</span> tab.object_id <span class="operator">=</span> col.object_id <span class="keyword">and</span> col.name <span class="keyword">like</span> <span class="string">&#x27;trial%&#x27;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里筛选条件需要根据实际需求调整</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/202205082344690.png" alt="image-20220508234429639"></p>
<h2 id="批量删除索引"><a href="#批量删除索引" class="headerlink" title="批量删除索引"></a>批量删除索引</h2><p>进行结构同步时，由于字段名变化，需要把所有的索引删除。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除所有索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;drop index &#x27;</span><span class="operator">+</span>o.name<span class="operator">+</span><span class="string">&#x27;.&#x27;</span><span class="operator">+</span>i.name<span class="operator">+</span><span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> sys.indexes i <span class="keyword">join</span> sys.objects o <span class="keyword">on</span>  i.object_id<span class="operator">=</span>o.object_id</span><br><span class="line">  <span class="keyword">where</span> o.type<span class="operator">&lt;&gt;</span><span class="string">&#x27;S&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>这里操作的是<code>sys.indexes</code>，可以根据需求筛选要删除的<strong>索引类型</strong>等。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.indexes</span><br></pre></td></tr></table></figure>



<h2 id="批量删除主外键"><a href="#批量删除主外键" class="headerlink" title="批量删除主外键"></a>批量删除主外键</h2><p>当数据库表中存在主外键关系时，会阻止我们进行更改操作，所以需要删除主外键关系。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        <span class="string">&#x27;alter table &#x27;</span> <span class="operator">+</span> quotename(schema_name(schema_id)) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">        quotename(object_name(parent_object_id)) <span class="operator">+</span></span><br><span class="line">        <span class="string">&#x27; drop constraint &#x27;</span><span class="operator">+</span>quotename(name) <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> sys.foreign_keys</span><br></pre></td></tr></table></figure>

<p>这里操作的是<code>sys.foreign_keys</code>，可以判断是<strong>主键</strong>或是<strong>外键引用</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.foreign_keys</span><br></pre></td></tr></table></figure>



<h2 id="删除所有表描述"><a href="#删除所有表描述" class="headerlink" title="删除所有表描述"></a>删除所有表描述</h2><p>清空表的描述字段信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;EXEC sp_dropextendedproperty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@name = &#x27;&#x27;MS_Description&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0type = &#x27;&#x27;schema&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0name = &#x27;</span> <span class="operator">+</span> object_schema_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1type = &#x27;&#x27;table&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1name = &#x27;</span> <span class="operator">+</span> object_name(extended_properties.major_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys.extended_properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> extended_properties.class_desc <span class="operator">=</span> <span class="string">&#x27;OBJECT_OR_COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.minor_id <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.name <span class="operator">=</span> <span class="string">&#x27;MS_Description&#x27;</span></span><br></pre></td></tr></table></figure>





<h2 id="删除所有字段描述"><a href="#删除所有字段描述" class="headerlink" title="删除所有字段描述"></a>删除所有字段描述</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="string">&#x27;EXEC sp_dropextendedproperty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@name = &#x27;&#x27;MS_Description&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0type = &#x27;&#x27;schema&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0name = &#x27;</span> <span class="operator">+</span> object_schema_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1type = &#x27;&#x27;table&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1name = &#x27;</span> <span class="operator">+</span> object_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level2type = &#x27;&#x27;column&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level2name = &#x27;</span> <span class="operator">+</span> columns.name  <span class="keyword">as</span> sqlstr</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys.extended_properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">join</span> sys.columns</span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> columns.object_id <span class="operator">=</span> extended_properties.major_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> columns.column_id <span class="operator">=</span> extended_properties.minor_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> extended_properties.class_desc <span class="operator">=</span> <span class="string">&#x27;OBJECT_OR_COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.minor_id <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.name <span class="operator">=</span> <span class="string">&#x27;MS_Description&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="执行语句"><a href="#执行语句" class="headerlink" title="执行语句"></a>执行语句</h2><p>上面的操作都是按条件生成可执行的SQL语句，并没有执行相关操作。</p>
<p>我们使用<code>sys.sp_executesql</code>执行SQL语句。</p>
<p>对于我们查询的结果集，这里提供以下两种方式执行，大家有更好的方法欢迎提出，这里仅供参考，</p>
<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>使用游标<strong>逐行</strong>执行SQL语句</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">-- 使用游标处理</span><br><span class="line">declare OneCursor cursor----创建游标</span><br><span class="line"><span class="keyword">for</span></span><br><span class="line"></span><br><span class="line">-- 放要执行的sql集合</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;drop index &#x27;</span>+o.name+<span class="string">&#x27;.&#x27;</span>+i.name+<span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> sys.indexes i <span class="keyword">join</span> sys.objects o <span class="keyword">on</span>  i.object_id=o.object_id</span><br><span class="line">  <span class="keyword">where</span> o.type&lt;&gt;<span class="string">&#x27;S&#x27;</span> <span class="keyword">and</span> is_primary_key&lt;&gt;<span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">open OneCursor ---打开游标</span><br><span class="line">declare @ItemName nvarchar(max);---声明<span class="number">2</span>个变量用于填充</span><br><span class="line">fetch next <span class="keyword">from</span> OneCursor <span class="keyword">into</span> @ItemName ---移动到游标的第一行用于填充</span><br><span class="line"><span class="keyword">while</span> @@FETCH_STATUS=<span class="number">0</span> ---若为<span class="number">0</span>，则代表成功执行</span><br><span class="line">begin</span><br><span class="line">print @ItemName</span><br><span class="line">EXECUTE sys.sp_executesql @ItemName</span><br><span class="line">fetch next <span class="keyword">from</span> OneCursor <span class="keyword">into</span> @ItemName ----移动到游标的下一行并填充到变量中</span><br><span class="line">end</span><br><span class="line">close OneCursor ---关闭游标</span><br><span class="line">deallocate OneCursor --删除游标</span><br></pre></td></tr></table></figure>

<h3 id="批量执行"><a href="#批量执行" class="headerlink" title="批量执行"></a>批量执行</h3><p>执行全部SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@sql</span> nvarchar(max) <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="string">&#x27;alter table &#x27;</span> <span class="operator">+</span> quotename(schema_name(schema_id)) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">        quotename(object_name(parent_object_id)) <span class="operator">+</span></span><br><span class="line">        <span class="string">&#x27; drop constraint &#x27;</span><span class="operator">+</span>quotename(name) <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> sys.foreign_keys</span><br><span class="line">    <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">exec</span> sp_executesql <span class="variable">@sql</span>;</span><br></pre></td></tr></table></figure>



<h2 id="扩展查询"><a href="#扩展查询" class="headerlink" title="扩展查询"></a>扩展查询</h2><p><strong>查询数据库表中的所有字段信息以及描述。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   </span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> ddd.value <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> &quot;表名（中文）&quot;,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> d.name <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 表名,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> ddd.value <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 表说明,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line">     a.colorder <span class="keyword">as</span> 字段序号,  </span><br><span class="line">     a.name <span class="keyword">as</span> 字段名,  </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> COLUMNPROPERTY( a.id,a.name,<span class="string">&#x27;IsIdentity&#x27;</span>)<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span><span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 是否自增标识,  </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> sysobjects<span class="comment">--查询主键  </span></span><br><span class="line">                     <span class="keyword">WHERE</span> (name <span class="keyword">in</span>  </span><br><span class="line">                             (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sysindexes   </span><br><span class="line">                               <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id)  <span class="keyword">AND</span> (indid <span class="keyword">in</span>  </span><br><span class="line">                                     (<span class="keyword">SELECT</span> indid <span class="keyword">FROM</span> sysindexkeys  </span><br><span class="line">                                       <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id) <span class="keyword">AND</span> (colid <span class="keyword">in</span>  </span><br><span class="line">                                         (<span class="keyword">SELECT</span> colid <span class="keyword">FROM</span> syscolumns  </span><br><span class="line">                                          <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id) <span class="keyword">AND</span> (name <span class="operator">=</span> a.name)</span><br><span class="line">           )  </span><br><span class="line">                                      )</span><br><span class="line">                    )</span><br><span class="line">        )</span><br><span class="line">           )</span><br><span class="line">      )</span><br><span class="line">         <span class="keyword">AND</span> (xtype <span class="operator">=</span> <span class="string">&#x27;PK&#x27;</span>))<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 主键,<span class="comment">--查询主键END  </span></span><br><span class="line"> b.name <span class="keyword">as</span> 类型,  </span><br><span class="line"> a.length <span class="keyword">as</span> 占用字节数,  </span><br><span class="line"> COLUMNPROPERTY(a.id,a.name,<span class="string">&#x27;PRECISION&#x27;</span>) <span class="keyword">as</span>  长度,  </span><br><span class="line"> isnull(COLUMNPROPERTY(a.id,a.name,<span class="string">&#x27;Scale&#x27;</span>),<span class="number">0</span>) <span class="keyword">as</span> 小数位数,  </span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.isnullable<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span><span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 允许空,  </span><br><span class="line"> isnull(e.text,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> 默认值, </span><br><span class="line"> isnull(g.[<span class="keyword">value</span>],<span class="string">&#x27;&#x27;</span>) <span class="keyword">AS</span> 字段说明   </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">FROM</span> syscolumns a </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> systypes b</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">on</span> a.xtype<span class="operator">=</span>b.xusertype  </span><br><span class="line"> <span class="keyword">inner</span> <span class="keyword">join</span> sysobjects d   </span><br><span class="line"> <span class="keyword">on</span> a.id<span class="operator">=</span>d.id <span class="keyword">and</span> d.xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span> <span class="keyword">and</span> d.name<span class="operator">&lt;&gt;</span><span class="string">&#x27;dtproperties&#x27;</span>  </span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>( <span class="keyword">SELECT</span> major_id, <span class="keyword">value</span> </span><br><span class="line">     <span class="keyword">FROM</span> sys.extended_properties </span><br><span class="line">     <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;MS_Description&#x27;</span> <span class="keyword">AND</span> minor_id <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">as</span> ddd  <span class="keyword">ON</span> a.id <span class="operator">=</span> ddd.major_id</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> syscomments e  </span><br><span class="line"> <span class="keyword">on</span> a.cdefault<span class="operator">=</span>e.id  </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> sys.extended_properties g  </span><br><span class="line"> <span class="keyword">on</span> a.id<span class="operator">=</span>g.major_id <span class="keyword">AND</span> a.colid <span class="operator">=</span> g.minor_id  <span class="keyword">where</span> d.name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> a.id,a.colorder</span><br></pre></td></tr></table></figure>



<p><strong>查询SQL占用</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">100</span></span><br><span class="line">[cpu_time],</span><br><span class="line"> [session_id],</span><br><span class="line"> [request_id],</span><br><span class="line"> [start_time] <span class="keyword">AS</span> <span class="string">&#x27;开始时间&#x27;</span>,</span><br><span class="line"> [status] <span class="keyword">AS</span> <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line"> <span class="comment">--[command] AS &#x27;命令&#x27;,</span></span><br><span class="line"> dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span>,</span><br><span class="line"> DB_NAME([database_id]) <span class="keyword">AS</span> <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line"> <span class="comment">--[blocking_session_id] AS &#x27;正在阻塞其他会话的会话ID&#x27;,</span></span><br><span class="line"> der.[wait_type] <span class="keyword">AS</span> <span class="string">&#x27;等待资源类型&#x27;</span>,</span><br><span class="line"> [wait_time] <span class="keyword">AS</span> <span class="string">&#x27;等待时间&#x27;</span>,</span><br><span class="line"> [wait_resource] <span class="keyword">AS</span> <span class="string">&#x27;等待的资源&#x27;</span>,</span><br><span class="line"> [dows].[waiting_tasks_count] <span class="keyword">AS</span> <span class="string">&#x27;当前正在进行等待的任务数&#x27;</span>,</span><br><span class="line"> [<span class="keyword">reads</span>] <span class="keyword">AS</span> <span class="string">&#x27;物理读次数&#x27;</span>,</span><br><span class="line"> [writes] <span class="keyword">AS</span> <span class="string">&#x27;写次数&#x27;</span>,</span><br><span class="line"> [logical_reads] <span class="keyword">AS</span> <span class="string">&#x27;逻辑读次数&#x27;</span>,</span><br><span class="line"> [row_count] <span class="keyword">AS</span> <span class="string">&#x27;返回结果行数&#x27;</span></span><br><span class="line"> <span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> [sys].[dm_os_wait_stats] <span class="keyword">AS</span> dows</span><br><span class="line"> <span class="keyword">ON</span> der.[wait_type]<span class="operator">=</span>[dows].[wait_type]</span><br><span class="line"> <span class="keyword">CROSS</span> APPLY</span><br><span class="line"> sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"> <span class="comment">--WHERE [session_id]&gt;50</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> [cpu_time] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"><span class="keyword">CROSS</span> APPLY</span><br><span class="line">sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"><span class="keyword">WHERE</span> [session_id]<span class="operator">&gt;</span><span class="number">50</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [cpu_time] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">   total_worker_time<span class="operator">/</span>execution_count <span class="keyword">AS</span> avg_cpu_cost, plan_handle,</span><br><span class="line">   execution_count,</span><br><span class="line">   (<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(text, statement_start_offset<span class="operator">/</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">      (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> statement_end_offset <span class="operator">=</span> <span class="number">-1</span></span><br><span class="line">         <span class="keyword">THEN</span> LEN(<span class="keyword">CONVERT</span>(nvarchar(max), text)) <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">         <span class="keyword">ELSE</span> statement_end_offset</span><br><span class="line">      <span class="keyword">END</span> <span class="operator">-</span> statement_start_offset)<span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">   <span class="keyword">FROM</span> sys.dm_exec_sql_text(sql_handle)) <span class="keyword">AS</span> query_text</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_exec_query_stats</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [avg_cpu_cost] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> net_address, hostname,hostprocess,program_name,loginame,login_time <span class="keyword">from</span> master.dbo.sysprocesses</span><br><span class="line"><span class="keyword">where</span> dbid <span class="operator">=</span> DB_ID(<span class="string">&#x27;xsteam_datacenter&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> hostprocess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> p.object_id, object_name<span class="operator">=</span>object_name(p.object_id), p.index_id, buffer_pages<span class="operator">=</span><span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> sys.allocation_units a,sys.dm_os_buffer_descriptors b,     sys.partitions p </span><br><span class="line"><span class="keyword">where</span> a.allocation_unit_id<span class="operator">=</span>b.allocation_unit_id      <span class="keyword">and</span> a.container_id<span class="operator">=</span>p.hobt_id     <span class="keyword">and</span> b.database_id<span class="operator">=</span>db_id()</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.object_id,p.index_id <span class="keyword">order</span> <span class="keyword">by</span> buffer_pages <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>



<h2 id="项目迁移数据库做的调整"><a href="#项目迁移数据库做的调整" class="headerlink" title="项目迁移数据库做的调整"></a>项目迁移数据库做的调整</h2><p>对<code>EF Core</code>迁移数据库做了部分调整，如下：</p>
<p>我们在<code>EntityFrameworkCore</code>项目中添加扩展类，包含以下扩展方法</p>
<p>引入<code>Riven.EntityFrameworkCore</code>包，熊猫维护的开源包</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DbContextExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 映射规则</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;modelBuilder&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModelBuilder <span class="title">UseTableMapping</span>(<span class="params"><span class="keyword">this</span> ModelBuilder modelBuilder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> verifyingEntityType = <span class="keyword">new</span> Func&lt;IMutableEntityType, <span class="built_in">bool</span>&gt;((e) =&gt; EntityHelper.IsEntity(e.ClrType));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelBuilder</span><br><span class="line">            .TableMappingTo(verifyingEntityType, (x) =&gt; x.ToLower()) <span class="comment">// 将表名和字段映射为小写</span></span><br><span class="line">            .MapDiscriminators(verifyingEntityType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并在<code>DbContext</code>添加对扩展方法的调用</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    modelBuilder.UseTableMapping();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们重新迁移到一个新的数据库，使用以下迁移命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Add-Migration initdb</span><br><span class="line">Update-DataBase</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要删除之前生成的迁移文件</p>
</blockquote>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>SQL Server</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>漫谈数据库性能优化</title>
    <url>/2022/04/21/database-performance-optimization-solutions/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>毫不夸张的说咱们后端工程师，无论在哪家公司，呆在哪个团队，做哪个系统，遇到的第一个让人头疼的问题绝对是数据库性能问题。如果我们有一套成熟的方法论，能让大家快速、准确的去选择出合适的优化方案，我相信能够快速准备解决咱么日常遇到的80%甚至90%的性能问题。</p>
<p>　　从解决问题的角度出发，我们得先了解到问题的原因；其次我们得有一套思考、判断问题的流程方式，让我们合理的站在哪个层面选择方案；最后从众多的方案里面选择一个适合的方案进行解决问题，找到一个合适的方案的前提是我们自己对各种方案之间的优缺点、场景有足够的了解，没有一个方案是完全可以通吃通用的，软件工程没有银弹。</p>
<h2 id="为什么数据库会慢？"><a href="#为什么数据库会慢？" class="headerlink" title="为什么数据库会慢？"></a>为什么数据库会慢？</h2><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210729504.png" alt="image-20220421072926363"></p>
<p>无论是关系型数据库还是NoSQL，任何存储系统决定于其查询性能的主要有三种：</p>
<ul>
<li><strong>查找的时间复杂度</strong></li>
<li><strong>数据总量</strong></li>
<li><strong>高负载</strong></li>
</ul>
<p>而决定于<strong>查找时间复杂度</strong>主要有两个因素：</p>
<ul>
<li><strong>查找算法</strong></li>
<li><strong>存储数据结构</strong></li>
</ul>
<p>无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。</p>
<p><strong>从关系型数据库角度出发，索引结构基本固定是B+Tree，时间复杂度是O(log n)，存储结构是行式存储。因此我们对于关系数据库能优化的一般只有数据量。</strong></p>
<p>而高负载造成原因有高并发请求、复杂查询等，导致CPU、磁盘繁忙等，而服务器资源不足则会导致慢查询等问题。该类型问题一般会选择集群、数据冗余的方式分担压力。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210730825.png" alt="img"></p>
<h2 id="应该站在哪个层面思考优化？"><a href="#应该站在哪个层面思考优化？" class="headerlink" title="应该站在哪个层面思考优化？"></a>应该站在哪个层面思考优化？</h2><p><img data-src="https://cdn.jonty.top/img/202204210731601.png" alt="img"></p>
<p>从上图可见，自顶向下的一共有四层，分别是<strong>硬件、存储系统、存储结构、具体实现。层与层之间是紧密联系的，每一层的上层是该层的载体；因此越往顶层越能决定性能的上限，同时优化的成本也相对会比较高，性价比也随之越低</strong>。以最底层的具体实现为例，那么<strong>索引的优化的成本应该是最小</strong>的，可以说加了索引后无论是CPU消耗还是响应时间都是立竿见影降低；然而一个简单的语句，无论如何优化加索引也是有局限的，当在具体实现这层没有任何优化空间的时候就得往上一层【存储结构】思考，思考是否从物理表设计的层面出发优化（如分库分表、压缩数据量等），如果是文档型数据库得思考下文档聚合的结果；如果在存储结构这层优化得没效果，得继续往再上一次进行考虑，是否关系型数据库应该不适合用在现在得业务场景？如果要换存储，那么得换怎样的NoSQL?</p>
<p>​        所以我们优化的思路，出于性价比的优先考虑具体实现，实在没有优化空间了再往上一层考虑。当然如果公司有钱，直接使用钞能力，绕过了前面三层，这也是一种便捷的应急处理方式。</p>
<p>　　<strong>文章不讨论顶与底的两个层面的优化，主要从存储结构、存储系统中间两层的角度出发进行探讨</strong>。</p>
<h2 id="八大方案总结"><a href="#八大方案总结" class="headerlink" title="八大方案总结"></a>八大方案总结</h2><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210733980.png" alt="image-20220421073339928"></p>
<p>数据库的优化方案核心本质有三种：<strong>减少数据量</strong>、<strong>用空间换性能</strong>、<strong>选择合适的存储系统，</strong>这也对应了开篇讲解的慢的三个原因：<strong>数据总量、高负载、查找的时间复杂度。</strong></p>
<p>　　这里大概解释下收益类型：短期收益，处理成本低，能紧急应对，久了则会有技术债务；长期收益则跟短期收益相反，短期内处理成本高，但是效果能长久使用，扩展性会更好。</p>
<p>　  静态数据意思是，相对改动频率比较低的，也无需过多联表的，where过滤比较少。动态数据与之相反，更新频率高，通过动态条件筛选过滤。</p>
<h3 id="减少数据量"><a href="#减少数据量" class="headerlink" title="减少数据量"></a>减少数据量</h3><hr>
<p>减少数据量类型共有四种方案：<strong>数据序列化存储、数据归档、中间表生成、分库分表。</strong></p>
<p>就如上面所说的，无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。目前市面上的NoSQL基本上都支持分片存储，所以其天然分布式写的能力从数据量上能得到非常的解决方案。而关系型数据库，查找算法与存储结构是可以优化的空间比较少，因此我们一般思考出发点只有从<strong>如何减少数据量</strong>的这个角度进行选择优化，因此本类型的优化方案主要针对<strong>关系型数据库</strong>进行处理。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210735989.png" alt="img"></p>
<h3 id="数据归档"><a href="#数据归档" class="headerlink" title="数据归档"></a>数据归档</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210736615.png" alt="image-20220421073617560"></p>
<p>　注意点：别一次性迁移数量过多，建议低频率多次限量迁移。像MySQL由于删除数据后是不会释放空间的，可以执行命令OPTIMIZE TABLE释放存储空间，但是会锁表，如果存储空间还满足，可以不执行。<br>　　建议优先考虑该方案，主要通过数据库作业把非热点数据迁移到历史表，如果需要查历史数据，可新增业务入口路由到对应的历史表（库）。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210736411.png" alt="img"></p>
<h3 id="中间表（结果表）"><a href="#中间表（结果表）" class="headerlink" title="中间表（结果表）"></a>中间表（结果表）</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210737279.png" alt="image-20220421073713236"></p>
<p>中间表（结果表）其实就是利用调度任务把复杂查询的结果跑出来存储到一张额外的物理表，因为这张物理表存放的是通过跑批汇总后的数据，因此可以理解成根据原有的业务进行了高度的数据压缩。以报表为例，如果一个月的源数据有数十万，我们通过调度任务以月的维度生成，那么等于把原有的数据压缩了几十万分之一；接下来的季报和年报可以根据月报*N来进行统计，以这种方式处理的数据，就算三年、五年甚至十年数据量都可以在接受范围之内，而且可以精确计算得到。</p>
<p>　　那么数据的压缩比率是否越低越好？下面有一段口诀：</p>
<ul>
<li>字段越多，粒度越细，灵活性越高，可以以中间表进行不同业务联表处理。</li>
<li>字段越少，粒度越粗，灵活性越低，一般作为结果表查询出来。</li>
</ul>
<h3 id="数据序列化存储"><a href="#数据序列化存储" class="headerlink" title="数据序列化存储"></a>数据序列化存储</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210737499.png" alt="image-20220421073749446"></p>
<p><img data-src="https://cdn.jonty.top/img/202204210737619.png" alt="img"></p>
<p> 在数据库以序列化存储的方式，对于一些不需要结构化存储的业务来说是一种很好减少数据量的方式，特别是对于一些M*N的数据量的业务场景，如果以M作为主表优化，那么就可以把数据量维持最多是M的量级。另外像订单的地址信息，这种业务一般是不需要根据里面的字段检索出来，也比较适合。</p>
<p>​    这种方案我认为属于一种临时性的优化方案，无论是从序列化后丢失了部份字段的查询能力，还是这方案的可优化性都是有限的。</p>
<h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><hr>
<p>分库分表作为数据库优化的一种非常经典的优化方案，特别是在以前NoSQL还不是很成熟的年代，这个方案就如救命草一般的存在。</p>
<p>　　如今也有不少同行也会选择这种优化方式，但是从我角度来看，分库分表是一种优化成本很大的方案。这里我有几个建议：</p>
<ol>
<li>分库分表是实在没有办法的办法，应放到最后选择。</li>
<li>优先选择NoSQL代替，因为NoSQL诞生基本上为了扩展性与高性能。</li>
<li>究竟分库还是分表？量大则分表，并发高则分库</li>
<li>不考虑扩容，一部做到位。因为技术更新太快了，每3-5年一大变。</li>
</ol>
<h4 id="拆分方式"><a href="#拆分方式" class="headerlink" title="拆分方式"></a>拆分方式</h4><p><img data-src="https://cdn.jonty.top/img/202204210738266.png" alt="image-20220421073849209"></p>
<p>只要涉及到这个拆，那么无论是微服务也好，分库分表也好，拆分的方式主要分两种：<strong>垂直拆分、水平拆分</strong>。</p>
<p>　　垂直拆分更多是从<strong>业务角度</strong>进行拆分，主要是为了<strong>降低业务耦合度；</strong>此外以SQL Server为例，一页是8KB存储，如果在一张表里字段越多，一行数据自然占的空间就越大，那么一页数据所存储的行数就自然越少，那么每次查询所需要IO则越高因此性能自然也越慢；因此反之，减少字段也能很好提高性能。之前我听说某些同行的表有80个字段，几百万的数据就开始慢了。</p>
<p>　　水平拆分更多是从<strong>技术角度</strong>进行拆分，拆分后每张表的结构是一模一样的，简而言之就是把原有一张表的数据，通过<strong>技术手段</strong>进行分片到多张表存储，从根本上解决了数据量的问题。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210739856.png" alt="img"></p>
<h4 id="路由方式"><a href="#路由方式" class="headerlink" title="路由方式"></a>路由方式</h4><p><img data-src="https://cdn.jonty.top/img/202204210739428.png" alt="image-20220421073935371"></p>
<p>进行水平拆分后，根据分区键（sharding key）原来应该在同一张表的数据拆解写到不同的物理表里，那么查询也得根据分区键进行定位到对应的物理表从而把数据给查询出来。</p>
<p>　　路由方式一般有三种<strong>区间范围、Hash、分片映射表</strong>，每种路由方式都有自己的优点和缺点，可以根据对应的业务场景进行选择。</p>
<p>　　<strong>区间范围</strong>根据某个元素的区间的进行拆分，以时间为例子，假如有个业务我们希望以月为单位拆分那么表就会拆分像 table_2022-04，这种对于文档型、ElasticSearch这类型的NoSQL也适用，无论是定位查询，还是日后清理维护都是非常的方便的。那么缺点也明显，会因为业务独特性导致数据不平均，甚至不同区间范围之间的数据量差异很大。</p>
<p>　　<strong>Hash</strong>也是一种常用的路由方式，根据Hash算法取模以数据量均匀分别存储在物理表里，缺点是对于带分区键的查询依赖特别强，如果不带分区键就无法定位到具体的物理表导致相关所有表都查询一次，而且在分库的情况下对于Join、聚合计算、分页等一些RDBMS的特性功能还无法使用。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210739346.png" alt="img"></p>
<p>一般分区键就一个，假如有时候业务场景得用不是分区键的字段进行查询，那么难道就必须得全部扫描一遍？其实可以使用<strong>分片映射表</strong>的方式，简单来说就是额外有一张表记录额外字段与分区键的映射关系。举个例子，有张订单表，原本是以UserID作为分区键拆分的，现在希望用OrderID进行查询，那么得有额外得一张物理表记录了OrderID与UserID的映射关系。因此得先查询一次映射表拿到分区键，再根据分区键的值路由到对应的物理表查询出来。可能有些朋友会问，那这映射表是否多一个映射关系就多一张表，还是多个映射关系在同一张表。我优先建议单独处理，如果说映射表字段过多，那跟不进行水平拆分时的状态其实就是一致的，这又跑回去的老问题。</p>
<h3 id="用空间换性能"><a href="#用空间换性能" class="headerlink" title="用空间换性能"></a>用空间换性能</h3><hr>
<p>该类型的两个方案都是用来应对高负载的场景，方案有以下两种：<strong>分布式缓存、一主多从。</strong></p>
<p>与其说这个方案叫用空间换性能，我认为用空间换资源更加贴切一些。因此两个方案的本质主要通<strong>数据冗余、集群</strong>等方式分担负载压力。</p>
<p>对于关系型数据库而言，因为他的ACID特性让它天生不支持写的分布式存储，<strong>但是它依然天然的支持分布式读</strong>。 </p>
<p><img data-src="https://cdn.jonty.top/img/202204210740386.png" alt="img"></p>
<h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210741697.png" alt="image-20220421074105653"></p>
<p>缓存层级可以分好几种：<strong>客户端缓存</strong>、<strong>API服务本地缓存</strong>和<strong>分布式缓存</strong>，咱们这次只聊分布式缓存。一般我们选择分布式缓存系统都会优先选择NoSQL的键值型数据库，例如Memcached、Redis，如今Redis的数据结构多样性，高性能，易扩展性也逐渐占据了分布式缓存的主导地位。</p>
<p>缓存策略也主要有很多种：<strong>Cache-Aside</strong>、<strong>Read/Wirte-Through</strong>、<strong>Write-Back</strong>，咱们用得比较多的方式主要<strong>Cache-Aside，</strong>具体流程可看下图：</p>
<p><img data-src="https://cdn.jonty.top/img/202204210741433.png" alt="img"></p>
<p>对于分布式缓存有几点需要注意的：</p>
<h4 id="避免滥用缓存"><a href="#避免滥用缓存" class="headerlink" title="避免滥用缓存"></a>避免滥用缓存</h4><p><strong>缓存应该是按需使用，从28法则来看，80%的性能问题由主要的20%的功能引起</strong>。滥用缓存的后果会导致维护成本增大，而且有一些数据一致性的问题也不好定位。特别像一些动态条件的查询或者分页，key的组装是多样化的，量大又不好用keys指令去处理，当然我们可以用额外的一个key把记录数据的key以集合方式存储，删除时候做两次查询，先查Key的集合，然后再遍历Key集合把对应的内容删除。这一顿操作下来无疑是非常废功夫的，谁弄谁知道。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210742344.png" alt="img"></p>
<h4 id="避免缓存穿透"><a href="#避免缓存穿透" class="headerlink" title="避免缓存穿透"></a>避免缓存穿透</h4><p>当缓存没有数据，就得跑去数据库查询出来，这就是<strong>缓存穿透</strong>。假如某个时间临界点数据是空的例如周排行榜，穿透过去的无论查找多少次数据库仍然是空，而且该查询消耗CPU相对比较高，并发一进来因为缺少了缓存层的对高并发的应对，这个时候就会<strong>因为并发导致数据库资源消耗过高</strong>，这就是<strong>缓存击穿</strong>。数据库资源消耗过高就会导致其他查询超时等问题。</p>
<p>　　该问题的解决方案也简单，对于查询到数据库的空结果也缓存起来，但是给一个相对快过期的时间。有些同行可能又会问，这样不就会造成了数据不一致了么？一般有数据同步的方案像分布式缓存、后续会说的一主多从、CQRS，只要存在<strong>数据同步</strong>这几个字，那就意味着会存在数据一致性的问题，<strong>因此如果使用上述方案，对应的业务场景应允许容忍一定的数据不一致。</strong></p>
<h4 id="不是所有慢查询都适用"><a href="#不是所有慢查询都适用" class="headerlink" title="不是所有慢查询都适用"></a>不是所有慢查询都适用</h4><p>一般来说，慢的查询都意味着比较吃资源的（CPU、磁盘I/O）。举个例子，假如某个查询功能需要3秒时间，串行查询的时候并没什么问题，我们继续假设这功能每秒大概QPS为100，那么在第一次查询结果返回之前，接下来的所有查询都应该穿透到数据库，也就意味着这几秒时间有300个请求到数据库，如果这个时候数据库CPU达到了100%，那么接下来的所有查询都会超时，也就是无法有第一个查询结果缓存起来，从而还是形成了缓存击穿。</p>
<h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210743024.png" alt="image-20220421074329948"></p>
<p>常用的分担数据库压力还有一种常用做法，就是读写分离、一主多从。咱们都是知道关系型数据库天生是不具备分布式分片存储的，也就是不支持分布式写，但是它天然的支持分布式读。一主多从是部署多台从库只读实例，通过冗余主库的数据来分担读请求的压力，路由算法可有代码实现或者中间件解决，具体可以根据团队的运维能力与代码组件支持视情况选择。</p>
<p>一主多从在还没找到根治方案前是一个非常好的应急解决方案，特别是在现在云服务的年代，扩展从库是一件非常方便的事情，而且一般情况只需要运维或者DBA解决就行，无需开发人员接入。当然这方案也有缺点，因为数据无法分片，所以主从的数据量完全冗余过去，也会导致高的硬件成本。从库也有其上限，从库过多了会主库的多线程同步数据的压力。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210743531.png" alt="img"></p>
<h3 id="选择合适的存储系统"><a href="#选择合适的存储系统" class="headerlink" title="选择合适的存储系统"></a>选择合适的存储系统</h3><p>　NoSQL主要以下五种类型：<strong>键值型、文档型、列型、图型、搜素引擎，</strong>不同的存储系统直接决定了<strong>查找算法</strong>、<strong>存储数据结构</strong>，也应对了需要解决的不同的业务场景。NoSQL的出现也解决了关系型数据库之前面临的难题（性能、高并发、扩展性等）。</p>
<p>​    例如，ElasticSearch的查找算法是倒排索引，可以用来代替关系型数据库的低性能、高消耗的Like搜索（全表扫描）。而Redis的Hash结构决定了时间复杂度为O(1)，还有它的内存存储，结合分片集群存储方式以至于可以支撑数十万QPS。</p>
<p>　　因此本类型的方案主要有两种：<strong>CQRS、替换（选择）存储，</strong>这两种方案的最终本质基本是一样的主要使用合适存储来弥补关系型数据库的缺点，只不过切换过渡的方式会有点不一样。</p>
<img data-src="https://cdn.jonty.top/img/202204210744493.png" alt="img" style="zoom: 50%;" />



<h3 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h3><hr>
<blockquote>
<p><em>CQS（命令查询分离）指同一个对象中作为查询或者命令的方法，每个方法或者返回的状态，要么改变状态，但不能两者兼备</em>　</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/202204210745298.png" alt="image-20220421074500233"></p>
<p>讲解CQRS前得了解CQS，有些小伙伴看了估计还没不是很清晰，我这里用通俗的话解释：某个对象的数据访问的方法里，要么只是查询，要么只是写入（更新）。而CQRS（命令查询职责分离）基于CQS的基础上，用物理数据库来写入（更新），而用另外的存储系统来查询数据。因此我们在某些业务场景进行存储架构设计时，可以通过关系型数据库的ACID特性进行数据的更新与写入，用NoSQL的高性能与扩展性进行数据的查询处理，这样的好处就是关系型数据库和NoSQL的优点都可以兼得，同时对于某些业务不适于一刀切的替换存储的也可以有一个平滑的过渡。</p>
<p>从代码实现角度来看，不同的存储系统只是调用对应的接口API，因此CQRS的难点主要在于如何进行数据同步。</p>
<h3 id="数据同步方式"><a href="#数据同步方式" class="headerlink" title="数据同步方式"></a>数据同步方式</h3><hr>
<p><img data-src="https://cdn.jonty.top/img/202204210745102.png" alt="image-20220421074537057"></p>
<p>一般讨论到数据同步的方式主要是分<strong>推</strong>和<strong>拉：</strong></p>
<p>推指的是由数据变更端通过直接或者间接的方式把数据变更的记录发送到接收端，从而进行数据的一致性处理，这种主动的方式优点是实时性高。</p>
<p>拉指的是接收端定时的轮询数据库检查是否有数据需要进行同步，这种被动的方式从实现角度来看比推简单，因为推是需要数据变更端支持变更日志的推送的。</p>
<p>而推的方式又分两种：CDC（变更数据捕获）和领域事件。对于一些旧的项目来说，某些业务的数据入口非常多，无法完整清晰的梳理清楚，这个时候CDC就是一种非常好的方式，只要从最底层数据库层面把变更记录取到就可。</p>
<p>对于已经服务化的项目来说领域事件是一种比较舒服的方式，因为CDC是需要数据库额外开启功能或者部署额外的中间件，而领域事件则不需要，从代码可读性来看会更高，也比较开发人员的维护思维模式。</p>
<p><img data-src="https://cdn.jonty.top/img/202204210746719.png" alt="img"></p>
<h3 id="替换（选择）存储系统"><a href="#替换（选择）存储系统" class="headerlink" title="替换（选择）存储系统"></a>替换（选择）存储系统</h3><hr>
<p>因为从本质来看该模式与CQRS的核心本质是一样的，主要是要对NoSQL的优缺点有一个全面认识，这样才能在对应业务场景选择与判断出一个合适的存储系统。这里我像大家介绍一本书马丁.福勒《NoSQL精粹》，这本书我重复看了好几遍，也很好全面介绍各种NoSQL优缺点和使用场景。</p>
<p>当然替换存储的时候，我这里也有个建议：加入一个中间版本，该版本做好数据同步与业务开关，数据同步要保证全量与增加的处理，随时可以重来，业务开关主要是为了后续版本的更新做的一个临时型的功能，主要避免后续版本更新不顺利或者因为版本更新时导致的数据不一致的情况出现。在跑了一段时间后，验证了两个不同的存储系统数据是一致的后，接下来就可以把数据访问层的底层调用替换了。如此一来就可以平滑的更新切换。</p>
<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><hr>
<p>本文到这里就把八大方案介绍完了，在这里再次提醒一句，每个方案都有属于它的应对场景，咱们只能根据业务场景选择对应的解决方案，没有通吃，没有银弹。</p>
<p>这八个方案里，大部分都存在数据同步的情况，只要存在数据同步，无论是一主多从、分布式缓存、CQRS都好，都会有数据一致性的问题导致，因此这些方案更多适合一些只读的业务场景。当然有些写后既查的场景，可以通过过渡页或者广告页通过用户点击关闭切换页面的方式来缓解数据不一致性的情况。</p>
<p>通过这篇文章我相信大家对数据库设计优化有了一个全面的认识，如果有更加的建议可以在下方评论反馈给给我。</p>
<blockquote>
<p>作　　者： <strong><a href="http://www.cnblogs.com/skychen1218/">陈珙</a></strong><br>出　　处：<a href="http://www.cnblogs.com/skychen1218/">http://www.cnblogs.com/skychen1218/</a><br>关于作者：专注于微软平台的项目开发。如有问题或建议，请多多赐教！<br>版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>DBA</tag>
        <tag>调优</tag>
      </tags>
  </entry>
  <entry>
    <title>代码整洁的 TypeScript</title>
    <url>/2022/03/07/clean-code-typescript/</url>
    <content><![CDATA[<blockquote>
<p>原文链接 <a href="https://github.com/labs42io/clean-code-typescript">clean-code-typescript</a></p>
</blockquote>
<p>将代码整洁的理念适配至 TypeScript ， 灵感来自于<a href="https://github.com/ryanmcdermott/clean-code-javascript">代码整洁的 JavaScript </a>。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img data-src="https://www.osnews.com/images/comics/wtfm.jpg" alt="一张用你阅读代码时吐槽的数量来评估软件质量的搞笑图片"></p>
<p>将源自 Robert C. Martin 的 <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a>的软件工程原则适配到 TypeScript 。 这不是一个代码风格指南， 它是一个使用 TypeScript 来生产可读的、可重用的、以及可重构的软件的指南。</p>
<p>这里的每一项原则都不是必须遵守的， 甚至只有更少的能够被广泛认可。 这些仅仅是指南而已， 但却是<em>Clean Code</em> 作者多年经验的结晶。</p>
<p>我们的软件工程行业只有短短的 50 年， 依然有很多要我们去学习。 当软件架构与建筑架构一样古老时，也许我们将会有硬性的规则去遵守。 而现在， 让这些指南做为你和你的团队生产的 TypeScript 代码的质量的标准。</p>
<p>还有一件事： 知道这些指南并不能马上让你成为一个更加出色的软件开发者， 并且使用它们工作多年也并不意味着你不再会犯错误。 每一段代码最开始都是草稿， 像湿粘土一样被打造成最终的形态。 最后当我们和搭档们一起审查代码时清除那些不完善之处, 不要因为最初需要改善的草稿代码而自责， 而是对那些代<br>码下手。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="使用有意义的变量名称"><a href="#使用有意义的变量名称" class="headerlink" title="使用有意义的变量名称"></a>使用有意义的变量名称</h3><p>使用可以区分的名称， 让读者知道他们的区别是什么。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">a1: T, a2: T, a3: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, left: T, right: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> left &lt;= value &amp;&amp; value &lt;= right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用可拼读的变量名称"><a href="#使用可拼读的变量名称" class="headerlink" title="使用可拼读的变量名称"></a>使用可拼读的变量名称</h3><p>如果你不能把它读出来， 那你就不能和同事讨论它。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DtaRcrd102 = &#123;</span><br><span class="line">  <span class="attr">genymdhms</span>: <span class="built_in">Date</span>;</span><br><span class="line">  modymdhms: <span class="built_in">Date</span>;</span><br><span class="line">  pszqint: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Customer = &#123;</span><br><span class="line">  <span class="attr">generationTimestamp</span>: <span class="built_in">Date</span>;</span><br><span class="line">  modificationTimestamp: <span class="built_in">Date</span>;</span><br><span class="line">  recordId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为相同类型的变量使用相同的词汇"><a href="#为相同类型的变量使用相同的词汇" class="headerlink" title="为相同类型的变量使用相同的词汇"></a>为相同类型的变量使用相同的词汇</h3><p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDetails</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserData</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h3><p>我们要阅读的代码比要写的代码多得多， 所以我们写出的代码的可读性和可搜索性是很重要的。 使用没有意义的变量名将会导致我们的程序难于理解， 所以请使用可搜索的变量名。 类似 <a href="https://palantir.github.io/tslint/rules/no-magic-numbers/">TSLint</a>的工具可以帮助我们找到未命名的常量。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// What the heck is 86400000 for?</span></span><br><span class="line"><span class="comment">// 艹， 86400000 是什么鬼？</span></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, <span class="number">86400000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized named constants.</span></span><br><span class="line"><span class="comment">// 将它们声明为大写的变量</span></span><br><span class="line"><span class="keyword">const</span> MILLISECONDS_IN_A_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, MILLISECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>

<h3 id="使用解释性的变量"><a href="#使用解释性的变量" class="headerlink" title="使用解释性的变量"></a>使用解释性的变量</h3><p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> keyValue <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="comment">// iterate through users map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [id, user] <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="comment">// iterate through users map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免心理映射"><a href="#避免心理映射" class="headerlink" title="避免心理映射"></a>避免心理映射</h3><p>显示比隐式更好。 清晰为王！</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> u = getUser();</span><br><span class="line"><span class="keyword">const</span> s = getSubscription();</span><br><span class="line"><span class="keyword">const</span> t = charge(u, s);</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = getUser();</span><br><span class="line"><span class="keyword">const</span> subscription = getSubscription();</span><br><span class="line"><span class="keyword">const</span> transaction = charge(user, subscription);</span><br></pre></td></tr></table></figure>

<h3 id="不添加不必要的上下文"><a href="#不添加不必要的上下文" class="headerlink" title="不添加不必要的上下文"></a>不添加不必要的上下文</h3><p>如果你的类/类型/对象名有意义， 不必在变量名上再重复。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  <span class="attr">carMake</span>: <span class="built_in">string</span>;</span><br><span class="line">  carModel: <span class="built_in">string</span>;</span><br><span class="line">  carColor: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.carMake&#125;</span> <span class="subst">$&#123;car.carModel&#125;</span> (<span class="subst">$&#123;car.carColor&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="built_in">string</span>;</span><br><span class="line">  model: <span class="built_in">string</span>;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.make&#125;</span> <span class="subst">$&#123;car.model&#125;</span> (<span class="subst">$&#123;car.color&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用默认变量替代短路运算或条件"><a href="#使用默认变量替代短路运算或条件" class="headerlink" title="使用默认变量替代短路运算或条件"></a>使用默认变量替代短路运算或条件</h3><p>默认参数通常比短路运算更清晰。</p>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loadCount = count !== <span class="literal">undefined</span> ? count : <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count: <span class="built_in">number</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数-两个以下最理想"><a href="#函数参数-两个以下最理想" class="headerlink" title="函数参数 (两个以下最理想)"></a>函数参数 (两个以下最理想)</h3><p>限制函数参数的个数是非常重要的， 因为这样将使你的函数容易进行测试。 一旦超过三个参数将会导致组合爆炸， 因为你不得不编写大量针对每个参数的测试用例。</p>
<p>一个或者两个参数是理想状况， 如果可能的话， 三个参数的情况应该避免， 超过三个应该被<strong>重构</strong>。 通常，如果你有一个超过两个函数的参数， 那就意味着你的函数尝试做太多的事情。 如果不是， 多数情况下一个 更高级对象可能会满足需求。</p>
<p>当你发现你自己需要大量的参数时， 考虑使用一个对象。</p>
<p>为了让函数需要的属性更明显， 可以使用<a href="https://basarat.gitbooks.io/typescript/docs/destructuring.html">解构</a>语法。 它有三个优点：</p>
<ol>
<li><p>当有人查看函数签名时， 会立刻清楚用到了哪些属性。</p>
</li>
<li><p>解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆参数对象中解构的对象和数组。</p>
</li>
<li><p>TypeScript 会警告您未使用的属性，如果没有解构，这将是不可能的。</p>
</li>
</ol>
<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(<span class="string">&#x27;Foo&#x27;</span>, <span class="string">&#x27;Bar&#x27;</span>, <span class="string">&#x27;Baz&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p><strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: &#123; title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>你可以通过<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases">类型别名</a>来显著提高可读性：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuOptions = &#123; <span class="attr">title</span>: <span class="built_in">string</span>, <span class="attr">body</span>: <span class="built_in">string</span>, <span class="attr">buttonText</span>: <span class="built_in">string</span>, <span class="attr">cancellable</span>: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: MenuOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="函数应当只做一件事情"><a href="#函数应当只做一件事情" class="headerlink" title="函数应当只做一件事情"></a>函数应当只做一件事情</h3><p>单一职责原则，这是软件工程中最重要的一条规则， 当函数需要做更多的事情时， 它们将会更难进行编写、 测试和推理。当你能将一个函数隔离到只有一个动作， 他们将能够被容易的进行重构并且你的代码将会更容易阅读。 如果你严格遵守本指南中的这一条， 你将会领先于许多开发者。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client</span>) </span>&#123;</span><br><span class="line">  clients.filter(isActiveClient).forEach(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActiveClient</span>(<span class="params">client: Client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数名称应该说明它要做什么"><a href="#函数名称应该说明它要做什么" class="headerlink" title="函数名称应该说明它要做什么"></a>函数名称应该说明它要做什么</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// It&#x27;s hard to tell from the function name what is added</span></span><br><span class="line"><span class="comment">// 很难从函数名看出加了什么</span></span><br><span class="line">addToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMonthToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">addMonthToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="函数应该只有一个抽象级别"><a href="#函数应该只有一个抽象级别" class="headerlink" title="函数应该只有一个抽象级别"></a>函数应该只有一个抽象级别</h3><p>当在你的函数中有多于一个抽象级别时， 你的函数通常做了太多事情。 拆分函数将会提升重用性和测试性。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ast = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tokens = tokenize(code);</span><br><span class="line">  <span class="keyword">const</span> syntaxTree = parse(tokens);</span><br><span class="line"></span><br><span class="line">  syntaxTree.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">code: <span class="built_in">string</span></span>): <span class="title">Token</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens: Token[] = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      tokens.push( <span class="comment">/* ... */</span> );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">tokens: Token[]</span>): <span class="title">SyntaxTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> syntaxTree: SyntaxTree[] = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    syntaxTree.push( <span class="comment">/* ... */</span> );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> syntaxTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移除冗余代码"><a href="#移除冗余代码" class="headerlink" title="移除冗余代码"></a>移除冗余代码</h3><p>竭尽你的全力去避免冗余代码。 冗余代码是不好的， 因为它意味着当你需要修改一些逻辑时会有多个地方需要修改。</p>
<p>想象一下你在经营一家餐馆， 你需要记录所有的库存西红柿， 洋葱， 大蒜， 各种香料等等。 如果你有多个记录列表， 当你用西红柿做一道菜时你得更新多个列表。 如果你只有一个列表， 就只有一个地方需要更新！</p>
<p>你有冗余代码通常是因为你有两个或多个稍微不同的东西， 它们共享大部分， 但是它们的不同之处迫使你使用两个或更多独立的函数来处理大部分相同的东西。 移除冗余代码意味着创建一个可以处理这些不同之处的抽象的函数/模块/类。</p>
<p>让这个抽象正确是关键的， 这是为什么要你遵循 <em>Classes</em> 那一章的 SOLID 的原因。 不好的抽象比冗余代码更差， 所以要谨慎行事。 既然已经这么说了， 如果你能够做出一个好的抽象， 才去做。 不要重复你自己， 否则你会发现当你要修改一个东西时时刻需要修改多个地方。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers: Developer[]</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function">(<span class="params">developer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.getGithubLink();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers: Manager[]</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function">(<span class="params">manager</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.getMBAProjects();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getExtraDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">githubLink</span>: <span class="built_in">this</span>.githubLink,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getExtraDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">portfolio</span>: <span class="built_in">this</span>.portfolio,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEmployeeList</span>(<span class="params">employee: Developer | Manager</span>) </span>&#123;</span><br><span class="line">  employee.forEach(<span class="function">(<span class="params">employee</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">const</span> extra = employee.getExtraDetails();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      extra,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您应该对代码冗余持批判的态度。 有时需要在冗余代码和通过因不必要的抽象而增加的复杂性之间做权衡。 当来自两个不同模块的两个实现看起来相似但存在于不同的域中时，冗余(可能)是可接受的并且优于提取公共代码。 在这种情况下，提取的公共代码引入了两个模块之间的间接依赖关系。</p>
<h3 id="使用-Object-assign-设置默认对象或者解构"><a href="#使用-Object-assign-设置默认对象或者解构" class="headerlink" title="使用 Object.assign 设置默认对象或者解构"></a>使用 Object.assign 设置默认对象或者解构</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">&#x27;Foo&#x27;</span>;</span><br><span class="line">  config.body = config.body || <span class="string">&#x27;Bar&#x27;</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">&#x27;Baz&#x27;</span>;</span><br><span class="line">  config.cancellable = config.cancellable !== <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menuConfig = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">    <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>另外， 也可以使用解构来处理默认值：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title = <span class="string">&#x27;Foo&#x27;</span>, body = <span class="string">&#x27;Bar&#x27;</span>, buttonText = <span class="string">&#x27;Baz&#x27;</span>, cancellable = <span class="literal">true</span> &#125;: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>要避免显示传递 <code>undefined</code> 或者 <code>null</code> 值产生的负面影响或异常行为， 可以设置 TypeScript 编译器来禁止。 请查看 TypeScript 的 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks"><code>--strictNullChecks</code></a> 选项。</p>
<h3 id="不要使用标记位做为函数参数"><a href="#不要使用标记位做为函数参数" class="headerlink" title="不要使用标记位做为函数参数"></a>不要使用标记位做为函数参数</h3><p>标记位是告诉你的用户这个函数做了不只一件事情。 函数应该只做一件事情。 如果你的函数因为一个布尔值出现不同的代码路径， 请拆分它们。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span>, temp: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.create(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  createFile(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免副作用（第-1-部分）"><a href="#避免副作用（第-1-部分）" class="headerlink" title="避免副作用（第 1 部分）"></a>避免副作用（第 1 部分）</h3><p>如果一个函数做了除接受一个值然后返回一个值或多个值之外的任何事情， 它将会产生副作用， 它可能是写入一个文件， 修改一个全局变量， 或者意外的把你所有的钱连接到一个陌生人那里。</p>
<p>现在在你的程序中确实偶尔需要副作用， 就像上面的代码， 你也许需要写入到一个文件， 你需要做的是集中化你要做的事情， 不要让多个函数或者类写入一个特定的文件， 用一个服务来实现它， 一个并且只有一个。</p>
<p>重点是避免这些常见的易犯的错误， 比如在对象之间共享状态而不使用任何结构， 使用任何地方都可以写入的可变的数据类型， 没有集中化导致副作用。 如果你能做到这些， 那么你将会比其它的码农大军更加幸福。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// 全局变量被下面的函数引用</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Robert C. Martin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = btoa(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toBase64();</span><br><span class="line"><span class="comment">// If we had another function that used this name, now it&#x27;d be a Base64 value</span></span><br><span class="line"><span class="comment">// 如果我们有另一个函数使用这个 name ， 现在它应该是一个 Base64 字符串值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// expected to print &#x27;Robert C. Martin&#x27; but instead &#x27;Um9iZXJ0IEMuIE1hcnRpbg==&#x27;</span></span><br><span class="line"><span class="comment">// 期望打印出 &#x27;Robert C. Martin&#x27; 但是却是 &#x27;Um9iZXJ0IEMuIE1hcnRpbg==&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Robert C. Martin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params">text: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> btoa(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encodedName = toBase64(name);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<h3 id="避免副作用-（第-2-部分）"><a href="#避免副作用-（第-2-部分）" class="headerlink" title="避免副作用 （第 2 部分）"></a>避免副作用 （第 2 部分）</h3><p>在 JavaScript 中， 基本类型通过值进行传递而对象/类通过引用传递。 以对象和数组为例， 如果你的函数对一个购物车数组做出了更改， 比如添加了一个要购买的东西， 那么其它使用这个购物车数组的任何函数都会受到影响。 这样貌似挺不错的， 不过也可能很糟糕。 让我们来想象一个糟糕的情况：</p>
<p>用户点击“购买”按钮， 调用一个 <code>purchase</code> 函数， 发出一个网络请求， 经购物车数组发送到服务器。 由于网络情况比较差， <code>purchase</code> 函数只能尝试重新发送请求。 现在， 用户在网络请求开始之前， 突然点击了“添加到购物车”按钮， 添加了一项并不是真心想买的东西， 那么 <code>purchase</code> 函数将会发送这个突然被添加的项目， 因为它们引用了同一个购物车数组对象， 而这个对象 <code>addItemToCart</code> 函数修改了， 添加了一个不想要的项目。</p>
<p>一个好的方案应该是让 <code>addItemToCart</code> 始终克隆一个购物车副本， 编辑并返回副本。 这样能够保证它不会被其它任何函数引用， 也就不能进行修改。</p>
<p>这种方案下需要注意以下 2 个问题：</p>
<ol>
<li><p>可能在有些情况下确实需要修改输入对象， 但是当你采用这种编程实践之后， 你会发现这种情况是寥寥无几的。 很多东西可以被重构来消除负面影响。 （参考<a href="https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0">纯函数</a>/<a href="https://en.wikipedia.org/wiki/Pure_function">Pure function</a>）</p>
</li>
<li><p>克隆大对象可能比较消耗性能。 幸运的是， 在实际操作上， 并不是一个多大的问题， 因为有优秀的类库可以让这一操作变得非常快， 同时也比手工克隆这些对象和数组节省很多内存。</p>
</li>
</ol>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  cart.push(&#123; item, <span class="attr">date</span>: <span class="built_in">Date</span>.now() &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">CartItem</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...cart, &#123; item, <span class="attr">date</span>: <span class="built_in">Date</span>.now() &#125;];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="不要写入全局函数"><a href="#不要写入全局函数" class="headerlink" title="不要写入全局函数"></a>不要写入全局函数</h3><p>污染全局在 JavaScript 中是一个不好的做法， 因为你可能会和另外一个类库冲突， 你的 API 的用户可能不够聪明， 直到他们得到在生产环境得到一个异常。 让我们来考虑这样一个例子： 假设你要扩展JavaScript 的 原生 <code>Array</code> ， 添加一个可以显示两个数组的不同之处的 <code>diff</code> 方法， 你可以在<code>Array.prototype</code> 中写一个新的方法， 但是它可能会和尝试做相同事情的其它类库发生冲突。 如果有另外一个类库仅仅使用 <code>diff</code> 方法来查找数组的第一个元素和最后一个元素之间的不同之处呢？ 这就是为什么使用 ES2015/ES6 的类是一个更好的做法的原因， 只要简单的扩展全局的 <code>Array</code> 即可。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> Array&lt;T&gt; &#123;</span><br><span class="line">    diff(other: T[]): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.diff) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">other: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  diff(other: T[]): T[] &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数式编程优于指令式编程"><a href="#函数式编程优于指令式编程" class="headerlink" title="函数式编程优于指令式编程"></a>函数式编程优于指令式编程</h3><p>当你可以使用函数式编程风格时请尽情使用。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Uncle Bobby&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Suzie Q&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jimmy Gosling&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Gracie Hopper&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contributions.length; i++) &#123;</span><br><span class="line">  totalOutput += contributions[i].linesOfCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Uncle Bobby&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Suzie Q&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jimmy Gosling&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Gracie Hopper&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalOutput = contributions</span><br><span class="line">  .reduce(<span class="function">(<span class="params">totalLines, output</span>) =&gt;</span> totalLines + output.linesOfCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="封装条件语句"><a href="#封装条件语句" class="headerlink" title="封装条件语句"></a>封装条件语句</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (subscription.isTrial || account.balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canActivateService</span>(<span class="params">subscription: Subscription, account: Account</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> subscription.isTrial || account.balance &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canActivateService(subscription, account)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免负面条件"><a href="#避免负面条件" class="headerlink" title="避免负面条件"></a>避免负面条件</h3><p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailNotUsed</span>(<span class="params">email: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmailNotUsed(email)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailUsed</span>(<span class="params">email</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isEmailUsed(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免条件语句"><a href="#避免条件语句" class="headerlink" title="避免条件语句"></a>避免条件语句</h3><p>这看起来似乎是一个不可能的任务。 第一次听到这个时， 多数人会说： “没有 <code>if</code> 语句还能期望我干啥呢”， 答案是多数情况下你可以使用多态来完成同样的任务。 第二个问题通常是 “好了， 那么做很棒，但是我为什么想要那样做呢”， 答案是我们学到的上一条代码整洁之道的理念： 一个函数应当只做一件事情。<br>当你有使用 <code>if</code> 语句的类/函数是， 你在告诉你的用户你的函数做了不止一件事情。 记住： 只做一件事情。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;777&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getPassengerCount();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Air Force One&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Cessna&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getFuelExpenditure();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Unknown airplane type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// shared logic with subclasses ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getPassengerCount();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getFuelExpenditure();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免类型检查"><a href="#避免类型检查" class="headerlink" title="避免类型检查"></a>避免类型检查</h3><p>TypeScript 是 JavaScript 的一个严格语法的超集， 为这门语言增加了可选的静态类型检查。始终倾向于给变量、 参数以及返回值定义类型一体现 TypeScript 的完整特征。这将使重构变得更加容易。</p>
<p><strong>NO</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle: Bicycle | Car</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">    vehicle.pedal(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">    vehicle.drive(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>YES</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vehicle = Bicycle | Car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  vehicle.move(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h3><p>现代化浏览器运行时在幕后做大量的优化， 在大多数的时间， 做优化就是在浪费你的时间。 <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers">这些是好的资源</a>， 用来查看那些地方需要优化。 为这些而优化， 直到它们被修正。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// On old browsers, each iteration with uncached `list.length` would be costly</span></span><br><span class="line"><span class="comment">// because of `list.length` recomputation. In modern browsers, this is optimized.</span></span><br><span class="line"><span class="comment">// 在旧的浏览器上， 每次循环 `list.length` 都没有被缓存， 会导致不必要的开销， 因为要重新计</span></span><br><span class="line"><span class="comment">// 算 `list.length` 。 在现代化浏览器上， 这个已经被优化了。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="移除僵尸代码"><a href="#移除僵尸代码" class="headerlink" title="移除僵尸代码"></a>移除僵尸代码</h3><p>僵死代码和冗余代码同样糟糕。 没有理由在代码库中保存它。 如果它不会被调用， 就删掉它。 当你需要<br>它时， 它依然保存在版本历史记录中。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">&#x27;apples&#x27;</span>, req, <span class="string">&#x27;www.inventory-awesome.io&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">&#x27;apples&#x27;</span>, req, <span class="string">&#x27;www.inventory-awesome.io&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="使用枚举器和生成器"><a href="#使用枚举器和生成器" class="headerlink" title="使用枚举器和生成器"></a>使用枚举器和生成器</h3><p>当像流一样处理数据集时， 使用生成器和枚举器。 这样做的好处是：</p>
<ul>
<li>被调用者与生成器解耦， 这样被调用者可以决定处理多少项；</li>
<li>延迟执行， 元素按流式按需处理；</li>
<li>允许为枚举模式实现进行优化；</li>
</ul>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> items: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (items.length &lt; n) &#123;</span><br><span class="line">    items.push(items[items.length - <span class="number">2</span>] + items[items.length - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  fibonacci(n).forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print first 10 Fibonacci numbers.</span></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个无限长的斐波那契数字流， 生成器并没有保存数字数组。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fib <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i++ === n) <span class="keyword">break</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(fib);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print first 10 Fibonacci numbers.</span></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>一些类库可以与原生数组类似的方式使用枚举， 将 <code>map</code>， <code>slice</code>， <code>forEach</code> 等方法串联到一起。 请参考 <a href="https://www.npmjs.com/package/itiriri">itiriri</a> 的高级枚举处理示例（或者 <a href="https://www.npmjs.com/package/itiriri-async">itiriri-async</a> 的异步枚举处理）。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itiriri <span class="keyword">from</span> <span class="string">&#x27;itiriri&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">itiriri(fibonacci())</span><br><span class="line">  .take(<span class="number">10</span>)</span><br><span class="line">  .forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br></pre></td></tr></table></figure>

<h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="使用-getter-和-setter"><a href="#使用-getter-和-setter" class="headerlink" title="使用 getter 和 setter"></a>使用 getter 和 setter</h3><p>TypeScript 支持 getter/setter 语法。 正因为如此， 使用 getters 和 setters 来访问对象上的数据比简单的在一个对象上查找属性要好得多。 “为什么？” 你可能会问， 好吧， 原因请看下面的列表：</p>
<ul>
<li><p>当你想在获取一个对象属性的背后做更多的事情时， 你不需要在代码库中查找和修改每一处访问；</p>
</li>
<li><p>使用 <code>set</code> 可以让添加验证变得容易；</p>
</li>
<li><p>封装内部实现；</p>
</li>
<li><p>使用 getting 和 setting 时， 容易添加日志和错误处理；</p>
</li>
<li><p>你可以延迟加载对象的属性， 比如说从服务器获取。</p>
</li>
<li><p><em>NO：</em>*</p>
</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> BankAccount = &#123;</span><br><span class="line">  <span class="attr">balance</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> account: BankAccount = &#123;</span><br><span class="line">  <span class="attr">balance</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot set negative balance.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.balance = value;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> accountBalance: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">balance</span>(): <span class="title">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.accountBalance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">balance</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot set negative balance.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.accountBalance = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 `BankAccount` 封装了验证逻辑， 如果某一天需求变化了， 需要添加额外的验证规则， 我们只需要修改 `setter` 即可， 其它依赖性代码则无需修改。</span></span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">new</span> BankAccount();</span><br><span class="line">account.balance = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<h3 id="让对象拥有私有的-受保护的成员"><a href="#让对象拥有私有的-受保护的成员" class="headerlink" title="让对象拥有私有的/受保护的成员"></a>让对象拥有私有的/受保护的成员</h3><p>TypeScript 支持在类成员上添加 <code>public</code> <em>(默认)</em> ， <code>protected</code> 和 <code>private</code> 修饰符。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">perimeter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">surface</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> radius: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">perimeter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">surface</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="倾向于不可变性"><a href="#倾向于不可变性" class="headerlink" title="倾向于不可变性"></a>倾向于不可变性</h3><p>TypeScript 的类型系统允许将类/接口的某些属性标记为 <em>只读</em> 。 这允许你在一个很舒适的方式下工作（不需要考虑意外的变化）。 针对更加高级的场景， 有一个内置的 <code>Readonly</code> 类型， 它接受一个类型 <code>T</code> ， 实用类型映射， 将类型 <code>T</code> 的全部属性统统标记为只读（参考 <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types">mapped types</a>）。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="built_in">string</span>;</span><br><span class="line">  port: <span class="built_in">string</span>;</span><br><span class="line">  db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="keyword">readonly</span> host: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> port: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型-vs-接口"><a href="#类型-vs-接口" class="headerlink" title="类型 vs. 接口"></a>类型 vs. 接口</h3><p>当需要并集或者交集时， 实用类型。 当需要扩展或实现时， 实用接口。 然而并没有严格的规则， 哪个适合就用哪个。 若需要一个更加详细的解释， 请参考关于 TypeScript 的类型和接口之间的不同的这个<a href="https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543">答案</a>。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> EmailConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DbConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DbConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config  = EmailConfig | DbConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="title">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="title">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类应当小"><a href="#类应当小" class="headerlink" title="类应当小"></a>类应当小</h3><p>类的大小由它的职责衡量。 根据 <em>单一职责原则</em> 一个类应该小。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dashboard</span> </span>&#123;</span><br><span class="line">  getLanguage(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  setLanguage(language: <span class="built_in">string</span>): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  showProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  hideProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  isDirty(): <span class="built_in">boolean</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  goToHomePage(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  updateProfile(details: UserDetails): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dashboard</span> </span>&#123;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其它方法移到其它类以拆分职责</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="高内聚和低耦合"><a href="#高内聚和低耦合" class="headerlink" title="高内聚和低耦合"></a>高内聚和低耦合</h3><p>内聚定义了类成员彼此相关的程度。 理想情况下，每个方法都应使用类中的所有字段。<br>然后我们说这个类是<em>最高内聚</em>。 实际上， 这并非总是可行， 甚至不可取。 但是你应该更喜欢高内聚。</p>
<p>耦合指的是两个类相互依赖或相互依赖的程度。 如果其中一个类中的更改不影响其它的， 则称这些类是低耦合的。</p>
<p>好的软件设计拥有 <strong>高内聚</strong> 和 <strong>低耦合</strong> 。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不好的： 每一个私有变量仅仅被一组或另一组方法使用， 这很明显说明这个类在兼负多个职责。 当我仅仅需要一个服务来获取用户事务时， 还得传递另外一个 `emailSender` 的实例。</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> db: Database,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> emailSender: EmailSender</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(<span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> db: Database</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserNotifier</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> emailSender: EmailSender</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.emailSender.send(<span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="组合优先于继承"><a href="#组合优先于继承" class="headerlink" title="组合优先于继承"></a>组合优先于继承</h3><p>正如<a href="https://en.wikipedia.org/wiki/Design_Patterns"><em>设计模式四人帮</em></a>所述， 如果可能，你应该优先使用组合而不是继承。 有许多好的理由去使用继承， 也有许多好的理由去使用组合。这个格言的重点是， 如果你本能的观点是继承， 那么请想一下组合能否更好的为你的问题建模。 很多情况下它真的可以。</p>
<p>那么你也许会这样想， “我什么时候改使用继承？” 这取决于你手上的问题， 不过这儿有一个像样的列表说明什么时候继承比组合更好用：</p>
<ol>
<li>你的继承表示”是一个”的关系而不是”有一个”的关系（人类-&gt;动物 vs 用户-&gt;用户详情）；</li>
<li>你可以重用来自基类的代码（人可以像所有动物一样行动）；</li>
<li>你想通过基类对子类进行全局的修改（改变所有动物行动时的热量消耗）；</li>
</ol>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="comment">// 不好是因为雇员“有”税率数据， EmployeeTaxData 不是一个 Employee 类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    email: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> ssn: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> salary: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> taxData: EmployeeTaxData;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTaxData(ssn: <span class="built_in">string</span>, <span class="attr">salary</span>: <span class="built_in">number</span>): Employee &#123;</span><br><span class="line">    <span class="built_in">this</span>.taxData = <span class="keyword">new</span> EmployeeTaxData(ssn, salary);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">readonly</span> ssn: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">readonly</span> salary: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h3><p>这个模式在 JavaScript 中是非常有用的， 并且在许多类库使用。 它使你的代码变得富有表现力， 并减少啰嗦。 因为这个原因， 我说， 使用方法链然后再看看你的代码会变得多么简洁。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.collection = collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, <span class="attr">itemsPerPage</span>: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="built_in">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.orderByFields = fields;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryBuilder = <span class="keyword">new</span> QueryBuilder();</span><br><span class="line">queryBuilder.from(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">queryBuilder.page(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">queryBuilder.orderBy(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = queryBuilder.build();</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.collection = collection;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, <span class="attr">itemsPerPage</span>: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="built_in">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.orderByFields = fields;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="keyword">new</span> QueryBuilder()</span><br><span class="line">  .from(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  .page(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">  .orderBy(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure>

<h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 (SRP)"></a>单一职责原则 (SRP)</h3><p>正如代码整洁之道所述， “永远不要有超过一个理由来修改一个类”。 给一个类塞满许多功能， 就像你在航班上只能带一个行李箱一样， 这样做的问题你的类不会有理想的内聚性， 将会有太多的理由来对它进行修改。最小化需要修改一个类的次数时很重要的， 因为如果一个类拥有太多的功能， 一旦你修改它的一小部分，<br>将会很难弄清楚会对代码库中的其它模块造成什么影响。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeSettings</span>(<span class="params">settings: UserSettings</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">verifyCredentials</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">verifyCredentials</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> auth: UserAuth;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.auth = <span class="keyword">new</span> UserAuth(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeSettings</span>(<span class="params">settings: UserSettings</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.auth.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 (OCP)"></a>开闭原则 (OCP)</h3><p>Bertrand Meyer 说过， “软件实体 (类， 模块， 函数等) 应该为扩展开放， 但是为修改关闭。” 这是什么意思呢？ 这个原则基本上说明了你应该允许用户添加功能而不必修改现有的代码。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> adapter: Adapter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.adapter <span class="keyword">instanceof</span> AjaxAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeAjaxCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.adapter <span class="keyword">instanceof</span> NodeAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeHttpCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// code shared to subclasses ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> adapter: Adapter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="built_in">this</span>.adapter.request&lt;T&gt;(url);</span><br><span class="line">    <span class="comment">// transform response and return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 (LSP)"></a>里氏替换原则 (LSP)</h3><p>这是针对一个非常简单的里面的一个恐怖意图， 它的正式定义是： “如果 S 是 T 的一个子类型， 那么类型为 T 的对象可以被类型为 S 的对象替换（例如， 类型为 S 的对象可作为类型为 T 的替代品）而不需要修改目标程序的期望性质 （正确性、 任务执行性等）。” 这甚至是个恐怖的定义。</p>
<p>最好的解释是， 如果你有一个基类和一个子类， 那个基类和字类可以互换而不会产生不正确的结果。 这可能还有些疑惑， 让我们来看一下这个经典的正方形与矩形的例子。 从数学上说， 一个正方形是一个矩形，但是你用 “is-a” 的关系用继承来实现， 你将很快遇到麻烦。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">protected</span> width: <span class="built_in">number</span> = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">protected</span> height: <span class="built_in">number</span> = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">area: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="built_in">this</span>.height = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = height;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span>(<span class="params">rectangles: Rectangle[]</span>) </span>&#123;</span><br><span class="line">  rectangles.forEach(<span class="function">(<span class="params">rectangle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = rectangle</span><br><span class="line">      .setWidth(<span class="number">4</span>)</span><br><span class="line">      .setHeight(<span class="number">5</span>)</span><br><span class="line">      .getArea(); <span class="comment">// BAD: Returns 25 for Square. Should be 20.</span></span><br><span class="line">    rectangle.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">area: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> width = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> height = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> length: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length * <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeShapes</span>(<span class="params">shapes: Shape[]</span>) </span>&#123;</span><br><span class="line">  shapes.forEach(<span class="function">(<span class="params">shape</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = shape.getArea();</span><br><span class="line">    shape.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shapes = [<span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Square(<span class="number">5</span>)];</span><br><span class="line">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure>

<h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>接口隔离原则说的是 “客户端不应该强制依赖他们不需要的接口。” 这个原则与单一职责原则紧密相关。</p>
<p>它的真正含义是你应该总是设计一种抽象的方式，使用部分方法的客户端不会得到全部实现。 这还包括禁止客户端实现他们不需要的方法。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> SmartPrinter &#123;</span><br><span class="line">  print();</span><br><span class="line">  fax();</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllInOnePrinter</span> <span class="title">implements</span> <span class="title">SmartPrinter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EconomicPrinter</span> <span class="title">implements</span> <span class="title">SmartPrinter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Fax not supported.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Scan not supported.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> Printer &#123;</span><br><span class="line">  print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fax &#123;</span><br><span class="line">  fax();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Scanner &#123;</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllInOnePrinter</span> <span class="title">implements</span> <span class="title">Printer</span>, <span class="title">Fax</span>, <span class="title">Scanner</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EconomicPrinter</span> <span class="title">implements</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 (DIP)"></a>依赖反转原则 (DIP)</h3><p>这个原则阐述了两个重要的事情：</p>
<ol>
<li>高级模块不应该依赖于低级模块， 两者都应该依赖与抽象；</li>
<li>抽象不应当依赖于具体实现， 具体实现应当依赖于抽象。</li>
</ol>
<p>这个一开始会很难理解， 但是如果你使用过 Angular.js ， 你应该已经看到过通过依赖注入来实现的这个原则， 虽然他们不是相同的概念， 依赖反转原则让高级模块远离低级模块的细节和创建， 可以通过 DI 来实现。 这样做的巨大益处是降低模块间的耦合。 耦合是一个非常糟糕的开发模式， 因为会导致代码难于重构。</p>
<p>DIP 通常通过使用控制反转 (IoC) 容器来达到。 <a href="https://www.npmjs.com/package/inversify">InversifyJs</a> 是 TypeScript 下的一个强大的 IoC 容器示例。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlFormatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts an XML string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// BAD: We have created a dependency on a specific request implementation.</span></span><br><span class="line">  <span class="comment">// We should just have ReportReader depend on a parse method: `parse`</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> formatter = <span class="keyword">new</span> XmlFormatter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader();</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.xml&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Formatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlFormatter</span> <span class="title">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts an XML string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonFormatter</span> <span class="title">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts a JSON string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportReader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> formatter: Formatter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> XmlFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.xml&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or if we had to read a json report</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> JsonFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.json&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试比发布更加重要。 如果你没有测试或者测试不够充分， 每次发布时你就不能确认没有破坏任何事情。<br>测试的量由你的团队决定， 但是拥有 100% 的覆盖率(包括所有的语句和分支)是你为什么能达到高度自信和内心的平静。 这意味着需要一个额外的伟大的测试框架， 也需要一个好的<a href="http://gotwarlost.github.io/istanbul/">覆盖率工具</a>。</p>
<p>没有理由不写测试。 这里有<a href="http://jstherightway.org/#testing-tools">大量的优秀的 JS 测试框架</a>，<br>选一个适合你的团队的即可。 当为团队选择了测试框架之后， 接下来的目标是为生产的每一个新的功能／模块编写测试。 如果你倾向于测试驱动开发(TDD)， 那就太棒了， 但是要点是确认你在上线任何功能或者重构一个现有功能之前， 达到了需要的目标覆盖率。</p>
<h3 id="TDD-的三大纪律"><a href="#TDD-的三大纪律" class="headerlink" title="TDD 的三大纪律"></a>TDD 的三大纪律</h3><ol>
<li>不得写任何生产代码， 除非是修复了一个失败的单元测试；</li>
<li>出现任何失败， 不得继续编写任何单元测试； 编译失败也是失败；</li>
<li>只要有失败的单元测试， 不得继续编写任何生产代码；</li>
</ol>
<h3 id="F-I-R-S-T-规则"><a href="#F-I-R-S-T-规则" class="headerlink" title="F.I.R.S.T. 规则"></a>F.I.R.S.T. 规则</h3><p>简洁测试应当遵循的规则：</p>
<ul>
<li><p><strong>快速 (Fast)</strong> 测试应当很快， 因为我们希望经常运行他们。</p>
</li>
<li><p><strong>独立 (Independent)</strong> 测试不应当相互依赖。 不管是单独运行还是一起以任意顺序运行， 应当有相同的输出。</p>
</li>
<li><p><strong>重复 (Repeatable)</strong> 测试应当是在任何环境下可重复的， 测试失败不应有任何理由。</p>
</li>
<li><p><strong>自验证 (Self-Validating)</strong> 一个测试的结果应该是 <em>通过</em> 或者 <em>失败</em> 。 不需要去比较日志文件来判断测试是否通过。</p>
</li>
<li><p><strong>及时 (Timely)</strong> 单元测试应该在产品代码之前编写。 如果你在产品代码之后编写测试， 就会发现写测试太难了。</p>
</li>
</ul>
<h3 id="每个测试单个概念"><a href="#每个测试单个概念" class="headerlink" title="每个测试单个概念"></a>每个测试单个概念</h3><p>单元测试也应当遵守 <em>单一职责原则</em> 。 让每个单元测试只包含一个断言。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;AwesomeDate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;handles date boundaries&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: AwesomeDate;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;1/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;1/31/2015&#x27;</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2016&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;2/29/2016&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;3/1/2015&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;AwesomeDate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;handles 30-day months&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;1/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;1/31/2015&#x27;</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;handles leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2016&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;2/29/2016&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;handles non-leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;3/1/2015&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="测试的名称应当揭示它的动机"><a href="#测试的名称应当揭示它的动机" class="headerlink" title="测试的名称应当揭示它的动机"></a>测试的名称应当揭示它的动机</h3><p>当测试失败时， 它的名称就是错误的第一指示。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Calendar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;2/29/2020&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;throws&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Calendar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;should handle leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;should throw when format is invalid&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="倾向于-Promise-而不是回调"><a href="#倾向于-Promise-而不是回调" class="headerlink" title="倾向于 Promise 而不是回调"></a>倾向于 Promise 而不是回调</h3><p>回调不够简洁， 因为他们会产生过多的嵌套 <em>（回调地狱）</em> 。 这些工具可以将使用回调函数转换成返回 Promise 的函数 （对于 Node.js ， 参考 <a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original"><code>util.promisify</code></a> ， 而对于更加通用的场景， 参考  <a href="https://www.npmjs.com/package/pify">pify</a>, <a href="https://www.npmjs.com/package/es6-promisify">es6-promisify</a> ）。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span>, callback: (error: <span class="built_in">Error</span>, content?: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  get(url, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      callback(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      writeFile(saveTo, response.body, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          callback(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, response.body);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>, <span class="function">(<span class="params">error, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));  </span><br></pre></td></tr></table></figure>

<p>Promise 提供了一些帮助方法来让代码变得更加简洁：</p>
<table>
<thead>
<tr>
<th>Pattern</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td><code>Promise.resolve(value)</code></td>
<td>将一个值转换为一个已解决的 Promise 。</td>
</tr>
<tr>
<td><code>Promise.reject(error)</code></td>
<td>将一个错误转换为一个已拒绝的 Promise 。</td>
</tr>
<tr>
<td><code>Promise.all(promises)</code></td>
<td>从一组 Promise 返回一个新的 Promise ， 如果这组 Promise 全部解决， 则解决新生成的 Promise ， 否则拒绝新生成的 Promise 。</td>
</tr>
<tr>
<td><code>Promise.race(promises)</code></td>
<td>从多个 Promise 生成一个新的 Promise ， 返回值由第一个解决或者拒绝的 Promise 决定。</td>
</tr>
</tbody></table>
<p><code>Promise.all</code> 在需要并行运行任务时非常有用， 而 <code>Promise.race</code> 则可以比较容易的实现类似超时的 Promise 。</p>
<h3 id="Async-Await-比-Promise-更加简洁"><a href="#Async-Await-比-Promise-更加简洁" class="headerlink" title="Async/Await 比 Promise 更加简洁"></a>Async/Await 比 Promise 更加简洁</h3><p>使用<code>async</code> /<code>await</code>语法，您可以编写更清晰，更易理解的链接承诺的代码。 通过在方法前面标记 <code>async</code> 关键字， 可以让 JavaScript 运行时在遇到 <code>async</code> 关键字时暂停（当使用 Promise 时才能这样做）。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = util.promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));  </span><br></pre></td></tr></table></figure>

<p><strong>Good:</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> get(url);</span><br><span class="line">  <span class="keyword">await</span> write(saveTo, response);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// somewhere in an async function</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="keyword">await</span> downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(content);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>抛出错误是件好事！ 它们意味着当程序出错时， 成功的通知运行时， 并通过停止执行当前堆栈上的函数， 终止进程（在 Node 中）， 并且在控制台打印错误堆栈信息以通知你。</p>
<h3 id="始终使用为抛出或拒绝使用错误对象-Error"><a href="#始终使用为抛出或拒绝使用错误对象-Error" class="headerlink" title="始终使用为抛出或拒绝使用错误对象 (Error)"></a>始终使用为抛出或拒绝使用错误对象 (Error)</h3><p>JavaScript 以及 TypeScript 允许你 <code>抛出</code> 任意对象， 一个 Promise 也能够用任意对象进行拒绝。 使用 <code>抛出 (throw)</code> 语法和 <code>错误 (Error)</code> 类型是非常明智的， 这是因为错误消息可能会被更高级的语句用 <code>cache</code> 捕获到。 而捕获一个字符串可能会非常令人疑惑的， 同时也会让<a href="https://basarat.gitbooks.io/typescript/docs/types/exceptions.html#always-use-error">调试更加痛苦</a>。 同样的理由， 拒绝 Promise 时， 也应该使用 <code>Error</code> 类型。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;Not implemented.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or equivalent to:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>Error</code> 类型的好处是它被 <code>try/catch/finally</code> 支持， 并且所有的 Error 对象都有一个隐式属性 <code>stack</code> ， 在调试时很有用。 还有一个选择， 那就是不使用 <code>throw</code> 语法， 始终返回自定义的错误对象。 TypeScript 下更加容易， 参看下面的例子：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Result&lt;R&gt; = &#123; <span class="attr">isError</span>: <span class="literal">false</span>, <span class="attr">value</span>: R &#125;;</span><br><span class="line"><span class="keyword">type</span> Failure&lt;E&gt; = &#123; <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">error</span>: E &#125;;</span><br><span class="line"><span class="keyword">type</span> Failable&lt;R, E&gt; = Result&lt;R&gt; | Failure&lt;E&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">Failable</span>&lt;<span class="title">number</span>, &#x27;<span class="title">empty</span>&#x27;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (items.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">error</span>: <span class="string">&#x27;empty&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">isError</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">42</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要查看这个主意的更详细说明， 请参考<a href="https://medium.com/@dhruvrajvanshi/making-exceptions-type-safe-in-typescript-c4d200ee78e9">原帖</a>。</p>
<h3 id="不要忽略捕获到的错误"><a href="#不要忽略捕获到的错误" class="headerlink" title="不要忽略捕获到的错误"></a>不要忽略捕获到的错误</h3><p>捕获到错误后，什么都不做， 既不能让你修复错误， 也不能让你响应错误。 使用 <code>console.log</code> 将错误输出到控制台并不是十分高明， 因为经常会有大量的内容被打印输出到控制台， 很难再被找到。 一旦你在 <code>try/catch</code> 中包括了任何一点儿代码， 这就意味着你认为这里可能会有错误发生， 你应当针对它有一个计划， 或者一段代码来进行处理。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or even worse</span></span><br><span class="line"><span class="comment">// 更糟糕的是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// ignore error</span></span><br><span class="line">  <span class="comment">// 完全忽略错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&#x27;./logging&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要忽略被拒绝的-Promise"><a href="#不要忽略被拒绝的-Promise" class="headerlink" title="不要忽略被拒绝的 Promise"></a>不要忽略被拒绝的 Promise</h3><p>由于同样的原因， 你不应该忽略由 <code>try/catch</code> 捕获到的错误。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&#x27;./logging&#x27;</span></span><br><span class="line"></span><br><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    logger.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 async/await 语法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> getUser();</span><br><span class="line">  <span class="keyword">await</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>格式化是主观的。 就像其它规则一样， 没有必须让你遵守的硬性规则。 重点是不要因为格式去争论， 有大量的工具来自动格式化， 使用其中的一个即可！ 因为做为工程师去争论格式化就是在浪费时间和金钱。 要遵守的通用规则是 <em>保持一致的格式化规则</em> 。</p>
<p>对 TypeScript 来说， 有一个强大的工具叫做 <a href="https://palantir.github.io/tslint/">TSLint</a> 。 它是一个可以显著提高代码的可读性和可维护性的静态分析工具。 也已经有一些可用的 TSLint 配置供你在项目中参考：</p>
<ul>
<li><p><a href="https://www.npmjs.com/package/tslint-config-standard">标准的 TSLint 配置</a> - 标准风格规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-config-airbnb">Airbnb 的 TSLint 配置</a> - Airbnb 风格指南</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-clean-code">简洁代码的 TSLint 配置</a> - 受 <a href="https://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: A Handbook of Agile Software Craftsmanship</a> 影响的 TSLint 规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-react">React 的 TSLint 配置</a> - React &amp; JSX 相关的 TSLint 配置</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-config-prettier">TSLint + Prettier</a> - <a href="https://github.com/prettier/prettier">Prettier</a> 的代码检查规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-eslint-rules">TypeScript 的 ESLint 规则</a> - TypeScript 的 ESLint 规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/tslint-immutable">Immutable</a> - TypeScript 中禁止突变的规则</p>
</li>
</ul>
<p>也请参考这个伟大的 <a href="https://basarat.gitbooks.io/typescript/docs/styleguide/styleguide.html">TypeScript 风格指南和编码约定</a> 。</p>
<h3 id="使用一致的大小写"><a href="#使用一致的大小写" class="headerlink" title="使用一致的大小写"></a>使用一致的大小写</h3><p>大小写可以告诉你很多关于你的变量， 函数等等。 这些规则是主观的， 所以你的团队可以选择他们想要的任何东西。 关键是， 无论你选择什么， 只要 <em>保持一致</em> 即可。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> songs = [<span class="string">&#x27;Back In Black&#x27;</span>, <span class="string">&#x27;Stairway to Heaven&#x27;</span>, <span class="string">&#x27;Hey Jude&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> Artists = [<span class="string">&#x27;ACDC&#x27;</span>, <span class="string">&#x27;Led Zeppelin&#x27;</span>, <span class="string">&#x27;The Beatles&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore_database</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> DAYS_IN_MONTH = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SONGS = [<span class="string">&#x27;Back In Black&#x27;</span>, <span class="string">&#x27;Stairway to Heaven&#x27;</span>, <span class="string">&#x27;Hey Jude&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> ARTISTS = [<span class="string">&#x27;ACDC&#x27;</span>, <span class="string">&#x27;Led Zeppelin&#x27;</span>, <span class="string">&#x27;The Beatles&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restoreDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<p>建议类、 接口、 类型和命名空间使用 <code>PascalCase</code> 风格， 变量、 函数和类成员使用 <code>camelCase</code> 风格。</p>
<h3 id="函数的调用方与被调用方应该靠近"><a href="#函数的调用方与被调用方应该靠近" class="headerlink" title="函数的调用方与被调用方应该靠近"></a>函数的调用方与被调用方应该靠近</h3><p>如果一个函数调用另一个， 则在代码中这两个函数的竖直位置应该靠近。 理想情况下，保持被调用函数在被调用函数的正上方。 我们倾向于从上到下阅读代码， 就像读一章报纸。 由于这个原因， 保持你的代码可<br>以按照这种方式阅读。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> employee: Employee</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupPeers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee.id, <span class="string">&#x27;peers&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupManager</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee, <span class="string">&#x27;manager&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getPeerReviews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="built_in">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">review</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getPeerReviews();</span><br><span class="line">    <span class="built_in">this</span>.getManagerReview();</span><br><span class="line">    <span class="built_in">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getManagerReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="built_in">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getSelfReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> employee: Employee</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">review</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getPeerReviews();</span><br><span class="line">    <span class="built_in">this</span>.getManagerReview();</span><br><span class="line">    <span class="built_in">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getPeerReviews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="built_in">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupPeers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee.id, <span class="string">&#x27;peers&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getManagerReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="built_in">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupManager</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee, <span class="string">&#x27;manager&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getSelfReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure>

<h3 id="组织导入"><a href="#组织导入" class="headerlink" title="组织导入"></a>组织导入</h3><p>使用简洁易读的 import 语句， 您可以快速查看当前代码的依赖关系。 确保对 <code>import</code> 语句应用以下良好实践：</p>
<ul>
<li>导入应当排序并分组；</li>
<li>未使用的导入应当删除；</li>
<li>命名导入应当排序 (比如： <code>import &#123;A, B, C&#125; from &#39;foo&#39;;</code>)</li>
<li>导入源应当在分组内排序， 比如： <code>import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;</code></li>
<li>分组导入之间保留一个空行；</li>
<li>分组之间应当遵守下面的顺序：<ul>
<li>兼容性填充 (比如： <code>import &#39;reflect-metadata&#39;;</code>)</li>
<li>Node 内置模块 (比如： <code>import fs from &#39;fs&#39;;</code>)</li>
<li>外部模块 (比如： <code>import &#123; query &#125; from &#39;itiriri&#39;;</code>)</li>
<li>内部模块 (i.e <code>import &#123; UserService &#125; from &#39;src/services/userService&#39;;</code>)</li>
<li>来自父目录的模块 (比如： <code>import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;</code>)</li>
<li>来自相同目录或同级目录的模块 (比如： <code>import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;</code>)</li>
</ul>
</li>
</ul>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">&#x27;../types/typeDefinition&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/attribute&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/api/authorization&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./plugins/config/configPlugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">&#x27;inversify&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">&#x27;inversify&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/attribute&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">&#x27;../types/typeDefinition&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/api/authorization&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./plugins/config/configPlugin&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用-TypeScript-别名"><a href="#使用-TypeScript-别名" class="headerlink" title="使用 TypeScript 别名"></a>使用 TypeScript 别名</h3><p>通过在 <code>tsconfig.json</code> 文件中的 compilerOptions 对象内定义路径和基础路径， 可以创建更漂亮的导入。</p>
<p>这将避免导入时出现太长的相对路径。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../services/UserService&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;@services/UserService&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">...</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@services&quot;</span>: [<span class="string">&quot;services/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>使用注释就意味着代码的表达失败。 代码应该是唯一的事实来源。</p>
<blockquote>
<p>不是为烂代码添加注释， 而是重写它们。  </p>
<ul>
<li><em>Brian W. Kernighan 和 P. J. Plaugher</em></li>
</ul>
</blockquote>
<h3 id="倾向于自描述的代码而不是注释"><a href="#倾向于自描述的代码而不是注释" class="headerlink" title="倾向于自描述的代码而不是注释"></a>倾向于自描述的代码而不是注释</h3><p>评论是代码的辩解， 不是要求。 多数情况下， 好的代码就是文档。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Check if subscription is active.</span></span><br><span class="line"><span class="keyword">if</span> (subscription.endDate &gt; <span class="built_in">Date</span>.now) &#123;  &#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isSubscriptionActive = subscription.endDate &gt; <span class="built_in">Date</span>.now;</span><br><span class="line"><span class="keyword">if</span> (isSubscriptionActive) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要在代码库中保存注释掉的代码"><a href="#不要在代码库中保存注释掉的代码" class="headerlink" title="不要在代码库中保存注释掉的代码"></a>不要在代码库中保存注释掉的代码</h3><p>因为有版本控制， 把旧的代码留在历史记录即可</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// age: number;</span></span><br><span class="line">  <span class="comment">// jobPosition: string;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="不要有日志式的注释"><a href="#不要有日志式的注释" class="headerlink" title="不要有日志式的注释"></a>不要有日志式的注释</h3><p>记住， 使用版本控制！ 不需要僵尸代码， 注释掉的代码， 尤其是日志式的评论。 使用 <code>git log</code> 来<br>获取历史记录。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn&#x27;t understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Added type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Implemented combine (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="避免占位符"><a href="#避免占位符" class="headerlink" title="避免占位符"></a>避免占位符</h3><p>它们仅仅添加了干扰。 让函数和变量名称与合适的缩进和格式化为你的代码提供视觉结构。<br>绝大多数 IDE 支持代码折叠， 允许你展开/关闭代码段 （查看 Visual Studio Code <a href="https://code.visualstudio.com/updates/v1_17#_folding-regions">folding regions</a> ） 。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Client class</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// public methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// private methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="TODO-注释"><a href="#TODO-注释" class="headerlink" title="TODO 注释"></a>TODO 注释</h3><p>当你发现你需要在代码中做一些后期改进是， 请使用 <code>// TODO</code> 注释。 大多数 IDE 对这种类型的注释有着特殊的支持， 你可以快速的发现全部的 TODO 列表。</p>
<p>记住， <em>TODO</em> 注视并不是烂代码的借口。</p>
<p> <strong>NO：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; <span class="attr">dueDate</span>: &#123; <span class="attr">$lte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <strong>YES：</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; <span class="attr">dueDate</span>: &#123; <span class="attr">$lte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>Github</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>我在ThoughtWorks的头三年</title>
    <url>/2022/01/29/My-first-three-years-at-ThoughtWorks/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/20230515.png" alt="img"></p>
<div class="note info"><p>作者是 <a href="https://github.com/JulyShi">七姑娘</a> ，这里是 <a href="https://mp.weixin.qq.com/s/5SyFjxymvevAvX67TSjjsg">原文链接</a> 。</p>
</div>

<hr>
<p>几天前，同事小Y发来微信。</p>
<pre><code>“嗨，你参加过AWS考试吗？你说我要不要先考一下AWS从业者证书？” 小Y问道。

“你对AWS证书了解吗？” 我说。

“不是很了解。” 小Y回答。

“建议你先做做功课再做决定哈，了解清楚在考这个证书的过程中你能学到什么？证书有什么作用？
你为什么在当下选择考它而不是别的？”
“不过，你为什么忽然想要考AWS证书呢？” 我问道。

“我看到XX 和XX都在考，所以想一起考。” 小Y答。
</code></pre>
<p>小Y是2019年加入公司的毕业生QA，和大多数新人一样好学上进，眼里充满对知识的渴望和对大神的敬仰，但缺乏目标、东奔西撞。这不禁让我想到了自己。</p>
<p>2016年底，我加入ThoughtWorks，仿佛一脚跨进了知识爆炸的时代。面对琳琅满目的学习素材、开放的网络、分享型的组织文化、一张张打满鸡血的脸庞，我浑身充满干劲，但同时饱尝着能力进阶的压力和焦虑。于是，学会“如何提升自己”就成了我这几年研究的重要课题。</p>
<div class="note info"><p>第一年</p>
</div>

<p>作为一名QA加入公司，我要足够专业！这是我的立身之本。</p>
<p>我相信，能够给人带来机会的是自己的“长板”，但限制自己发展的往往是“短板”。所以，我首先纵观全局，把QA需要具备的技能都理清楚了，然后不断寻找自己当前“最短”的一块板来提升。我将这个过程称为 <strong>“短板学习法”</strong> 。</p>
<p>这样做的好处是：能力发展会比较均衡、不偏科；其次，一旦有了全局意识，即使从最细小的事情开始，大方向也始终保持一致，有序而不乱。</p>
<p>我用“精益价值树”给自己画了一个愿景，并细分出成为一名专业QA的必备技能。</p>
<img data-src="https://cdn.jonty.top/img/zlRE7i6fNqTStu8.png" >

<p>树的“投注”层就是我为了达成目标所需要提升的能力。要识别“短板”，首先要对每一项“投注”进行打分：</p>
<ul>
<li>0 - 表示你不具备这种技能</li>
<li>1 - 表示你能在别人指导下完成</li>
<li>2 - 表示你能独立完成</li>
<li>3 - 表示你能指导他人完成</li>
<li>4 - 表示你是这方面的专家，能去创造新的方法</li>
</ul>
<p>其中，得分最小的项就是我一定要提升的“短板”。假如有好几项得分相等且最低，我就会选择当前最容易实践的那一项，制定详细的学习举措。</p>
<p>“举措”非常重要，这决定了我最终能不能将提升计划落地。“举措”就是我要采取的具体行动，我习惯将理论与实际相结合。制定“举措”一定要考虑时间的投入。经过实践我发现，尽量不要在同一时间同时做3个以上的举措，时间的最小单位设定在2-3天最适宜。下图是我在提升自己API自动化测试时的举措，实践证明，这个“短板式学习法”很奏效。</p>
<img data-src="https://cdn.jonty.top/img/jOt5oyPxYiAS2LR.png" >

<div class="note info"><p>第二年</p>
</div>

<p>工作的第二年，我陆续遇到一些思维的瓶颈。</p>
<ul>
<li>我们发现了很多Bug，但开发进度非常紧张，Bug如何才能更好地排进迭代（估算与计划）</li>
<li>与团队探讨问题时，我的想法是正确的，可却无法说服别人（沟通）</li>
<li>每天睁开眼睛，眼前都是堆积如山的工作，但我却无法让团队成员分担（团队协作与培养他人）</li>
<li>在项目上临时客串了几个月BA，一起出差到客户现场挖掘需求。客户有一堆想要做的东西，而时间和成本都有限，大家讨论地非常激烈，而我如鲠在喉。太少面对客户的机会，让我觉得客户仿佛有‘尖牙利爪’，不知如何应对（自信、领域知识、MVP、痛点挖掘、愿景分析、引导技术、谈判技术）</li>
</ul>
<img data-src="https://cdn.jonty.top/img/FZ4PrcHmUh7TCGi.png" >

<p>为了打破这些思维的困境，我从公司内部找到好多资料来学习。</p>
<ul>
<li>参加公司BA系列培训，阅读BA基础必读书籍《用户故事与敏捷方法》、《用户故事地图》、《实例化需求》等。重新回顾自己客串BA时的全过程，反复推敲不足与待改进点</li>
<li>听了公司在“meia美啊”平台上公开的PM系列课程(搜索”ThoughtWorks”)，并挑选一些关键课程撰写个人感悟</li>
<li>参加公司的Tech Lead培训，学习角色认知、冲突管理、风险管理、影响力等等。并梳理自己工作中的典型案例，通过博客的方式，来记录自己的灵感和想法，如《你引导过一个窘迫的会议吗？》</li>
</ul>
<p>在学习的过程中，我意识到自己的学习动机来自于偶尔听到、看到或思考的一些课题，都是些零零散散的点，不够系统。因此，我需要按照一定的方式进行归类，构造出一个新的体系来。我将这个学习过程称为 <strong>“散点式学习法”</strong> 。</p>
<img data-src="https://cdn.jonty.top/img/y85EOiPuCrRBJqc.png" >

<p>我通过社区培训、数据、文章、思考、与大师交流等形式获得知识，然后将这些散点按照产品、需求、领域知识、通用技能4个维度进行归类。在散点图中，我用不同的颜色标记当前对知识的掌握程度，用距离中心的位置表示学习的优先级。</p>
<p>如此一来，每当遇到一个思维瓶颈，我就将它作为一个新的课题来研究。通过散点式学习法，我碎片化地积累了很多知识。</p>
<div class="note info"><p>第三年</p>
</div>

<p>工作的第三年，除了继续以QA的角色做交付项目之外，我还做了很多事情。</p>
<ul>
<li>我参与了一些售前的工作，开始了解到一个交付项目是怎么来的、标书是什么东西、打标是怎么回事、Proposal该怎么写</li>
<li>我参与到一些咨询的工作，也终于明白为什么做咨询的人看起来睿智、自信又侃侃而谈</li>
<li>我参与到招聘，一起来设计招聘需求；参与面试，寻找适合我们的人才；我组织面试官培训，让大家都来掌握面试的技巧</li>
<li>我学习管理自己的团队，让大家有归属感、有成长、有贡献</li>
</ul>
<p>在这些工作中，我不断提升自己的文案功底、优秀的视觉化能力、精准地分析问题能力、敏锐的洞察力、精确的表达能力、良好的归纳能力、卓越的沟通技巧。</p>
<p>学到的知识越多，就越需要归纳总结。不然就很容易变成“这也会，那也会；但这也不熟，那也不精”。</p>
<img data-src="https://cdn.jonty.top/img/gqt9oHl6h2wZmSR.png" >

<p>我将自己的技能归纳为三层：</p>
<ul>
<li>最里面是“核心技能”层：核心技能是我当前的立身之本。我作为一名QA，专业QA需要的技能及优秀素质就是我需要持续深耕的。我要严格要求自己，切不可3分钟热度</li>
<li>中间是“拓展技能”层：拓展技能层是我在角色周边获取的技能，它能帮助我突破瓶颈，站在更广阔的视野去思考；也能帮助我寻找更多的发展途径</li>
<li>最外层是“战略技能”层：这里的技能不受角色限制，不管你是一名QA，还是未来有一天你会成为一位像马爸爸一样的人，你都需要具备这些技能。随着职位越高，做的事情越复杂，你对“战略技能”的掌握就要更深入。“战略技能”让我们充满无限可能</li>
</ul>
<p>这是我在ThoughtWorks的头三年关于个人提升的理解，未来的三年，又将会是怎样的呢？</p>
<hr>
<p>写在最后：</p>
<p>电影《一代宗师》里宫老爷子说，习武之人有三个阶段：见自己，见天地，见众生。</p>
<ul>
<li>见自己，就是认识自己、了解自己，知道自己擅长学习什么武功</li>
<li>见天地，就是见识各门各派武学高手，知道自己所处的位置，这样才能日益精进</li>
<li>见众生，就是“普度众生”，让更多人学习这门武学，这样才能将其传承下去</li>
</ul>
<p>其实这不仅仅是武术传承，个人技能提升又何尝不是如此。你品、你细品……</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>QA</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 19c RAC集群搭建</title>
    <url>/2022/01/12/rhel7-6-install-oracle19c-rac/</url>
    <content><![CDATA[<h3 id="系统规划"><a href="#系统规划" class="headerlink" title="系统规划"></a>系统规划</h3><p>项目环境：虚拟机</p>
<p>主机：3台 </p>
<ul>
<li>2台运行RAC集群</li>
<li>1台共享存储</li>
</ul>
<p>CPU和内存资源：</p>
<p>RAC集群：4U/8G</p>
<p>共享存储：2U/4G</p>
<h3 id="网络规划"><a href="#网络规划" class="headerlink" title="网络规划"></a>网络规划</h3><p>Public IP (内部访问)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.63 rac1</span><br><span class="line">192.168.2.64 rac2</span><br></pre></td></tr></table></figure>

<p>Private IP（节点心跳网络）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">10.10.10.63 rac1-priv</span><br><span class="line">10.10.10.64 rac2-priv</span><br></pre></td></tr></table></figure>

<p>Virtual IP（提供客户端访问 漂移）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.65 rac1-vip</span><br><span class="line">192.168.2.66 rac2-vip</span><br></pre></td></tr></table></figure>

<p>SCAN IP（客户端访问 均衡）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.67</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>节点</th>
<th>主机版本</th>
<th>主机名</th>
<th>实例名</th>
<th>Oracle版本</th>
<th>public ip</th>
<th>private ip</th>
<th>virtual ip</th>
<th>scan ip</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>rhel7.6</td>
<td>rac1</td>
<td>mesdb1</td>
<td>19.3</td>
<td>192.168.2.63</td>
<td>10.10.10.63</td>
<td>192.168.2.65</td>
<td>192.168.2.67</td>
</tr>
<tr>
<td>2</td>
<td>rhel7.6</td>
<td>rac2</td>
<td>mesdb2</td>
<td>19.3</td>
<td>192.168.2.64</td>
<td>10.10.10.64</td>
<td>192.168.2.66</td>
<td>192.168.2.67</td>
</tr>
</tbody></table>
<h3 id="存储规划"><a href="#存储规划" class="headerlink" title="存储规划"></a>存储规划</h3><p><strong>系统：</strong></p>
<ul>
<li><p>/:50g</p>
</li>
<li><p>/oracle:100g</p>
</li>
<li><p>/backup:200g</p>
</li>
</ul>
<p><strong>共享存储</strong></p>
<ul>
<li><p>dggrid1 :1g*3</p>
</li>
<li><p>dggrid2 :1g*3</p>
</li>
<li><p>dgsystem:8g*1</p>
</li>
<li><p>dgrecovery:3g*1</p>
</li>
<li><p>dgdata01:2g*1</p>
</li>
</ul>
<p><strong>生产数据库空间要求</strong>：1T数据</p>
<ul>
<li><p>dggrid1 :2g*3</p>
</li>
<li><p>dggrid2 :2g*3</p>
</li>
<li><p>dgsystem:200g*1</p>
</li>
<li><p>dgrecovery:1T= 200g*5</p>
</li>
<li><p>dgdata01:1T= 200g*5</p>
</li>
<li><p>备份：/backup 3T= 1T *3</p>
</li>
</ul>
<h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><h4 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">Public IP</span></span><br><span class="line">192.168.2.63 	rac1</span><br><span class="line">192.168.2.64 	rac2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Private IP</span></span><br><span class="line">10.10.10.63 rac1-priv</span><br><span class="line">10.10.10.64 rac2-priv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Vip IP</span></span><br><span class="line">192.168.2.65 rac1-vip</span><br><span class="line">192.168.2.66 rac2-vip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Scan IP</span></span><br><span class="line">192.168.2.67 rac-scan</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><p><code>rac1&amp;rac2</code></p>
<p>服务器主机的存储:lvm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sdb /dev/sdc</span><br><span class="line"></span><br><span class="line">vgcreate oraclevg /dev/sdb</span><br><span class="line">vgcreate backupvg /dev/sdc</span><br><span class="line"></span><br><span class="line">lvcreate -n oraclelv -L 100000M oraclevg</span><br><span class="line">lvcreate -n backuplv -L 200000M backupvg</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/backupvg/backuplv</span><br><span class="line">mkfs.xfs /dev/oraclevg/oraclelv</span><br></pre></td></tr></table></figure>

<p>挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line">/dev/backupvg/backuplv	/backup		xfs		defaults	0 0</span><br><span class="line">/dev/oraclevg/oraclelv	/oracle		xfs		defaults	0 0</span><br><span class="line"></span><br><span class="line">mkdir /oracle</span><br><span class="line">mkdir /backup</span><br><span class="line"></span><br><span class="line">mount /oracle</span><br><span class="line">mount /backup</span><br></pre></td></tr></table></figure>

<h4 id="ASM磁盘"><a href="#ASM磁盘" class="headerlink" title="ASM磁盘"></a>ASM磁盘</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#iscsi识别共享存储</span></span></span><br><span class="line">yum install -y iscsi-initiator-utils*</span><br><span class="line"></span><br><span class="line">systemctl enable iscsi</span><br><span class="line">systemctl start iscsi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#输出targetname，10.10.10.68为iscsi共享存储设备IP地址</span></span></span><br><span class="line">iscsiadm -m discovery -t st -p 10.10.10.68</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#连接共享存储</span></span></span><br><span class="line">iscsiadm -m node -T iqn.1991-05.com.microsoft:win-arg9liue0mv-mesdb-target -p 10.10.10.68 -l</span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<blockquote>
<p>todo 多路径配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in d e f g h i j k l;</span><br><span class="line">do  </span><br><span class="line">echo &quot;KERNEL==\&quot;sd?\&quot;,SUBSYSTEM==\&quot;block\&quot;, PROGRAM==\&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/\$name\&quot;,RESULT==\&quot;`/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/sd$i`\&quot;, SYMLINK+=\&quot;asm-disk$i\&quot;,OWNER=\&quot;grid\&quot;, GROUP=\&quot;asmadmin\&quot;,MODE=\&quot;0660\&quot;&quot;</span><br><span class="line">done  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc8646bc8413b34f9a&quot;, SYMLINK+=&quot;asm-dggrid01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc9617e1089ab64fb4&quot;, SYMLINK+=&quot;asm-dggrid02&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adcb020780584975001&quot;, SYMLINK+=&quot;asm-dggrid03&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adcba8050aa37c7be56&quot;, SYMLINK+=&quot;asm-dggrid04&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc9952fc11f7dfd9fb&quot;, SYMLINK+=&quot;asm-dggrid05&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc99341d2d641e1b3c&quot;, SYMLINK+=&quot;asm-dggrid06&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc889634115ea78a36&quot;, SYMLINK+=&quot;asm-dgsystem01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adc8ed98c025a591e68&quot;, SYMLINK+=&quot;asm-dgrecovery01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;sd?&quot;,SUBSYSTEM==&quot;block&quot;, PROGRAM==&quot;/usr/lib/udev/scsi_id --whitelisted --replace-whitespace --device=/dev/$name&quot;,RESULT==&quot;360003ff44dc75adca5b7eca16123d815&quot;, SYMLINK+=&quot;asm-dgdata01&quot;,OWNER=&quot;grid&quot;, GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vi /etc/udev/rules.d/99-oracle-asmdevices.rules</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重载udev</span></span></span><br><span class="line">udevadm control --reload-rules</span><br><span class="line">udevadm trigger --type=devices</span><br><span class="line"></span><br><span class="line">ls -lsa /dev/asm*</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110141222202.png" alt="image-20220110141222202"></p>
<h4 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 挂载镜像</span></span></span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">df -Th</span><br></pre></td></tr></table></figure>

<p>配置yum源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">yum repolist all</span><br></pre></td></tr></table></figure>

<p>安装依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y &quot;Server with GUI&quot;</span><br><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">tigervnc* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p>手动上传安装缺失依赖包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /soft</span><br><span class="line">cd /soft</span><br><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>检查依赖包安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline | grep &quot;not installed&quot;</span><br></pre></td></tr></table></figure>

<h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><p><code>rac1&amp;rac2</code></p>
<p>关闭防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>

<h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p><code>rac1&amp;rac2</code></p>
<p>禁用<code>chronyd</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">systemctl stop chronyd.service</span><br><span class="line">systemctl disable chronyd.service</span><br></pre></td></tr></table></figure>

<p>使用<code>ntp</code>同步时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/var/spool/cron/root</span><br><span class="line">00 12 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看计划任务</span></span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#手动执行</span></span></span><br><span class="line">/usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure>

<h4 id="关闭透明大页和numa"><a href="#关闭透明大页和numa" class="headerlink" title="关闭透明大页和numa"></a>关闭透明大页和numa</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<p>重启后检查是否生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">cat /proc/cmdline</span><br></pre></td></tr></table></figure>

<h4 id="avahi-daemon-配置"><a href="#avahi-daemon-配置" class="headerlink" title="avahi-daemon 配置"></a>avahi-daemon 配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y avahi*</span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">pgrep -f avahi-daemon | awk &#x27;&#123;print &quot;kill -9 &quot;$2&#125;&#x27;</span><br><span class="line">systemctl disable avahi-daemon.socket</span><br><span class="line">systemctl disable avahi-daemon.service</span><br></pre></td></tr></table></figure>

<h4 id="NOZEROCONF配置"><a href="#NOZEROCONF配置" class="headerlink" title="NOZEROCONF配置"></a>NOZEROCONF配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysconfig/network</span><br><span class="line">NOZEROCONF=yes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line"></span><br><span class="line">grid soft nofile 1024</span><br><span class="line">grid hard nofile 65536</span><br><span class="line">grid soft stack 10240</span><br><span class="line">grid hard stack 32768</span><br><span class="line">grid soft nproc 2047</span><br><span class="line">grid hard nproc 16384</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>配置pam.d/login：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="系统参数配置"><a href="#系统参数配置" class="headerlink" title="系统参数配置"></a>系统参数配置</h4><p><code>rac1&amp;rac2</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">	shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">	shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysctl.conf</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall</span><br><span class="line">kernel.shmmax = $shmmax</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">net.ipv4.conf.ens224.rp_filter = 1</span><br><span class="line">net.ipv4.conf.ens192.rp_filter = 2</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>生效：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h4 id="用户、组、目录创建"><a href="#用户、组、目录创建" class="headerlink" title="用户、组、目录创建"></a>用户、组、目录创建</h4><p><code>rac1&amp;rac2</code></p>
<p>用户组</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line">/usr/sbin/groupadd -g 54324 backupdba</span><br><span class="line">/usr/sbin/groupadd -g 54325 dgdba</span><br><span class="line">/usr/sbin/groupadd -g 54326 kmdba</span><br><span class="line">/usr/sbin/groupadd -g 54327 asmdba</span><br><span class="line">/usr/sbin/groupadd -g 54328 asmoper</span><br><span class="line">/usr/sbin/groupadd -g 54329 asmadmin</span><br><span class="line">/usr/sbin/groupadd -g 54330 racdba</span><br></pre></td></tr></table></figure>

<p>用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/useradd -u 11012 -g oinstall -G asmadmin,asmdba,asmoper,dba,racdba,oper grid</span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G asmdba,dba,backupdba,dgdba,kmdba,racdba,oper oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改用户密码为oracle</span></span></span><br><span class="line">echo &quot;oracle&quot; |passwd oracle --stdin</span><br><span class="line">echo &quot;oracle&quot; |passwd grid --stdin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看用户组</span></span></span><br><span class="line">id grid</span><br><span class="line">id oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重载udev</span></span></span><br><span class="line">udevadm control --reload-rules</span><br><span class="line">udevadm trigger --type-devices</span><br><span class="line">ll /dev/asm*</span><br></pre></td></tr></table></figure>

<p>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /oracle/app/19.3.0/grid</span><br><span class="line">mkdir -p /oracle/app/grid</span><br><span class="line">mkdir -p /oracle/app/oracle/product/19.3.0/db</span><br><span class="line">mkdir -p /oracle/app/oraInventory</span><br><span class="line">mkdir -p /home/oracle/scripts</span><br><span class="line">chown -R oracle:oinstall /backup</span><br><span class="line">chown -R oracle:oinstall /home/oracle/scripts</span><br><span class="line">chown -R grid:oinstall /oracle</span><br><span class="line">chown -R grid:oinstall /oracle/app/grid</span><br><span class="line">chown -R grid:oinstall /oracle/app/19.3.0/grid</span><br><span class="line">chown -R grid:oinstall /oracle/app/oraInventory</span><br><span class="line">chown -R oracle:oinstall /oracle/app/oracle</span><br><span class="line">chmod -R 775 /oracle</span><br></pre></td></tr></table></figure>

<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><p><code>rac1&amp;rac2</code></p>
<p>grid用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/grid/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/oracle/app/grid</span><br><span class="line">export ORACLE_HOME=/oracle/app/19.3.0/grid</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=+ASM2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysasm&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27; </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 每个节点的 ORACLE_SID 不一样（+ASM1/+ASM2），需要自行修改</p>
</blockquote>
<p>oracle用户：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/oracle/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/19.3.0/db</span><br><span class="line">export ORACLE_HOSTNAME=rac2</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=mesdb2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleEnd#########################</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <strong>注意：</strong> 每个节点的 ORACLE_HOSTNAME（rac1/rac2）和 ORACLE_SID（mesdb1/mesdb2）不一样，需要自行修改</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启系统</span></span></span><br><span class="line">shutdown -r now</span><br></pre></td></tr></table></figure>

<h4 id="安装包上传解压"><a href="#安装包上传解压" class="headerlink" title="安装包上传解压"></a>安装包上传解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建安装介质存放目录</span></span></span><br><span class="line">mkdir /soft</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上传安装介质到/soft目录</span></span></span><br><span class="line">LINUX.X64_193000_db_home.zip</span><br><span class="line">LINUX.X64_193000_grid_home.zip</span><br><span class="line">p32545008_190000_Linux-x86-64.zip</span><br><span class="line">p6880880_190000_Linux-x86-64.zip</span><br></pre></td></tr></table></figure>

<blockquote>
<p>19C 的安装包需要解压到对应的 ORACLE_HOME 目录下</p>
</blockquote>
<p>静默解压<code>grid</code>安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R grid:oinstall /soft</span><br><span class="line">su - grid -c &quot;unzip -q /soft/LINUX.X64_193000_grid_home.zip -d /oracle/app/19.3.0/grid/&quot;</span><br></pre></td></tr></table></figure>

<p>静默解压<code>oracle</code>安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle -c &quot;unzip -q /soft/LINUX.X64_193000_db_home.zip -d /oracle/app/oracle/product/19.3.0/db/&quot;</span><br></pre></td></tr></table></figure>

<p>静默解压补丁安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /soft</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压OPatch补丁包</span></span></span><br><span class="line">chown -R grid:oinstall /soft</span><br><span class="line">su - grid -c &quot;unzip -q -o /soft/p6880880_190000_Linux-x86-64.zip -d /oracle/app/19.3.0/grid&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压RU补丁包</span></span></span><br><span class="line">su - grid -c &quot;unzip -q /soft/p32545008_190000_Linux-x86-64.zip -d /soft&quot;</span><br><span class="line"></span><br><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle -c &quot;unzip -q -o /soft/p6880880_190000_Linux-x86-64.zip -d /oracle/app/oracle/product/19.3.0/db&quot;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>注意：</strong> 由于19C支持安装grid软件前打RU补丁，因此提前解压OPatch和RU补丁，为安装做准备</p>
</blockquote>
<h4 id="cvuqdisk安装"><a href="#cvuqdisk安装" class="headerlink" title="cvuqdisk安装"></a>cvuqdisk安装</h4><p>root用户下，cvuqdisk安装（rac01&amp;rac02):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh /oracle/app/19.3.0/grid/cv/rpm/cvuqdisk-1.0.10-1.rpm </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#传输到节点二安装</span></span></span><br><span class="line"></span><br><span class="line">scp /oracle/app/19.3.0/grid/cv/rpm/cvuqdisk-1.0.10-1.rpm rac2:/tmp</span><br><span class="line">rpm -ivh /tmp/cvuqdisk-1.0.10-1.rpm </span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意：</strong> 19C 版本的 cvu 包换位置了，目录为：<code>$ORACLE_HOME/cv/rpm/</code>，以上所有软件只需要在节点一上传解压即可</p>
</blockquote>
<h3 id="安装Grid软件"><a href="#安装Grid软件" class="headerlink" title="安装Grid软件"></a>安装Grid软件</h3><p>配置<code>grid</code>用户vnc</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y tigervnc*</span><br><span class="line">chown -R grid:oinstall /soft</span><br><span class="line">su - grid</span><br><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p>开始安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入安装目录</span></span></span><br><span class="line">cd $ORACLE_HOME</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行安装程序开始安装，通过-applyRU参数指向补丁解压位置，提前安装grid补丁</span></span></span><br><span class="line">./gridSetup.sh -applyRU /soft/32545008</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110145154657.png" alt="image-20220110145154657"></p>
<p>打完补丁，进入安装界面，选择集群安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145247453.png" alt="image-20220110145247453"></p>
<p>选择<code>standlone</code>模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145325890.png" alt="image-20220110145325890"></p>
<p>修改<code>scan</code>名称与<code>hosts</code>文件配置一致</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145429347.png" alt="image-20220110145429347"></p>
<p>添加<code>rac2</code>节点，配置互信</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110145805853.png" alt="image-20220110145805853"></p>
<p>网卡配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150250058.png" alt="image-20220110150250058"></p>
<p>存储类型，选择<code>ASM</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150520054.png" alt="image-20220110150520054"></p>
<p>GIMR，这里不选择安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150553342.png" alt="image-20220110150553342"></p>
<p>ASM磁盘组</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150816058.png" alt="image-20220110150816058"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150759154.png" alt="image-20220110150759154"></p>
<p>ASM密码 mesasm2022</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110150920096.png" alt="image-20220110150920096"></p>
<p>默认，下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151006818.png" alt="image-20220110151006818"></p>
<p>EM管理，暂不开启</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151033309.png" alt="image-20220110151033309"></p>
<p>管理组，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151056236.png" alt="image-20220110151056236"></p>
<p>安装地址，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151115523.png" alt="image-20220110151115523"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151129756.png" alt="image-20220110151129756"></p>
<p>不自动执行脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151215234.png" alt="image-20220110151215234"></p>
<p>安装前检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110151243543.png" alt="image-20220110151243543"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152429085.png" alt="image-20220110152429085"></p>
<p>忽略，开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152505759.png" alt="image-20220110152505759"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152517367.png" alt="image-20220110152517367"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152542962.png" alt="image-20220110152542962"></p>
<p>执行<code>root</code>脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110152952149.png" alt="image-20220110152952149"></p>
<p>先在节点1执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/oracle/app/oraInventory/orainstRoot.sh</span><br><span class="line">/oracle/app/19.3.0/grid/root.sh</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20220110154201184.png" alt="image-20220110154201184"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110154722451.png" alt="image-20220110154722451"></p>
<p>执行完成后，继续安装</p>
<p>忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110154915575.png" alt="image-20220110154915575"></p>
<p>安装完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110154946582.png" alt="image-20220110154946582"></p>
<p>检查集群状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - grid</span><br><span class="line">crsctl stat res -t</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110160312452.png" alt="image-20220110160312452"></p>
<p>检查<code>grid</code>补丁</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - grid</span><br><span class="line">opatch lspatches</span><br><span class="line">sqlplus -version</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20220110160414752.png" alt="image-20220110160414752"></p>
<h3 id="创建磁盘组"><a href="#创建磁盘组" class="headerlink" title="创建磁盘组"></a>创建磁盘组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asmca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110155103889.png" alt="image-20220110155103889"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110155557309.png" alt="image-20220110155557309"></p>
<p>检查asm磁盘：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asmcmd lsdg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启检查集群状态</span></span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110160532100.png" alt="image-20220110160532100"></p>
<h3 id="安装Oracle软件"><a href="#安装Oracle软件" class="headerlink" title="安装Oracle软件"></a>安装Oracle软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle</span><br><span class="line">vncserver</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line">cd $ORACLE_HOME</span><br><span class="line">./runInstaller -applyRU /soft/32545008/</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110171230005.png" alt="image-20220110171230005"></p>
<p>进入安装界面，选择<strong>仅安装软件</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171312175.png" alt="image-20220110171312175"></p>
<p>选择集群模式：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171332064.png" alt="image-20220110171332064"></p>
<p>配置互信</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171428128.png" alt="image-20220110171428128"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171419257.png" alt="image-20220110171419257"></p>
<p>安装企业版</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171459738.png" alt="image-20220110171459738"></p>
<p>安装位置，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171525099.png" alt="image-20220110171525099"></p>
<p>用户组 默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171546241.png" alt="image-20220110171546241"></p>
<p>不配置自动执行脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110171930293.png" alt="image-20220110171930293"></p>
<p>安装前检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110172130358.png" alt="image-20220110172130358"></p>
<p>只配置了一个SCAN,关于DNS相关的都忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110172448494.png" alt="image-20220110172448494"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110172946918.png" alt="image-20220110172946918"></p>
<p>开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110173710548.png" alt="image-20220110173710353"></p>
<p>执行root脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/oracle/app/oracle/product/19.3.0/db/root.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110173804416.png" alt="image-20220110173804416"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110173827746.png" alt="image-20220110173827746"></p>
<p>检查补丁版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opatch lspatches</span><br><span class="line">sqlplus -version</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220110173912817.png" alt="image-20220110173912817"></p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca</span><br></pre></td></tr></table></figure>

<p>选择创建数据库实例</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180252118.png" alt="image-20220110180252118"></p>
<p>自定义模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180553410.png" alt="image-20220110180553410"></p>
<p>自定义数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180630914.png" alt="image-20220110180630914"></p>
<p>选择节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180642777.png" alt="image-20220110180642777"></p>
<p>PDB&amp;CDB</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110180720005.png" alt="image-20220110180720005"></p>
<p>存储配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220110181334789.png" alt="image-20220110181334789"></p>
<p>暂不开启归档闪回</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111090704484.png" alt="image-20220111090704484"></p>
<p>生产环境无特殊要求全部安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111090911968.png" alt="image-20220111090911968"></p>
<p>配置项：</p>
<p>内存：SGA&amp;PGA</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091136127.png" alt="image-20220111091136127"></p>
<p>进程数：1500</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091201951.png" alt="image-20220111091201951"></p>
<p>字符集：16GBK</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091226787.png" alt="image-20220111091226787"></p>
<p>EM管理器，暂不开启</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091648137.png" alt="image-20220111091648137"></p>
<p>sys/system密码：mesdb2022</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091717329.png" alt="image-20220111091717329"></p>
<p>创建选项，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111091941917.png" alt="image-20220111091941917"></p>
<p>预检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111092033716.png" alt="image-20220111092033716"></p>
<p>可忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111092121232.png" alt="image-20220111092121232"></p>
<p>开始创建</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111092147664.png" alt="image-20220111092147664"></p>
<p>创建完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111105256812.png" alt="image-20220111105256812"></p>
<p>检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看集群状态</span></span><br><span class="line">crsctl stat res -t  </span><br><span class="line"></span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">select instance_name,status from gv$instance;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111105817916.png" alt="image-20220111105817916"></p>
<h3 id="基础维护"><a href="#基础维护" class="headerlink" title="基础维护"></a>基础维护</h3><h4 id="RAC停止"><a href="#RAC停止" class="headerlink" title="RAC停止"></a>RAC停止</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">sqlplus &quot;/as sysdba&quot;</span><br><span class="line">shutdown immediate;</span><br><span class="line"></span><br><span class="line">su - grid</span><br><span class="line">crsctl stop crs</span><br></pre></td></tr></table></figure>

<h4 id="RAC启动"><a href="#RAC启动" class="headerlink" title="RAC启动"></a>RAC启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - grid</span><br><span class="line">crsctl start crs</span><br><span class="line">crsctl status res -t</span><br><span class="line"></span><br><span class="line">-- crsctl disable crs</span><br><span class="line"></span><br><span class="line">alter pluggable database mespdb open;</span><br></pre></td></tr></table></figure>

<p>自启动触发器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CREATE TRIGGER open_all_pdbs</span><br><span class="line">	ALTER STARTUP ON DATABASE</span><br><span class="line">BEGIN</span><br><span class="line">	EXECUTE IMMEDIATE &#x27;alter pluggable database all open&#x27;;</span><br><span class="line">END open_all_pdbsl;</span><br><span class="line">/</span><br></pre></td></tr></table></figure>



<h4 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h4><p>grid:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[grid@rac2:/home/grid]$ crsctl stat res -t</span><br></pre></td></tr></table></figure>

<p>oracle:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srvctl status database -db mesdb</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111133031684.png" alt="image-20220111133031684"></p>
<h4 id="PDB-amp-CDB"><a href="#PDB-amp-CDB" class="headerlink" title="PDB&amp;CDB"></a>PDB&amp;CDB</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看当前容器</span></span></span><br><span class="line">show con_name;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看所有PDB</span></span></span><br><span class="line">show pdbs</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 切换pdb</span></span></span><br><span class="line">alter session set container = mespdb;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 切换根容器</span></span></span><br><span class="line">conn /as sysdba</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111133445262.png" alt="image-20220111133445262"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建表空间</span></span></span><br><span class="line">create tablespace mes datafile &#x27;+dgdata01&#x27; size 20m;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看数据文件</span></span></span><br><span class="line">select name from v$datafile;</span><br><span class="line"></span><br><span class="line">create user mesadmin identified by mes2022 default tablespace mes;</span><br><span class="line"></span><br><span class="line">grant dba to mesadmin;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111135231663.png" alt="image-20220111135231663"></p>
<p>创建测试数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create table EMPLOYEE (id number(12) primary key,name varchar(20));</span><br><span class="line">insert into EMPLOYEE values(1,&#x27;Oracle&#x27;);</span><br><span class="line">insert into EMPLOYEE values(2,&#x27;EAP&#x27;);</span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line">select * from EMPLOYEE</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111135523550.png" alt="image-20220111135523550"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111135537825.png" alt="image-20220111135537825"></p>
<p>节点2：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111135703283.png" alt="image-20220111135703283"></p>
<h4 id="OCR镜像"><a href="#OCR镜像" class="headerlink" title="OCR镜像"></a>OCR镜像</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ocrconfig -add +DGGRID2</span><br><span class="line">ocrcheck</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111143132715.png" alt="image-20220111143132715"></p>
<h4 id="密码过期策略"><a href="#密码过期策略" class="headerlink" title="密码过期策略"></a>密码过期策略</h4><blockquote>
<p>后续配置在容器数据库下修改</p>
</blockquote>
<p>关闭密码 180 天过期限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn /as sysdba</span><br><span class="line">select * from dba_profiles where profile=&#x27;DEFAULT&#x27; and resource_name=&#x27;PASSWORD_LIFE_TIME&#x27;;</span><br><span class="line">alter profile default limit password_life_time unlimited;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111145953420.png" alt="image-20220111145953420"></p>
<h4 id="关闭审计"><a href="#关闭审计" class="headerlink" title="关闭审计"></a>关闭审计</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter audit;</span><br><span class="line">alter system set audit_trail=none scope = spfile;</span><br></pre></td></tr></table></figure>

<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111151040444.png" alt="image-20220111151040444"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter recover;</span><br><span class="line">alter system set db_recovery_file_dest_size=10g; ## 略小于存储 留出冗余空间</span><br><span class="line">alter system set db_recovery_file_dest=&#x27;+dgrecovery&#x27;;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111151357258.png" alt="image-20220111151357258"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter system set cluster_database=false scope=spfile;</span><br><span class="line">shutdown immediate; ## 关闭两个节点</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启动rac1到mount状态</span></span></span><br><span class="line">startup mount;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开启归档</span></span></span><br><span class="line">alter database archivelog;</span><br><span class="line">alter system set cluster_database=true scope=spfile;</span><br><span class="line">shutdown immediate;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 2节点启动数据库</span></span></span><br><span class="line">startup; </span><br></pre></td></tr></table></figure>

<p><strong>检查归档状态，切换日志</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br><span class="line">alter system switch logfile;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111153451555.png" alt="image-20220111153451555"></p>
<h4 id="闪回"><a href="#闪回" class="headerlink" title="闪回"></a>闪回</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 生产环境不开启闪回</span></span></span><br><span class="line">alter database flashback on;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 关闭</span></span></span><br><span class="line">alter database flashback off;</span><br></pre></td></tr></table></figure>



<h4 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter db_files;</span><br><span class="line">alter system set db_files=8191 scope=spfile;</span><br><span class="line"></span><br><span class="line">show parameter processes;</span><br><span class="line"></span><br><span class="line">show parameter open_cursors;</span><br><span class="line">alter system set open_cursors=2000 scope=spfile;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111150512989.png" alt="image-20220111150512989"></p>
<h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><p><code>hosts</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.2.67 rac-scan</span><br></pre></td></tr></table></figure>

<p><code>tnsnames.ora</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mesdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">mespdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mespdb)</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111173611145.png" alt="image-20220111173611145"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn system/mesdb2022@mesdb</span><br><span class="line">select instance_name from v$instance;</span><br></pre></td></tr></table></figure>

<p>4个窗口分别是 mesdb2、mesdb1、mesdb2、mesdb1</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220111174008051.png" alt="image-20220111174008051"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crsctl stop crs # 关闭</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220111180802477.png" alt="image-20220111180802477"></p>
<h4 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h4><p><code>session</code>:基于会话，如果用户连接丢失,将创建一个新的会话连接到备用节点,用户的所有未提交的操作必须回滚,然后再次执行,SELECT操作也被中止</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (LOAD_BALANCE = yes)</span><br><span class="line">    (FAILOVER = ON)</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mesdb)</span><br><span class="line">      (FAILOVER_MODE =</span><br><span class="line">        (TYPE = SESSION)</span><br><span class="line">        (METHOD = BASIC)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220112093541671.png" alt="image-20220112093541671"></p>
<h4 id="OLAP"><a href="#OLAP" class="headerlink" title="OLAP"></a>OLAP</h4><p>建议使用</p>
<p><code>select</code>:如果用户连接丢失,将使用游标和之前的快照继续执行SELECT操作,叫做SQL接管,SQL接管能够无缝接管理的事务类型只有SELECT语句.其它的操作也必须要回滚然后再次执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mesdb =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = rac-scan)(PORT = 1521))</span><br><span class="line">    (LOAD_BALANCE = yes)</span><br><span class="line">    (FAILOVER = ON)</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = mesdb)</span><br><span class="line">      (FAILOVER_MODE =</span><br><span class="line">        (TYPE = SELECT)</span><br><span class="line">        (METHOD = BASIC)</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  )  </span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220112093721196.png" alt="image-20220112093721196"></p>
<blockquote>
<p>参考资料：<a href="http://blog.itpub.net/31397003/viewspace-2144255/">Oracle RAC Failover 详解</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>Linux</tag>
        <tag>Oracle</tag>
        <tag>RAC</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 19c Single 安装</title>
    <url>/2022/01/09/rhel7-6-install-oracle19c-single/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>19C 是未来几年 Oracle 数据库的大趋势，同样的作为长期稳定版，11GR2 在 2020 年 10 月份官方就宣布停止 Support 了，19C 将成为新的长期稳定版，并持续支持到 2027 年，也就意味着 19C 版本将成为最佳选择</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109234706402.png" alt="image-20220109234706402"></p>
<p>Oracle 19C 是支持 RHEL 7 和 RHEL 8 版本的系统进行安装的，RHEL 6 不再被兼容</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109234845049.png" alt="image-20220109234845049"></p>
<h3 id="Linux系统配置"><a href="#Linux系统配置" class="headerlink" title="Linux系统配置"></a>Linux系统配置</h3><h4 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h4><table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>操作系统版本</th>
<th>Oracle版本</th>
<th>磁盘空间</th>
<th>内存</th>
</tr>
</thead>
<tbody><tr>
<td>orcl</td>
<td>192.168.40.11</td>
<td>rhel 7.6</td>
<td>19c</td>
<td>80G</td>
<td>8G</td>
</tr>
</tbody></table>
<h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<h4 id="关闭Selinux"><a href="#关闭Selinux" class="headerlink" title="关闭Selinux"></a>关闭Selinux</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>

<h4 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h4><p>挂在镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom /mnt</span><br></pre></td></tr></table></figure>

<p>配置yum文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/yum.repos.d/bak -p</span><br><span class="line">mv /etc/yum.repos.d/* /etc/yum.repos.d/bak</span><br><span class="line">cat&lt;&lt;EOF&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p>检查是否安装完成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline</span><br></pre></td></tr></table></figure>

<p>手动安装<code>compat-libstdc++</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h4 id="配置hosts"><a href="#配置hosts" class="headerlink" title="配置hosts"></a>配置hosts</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/hosts</span><br><span class="line">192.168.40.11 orcl       </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># lvm</span></span></span><br><span class="line">pvcreate /dev/sdb /dev/sdc</span><br><span class="line">vgcreate oraclevg /dev/sdb</span><br><span class="line">vgcreate backupvg /dev/sdc</span><br><span class="line">lvcreate -n oraclelv -L 80000M oraclevg</span><br><span class="line">lvcreate -n oradatalv -L 100000M oraclevg</span><br><span class="line">lvcreate -n backuplv -L 50000M backupvg</span><br><span class="line">lvcreate -n archivelv -L 50000M backupvg</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/backupvg/backuplv</span><br><span class="line">mkfs.xfs /dev/backupvg/archivelv</span><br><span class="line">mkfs.xfs /dev/oraclevg/oradatalv</span><br><span class="line">mkfs.xfs /dev/oraclevg/oraclelv</span><br></pre></td></tr></table></figure>

<p>挂载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/fstab</span><br><span class="line">/dev/backupvg/backuplv /backup  xfs defaults 0 0</span><br><span class="line">/dev/backupvg/archivelv /archive xfs defaults 0 0</span><br><span class="line">/dev/oraclevg/oraclelv /oracle xfs defaults 0 0</span><br><span class="line">/dev/oraclevg/oradatalv /oradata xfs defaults 0 0</span><br><span class="line"></span><br><span class="line">mkdir /backup</span><br><span class="line">mkdir /archive</span><br><span class="line">mkdir /oracle</span><br><span class="line">mkdir /oradata</span><br><span class="line"></span><br><span class="line">mount /backup</span><br><span class="line">mount /archive</span><br><span class="line">mount /oracle</span><br><span class="line">mount /oradata</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107094435521.png"></p>
<h4 id="创建用户、组"><a href="#创建用户、组" class="headerlink" title="创建用户、组"></a>创建用户、组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建 oinstall dba oper 组</span></span></span><br><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line">/usr/sbin/groupadd -g 54324 backupdba</span><br><span class="line">/usr/sbin/groupadd -g 54325 dgdba</span><br><span class="line">/usr/sbin/groupadd -g 54326 kmdba</span><br><span class="line">/usr/sbin/groupadd -g 54330 racdba</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建 oracle 用户</span></span></span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G dba,backupdba,dgdba,kmdba,racdba,oper oracle</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 oracle 用户密码为 oracle</span></span></span><br><span class="line">echo oracle | passwd --stdin oracle</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 检查 oracle 用户</span></span></span><br><span class="line">id oracle</span><br></pre></td></tr></table></figure>

<h4 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a>创建安装目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /oracle/app/oracle/product/19.3.0/db</span><br><span class="line">mkdir -p /oracle/app/oraInventory</span><br><span class="line">chown -R oracle:oinstall /oradata</span><br><span class="line">chown -R oracle:oinstall /archive</span><br><span class="line">chown -R oracle:oinstall /oracle/app</span><br><span class="line">chmod -R 775 /oracle/app</span><br></pre></td></tr></table></figure>

<h4 id="配置avahi-deamon"><a href="#配置avahi-deamon" class="headerlink" title="配置avahi-deamon"></a>配置avahi-deamon</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.service</span><br><span class="line">systemctl <span class="built_in">disable</span> avahi-daemon.socket</span><br><span class="line"></span><br><span class="line"><span class="comment">##关闭 NOZEROCONF</span></span><br><span class="line">cat &lt;&lt;<span class="string">EOF &gt;&gt;/etc/sysconfig/network</span></span><br><span class="line"><span class="string">NOZEROCONF=yes</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<h4 id="关闭透明大页和numa"><a href="#关闭透明大页和numa" class="headerlink" title="关闭透明大页和numa"></a>关闭透明大页和numa</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<h4 id="配置系统参数文件"><a href="#配置系统参数文件" class="headerlink" title="配置系统参数文件"></a>配置系统参数文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DAYTIME=$(date +%Y%m%d)</span><br><span class="line">mv /etc/sysctl.conf /etc/sysctl.conf.$&#123;DAYTIME&#125;</span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">  shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">  shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmal&#x27;s Calculation formula: physical memory 8G：(8*1024*1024*1024)/4096=2097152</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmax&#x27;s Calculation formula: physical memory 8G：(8/2)*1024*1024*1024 -1=4294967295</span></span></span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall</span><br><span class="line">kernel.shmmax = $shmmax</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="配置pam-d"><a href="#配置pam-d" class="headerlink" title="配置pam.d"></a>配置pam.d</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="配置用户环境变量"><a href="#配置用户环境变量" class="headerlink" title="配置用户环境变量"></a>配置用户环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 配置 root 用户</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/root/.bash_profile</span><br><span class="line">alias so=&#x27;su - oracle&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]# &#x27;</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 配置 oracle 用户</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/home/oracle/.bash_profile</span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/oracle/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/19.3.0/db</span><br><span class="line">export ORACLE_HOSTNAME=orcl</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=mesdb</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p> 重启，检查<code>Selinux</code>、透明大页、<code>numa</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot </span><br><span class="line"></span><br><span class="line">cat /etc/selinux/config</span><br><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">cat /proc/cmdline</span><br></pre></td></tr></table></figure>

<h3 id="安装Oracle软件"><a href="#安装Oracle软件" class="headerlink" title="安装Oracle软件"></a>安装Oracle软件</h3><h4 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h4><p>使用<code>ftp</code>工具上传安装包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /soft</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109172822777.png" alt="image-20220109172822777"></p>
<blockquote>
<p>从18c开始要求将Database安装包解压到ORACLE_HOME目录下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /soft</span><br><span class="line">su - oracle</span><br><span class="line">cd /soft</span><br><span class="line">unzip -q LINUX.X64_193000_db_home.zip -d $ORACLE_HOME</span><br></pre></td></tr></table></figure>

<h4 id="RU补丁安装"><a href="#RU补丁安装" class="headerlink" title="RU补丁安装"></a>RU补丁安装</h4><p>Oracle19c支持在安装Oracle软件之前就打好补丁，可以提前打RU补丁，在安装时指定<code>-applyRU</code>参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压OPatch工具到$ORACLE_HOME目录</span></span></span><br><span class="line">unzip -o -q p6880880_190000_Linux-x86-64.zip -d $ORACLE_HOME</span><br><span class="line">opatch version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压RU补丁包</span></span></span><br><span class="line">unzip -q p33192793_190000_Linux-x86-64.zip</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109173747923.png" alt="image-20220109173747923"></p>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $ORACLE_HOME</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 指定RU补丁目录</span></span></span><br><span class="line">./runInstaller -applyRU /soft/33192793/</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109175105212.png" alt="image-20220109175105212"></p>
<p>仅安装软件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175205100.png" alt="image-20220109175205100"></p>
<p>安装单实例数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175236997.png" alt="image-20220109175236997"></p>
<p>生产环境安装企业版</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175311157.png" alt="image-20220109175311157"></p>
<p>安装目录，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175344029.png" alt="image-20220109175344029"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175359109.png" alt="image-20220109175359109"></p>
<p>用户组</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175429125.png" alt="image-20220109175429125"></p>
<p>root脚本自动执行：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175518229.png" alt="image-20220109175518229"></p>
<p>安装前检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175601645.png" alt="image-20220109175601645"></p>
<p>开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175633174.png" alt="image-20220109175633174"></p>
<p>自动执行root脚本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175744877.png" alt="image-20220109175744877"></p>
<p>安装完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175758838.png" alt="image-20220109175758838"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109175935925.png" alt="image-20220109175935925"></p>
<h3 id="创建监听"><a href="#创建监听" class="headerlink" title="创建监听"></a>创建监听</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109180039141.png" alt="image-20220109180039141"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180056252.png" alt="image-20220109180056252"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180108789.png" alt="image-20220109180108789"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180158581.png" alt="image-20220109180158581"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180207581.png" alt="image-20220109180207581"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109180221629.png" alt="image-20220109180221629"></p>
<p>检查监听</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220109180309445.png" alt="image-20220109180309445"> </p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca</span><br></pre></td></tr></table></figure>

<h4 id="选择创建数据库"><a href="#选择创建数据库" class="headerlink" title="选择创建数据库"></a>选择创建数据库</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109213155602.png" alt="image-20220109213155602"></p>
<h4 id="自定义创建"><a href="#自定义创建" class="headerlink" title="自定义创建"></a>自定义创建</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109213237927.png" alt="image-20220109213237927"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109213920663.png" alt="image-20220109213920663"></p>
<h4 id="CDB-amp-PDB"><a href="#CDB-amp-PDB" class="headerlink" title="CDB&amp;PDB"></a>CDB&amp;PDB</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109214038496.png" alt="image-20220109214038496"></p>
<h4 id="存储配置-1"><a href="#存储配置-1" class="headerlink" title="存储配置"></a>存储配置</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109214346088.png" alt="image-20220109214346088"></p>
<h4 id="归档-amp-闪回"><a href="#归档-amp-闪回" class="headerlink" title="归档&amp;闪回"></a>归档&amp;闪回</h4><p>暂不开启归档和闪回</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214420047.png" alt="image-20220109214420047"></p>
<h4 id="选择监听"><a href="#选择监听" class="headerlink" title="选择监听"></a>选择监听</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109214440783.png" alt="image-20220109214440783"></p>
<h4 id="数据库选项"><a href="#数据库选项" class="headerlink" title="数据库选项"></a>数据库选项</h4><p>生产环境无特殊要求全部安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214531999.png" alt="image-20220109214531999"></p>
<h4 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h4><p><strong>PGA：</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214818760.png" alt="image-20220109214818760"></p>
<p>线程数：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214842417.png" alt="image-20220109214842417"></p>
<p><strong>字符集：</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109214903263.png" alt="image-20220109214903263"></p>
<h4 id="EM管理器"><a href="#EM管理器" class="headerlink" title="EM管理器"></a>EM管理器</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109215258128.png" alt="image-20220109215258128"></p>
<p>数据库密码：mesdb2022</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109215543617.png" alt="image-20220109215543617"></p>
<h4 id="创建选项"><a href="#创建选项" class="headerlink" title="创建选项"></a>创建选项</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109215651312.png" alt="image-20220109215651312"></p>
<h4 id="表空间配置"><a href="#表空间配置" class="headerlink" title="表空间配置"></a>表空间配置</h4><p>控制文件大小改为8192</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109220205032.png" alt="image-20220109220205032"></p>
<h4 id="开始创建"><a href="#开始创建" class="headerlink" title="开始创建"></a>开始创建</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109220520009.png" alt="image-20220109220520009"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109220528857.png" alt="image-20220109220528857"></p>
<h4 id="创建完成"><a href="#创建完成" class="headerlink" title="创建完成"></a>创建完成</h4><p><img data-src="https://cdn.jonty.top/img/image-20220109223833891.png" alt="image-20220109223833891"></p>
<p>查看监听</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109224228578.png" alt="image-20220109224228578"></p>
<h3 id="基本使用与配置"><a href="#基本使用与配置" class="headerlink" title="基本使用与配置"></a>基本使用与配置</h3><h4 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br><span class="line">startup</span><br><span class="line">show pdbs</span><br><span class="line">alter pluggable database mespdb open; ## 关闭=&gt; close</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#存储过程 启动全部</span></span></span><br><span class="line">CREATE TRIGGER open_all_pdbs</span><br><span class="line">    AFTER STARTUP ON DATABASE</span><br><span class="line">BEGIN</span><br><span class="line">    EXECUTE IMMEDIATE &#x27;alter plggable database all open&#x27;;</span><br><span class="line">END open_all_pdbs;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#启动监听</span></span></span><br><span class="line">lsnrctl start </span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107150235871.png" alt="image-20220107150235871"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl stop</span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">shutdown immediate;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107150235871.png" alt="image-20220107150235871"></p>
<h4 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from v$diag_info;</span><br><span class="line">cd /oracle/app/oracle/diag/rdbms/mesdb/mesdb/alert</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107153632793.png" alt="image-20220107153632793"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220107153702836.png" alt="image-20220107153702836"></p>
<h4 id="PDB-amp-CDB"><a href="#PDB-amp-CDB" class="headerlink" title="PDB&amp;CDB"></a>PDB&amp;CDB</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show con_name;</span><br><span class="line">alter session set container = mespdb;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107162507434.png" alt="image-20220107162507434"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create tablespace mes datafile &#x27;/oradata/MESDB/mespdb/mes01.dbf&#x27; size 20m;</span><br><span class="line">create user mesadmin identified by mes2022 default tablespace mes;</span><br><span class="line">grant dba to mesadmin;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107162926063.png" alt="image-20220107162926063"></p>
<h4 id="TNS解析"><a href="#TNS解析" class="headerlink" title="TNS解析"></a>TNS解析</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $ORACLE_HOME/network/admin/</span><br><span class="line">vi tnsnames.ora</span><br><span class="line"></span><br><span class="line">tnsping mespdb</span><br><span class="line">sqlplus mesadmin/mes2022@mespdb</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220107165043554.png" alt="image-20220107165043554"></p>
<h4 id="密码过期规则"><a href="#密码过期规则" class="headerlink" title="密码过期规则"></a>密码过期规则</h4><p>后续配置在容器数据库下修改</p>
<p>关闭密码180天过期限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conn /as sysdba</span><br><span class="line">select * from dba_profiles where profile=&#x27;DEFAULT&#x27; and resource_name=&#x27;PASSWORD_LIFE_TIME&#x27;;</span><br><span class="line">alter profile default limit password_life_time unlimited;</span><br></pre></td></tr></table></figure>

<h4 id="EM管理器-1"><a href="#EM管理器-1" class="headerlink" title="EM管理器"></a>EM管理器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select DBMS_XDB.gethttpport from dual;</span><br><span class="line">select DBMS_XBD_CONFIG.gethttpsport from dual;</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="https://192.168.40.11:5500/em">https://192.168.40.11:5500/em</a></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220109233843387.png" alt="image-20220109233843387"></p>
<h4 id="关闭审计"><a href="#关闭审计" class="headerlink" title="关闭审计"></a>关闭审计</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter audit;</span><br><span class="line">alter system set audit_trail=none scope = spfile;</span><br></pre></td></tr></table></figure>

<h4 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter system set db_files = 8192 scope=spfile;</span><br><span class="line">alter system set processes = 2000 scope=spfile; ## 进程数</span><br><span class="line">alter system set open_cursors = 2000 scope=spfile; ## 游标数</span><br></pre></td></tr></table></figure>

<h4 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show parameter recover;</span><br><span class="line">alter system set db_recovery_file_dest_size=10g; ## 略小于存储 留出冗余空间</span><br><span class="line">alter system set db_recovery_file_dest = &#x27;/archive&#x27;; ## 归档存储路径</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line">alter database archivelog;</span><br><span class="line">alter database open;</span><br><span class="line">archive log list;</span><br><span class="line">alter system switch logfile;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>Linux</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle11gR2 Rac集群搭建</title>
    <url>/2022/01/04/oracle-11gR2-rac/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>Oracle RAC是什么?</strong></p>
<p><img data-src="https://cdn.jonty.top/img/20210612235829184.png" alt="img"></p>
<ul>
<li>Oracle Real Application Clusters (RAC) 允许客户跨多台服务器运行单个 Oracle 数据库，以最大限度地提高可用性并实现水平可扩展性，同时访问共享存储。</li>
<li>连接到 Oracle RAC 实例的用户会话可以在中断期间进行故障转移并安全地重放更改，而无需对最终用户应用程序进行任何更改，从而对最终用户隐藏了中断的影响。</li>
<li>Oracle RAC 运行于集群之上，为 Oracle 数据库提供了最高级别的可用性、可伸缩性和低成本计算能力。</li>
<li>如果集群内的一个节点发生故障，Oracle 将可以继续在其余的节点上运行。</li>
<li>Oracle 的主要创新是一项称为高速缓存合并的技术。</li>
<li>高速缓存合并使得集群中的节点可以通过高速集群互联高效地同步其内存高速缓存，从而最大限度地低降低磁盘 I/O。</li>
<li>高速缓存最重要的优势在于它能够使集群中所有节点的磁盘共享对所有数据的访问,数据无需在节点间进行分区。</li>
</ul>
<p>特点：</p>
<ul>
<li>多台互连计算机组成，使用共享存储。</li>
<li>用户无感知，对于最终用户和应用程序而言，它们似乎是一台服务器。</li>
<li>高可用，只要有一个节点存活，就能正常对外提供服务，避免单点故障。</li>
<li>高性能，多节点负载均衡。</li>
<li>易伸缩，可以容易地添加、删除节点，以满足系统自身的调整。</li>
</ul>
<p><strong>如何部署RAC数据库环境？</strong></p>
<p>大致步骤如下：</p>
<ul>
<li>安装两台redhat7.6版本Linux系统</li>
<li>网络配置（双网卡，准备IP：Public IP，Virtual IP，Private IP，Scan IP）</li>
<li>存储配置（6块5G共享盘做ASM盘，根目录留50G用于安装grid和oracle）</li>
<li>预安装准备（系统参数/etc/sysctl.conf修改，防火墙selinux关闭，ntpd时钟定时同步，yum源配置安装<br>用户组及用户、目录新建，环境变量配置，用户资源限制/etc/security/limits.conf配置，/etc/pam.d/login修改pam_limits.so等等）</li>
<li>安装Grid软件</li>
<li>安装Oracle软件并建库</li>
<li>修改数据库内存配置，密码不过期，开启归档，布置归档定时删除脚本，布置rman备份机制)</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/20210613001253755.png" alt="img"></p>
<h3 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h3><p>本文主机配置为<code>RedHat 7.6 x86_64</code>、<code>内存8G</code>、<code>硬盘100G</code>、<code>双网卡</code>、<code>iscsi共享存储5G*6</code></p>
<table>
<thead>
<tr>
<th>节点</th>
<th>主机版本</th>
<th>主机名</th>
<th>实例名</th>
<th>Oracle版本</th>
<th>Public IP</th>
<th>Private IP</th>
<th>Virtual IP</th>
<th>Scan IP</th>
</tr>
</thead>
<tbody><tr>
<td>node1</td>
<td>RedHat 7.6</td>
<td>rac21</td>
<td>orcl1</td>
<td>11.2.0.4</td>
<td>192.168.145.11</td>
<td>10.10.10.11</td>
<td>192.168.145.13</td>
<td>192.168.145.15</td>
</tr>
<tr>
<td>node2</td>
<td>RedHat 7.6</td>
<td>rac22</td>
<td>orcl2</td>
<td>11.2.0.4</td>
<td>192.168.145.12</td>
<td>10.10.10.12</td>
<td>192.168.145.14</td>
<td>192.168.145.15</td>
</tr>
</tbody></table>
<h4 id="Linux系统安装"><a href="#Linux系统安装" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h4><blockquote>
<p>Linux系统安装不做详细演示，请参考 <a href="https://jonty.top/2021/10/27/vmware-install-linux/">https://jonty.top/2021/10/27/vmware-install-linux/</a></p>
</blockquote>
<h4 id="配置yum源并安装依赖包"><a href="#配置yum源并安装依赖包" class="headerlink" title="配置yum源并安装依赖包"></a>配置yum源并安装依赖包</h4><p>VMware Workstation挂载Linux镜像：</p>
<p><strong>注意：</strong> 需要提前挂载系统镜像</p>
<p>配置镜像源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;export LANG=en_US&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line">mount /dev/cdrom /mnt</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置yum源</span></span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>安装依赖包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum groupinstall -y &quot;Server with GUI&quot;</span><br><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">tigervnc* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p>手动上传并安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br><span class="line">rpm -e ksh-20120801-139.el7.x86_64</span><br><span class="line">rpm -ivh pdksh-5.2.14-37.el5.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p>检查安装情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline | grep &quot;not installed&quot;</span><br></pre></td></tr></table></figure>



<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><p><code>rac41</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Public IP</span></span></span><br><span class="line">nmcli connection modify ens33 ipv4.addresses 192.168.145.21/24 ipv4.gateway 192.168.145.2 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Private IP</span></span></span><br><span class="line">nmcli connection modify ens34 ipv4.addresses 10.10.10.21/24 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生效</span></span></span><br><span class="line">nmcli connection up ens33</span><br><span class="line">nmcli connection up ens34</span><br></pre></td></tr></table></figure>

<p><code>rac42</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Public IP</span></span></span><br><span class="line">nmcli connection modify ens33 ipv4.addresses 192.168.145.22/24 ipv4.gateway 192.168.45.2 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置Private IP</span></span></span><br><span class="line">nmcli connection modify ens34 ipv4.addresses 10.10.10.22/24 ipv4.method manual autoconnect yes</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生效</span></span></span><br><span class="line">nmcli connection up ens33</span><br><span class="line">nmcli connection up ens34</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211223161839494.png" alt="image-20211223161839494"></p>
<h4 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h4><p>使用<code>ISCSI</code>配置共享存储：<a href="https://luciferliu.blog.csdn.net/article/details/118087577">https://luciferliu.blog.csdn.net/article/details/118087577</a></p>
<p>配置好共享存储后，在 Linux 主机连接共享存储：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#iscsi识别共享存储</span></span></span><br><span class="line">yum install -y iscsi-initiator-utils*</span><br><span class="line"></span><br><span class="line">systemctl enable iscsi</span><br><span class="line">systemctl start iscsi</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#输出targetname，10.211.55.18为iscsi共享存储设备IP地址</span></span></span><br><span class="line">iscsiadm -m discovery -t st -p 192.168.145.1</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#连接共享存储</span></span></span><br><span class="line">iscsiadm -m node -T iqn.2008-08.com.starwindsoftware:192.168.1.21-jonty -p 192.168.145.1 -l</span><br><span class="line"></span><br><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p>安装 <code>multipath</code> 绑定多路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y device-mapper*</span><br><span class="line">mpathconf --enable --with_multipathd y</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看共享盘的scsi_id</span></span></span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdb</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdc</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdd</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sde</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdf</span><br><span class="line">/usr/lib/udev/scsi_id -g -u /dev/sdg</span><br></pre></td></tr></table></figure>

<p>配置 multipath 文件：</p>
<p><strong>📢 注意：</strong> wwid的值为上面获取的scsi_id，alias可自定义，这里配置3块OCR盘，3块DATA盘！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;/etc/multipath.conf</span><br><span class="line">defaults &#123;</span><br><span class="line">    user_friendly_names yes</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">blacklist &#123;</span><br><span class="line">  devnode &quot;^sda&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">multipaths &#123;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;2b4a04d8579625dfe&quot;</span><br><span class="line">  alias asm-ocr_1</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;24a84046e7f3723ee&quot;</span><br><span class="line">  alias asm-ocr_2</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;22e5355507973a019&quot;</span><br><span class="line">  alias asm-ocr_3</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;267309a91b23cad07&quot;</span><br><span class="line">  alias asm-data_1</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;2101958d6779faa9a&quot;</span><br><span class="line">  alias asm-data_2</span><br><span class="line">  &#125;</span><br><span class="line">  multipath &#123;</span><br><span class="line">  wwid &quot;205af7fc0a95ea04b&quot;</span><br><span class="line">  alias asm-data_3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>激活multipath多路径：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">multipath -F</span><br><span class="line">multipath -v2</span><br><span class="line">multipath -ll</span><br></pre></td></tr></table></figure>

<p>配置UDEV绑盘：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for i in ocr_* data_*; do</span><br><span class="line">	printf &quot;%s %s\n&quot; &quot;$i&quot; &quot;$(udevadm info --query=all --name=/dev/mapper/&quot;$i&quot; | grep -i dm_uuid)&quot; &gt;&gt;/dev/mapper/udev_info</span><br><span class="line">done</span><br><span class="line">while read -r line; do</span><br><span class="line">	dm_uuid=$(echo &quot;$line&quot; | awk -F&#x27;=&#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">	disk_name=$(echo &quot;$line&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">	echo &quot;KERNEL==\&quot;dm-*\&quot;,ENV&#123;DM_UUID&#125;==\&quot;$&#123;dm_uuid&#125;\&quot;,SYMLINK+=\&quot;asm_$&#123;disk_name&#125;\&quot;,OWNER=\&quot;grid\&quot;,GROUP=\&quot;asmadmin\&quot;,MODE=\&quot;0660\&quot;&quot; &gt;&gt;/etc/udev/rules.d/99-oracle-asmdevices.rules</span><br><span class="line">done &lt;/dev/mapper/udev_info</span><br><span class="line"></span><br><span class="line">asm-ocr_3	(253:2)</span><br><span class="line">asm-ocr_2	(253:1)</span><br><span class="line">asm-ocr_1	(253:0)</span><br><span class="line">asm-data_3	(253:5)</span><br><span class="line">asm-data_2	(253:4)</span><br><span class="line">asm-data_1	(253:3)</span><br><span class="line"></span><br><span class="line">for i in asm-ocr_1 asm-ocr_2 asm-ocr_3 asm-data_1 asm-data_2 asm-data_3;</span><br><span class="line">do</span><br><span class="line">printf &quot;%s %s\n&quot; &quot;$i&quot; &quot;$(udevadm info --query=all --name=/dev/mapper/$i |grep -i dm_uuid)&quot;;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">asm-ocr_1 E: DM_UUID=mpath-2b4a04d8579625dfe</span><br><span class="line">asm-ocr_2 E: DM_UUID=mpath-24a84046e7f3723ee</span><br><span class="line">asm-ocr_3 E: DM_UUID=mpath-22e5355507973a019</span><br><span class="line">asm-data_1 E: DM_UUID=mpath-267309a91b23cad07</span><br><span class="line">asm-data_2 E: DM_UUID=mpath-2101958d6779faa9a</span><br><span class="line">asm-data_3 E: DM_UUID=mpath-205af7fc0a95ea04b</span><br><span class="line"></span><br><span class="line">vi /etc/udev/rules.d/99-oracle-asmdevices.rules</span><br><span class="line"></span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-2b4a04d8579625dfe&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-24a84046e7f3723ee&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-22e5355507973a019&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-267309a91b23cad07&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-2101958d6779faa9a&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line">KERNEL==&quot;dm-*&quot;,ENV&#123;DM_UUID&#125;==&quot;mpath-205af7fc0a95ea04b&quot;,OWNER=&quot;grid&quot;,GROUP=&quot;asmadmin&quot;,MODE=&quot;0660&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重载udev</span></span></span><br><span class="line">udevadm control --reload-rules</span><br><span class="line">udevadm trigger --type=devices</span><br><span class="line"></span><br><span class="line">ls -lsa /dev/dm*</span><br><span class="line">ls -lsa /dev/mapper/*</span><br></pre></td></tr></table></figure>

<p>确认配置完成后，分别在两个节点输入命令 <code>ls /dev/dm*</code> 查看是否已经成功绑定。</p>
<h4 id="hosts文件配置"><a href="#hosts文件配置" class="headerlink" title="hosts文件配置"></a>hosts文件配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash">Public IP</span></span><br><span class="line">192.168.145.21 rac21</span><br><span class="line">192.168.145.22 rac22</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Private IP</span></span><br><span class="line">10.10.10.21 rac21-priv</span><br><span class="line">10.10.10.22 rac22-priv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Vip IP</span></span><br><span class="line">192.168.145.22 rac21-vip</span><br><span class="line">192.168.145.23 rac22-vip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Scan IP</span></span><br><span class="line">192.168.145.25 rac-scan</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h4 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service ## 禁用防火墙</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure>



<h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启后生效</span></span></span><br><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启后检查</span></span></span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: selinux 配置需要重启生效！</p>
</blockquote>
<h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p>首先需要禁用 chronyd 和 ntpd 服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#禁用chronyd</span></span></span><br><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">systemctl stop chronyd.service</span><br><span class="line">systemctl disable chronyd.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#禁用ntpd</span></span></span><br><span class="line">yum install -y ntpdate</span><br></pre></td></tr></table></figure>

<p>配置计划任务，定时刷新系统时间</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/var/spool/cron/root</span><br><span class="line">00 12 * * * /usr/sbin/ntpdate -u ntp.ntsc.ac.cn &amp;&amp; /usr/sbin/hwclock -w</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看计划任务</span></span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#手动执行</span></span></span><br><span class="line">/usr/sbin/ntpdate -u 10.211.55.200 &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure>



<h4 id="关闭透明大页和-NUMA"><a href="#关闭透明大页和-NUMA" class="headerlink" title="关闭透明大页和 NUMA"></a>关闭透明大页和 NUMA</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#重启后检查是否生效</span></span></span><br><span class="line">cat /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">cat /proc/cmdline</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 注意： 关闭 <code>透明大页</code> 和 <code>numa</code> 的配置，需要重启主机生效</p>
</blockquote>
<h4 id="avahi-daemon-配置"><a href="#avahi-daemon-配置" class="headerlink" title="avahi-daemon 配置"></a>avahi-daemon 配置</h4><p>有些主机安装选择最小化安装，没有安装 avahi-daemon 功能，建议安装之后禁用，防止以后误操作导致出问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y avahi*</span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">pgrep -f avahi-daemon | awk &#x27;&#123;print &quot;kill -9 &quot;$2&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>配置 NOZEROCONF：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysconfig/network</span><br><span class="line">NOZEROCONF=yes</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h4 id="系统参数配置"><a href="#系统参数配置" class="headerlink" title="系统参数配置"></a>系统参数配置</h4><p>安装 Oracle 数据库需要配置系统参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置参数文件</span></span></span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">	shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">	shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/sysctl.conf</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall</span><br><span class="line">kernel.shmmax = $shmmax</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">net.ipv4.conf.ens33.rp_filter = 1</span><br><span class="line">net.ipv4.conf.ens34.rp_filter = 2</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#生效</span></span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="系统资源限制"><a href="#系统资源限制" class="headerlink" title="系统资源限制"></a>系统资源限制</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置limits.conf</span></span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle hard memlock 134217728</span><br><span class="line">oracle soft memlock 134217728</span><br><span class="line"></span><br><span class="line">grid soft nofile 1024</span><br><span class="line">grid hard nofile 65536</span><br><span class="line">grid soft stack 10240</span><br><span class="line">grid hard stack 32768</span><br><span class="line">grid soft nproc 2047</span><br><span class="line">grid hard nproc 16384</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置pam.d/login</span></span></span><br><span class="line">cat &lt;&lt;EOF&gt;&gt;/etc/pam.d/login</span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<h4 id="用户及组、目录创建"><a href="#用户及组、目录创建" class="headerlink" title="用户及组、目录创建"></a>用户及组、目录创建</h4><p>创建安装 Oracle 数据库所需的用户、组以及安装目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#组创建</span></span></span><br><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line">/usr/sbin/groupadd -g 54324 backupdba</span><br><span class="line">/usr/sbin/groupadd -g 54325 dgdba</span><br><span class="line">/usr/sbin/groupadd -g 54326 kmdba</span><br><span class="line">/usr/sbin/groupadd -g 54327 asmdba</span><br><span class="line">/usr/sbin/groupadd -g 54328 asmoper</span><br><span class="line">/usr/sbin/groupadd -g 54329 asmadmin</span><br><span class="line">/usr/sbin/groupadd -g 54330 racdba</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#用户创建</span></span></span><br><span class="line">/usr/sbin/useradd -u 11012 -g oinstall -G asmadmin,asmdba,asmoper,dba,racdba,oper grid</span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G asmdba,dba,backupdba,dgdba,kmdba,racdba,oper oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#修改用户密码为oracle</span></span></span><br><span class="line">echo &quot;oracle&quot; |passwd oracle --stdin</span><br><span class="line">echo &quot;oracle&quot; |passwd grid --stdin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建软件目录</span></span></span><br><span class="line">mkdir -p /u01/app/11.2.0/grid</span><br><span class="line">mkdir -p /u01/app/grid</span><br><span class="line">mkdir -p /u01/app/oracle/product/11.2.0/db</span><br><span class="line">mkdir -p /u01/app/oraInventory</span><br><span class="line">mkdir -p /backup</span><br><span class="line">mkdir -p /home/oracle/scripts</span><br><span class="line">chown -R oracle:oinstall /backup</span><br><span class="line">chown -R oracle:oinstall /home/oracle/scripts</span><br><span class="line">chown -R grid:oinstall /u01</span><br><span class="line">chown -R grid:oinstall /u01/app/grid</span><br><span class="line">chown -R grid:oinstall /u01/app/11.2.0/grid</span><br><span class="line">chown -R grid:oinstall /u01/app/oraInventory</span><br><span class="line">chown -R oracle:oinstall /u01/app/oracle</span><br><span class="line">chmod -R 775 /u01</span><br></pre></td></tr></table></figure>



<h4 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h4><h5 id="node1"><a href="#node1" class="headerlink" title="node1"></a>node1</h5><p><strong>grid 用户：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/grid/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/grid</span><br><span class="line">export ORACLE_HOME=/u01/app/11.2.0/grid</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=+ASM1</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysasm&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>oracle 用户：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/11.2.0/db</span><br><span class="line">export ORACLE_HOSTNAME=rac11</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=orcl1</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleEnd#########################</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h5 id="node2"><a href="#node2" class="headerlink" title="node2"></a>node2</h5><p><strong>grid 用户</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/grid/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/grid</span><br><span class="line">export ORACLE_HOME=/u01/app/11.2.0/grid</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=+ASM2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysasm&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><strong>oracle 用户：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF&gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=\$ORACLE_BASE/product/11.2.0/db</span><br><span class="line">export ORACLE_HOSTNAME=rac12</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=orcl2</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleEnd#########################</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="安装介质上传解压"><a href="#安装介质上传解压" class="headerlink" title="安装介质上传解压"></a>安装介质上传解压</h4><p>只需要上传至一节点 /soft 目录下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建安装介质存放目录</span></span></span><br><span class="line">mkdir /soft</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上传安装介质到/soft目录</span></span></span><br><span class="line">p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line">p13390677_112040_Linux-x86-64_3of7.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压安装介质</span></span></span><br><span class="line">cd /soft</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_3of7.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#授权目录</span></span></span><br><span class="line">chown -R oracle:oinstall /soft/database</span><br><span class="line">chown -R grid:oinstall /soft/grid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#root用户下，cvuqdisk安装（rac01&amp;rac02）</span></span></span><br><span class="line">cd /soft/grid/rpm</span><br><span class="line">rpm -ivh cvuqdisk-1.0.9-1.rpm </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#传输到节点二安装</span></span></span><br><span class="line">scp cvuqdisk-1.0.9-1.rpm rac12:/tmp</span><br><span class="line">rpm -ivh /tmp/cvuqdisk-1.0.9-1.rpm </span><br></pre></td></tr></table></figure>

<h3 id="安装Grid软件"><a href="#安装Grid软件" class="headerlink" title="安装Grid软件"></a>安装Grid软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装vncserver</span></span></span><br><span class="line">yum install -y tigervnc*</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#root用户下切换到grid用户</span></span></span><br><span class="line">su - grid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行vncserver，按提示输入密码即可</span></span></span><br><span class="line">vncserver</span><br></pre></td></tr></table></figure>

<p>开始安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入安装目录</span></span></span><br><span class="line">cd /soft/grid</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行安装程序开始安装，加上jar包防止弹窗不显示问题</span></span></span><br><span class="line">./runInstaller -jreLoc /etc/alternatives/jre_1.8.0</span><br></pre></td></tr></table></figure>



<p>跳过软件更新：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104095907830.png" alt="image-20220104095907830"></p>
<p>选择集群模式安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100037758.png" alt="image-20220104100037758"></p>
<p>自定义安装：<img data-src="https://cdn.jonty.top/img/image-20220104100119417.png" alt="image-20220104100119417"></p>
<p> 配置集群名称和<code>scan</code>名称</p>
<blockquote>
<p>需要和hosts配置一致</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100325637.png" alt="image-20220104100325637"></p>
<p> 配置节点互信：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100434776.png" alt="image-20220104100434776"></p>
<blockquote>
<p>点击Add添加rac12节点，然后点击setup配置互信</p>
</blockquote>
<p>点击Test测试互信：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100607278.png" alt="image-20220104100607278"></p>
<p>确认网络信息是否正确</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100645594.png" alt="image-20220104100645594"></p>
<p>选择<strong>ASM</strong>模式安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100727480.png" alt="image-20220104100727480"></p>
<p>配置<strong>OCR</strong>裁决盘信息：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100848491.png" alt="image-20220104100848491"></p>
<blockquote>
<p>OCR裁决盘冗余模式External,Normal,High对应磁盘数量为1，3，5</p>
</blockquote>
<p>配置ASM实例SYS密码：oracle</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104100905957.png" alt="image-20220104100905957"></p>
<p>不使用IPMI</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101122176.png" alt="image-20220104101122176"></p>
<p>选择用户组，默认：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101150351.png" alt="image-20220104101150351"></p>
<p>选择安装目录，默认：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101220287.png" alt="image-20220104101220287"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101249813.png" alt="image-20220104101249813"></p>
<p>安装前检查：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104101424877.png" alt="image-20220104101424877"></p>
<p>开始执行安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104102648525.png" alt="image-20220104102648525"></p>
<blockquote>
<p>注意：执行root.sh之前需要安装<code>18370031</code>补丁</p>
</blockquote>
<p><code>rac11</code>&amp;<code>rac12</code>均需要执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#上传补丁包</span></span></span><br><span class="line">p18370031_112040_Linux-x86-64.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压补丁包</span></span></span><br><span class="line">cd /soft</span><br><span class="line">unzip -q p18370031_112040_Linux-x86-64.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#授权补丁包</span></span></span><br><span class="line">chown -R grid:oinstall /soft/18370031</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#开始安装补丁，两个节点都需要执行</span></span></span><br><span class="line">su - grid</span><br><span class="line">opatch napply -oh $ORACLE_HOME -local /soft/18370031 -silent</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104103121399.png" alt="image-20220104103121399"></p>
<p>打好补丁后，开始执行<code>root.sh</code>脚本</p>
<p>先在节点1执行，执行成功后节点2加入群集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#root用户下执行</span></span></span><br><span class="line">/u01/app/oraInventory/orainstRoot.sh</span><br><span class="line">/u01/app/11.2.0/grid/root.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104104406468.png" alt="image-20220104104406468"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105124755.png" alt="image-20220104105124755"></p>
<p>点击OK,继续安装</p>
<p>没有配置<code>DNS</code>解析，报错可忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105427461.png" alt="image-20220104105427461"><code>GRID</code>安装成功：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105542972.png" alt="image-20220104105542972"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104105649608.png" alt="image-20220104105649608"></p>
<p>osh:</p>
<p><strong>注意：</strong> 如果需要安装 <code>PSU</code> 补丁，建议在建库之前安装，可以省去数据字典升级的步骤</p>
<p>以 Grid PSU 补丁 <code>31718723</code> 为例，使用 <code>root</code> 用户执行补丁安装命令：（rac11&amp;rac12）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#解压补丁包</span></span></span><br><span class="line">cd /soft</span><br><span class="line">unzip -q p31718723_112040_Linux-x86-64.zip</span><br><span class="line"></span><br><span class="line">mv Opatch OPatch_old # 备份</span><br><span class="line">cp -r /soft/Opatch . # 复制</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#切换到root用户执行，需要拷贝到2节点也执行一次</span></span></span><br><span class="line">opatch auto /soft/31718723 -oh $GRID_ORACLE_HOME</span><br></pre></td></tr></table></figure>

<h3 id="创建ASM数据盘DATA"><a href="#创建ASM数据盘DATA" class="headerlink" title="创建ASM数据盘DATA"></a>创建ASM数据盘DATA</h3><p> DATA 磁盘组主要用于存放数据文件、日志文件等数据库文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asmca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104112335347.png" alt="image-20220104112335347"></p>
<p>点击<strong>create</strong>创建DATA</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104112423523.png" alt="image-20220104112423523"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104112429678.png" alt="image-20220104112429678"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104112509247.png" alt="image-20220104112509247"></p>
<p>重启，检查群集状态</p>
<h3 id="安装Oracle软件"><a href="#安装Oracle软件" class="headerlink" title="安装Oracle软件"></a>安装Oracle软件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">vncserver</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#应用环境变量</span></span></span><br><span class="line">source ~/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入安装目录</span></span></span><br><span class="line">cd /soft/database</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行安装程序开始安装，加上jar包防止弹窗不显示问题</span></span></span><br><span class="line">./runInstaller -jreLoc /etc/alternatives/jre_1.8.0</span><br></pre></td></tr></table></figure>

<p>不配置邮件发送：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122206066.png" alt="image-20220104122206066"></p>
<p>跳过软件更新</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122247144.png" alt="image-20220104122247144"></p>
<p>选择仅安装Oracle软件：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122305882.png" alt="image-20220104122305882"></p>
<p>配置Oracle用户互信：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122407750.png" alt="image-20220104122407750"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104122359451.png" alt="image-20220104122359451"></p>
<p>选择企业版安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104130823682.png"></p>
<p>安装位置，默认即可：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104130927245.png" alt="image-20220104130927245"></p>
<p>用户组，默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104130945700.png" alt="image-20220104130945700"></p>
<p>安装前检查：</p>
<p>忽略</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104131057647.png" alt="image-20220104131057647"></p>
<p>开始安装：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104131128124.png" alt="image-20220104131128124"></p>
<p>安装过程报错：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104132002754.png" alt="image-20220104132002754"></p>
<blockquote>
<p><strong>注意：</strong> Linux7 安装 Oracle 11GR2 版本，oracle 软件安装过程中报错：<code>ins_emagent.mk</code>，需要修改文件 <code>/sysman/lib/ins_emagent.mk</code> 修复</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@rac11:/home/oracle]$ sed -i &#x27;s/^\(\s*\$(MK_EMAGENT_NMECTL)\)\s*$/\1 -lnnz11/g&#x27; $ORACLE_HOME/sysman/lib/ins_emagent.mk</span><br></pre></td></tr></table></figure>

<p>执行<code>root.sh</code>脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/u01/app/oracle/product/11.2.0/db/root.sh</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20220104133753429.png" alt="image-20220104133753429"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104134046080.png" alt="image-20220104134046080"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104133928204.png" alt="image-20220104133928204"></p>
<h3 id="创建数据库实例"><a href="#创建数据库实例" class="headerlink" title="创建数据库实例"></a>创建数据库实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca</span><br></pre></td></tr></table></figure>

<p>选择rac模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142637632.png" alt="image-20220104142637632"></p>
<p>创建数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142655532.png" alt="image-20220104142655532"></p>
<p>选择自定义</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142722154.png" alt="image-20220104142722154"></p>
<p>填写实例ID:</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142759183.png" alt="image-20220104142759183"></p>
<p>EM：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142834540.png" alt="image-20220104142834540"></p>
<p>填写SYS密码：P@ssw0rd</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142927756.png" alt="image-20220104142927756"></p>
<p>选择数据存放盘：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104142945676.png" alt="image-20220104142945676"></p>
<p>暂不开启闪回，建库后可随时开启：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143018740.png" alt="image-20220104143018740"></p>
<p>选择自定义组件，默认：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143037219.png" alt="image-20220104143037219"></p>
<p>配置初始化参数：</p>
<p>内存：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SGA &lt;= memory * 0.8 * 0.8</span><br><span class="line">PGA &lt;= memory * 0.8 * 0.2  (40% ~ 60%)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104143129101.png" alt="image-20220104143129101"></p>
<p>进程数：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211230105346341.png"></p>
<p>字符集：根据实际需求设置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143306605.png" alt="image-20220104143306605"></p>
<p><strong>存储配置</strong></p>
<p>控制文件：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211230110158202.png" alt="image-20211230110158202"></p>
<p>表空间设置：</p>
<blockquote>
<p>每个数据文件设置为20G  USERS:5G </p>
<p>自动扩展关闭</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211230110652517.png" alt="image-20211230110652517"></p>
<p>重做日志文件：</p>
<blockquote>
<p>2组 10个  每个2G  (演示为200M)</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211230111057915.png" alt="image-20211230111057915"></p>
<p><strong>创建选项</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143603934.png" alt="image-20220104143603934"></p>
<p>开始创建：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104143813380.png" alt="image-20220104143813380"></p>
<p>创建成功：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20220104151937257.png" alt="image-20220104151937257"></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">select instance_number,instance_name,startup_time,status from gv<span class="variable">$Instance</span>;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20220104154654400.png" alt="image-20220104154654400"></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>Linux</tag>
        <tag>Oracle</tag>
        <tag>RAC</tag>
      </tags>
  </entry>
  <entry>
    <title>AlwaysOn可用性组搭建</title>
    <url>/2021/12/12/sqlserver-always-on/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>关于<a href="https://docs.microsoft.com/zh-cn/sql/database-engine/availability-groups/windows/overview-of-always-on-availability-groups-sql-server?view=sql-server-ver15">AlwaysOn</a>高可用性组的官方介绍</p>
<p>关于SQL Server高可用性的<a href="https://blog.csdn.net/DBA_Huangzj/article/details/54015470">相关概念</a></p>
</blockquote>
<p>​        AlwaysOn利用了Windows 故障转移群集（FCI）的健康监测和自动故障转移的特性，所以AlwaysOn需要建立在Windows故障转移群集之上。关于故障转移群集的搭建在之前的文章有介绍（<a href="https://jonty.top/2021/12/02/sqlserver-ha-02/">故障转移群集搭建</a>）。但是和故障转移群集不同的地方是，可用性组不需要存放在<strong>共享存储</strong>上。另外，可用性组是<strong>数据库</strong>层面的，故障转移群集是<strong>实例</strong>层面的。</p>
<p><img data-src="https://cdn.jonty.top/img/aoag-agintrofigure.gif" alt="有五个副本的可用性组"></p>
<p><img data-src="https://docs.microsoft.com/zh-cn/sql/includes/media/sql-server-ha-story/image10.png?view=sql-server-ver15" alt="分布式 AG"></p>
<p>特点：</p>
<ul>
<li>AlwaysOn支持故障转移群集</li>
<li>多个用户数据库可以一同进行故障转移</li>
<li>每个辅助服务器上都有一份数据的拷贝，可以使服务器上的数据拷贝和主服务器上的数据完全同步</li>
<li>辅助服务器可用于只读的访问请求</li>
<li>……</li>
</ul>
<p><strong>大致步骤如下</strong>：</p>
<ul>
<li>安装4台Windows Server2019服务器。</li>
<li>配置主机、网卡</li>
<li>安装AD域、DNS,添加域</li>
<li>安装故障转移群集</li>
<li>安装SQL Server </li>
<li>配置AlwaysOn可用性组</li>
<li>配置读写分离路由</li>
</ul>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>演示配置为<code>Windows Server 2019 DataCenter</code>，<code>2核4G</code>，<code>硬盘100G</code>，双网卡，<code>Administrator</code>密码需要配置一致。</p>
<table>
<thead>
<tr>
<th align="center">节点</th>
<th align="center">主机名</th>
<th align="center">public ip</th>
<th align="center">private ip</th>
<th align="center">群集ip</th>
<th align="center">侦听器</th>
<th align="center">DNS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ws11</td>
<td align="center">ws11</td>
<td align="center">192.168.1.11</td>
<td align="center">10.10.10.11</td>
<td align="center">192.168.1.15</td>
<td align="center">192.168.1.16</td>
<td align="center">192.168.1.20</td>
</tr>
<tr>
<td align="center">ws12</td>
<td align="center">ws12</td>
<td align="center">192.168.1.12</td>
<td align="center">10.10.10.12</td>
<td align="center">192.168.1.15</td>
<td align="center">192.168.1.16</td>
<td align="center">192.168.1.20</td>
</tr>
<tr>
<td align="center">ws13</td>
<td align="center">ws13</td>
<td align="center">192.168.1.13</td>
<td align="center">10.10.10.13</td>
<td align="center">192.168.1.15</td>
<td align="center">192.168.1.16</td>
<td align="center">192.168.1.20</td>
</tr>
<tr>
<td align="center">ws20</td>
<td align="center">ws20</td>
<td align="center">192.168.1.20</td>
<td align="center">10.10.10.20</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">192.168.1.20</td>
</tr>
</tbody></table>
<blockquote>
<p> 注意：后续操作没有特殊说明3节点均需配置</p>
</blockquote>
<h3 id="配置域控"><a href="#配置域控" class="headerlink" title="配置域控"></a>配置域控</h3><p>将<code>ws20</code>作为域控服务器。</p>
<h4 id="IP和DNS配置"><a href="#IP和DNS配置" class="headerlink" title="IP和DNS配置"></a>IP和DNS配置</h4><p>配置网卡属性：</p>
<p>配置<code>IP</code>地址：<code>192.168.1.20</code>，并将<code>DNS</code>设置为本机<code>IP</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210160647337.png" alt="image-20211210160647337"></p>
<p>无域控DNS配置：<a href="https://www.cnblogs.com/DragonStart/p/8275182.html">https://www.cnblogs.com/DragonStart/p/8275182.html</a> </p>
<h4 id="AD-amp-DNS安装"><a href="#AD-amp-DNS安装" class="headerlink" title="AD &amp; DNS安装"></a>AD &amp; DNS安装</h4><p>打开服务器管理器，添加角色和功能向导，选择添加 <code>Active Directory域服务</code>和 <code>DNS</code> 服务器</p>
<img data-src="https://cdn.jonty.top/img/image-20211201202841391.png" alt="image-20211201202841391" style="zoom:80%;" />

<p>安装完成后，选择将此服务器升级为<strong>域控制器</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201203328080.png" alt="image-20211201203328080" style="zoom:80%;" />

<h4 id="配置域控-1"><a href="#配置域控-1" class="headerlink" title="配置域控"></a>配置域控</h4><p>点击添加<strong>新林</strong>，自定义一个<strong>根域名</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201203602401.png" alt="image-20211201203602401" style="zoom:80%;" />

<p>下一步，设置DNS密码</p>
<img data-src="https://cdn.jonty.top/img/image-20211201210755796.png" alt="image-20211201210755796" style="zoom:80%;" />

<p>后续步骤<strong>默认</strong>，点击安装</p>
<img data-src="https://cdn.jonty.top/img/image-20211201211327973.png" alt="image-20211201211327973" style="zoom:80%;" />

<p>安装完成后会<strong>自动重启</strong>，并使用<strong>域账户</strong>登录</p>
<p>查看电脑属性，可以看到<code>ws20</code>节点已经加入域</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210162246204.png" alt="image-20211210162246204"></p>
<h4 id="节点加入域"><a href="#节点加入域" class="headerlink" title="节点加入域"></a>节点加入域</h4><p>更改<strong>DNS</strong>，设置为域控服务器IP，<code>ws11</code>、<code>ws12</code>、<code>ws13</code>节点均操作</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210163048875.png" alt="image-20211210163048875"></p>
<p>打开<strong>计算机属性</strong>，更改<strong>主机名</strong>并加入<strong>域</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211210163229691.png" alt="image-20211210163229691" style="zoom: 67%;" />

<p>输入<strong>域控服务器</strong>用户名和密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211210163317769.png" alt="image-20211210163317769"></p>
<h3 id="故障转移群集配置"><a href="#故障转移群集配置" class="headerlink" title="故障转移群集配置"></a>故障转移群集配置</h3><h4 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h4><p><code>ws11</code>、<code>ws12</code>、<code>ws13</code>节点均操作</p>
<p>重命名网卡：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101040029.png" alt="image-20211202101040029"></p>
<p><strong>public网卡：</strong></p>
<p>跃点设置为：5</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101150519.png" alt="image-20211202101150519"></p>
<p><strong>pirvate网卡：</strong></p>
<p>设置跃点为：75</p>
<img data-src="https://cdn.jonty.top/img/image-20211210171252768.png" alt="image-20211210171252768" style="zoom:80%;" />

<p>取消DNS注册</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101436509.png" alt="image-20211202101436509"></p>
<p>禁用<strong>NetBIOS</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101526718.png" alt="image-20211202101526718"></p>
<p>查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get-netipinterface</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211202101716057.png" alt="image-20211202101716057"></p>
<h4 id="安装故障转移群集"><a href="#安装故障转移群集" class="headerlink" title="安装故障转移群集"></a>安装故障转移群集</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>3个节点安装故障转移群集</p>
<p>新建角色和功能向导，选择<strong>故障转移群集</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211202102733214.png" alt="image-20211202102733214" style="zoom:80%;" />



<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>服务器管理器面板 -&gt; 工具，打开故障转移群集管理器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103144127.png" alt="image-20211202103144127"></p>
<p>选择<strong>创建群集</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211102905894.png" alt="image-20211211102905894"></p>
<p>把3个节点都加入<strong>群集</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103337978.png" alt="image-20211202103337978"></p>
<p>可以选择是否要运行测试</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104126258.png" alt="image-20211202104126258"></p>
<p>配置集群地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104427813.png" alt="image-20211202104427813"></p>
<p>查看群集状态</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211105749127.png" alt="image-20211211105749127"></p>
<p>DNS中已经添加了群集的解析：</p>
<img data-src="https://cdn.jonty.top/img/image-20211211152156209.png" alt="image-20211211152156209" style="zoom:80%;" />



<h4 id="仲裁配置"><a href="#仲裁配置" class="headerlink" title="仲裁配置"></a>仲裁配置</h4><p>可以看到，群集的见证是没有的：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151112296.png" alt="image-20211211151112296"></p>
<p>添加一个<strong>共享文件夹</strong>做仲裁文件夹：ws20节点</p>
<blockquote>
<p>关于仲裁：<a href="https://www.cnblogs.com/ljhdo/p/5652643.html">https://www.cnblogs.com/ljhdo/p/5652643.html</a></p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151229090.png" alt="image-20211211151229090"></p>
<p><strong>配置仲裁</strong></p>
<p>右键群集，选择更多操作，点击配置群集仲裁设置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151321318.png" alt="image-20211211151321318"></p>
<p>选择仲裁见证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151409823.png" alt="image-20211211151409823"></p>
<p>选择使用共享文件见证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151444295.png" alt="image-20211211151444295"></p>
<p>选择在<code>ws20</code>节点配置的共享文件夹</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211151519725.png"></p>
<p>默认下一步，安装</p>
<p>安装完成后可以看到<strong>文件共享见证</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211151616739.png" alt="image-20211211151616739" style="zoom:80%;" />



<h3 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h3><h4 id="添加域用户"><a href="#添加域用户" class="headerlink" title="添加域用户"></a>添加域用户</h4><p>在<code>AD</code>中添加一个<strong>域用户</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211151936934.png" alt="image-20211211151936934" style="zoom:80%;" />

<img data-src="https://cdn.jonty.top/img/image-20211211151914110.png" alt="image-20211211151914110" style="zoom:80%;" />

<p>其他三个节点均添加此<strong>域用户</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211152039971.png" alt="image-20211211152039971" style="zoom:80%;" />



<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p><strong>3节点均需安装</strong></p>
<p>选择<strong>全新安装</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211162839680.png" alt="image-20211211162839680" style="zoom:80%;" />



<p><strong>选择安装功能</strong></p>
<p>根据实际需求选择安装功能，数据库引擎服务是必须的</p>
<img data-src="https://cdn.jonty.top/img/image-20211211163624854.png" alt="image-20211211163624854" style="zoom:80%;" />



<p><strong>实例配置</strong>：</p>
<p>三节点均使用默认实例配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211211171142018.png" alt="image-20211211171142018" style="zoom:80%;" />

<p><strong>服务器配置</strong></p>
<p>使用<strong>域用户</strong>登录</p>
<img data-src="https://cdn.jonty.top/img/image-20211211173957657.png" alt="image-20211211173957657" style="zoom:80%;" />

<p><strong>数据库引擎配置</strong></p>
<p>服务器配置：选择混合模式登录，管理员添加<strong>本机管理员</strong>以及<strong>域用户</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211174318402.png" alt="image-20211211174318402" style="zoom:80%;" />

<p>数据目录：</p>
<p>可以自定义数据文件存储位置</p>
<img data-src="https://cdn.jonty.top/img/image-20211211174423423.png" alt="image-20211211174423423" style="zoom:80%;" />

<p>TempDB:</p>
<p>将TempDB的初始大小可以按实际需求设置初始大小</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211211174540873.png" alt="image-20211211174540873"></p>
<p><strong>安装</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211211174914993.png" alt="image-20211211174914993" style="zoom:80%;" />



<img data-src="C:/Users/JontyWong/AppData/Roaming/Typora/typora-user-images/image-20211212144604044.png" alt="image-20211212144604044" style="zoom:80%;" />

<h3 id="Always-On-配置"><a href="#Always-On-配置" class="headerlink" title="Always On 配置"></a>Always On 配置</h3><h4 id="启用AlwaysOn"><a href="#启用AlwaysOn" class="headerlink" title="启用AlwaysOn"></a>启用AlwaysOn</h4><p>打开配置管理器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212150735055.png" alt="image-20211212150735055"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212150811047.png" alt="image-20211212150811047"></p>
<blockquote>
<p>注意：开启后重启<code>SQL Server</code>服务，三个节点都需要打开。</p>
</blockquote>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>连接到3个节点的<strong>数据库</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212152510363.png" alt="image-20211212152510363"></p>
<p>创建2个测试数据库：ws21节点</p>
<img data-src="https://cdn.jonty.top/img/image-20211212152847643.png" alt="image-20211212152847643" style="zoom:80%;" />

<p>创建测试数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use jontydb</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Employee (id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty1&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty3&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;jonty4&#x27;</span>)</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Employee</span><br></pre></td></tr></table></figure>

<h4 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h4><p>对新建的2个数据库进行<strong>全备</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212153406168.png" alt="image-20211212153406168"></p>
<p>备份类型选择<strong>完整</strong></p>
<p><strong>介质选项</strong>和<strong>备份选项</strong>按需求配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211212153551144.png" alt="image-20211212153551144" style="zoom:80%;" />

<p>可以配置备份文件存放位置，方便管理</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212153700280.png" alt="image-20211212153700280"></p>
<h4 id="新建可用性组"><a href="#新建可用性组" class="headerlink" title="新建可用性组"></a>新建可用性组</h4><p>右键AlwaysOn高可用性，选择向导</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154002973.png" alt="image-20211212154002973"></p>
<p>可用性组名称，勾选<strong>数据库级别运行状况检测</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154121519.png" alt="image-20211212154121519"></p>
<p>选择要添加到可用性组的数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154200085.png" alt="image-20211212154200085"></p>
<p><strong>指定副本</strong></p>
<p>点击添加副本，将<code>ws12</code>、<code>ws13</code>节点添加为副本，并设置<strong>自动故障转移</strong>和<strong>可读辅助副本</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154308677.png" alt="image-20211212154308677"></p>
<p><strong>端点</strong></p>
<p>使用<strong>私有网卡</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154626198.png" alt="image-20211212154626198"></p>
<p><strong>备份首选项</strong></p>
<p>选择<strong>任意副本</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212154745535.png" alt="image-20211212154745535"></p>
<p><strong>侦听器</strong>和<strong>只读路由</strong>稍后配置。</p>
<p><strong>数据同步</strong></p>
<p>选择<code>完整的数据库和日志备份</code>，这里在<strong>域服务器</strong>创建了一个共享目录，可使用<strong>备份服务器</strong>同步</p>
<img data-src="https://cdn.jonty.top/img/image-20211212155405079.png" alt="image-20211212155405079" style="zoom:80%;" />

<p><strong>验证</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212155537431.png" alt="image-20211212155537431"></p>
<p>运行下一步，完成配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211212155658350.png" alt="image-20211212155658350" style="zoom:80%;" />

<p>查看是否配置成功：</p>
<p>辅助节点的数据库已经同步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212155829069.png" alt="image-20211212155829069"></p>
<h4 id="创建侦听器"><a href="#创建侦听器" class="headerlink" title="创建侦听器"></a>创建侦听器</h4><p><img data-src="https://cdn.jonty.top/img/image-20211212160001906.png" alt="image-20211212160001906"></p>
<p><strong>DNS</strong>中可以看到侦听器已经添加进去了</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212160106551.png" alt="image-20211212160106551"></p>
<h4 id="面板查看"><a href="#面板查看" class="headerlink" title="面板查看"></a>面板查看</h4><p><img data-src="https://cdn.jonty.top/img/image-20211212160409506.png" alt="image-20211212160409506"></p>
<h4 id="连接可用性组"><a href="#连接可用性组" class="headerlink" title="连接可用性组"></a>连接可用性组</h4><p>使用创建的<strong>侦听器地址</strong>连接</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212160541634.png"></p>
<h4 id="测试可用性组"><a href="#测试可用性组" class="headerlink" title="测试可用性组"></a>测试可用性组</h4><p>在<code>ws11</code>节点插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Employee</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@SERVERNAME</span>  <span class="comment">-- ws11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;always on&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211212161052133.png" alt="image-20211212161052133"></p>
<p>在<strong>其他副本</strong>查看是否同步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212161020941.png" alt="image-20211212161020941"></p>
<h4 id="故障转移测试"><a href="#故障转移测试" class="headerlink" title="故障转移测试"></a>故障转移测试</h4><p>使用<code>host</code>机器连接到<strong>可用性组</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@SERVERNAME</span>  <span class="comment">-- 查看当前主机</span></span><br></pre></td></tr></table></figure>

<p>当前主节点为：<code>ws11</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212165938337.png" alt="image-20211212165938337"></p>
<p>将<code>ws11</code>节点关闭</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170052511.png" alt="image-20211212170052511"></p>
<p>测试查询：</p>
<p>可以看到主节点已经转移到<code>ws12</code>，<code>Always on</code>已经自动故障转移切换</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170210354.png" alt="image-20211212170210354"></p>
<p>我们在<code>ws12</code>节点添加几条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;restart always on&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;restart always on2&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;restart always on3&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>重新启动<code>ws11</code>节点，查看<strong>副本数据</strong>是否同步</p>
<p>节点已经恢复</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170749810.png" alt="image-20211212170749810"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212170836596.png" alt="image-20211212170836596"></p>
<p>查看故障节点<code>ws11</code>的数据，可以看到已经恢复同步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212171600016.png" alt="image-20211212171600016"></p>
<h4 id="手动故障转移"><a href="#手动故障转移" class="headerlink" title="手动故障转移"></a>手动故障转移</h4><p>我们把<code>ws11</code>节点关闭后，<code>Always on</code>自动故障转移，现在主节点:<code>ws12</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212171840132.png" alt="image-20211212171840132"></p>
<p>我们可以手动切换回<code>ws11</code>节点，右键可用性组，选择故障转移</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212171923827.png" alt="image-20211212171923827"></p>
<p>选择<code>ws11</code>为新的主副本</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172025348.png" alt="image-20211212172025348"></p>
<p>完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172103932.png" alt="image-20211212172103932"></p>
<p>刷新可用性组，可以看到已经切换到<code>ws11</code>节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172120377.png" alt="image-20211212172120377"></p>
<h3 id="读写分离-amp-负载均衡"><a href="#读写分离-amp-负载均衡" class="headerlink" title="读写分离 &amp; 负载均衡"></a>读写分离 &amp; 负载均衡</h3><h4 id="配置可读辅助副本"><a href="#配置可读辅助副本" class="headerlink" title="配置可读辅助副本"></a>配置可读辅助副本</h4><img data-src="https://cdn.jonty.top/img/image-20211212173349400.png" alt="image-20211212173349400" style="zoom:80%;" />



<h4 id="查看路由配置"><a href="#查看路由配置" class="headerlink" title="查看路由配置"></a>查看路由配置</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> master.sys.availability_replicas  <span class="comment">-- 查看可用性副本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看路由</span></span><br><span class="line"><span class="keyword">SELECT</span> ar.replica_server_name ,</span><br><span class="line">rl.routing_priority ,</span><br><span class="line">( <span class="keyword">SELECT</span> ar2.replica_server_name</span><br><span class="line"><span class="keyword">FROM</span> sys.availability_read_only_routing_lists rl2</span><br><span class="line"><span class="keyword">JOIN</span> sys.availability_replicas <span class="keyword">AS</span> ar2 <span class="keyword">ON</span> rl2.read_only_replica_id</span><br><span class="line"><span class="operator">=</span> ar2.replica_id</span><br><span class="line"><span class="keyword">WHERE</span> rl.replica_id <span class="operator">=</span> rl2.replica_id</span><br><span class="line"><span class="keyword">AND</span> rl.routing_priority <span class="operator">=</span> rl2.routing_priority</span><br><span class="line"><span class="keyword">AND</span> rl.read_only_replica_id <span class="operator">=</span> rl2.read_only_replica_id</span><br><span class="line">) <span class="keyword">AS</span> <span class="string">&#x27;read_only_replica_server_name&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.availability_read_only_routing_lists rl</span><br><span class="line"><span class="keyword">JOIN</span> sys.availability_replicas <span class="keyword">AS</span> ar <span class="keyword">ON</span> rl.replica_id <span class="operator">=</span> ar.replica_id</span><br></pre></td></tr></table></figure>

<p>配置可用性组时没有配置路由：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212163928361.png" alt="image-20211212163928361"></p>
<h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立读指针，为当前主节点上每个副本创建副本对应的TCP连接</span></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws11&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(SECONDARY_ROLE (READ_ONLY_ROUTING_URL <span class="operator">=</span> N<span class="string">&#x27;TCP://ws11.jonty.com:1433&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws12&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(SECONDARY_ROLE (READ_ONLY_ROUTING_URL <span class="operator">=</span> N<span class="string">&#x27;TCP://ws12.jonty.com:1433&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws13&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(SECONDARY_ROLE (READ_ONLY_ROUTING_URL <span class="operator">=</span> N<span class="string">&#x27;TCP://ws13.jonty.com:1433&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 配置只读路由副本</span></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws11&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST<span class="operator">=</span>((<span class="string">&#x27;ws12&#x27;</span>,<span class="string">&#x27;ws13&#x27;</span>),<span class="string">&#x27;ws11&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws12&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST<span class="operator">=</span>((<span class="string">&#x27;ws11&#x27;</span>,<span class="string">&#x27;ws13&#x27;</span>),<span class="string">&#x27;ws12&#x27;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [jontyag1]</span><br><span class="line">MODIFY REPLICA <span class="keyword">ON</span></span><br><span class="line">N<span class="string">&#x27;ws13&#x27;</span> <span class="keyword">WITH</span></span><br><span class="line">(PRIMARY_ROLE (READ_ONLY_ROUTING_LIST<span class="operator">=</span>((<span class="string">&#x27;ws11&#x27;</span>,<span class="string">&#x27;ws12&#x27;</span>),<span class="string">&#x27;ws13&#x27;</span>)));</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211212164241842.png" alt="image-20211212164241842"></p>
<p>查看可用性组属性：</p>
<p>可以看到路由已经配置完成，可以按照需求更改</p>
<img data-src="https://cdn.jonty.top/img/image-20211212164327405.png" alt="image-20211212164327405" style="zoom:80%;" />



<p>测试：</p>
<p>可以看到查询的主机是在两个副本直接切换的，实现<strong>读均衡</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sqlcmd <span class="operator">-</span>S agvip1 <span class="operator">-</span>K ReadOnly <span class="operator">-</span>d jontydb <span class="operator">-</span>Q &quot;select @@servername&quot;</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211212165124505.png" alt="image-20211212165124505" style="zoom:80%;" />



<h4 id="测试写入操作"><a href="#测试写入操作" class="headerlink" title="测试写入操作"></a>测试写入操作</h4><p>手动连接到<code>ws12</code>只读节点，执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use employeedb</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee <span class="keyword">values</span>(<span class="string">&#x27;read only&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到，只读节点是不允许插入数据的</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211212172911057.png" alt="image-20211212172911057"></p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><ul>
<li>本文是使用1个域控服务+3节点配置<code>AlwaysOn</code>高可用性组，基于<code>Win Server2019</code>环境。</li>
</ul>
<blockquote>
<p>如果域控服务器挂了那不是就挂了？</p>
</blockquote>
<p>这个时候又可以考虑再添加一个域控，用双域，域弄一个备份域。</p>
<p>域控服务器挂了 只是用户认证有问题，不影响 集群</p>
<ul>
<li><p>3节点情况下配置了读写分离实现负载均衡，2节点则不必要，保证故障转移即可。</p>
</li>
<li><p>在写这篇教程之前配置了无域控双节点AlwaysOn，大概讲一下思路</p>
<p>双节点安装DNS,添加解析(相互配置包括本机)，参考博客：<a href="https://www.cnblogs.com/DragonStart/p/8275182.html">https://www.cnblogs.com/DragonStart/p/8275182.html</a></p>
</li>
</ul>
<p>​        后续安装故障转移群集和AlwaysOn配置操作都差不多。</p>
<ul>
<li>添加新的节点，把之前节点做的操作执行一遍，包括配置DNS、加入域、加入群集，安装数据库、打开AlwaysOn，然后就是可用性组添加副本。</li>
<li>删除副本、可用性组，直接右键删除就好。</li>
<li>添加新的数据库到可用性组，记得全备。</li>
</ul>
<p>AlwaysOn 到此结束</p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>SQL Server</tag>
        <tag>AlwaysOn</tag>
        <tag>HA高可用</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本操作</title>
    <url>/2021/12/05/getting-started-with-git/</url>
    <content><![CDATA[<h1 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h1><p>下面对工作中涉及到的git命令做分类总结，都是最常用的。</p>
<h2 id="git本地管理"><a href="#git本地管理" class="headerlink" title="git本地管理"></a>git本地管理</h2><blockquote>
<p>git最基本的一些操作</p>
</blockquote>
<p>git init：将某目录变成git可以管理的仓库（添加.git目录）</p>
<p>git commit -m “…”:一次性提交多个文件（add进来的文件）</p>
<p>git add xxx.md:可以多次添加多个不同文件</p>
<p>git status:可以时刻掌握仓库当前的状态</p>
<p>git diff:显示具体修改的内容（与提交进去的文件相比）</p>
<p>git log：显示从最近到最远的提交日志，加上–pretty=oneline参数可以将每次提交信息压缩成一行,最前边的数字加字母是指每次commit的commit-id,是16进制的表示形式</p>
<p>.gitignore文件：包括git需要忽略提交的文件名，此文件也需要提交到git</p>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><blockquote>
<p>世界上是有后悔药的</p>
</blockquote>
<p>git reset –hard HEAD^:回退到上个版本（上上个版本HEAD^^,上100个版本是HEAD~100。HEAD是指向当前版本的指针，因此可以通过调整HEAD来在历史版本间穿梭）</p>
<p>git reset –hard commmitid：在没有关闭上次回退时的命令窗口时，可以取消回退。commitid没必要写全，git可以自己去找</p>
<p>git reflog:可以显示每一次commit和回退的id号，如果命令窗口关闭，可以用此命令先找到commitid，然后用上个命令取消回退</p>
<p>git checkout – file：撤销在工作区对file做的修改，包括撤销对file文件的删除</p>
<p>git reset HEAD file &amp; git checkout – file：对file的修改已被add到stage，用前者删除add到stage的修改，再用后者撤销工作区的修改</p>
<p>git reset –hard HEAD^ :已经将想撤销的修改添加到了版本库，但还未提交到远程库。用版本回退撤销修改</p>
<p>git rm file&amp;git commit -m “delete file”：删除已添加到版本库的文件</p>
<p>git checkout:用版本库里的文件版本替换工作区的文件版本（一键还原）</p>
<h2 id="远程库连接"><a href="#远程库连接" class="headerlink" title="远程库连接"></a>远程库连接</h2><blockquote>
<p>连接远程库，进一步实现团队协作。</p>
</blockquote>
<p>git remote:查看远程库信息，详细信息加上-v选项</p>
<p>git remote add origin <a href="mailto:&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109;</a>:Summyj/xxx.git：将本地git仓库与github远程库想关联,也可以是其它库，远程库默认名字是origin，也可以设为其它，比如github</p>
<p>git push -u origin xxx:把本地仓库指定分支·内容推送到远程，下次推送可以不用-u参数<br>因为第一次推送master分支时如果加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，所以在以后的推送或者拉取时就可以简化命令。</p>
<p>git clone <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;">&#x67;&#x69;&#x74;&#x40;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#x6f;&#109;</a>:xxx/xxx.git:从远程仓库克隆到本地，后边是地址</p>
<p>git remotr rm origin:删除本地库关联的origin远程库</p>
<h2 id="分支创建管理"><a href="#分支创建管理" class="headerlink" title="分支创建管理"></a>分支创建管理</h2><blockquote>
<p>实现更安全便捷的版本控制。</p>
</blockquote>
<p>git checkout -b xxx:git check命令加上-b参数表示创建并切换到xxx分支，此命令相当于两条命令：</p>
<ul>
<li>git branch xxx</li>
<li>git checkout xxx</li>
</ul>
<p>git branch:查看当前分支（列出所有分支，当前分支前边会标有*号）</p>
<p>git merge xxx:将指定分支xxx合并到当前分支,首先要切换到当前分支（不一定是master分支）</p>
<p>git branch -d xxx:删除某分支（合并后再删除）</p>
<p>git branch -D xxx:强行删除某个没有被合并的分支</p>
<p>git log –graph –pretty=oneline –abbrev-commit：用分支图展示各分支合并情况（或者直接git log –graph，但这将会显示所有历史合并图）</p>
<p>git merge –no-ff -m “…” xxx:禁用git合并时默认的fast-forward模式，生成新的commit加入分支信息。-m后的内容就是合并信息</p>
<h2 id="工作现场存储"><a href="#工作现场存储" class="headerlink" title="工作现场存储"></a>工作现场存储</h2><blockquote>
<p>版本控制的freestyle.</p>
</blockquote>
<p>git stash:将当前工作现场储藏起来，等以后恢复现场后继续工作</p>
<p>git stash list:查看储藏的工作现场</p>
<p>git stash apply:回复储藏的工作现场</p>
<p>git stash apply stash@{x}有多个stash时恢复指定的stash</p>
<p>git stash drop:恢复现场并删除stash list的内容，如果有多个stash,默认恢复的是最新的stash.</p>
<h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><blockquote>
<p>小伙伴们的友情</p>
</blockquote>
<p>git checkout -b xxx origin/xxx:刚从远程库克隆到本地时只有master分支，用此命令创建和远程分支对应的分支</p>
<p>git pull:多人协作时，远程分支比本地分支更新导致推送失败，用此命令从远程库抓取该分支最新的提交并和本地分支进行合并，合并有冲突需要手动解决</p>
<p>git branch –set-upstream xxx origin/xxx:git pull失败时需要创建本地分支和远程分支的关联</p>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><blockquote>
<p>更方便进行版本控制，与commit id相比更好记。相当于版本库的一个快照。</p>
</blockquote>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。与HEAD指针相比，后者可以移动，但标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<p>git tag xxx:打标签</p>
<p>git tag v0.3 646123:将commit id为646123的提交打上v0.3标签。这样可以解决忘记打标签的问题</p>
<p>git tag:查看所有标签（按字母排序，而并非时间）</p>
<p>git show tagname:查看标签信息（包括说明文字）</p>
<p>git tag -a v0.x -m “…” 615465:创建带有说明的标签，用-a指定标签名，-m指定说明文字</p>
<p>git tag -d xxx:删除指定标签（因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。）</p>
<p>git push origin tagname:推送标签到远程</p>
<p>git push origin –tags:一次性推送全部尚未推送到远程的本地标签</p>
<p>git tag -d tagname &amp; git push origin :refs/tags/tagname:删除已推送到远程库的标签，先从本地删除，再从远程删除</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Share</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server故障转移集群 - 02</title>
    <url>/2021/12/02/sqlserver-ha-02/</url>
    <content><![CDATA[<h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><table>
<thead>
<tr>
<th>节点</th>
<th>public ip</th>
<th>private ip</th>
<th>域名</th>
<th>配置</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>ws21</td>
<td>192.168.1.21</td>
<td>10.10.10.21</td>
<td>ws21.gctsql.com</td>
<td>4G 2C 100G</td>
<td></td>
</tr>
<tr>
<td>ws22</td>
<td>192.168.1.22</td>
<td>10.10.10.22</td>
<td>ws22.gctsql.com</td>
<td>4G 2C 100G</td>
<td></td>
</tr>
<tr>
<td>ws30</td>
<td>192.168.1.30</td>
<td>10.10.10.30</td>
<td>ws30.gctsql.com</td>
<td>4G 2C 100G + 200G(数据盘)</td>
<td></td>
</tr>
<tr>
<td>集群IP</td>
<td>192.168.1.25</td>
<td></td>
<td>gctcluster</td>
<td></td>
<td></td>
</tr>
<tr>
<td>DTC</td>
<td>192.168.1.26</td>
<td></td>
<td></td>
<td></td>
<td>分布式事务协调器</td>
</tr>
<tr>
<td>VIP</td>
<td>192.168.1.27</td>
<td></td>
<td>gctvip</td>
<td></td>
<td>访问IP</td>
</tr>
</tbody></table>
<h3 id="配置共享存储"><a href="#配置共享存储" class="headerlink" title="配置共享存储"></a>配置共享存储</h3><p>共享磁盘</p>
<table>
<thead>
<tr>
<th>磁盘</th>
<th>盘符</th>
<th>大小</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>data1</td>
<td>S</td>
<td>50G</td>
<td></td>
</tr>
<tr>
<td>data2</td>
<td>T</td>
<td>50G</td>
<td></td>
</tr>
<tr>
<td>log</td>
<td>L</td>
<td>10G</td>
<td>分布式事务协调器使用</td>
</tr>
<tr>
<td>qdisk</td>
<td>Q</td>
<td>5G</td>
<td>仲裁盘</td>
</tr>
</tbody></table>
<h4 id="添加硬盘"><a href="#添加硬盘" class="headerlink" title="添加硬盘"></a>添加硬盘</h4><p><code>ws30</code>节点添加一块<strong>200G</strong>的磁盘用作共享存储</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201185835015.png" alt="image-20211201185835015"></p>
<h4 id="更改虚拟机文件"><a href="#更改虚拟机文件" class="headerlink" title="更改虚拟机文件"></a>更改虚拟机文件</h4><p>在<strong>每个节点</strong>的虚拟机文件下添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">disk.locking = <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure>



<img data-src="https://cdn.jonty.top/img/image-20211201190155960.png" alt="image-20211201190155960" style="zoom:80%;" />



<h4 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h4><p><code>ws30</code>节点</p>
<p>将磁盘初始化</p>
<img data-src="https://cdn.jonty.top/img/image-20211201190818354.png" alt="image-20211201190818354" style="zoom:80%;" />

<p>新建简单卷</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201191011475.png" alt="image-20211201191011475"></p>
<h4 id="添加ISCSI"><a href="#添加ISCSI" class="headerlink" title="添加ISCSI"></a>添加ISCSI</h4><p>打开服务器管理器 选择添加角色和功能</p>
<img data-src="https://cdn.jonty.top/img/image-20211201192103693.png" alt="image-20211201192103693" style="zoom:67%;" />



<p>服务器角色之前一直默认下一步，选择添加<code>ISCSI</code>功能，下一步到<strong>安装</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201192249064.png" alt="image-20211201192249064" style="zoom:80%;" />

<img data-src="https://cdn.jonty.top/img/image-20211201192625843.png" alt="image-20211201192625843" style="zoom:80%;" />



<p>点击<strong>文件和存储服务</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201192744209.png" alt="image-20211201192744209" style="zoom:80%;" />



<h4 id="创建虚拟磁盘"><a href="#创建虚拟磁盘" class="headerlink" title="创建虚拟磁盘"></a>创建虚拟磁盘</h4><p>选择<strong>ISCSI</strong>,点击添加</p>
<img data-src="https://cdn.jonty.top/img/image-20211201192819064.png" alt="image-20211201192819064" style="zoom:80%;" />

<h5 id="step1-存储位置"><a href="#step1-存储位置" class="headerlink" title="step1 存储位置"></a>step1 存储位置</h5><p>选择存储位置为添加的共享存储<code>F:</code>盘，下一步</p>
<img data-src="https://cdn.jonty.top/img/image-20211201192910694.png" alt="image-20211201192910694" style="zoom:80%;" />

<h5 id="step2-磁盘名称"><a href="#step2-磁盘名称" class="headerlink" title="step2 磁盘名称"></a>step2 磁盘名称</h5><img data-src="https://cdn.jonty.top/img/image-20211201193035095.png" alt="image-20211201193035095" style="zoom:80%;" />



<h5 id="step2-磁盘大小"><a href="#step2-磁盘大小" class="headerlink" title="step2 磁盘大小"></a>step2 磁盘大小</h5><p>新建数据盘1，大小50G,选择动态扩展</p>
<img data-src="https://cdn.jonty.top/img/image-20211201193155029.png" alt="image-20211201193155029" style="zoom:80%;" />



<h5 id="step3-新建目标"><a href="#step3-新建目标" class="headerlink" title="step3 新建目标"></a>step3 新建目标</h5><img data-src="https://cdn.jonty.top/img/image-20211201193321361.png" alt="image-20211201193321361" style="zoom:80%;" />



<img data-src="https://cdn.jonty.top/img/image-20211201193348497.png" alt="image-20211201193348497" style="zoom:80%;" />



<h5 id="step4-添加访问服务器"><a href="#step4-添加访问服务器" class="headerlink" title="step4 添加访问服务器"></a>step4 添加访问服务器</h5><img data-src="https://cdn.jonty.top/img/image-20211201193518559.png" alt="image-20211201193518559" style="zoom:80%;" />

<h5 id="step5-验证服务"><a href="#step5-验证服务" class="headerlink" title="step5 验证服务"></a>step5 验证服务</h5><p><strong>不启用</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211201193600540.png" alt="image-20211201193600540" style="zoom:80%;" />



<h5 id="step6-创建"><a href="#step6-创建" class="headerlink" title="step6 创建"></a>step6 创建</h5><img data-src="https://cdn.jonty.top/img/image-20211201193618040.png" alt="image-20211201193618040" style="zoom:80%;" />



<img data-src="https://cdn.jonty.top/img/image-20211201193625413.png" alt="image-20211201193625413" style="zoom:80%;" />



<p>按照step1 - step6 依次创建：data02|logdisk|qdisk</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201193937062.png" alt="image-20211201193937062"></p>
<h4 id="连接ISCSI"><a href="#连接ISCSI" class="headerlink" title="连接ISCSI"></a>连接ISCSI</h4><p><code>ws21</code>、<code>ws22</code>节点连接共享存储，在管理工具打开<code>ISCSI发起程序</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194248998.png" alt="image-20211201194248998"></p>
<p>系统启动的<code>ISCSI</code>服务</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194354735.png" alt="image-20211201194354735"></p>
<p>目标为<code>ws30</code>节点的<code>private ip</code> ，参考上一篇配置<strong>网卡属性</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194554980.png" alt="image-20211201194554980"></p>
<p>选择卷和设备，点击自动配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201194628569.png" alt="image-20211201194628569"></p>
<p>计算机管理 -&gt; 磁盘管理，可以看到共享磁盘已经挂载</p>
<img data-src="https://cdn.jonty.top/img/image-20211201194955729.png" alt="image-20211201194955729" style="zoom:80%;" />



<p>这时候可以看到<code>ws30</code>节点<code>ISCSI</code>已连接</p>
<img data-src="https://cdn.jonty.top/img/image-20211201195058797.png" alt="image-20211201195058797" style="zoom: 67%;" />

<p><img data-src="https://cdn.jonty.top/img/image-20211201195659064.png" alt="image-20211201195659064"></p>
<h4 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h4><p>在<code>ws21</code>节点操作，先将<code>ws22</code>挂起</p>
<p>磁盘管理</p>
<h5 id="联机"><a href="#联机" class="headerlink" title="联机"></a>联机</h5><p>右键共享的磁盘，点击<strong>联机</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201200524618.png" alt="image-20211201200524618"></p>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p><img data-src="https://cdn.jonty.top/img/image-20211201200623970.png" alt="image-20211201200623970"></p>
<h5 id="新建卷"><a href="#新建卷" class="headerlink" title="新建卷"></a>新建卷</h5><img data-src="https://cdn.jonty.top/img/image-20211201201324395.png" alt="image-20211201201324395" style="zoom:80%;" />

<p><img data-src="https://cdn.jonty.top/img/image-20211201201341777.png" alt="image-20211201201341777"></p>
<p>将<code>ws22</code>节点重启，然后将盘符修改与<code>ws21</code>节点一致</p>
<img data-src="https://cdn.jonty.top/img/image-20211201201927696.png" alt="image-20211201201927696" style="zoom:80%;" />

<p>将两台节点机器重启</p>
<p>查看<code>ws30</code>节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201202418405.png" alt="image-20211201202418405"></p>
<h3 id="配置域环境"><a href="#配置域环境" class="headerlink" title="配置域环境"></a>配置域环境</h3><h4 id="设置网卡DNS"><a href="#设置网卡DNS" class="headerlink" title="设置网卡DNS"></a>设置网卡DNS</h4><p>将<code>ws30</code>节点设为<strong>DNS</strong>服务器，更改为本机IP</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201202650666.png" alt="image-20211201202650666"></p>
<h4 id="添加域服务"><a href="#添加域服务" class="headerlink" title="添加域服务"></a>添加域服务</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>添加角色和功能向导，选择添加<code>Active Directory域服务</code>和<code>DNS</code>服务器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201202841391.png" alt="image-20211201202841391"></p>
<p>安装完成后点击<code>将此服务器提升为域服务器</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201203328080.png" alt="image-20211201203328080"></p>
<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>选择添加<code>新林</code>,自定义一个<code>根域名</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201203602401.png" alt="image-20211201203602401"></p>
<p>设置DNS密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201210755796.png" alt="image-20211201210755796"></p>
<p>下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201210837952.png" alt="image-20211201210837952"></p>
<p>下一步 <code>Net BIOS</code>域名会自动配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201211035339.png" alt="image-20211201211035339"></p>
<p>路径默认 ， 下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201211100277.png" alt="image-20211201211100277"></p>
<p>检查，警告可忽略，点击安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211201211327973.png" alt="image-20211201211327973"></p>
<p>安装完成后会自动重启，并使用域用户登录</p>
<img data-src="https://cdn.jonty.top/img/image-20211202092241661.png" style="zoom:80%;" />

<p>禁用windows更新服务</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202092911752.png" alt="image-20211202092911752"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202093234791.png" alt="image-20211202093234791"></p>
<h4 id="加入域"><a href="#加入域" class="headerlink" title="加入域"></a>加入域</h4><p><code>ws21</code>、<code>ws22</code>节点更改DNS</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202095606856.png" alt="image-20211202095606856"></p>
<p>高级系统设置，更改<strong>计算机域</strong>，需要输入<strong>域服务器</strong><code>ws30</code>服务器的<strong>账号密码</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202095208317.png" alt="image-20211202095208317"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202100254263.png" alt="image-20211202100254263"></p>
<p>两个节点加入域完成后重启，查看是否配置成功：</p>
<p>node<code>ws21</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202100717557.png" alt="image-20211202100717557"></p>
<p>node<code>ws22</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202100757069.png" alt="image-20211202100757069"></p>
<h3 id="安装故障转移集群"><a href="#安装故障转移集群" class="headerlink" title="安装故障转移集群"></a>安装故障转移集群</h3><h4 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a>配置网络</h4><p>节点<code>ws21</code>、节点<code>ws22</code>均配置</p>
<p>重命名网卡</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101040029.png" alt="image-20211202101040029"></p>
<h5 id="配置public网卡"><a href="#配置public网卡" class="headerlink" title="配置public网卡"></a>配置<code>public</code>网卡</h5><p>跃点配置为5</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101150519.png" alt="image-20211202101150519"></p>
<h5 id="配置private网卡"><a href="#配置private网卡" class="headerlink" title="配置private网卡"></a>配置<code>private</code>网卡</h5><p>跃点配置为75</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101314516.png" alt="image-20211202101314516"></p>
<p>取消<code>DNS</code>注册</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101436509.png" alt="image-20211202101436509"></p>
<p>禁用<code>NET BIOS</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101526718.png" alt="image-20211202101526718"></p>
<p>查看</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202101716057.png" alt="image-20211202101716057"></p>
<h4 id="配置故障转移集群"><a href="#配置故障转移集群" class="headerlink" title="配置故障转移集群"></a>配置故障转移集群</h4><h5 id="安装管理工具"><a href="#安装管理工具" class="headerlink" title="安装管理工具"></a>安装管理工具</h5><p>功能，选择故障转移集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202102733214.png" alt="image-20211202102733214"></p>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>打开故障转移集群管理器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103144127.png" alt="image-20211202103144127"></p>
<p>选择验证配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103337978.png" alt="image-20211202103337978"></p>
<p>加入<code>ws21</code>、<code>ws22</code>节点</p>
<p>运行测试：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202103502122.png" alt="image-20211202103502122"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104126258.png" alt="image-20211202104126258"></p>
<p>配置集群地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104427813.png" alt="image-20211202104427813"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202104545164.png" alt="image-20211202104545164"></p>
<p>查看集群状态</p>
<img data-src="https://cdn.jonty.top/img/image-20211202104602813.png" alt="image-20211202104602813" style="zoom:80%;" />



<p><img data-src="https://cdn.jonty.top/img/image-20211202104618644.png" alt="image-20211202104618644"></p>
<p>查看DNS</p>
<img data-src="https://cdn.jonty.top/img/image-20211202104828009.png" alt="image-20211202104828009" style="zoom:67%;" />



<h4 id="配置仲裁"><a href="#配置仲裁" class="headerlink" title="配置仲裁"></a>配置仲裁</h4><p><img data-src="https://cdn.jonty.top/img/image-20211202105123405.png" alt="image-20211202105123405"></p>
<h5 id="配置仲裁选项"><a href="#配置仲裁选项" class="headerlink" title="配置仲裁选项"></a>配置仲裁选项</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202105231712.png" alt="image-20211202105231712"></p>
<h5 id="配置仲裁鉴证"><a href="#配置仲裁鉴证" class="headerlink" title="配置仲裁鉴证"></a>配置仲裁鉴证</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202105316643.png" alt="image-20211202105316643"></p>
<h5 id="选择存储"><a href="#选择存储" class="headerlink" title="选择存储"></a>选择存储</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202105357931.png" alt="image-20211202105357931"></p>
<h4 id="DTC"><a href="#DTC" class="headerlink" title="DTC"></a>DTC</h4><p>分布式事务协调器</p>
<p>右键角色</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105532266.png" alt="image-20211202105532266"></p>
<p>配置访问点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105610048.png" alt="image-20211202105610048"></p>
<p>选择磁盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105640231.png" alt="image-20211202105640231"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202105743893.png" alt="image-20211202105743893"></p>
<h4 id="连接集群"><a href="#连接集群" class="headerlink" title="连接集群"></a>连接集群</h4><p><code>ws22</code>节点连接到集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110245478.png" alt="image-20211202110245478"></p>
<h3 id="安装SQL-Server集群"><a href="#安装SQL-Server集群" class="headerlink" title="安装SQL Server集群"></a>安装SQL Server集群</h3><h4 id="创建域用户"><a href="#创建域用户" class="headerlink" title="创建域用户"></a>创建域用户</h4><p>节点<code>ws21</code>、<code>ws22</code>均添加</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110727927.png" alt="image-20211202110727927"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110800147.png" alt="image-20211202110800147"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202110832905.png" alt="image-20211202110832905"></p>
<p>节点添加用户</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202111030952.png" alt="image-20211202111030952"></p>
<h4 id="安装SQL-Server故障转移集群"><a href="#安装SQL-Server故障转移集群" class="headerlink" title="安装SQL Server故障转移集群"></a>安装SQL Server故障转移集群</h4><p>安装 选择新的SQL Server 故障转移集群</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202152449061.png" alt="image-20211202152449061"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202152922581.png" alt="image-20211202152922581"></p>
<h5 id="功能选择"><a href="#功能选择" class="headerlink" title="功能选择"></a>功能选择</h5><ul>
<li>数据库引擎服务</li>
<li>SQL Server复制</li>
<li>全文和语义提取搜索</li>
<li>Data Quality  Services</li>
<li>Analysis Services</li>
<li>客户端工具连接</li>
<li>客户端工具向后兼容性</li>
<li>客户端工具SDK</li>
<li>SQL 客户端连接SDK</li>
<li>Master Data Services</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153040769.png" alt="image-20211202153040769"></p>
<h5 id="实例配置"><a href="#实例配置" class="headerlink" title="实例配置"></a>实例配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202153359073.png" alt="image-20211202153359073"></p>
<p>默认 下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153438066.png" alt="image-20211202153438066"></p>
<h5 id="磁盘配置"><a href="#磁盘配置" class="headerlink" title="磁盘配置"></a>磁盘配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211202153530002.png" alt="image-20211202153530002"></p>
<h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><p>数据库访问地址：<code>192.168.1.27</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153604512.png" alt="image-20211202153604512"></p>
<h5 id="服务账号"><a href="#服务账号" class="headerlink" title="服务账号"></a>服务账号</h5><p>使用<strong>域账号</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153802375.png" alt="image-20211202153802375"></p>
<h5 id="SQL-引擎"><a href="#SQL-引擎" class="headerlink" title="SQL 引擎"></a>SQL 引擎</h5><p>添加当前账号和<strong>域账号</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202153925390.png" alt="image-20211202153925390"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202154129079.png" alt="image-20211202154129079"></p>
<p>开始安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202154152284.png" alt="image-20211202154152284"></p>
<p>安装完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202155144057.png" alt="image-20211202155144057"></p>
<h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><p>在<code>ws22</code>节点运行SQL Server安装程序</p>
<p>安装 选择向<code>SQL Server</code>故障转移集群添加节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161254273.png" alt="image-20211202161254273"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161846649.png" alt="image-20211202161846649"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161904992.png" alt="image-20211202161904992"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202161935343.png" alt="image-20211202161935343"></p>
<p>输入密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202162029727.png" alt="image-20211202162029727"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202164930282.png" alt="image-20211202164930282"></p>
<h3 id="集群测试"><a href="#集群测试" class="headerlink" title="集群测试"></a>集群测试</h3><p>使用<strong>SSMS</strong>工具连接到数据库</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202165230001.png" alt="image-20211202165230001"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,name <span class="type">varchar</span>(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">&#x27;Jonty&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="string">&#x27;Juila&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>可以看到 DTC、集群、以及VIP 都在<code>ws21</code>节点，我们把<code>ws21</code>节点关闭,然后操作数据库，可以发现数据库已经故障转移到<code>ws22</code>节点</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211202165611603.png" alt="image-20211202165611603"></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>SQL Server</tag>
        <tag>HA高可用</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server故障转移集群 - 01</title>
    <url>/2021/12/02/sqlserver-ha-01/</url>
    <content><![CDATA[<h2 id="安装服务器"><a href="#安装服务器" class="headerlink" title="安装服务器"></a>安装服务器</h2><p>电脑安装<strong>VMware</strong>虚拟机，<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">下载地址</a></p>
<h3 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h3><h4 id="选择自定义"><a href="#选择自定义" class="headerlink" title="选择自定义"></a>选择自定义</h4><p>选择自定义安装向导，点击下一步。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093614132.png" alt="image-20211130093614132"></p>
<h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h4><p>默认兼容性（或者选择VMware对应版本），点击下一步继续。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093715657.png" alt="image-20211130093715657"></p>
<h4 id="系统镜像"><a href="#系统镜像" class="headerlink" title="系统镜像"></a>系统镜像</h4><p>这里选择<strong>稍后</strong>安装操作系统，我们配置完成之后再手动选择<code>系统镜像文件</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093835618.png" alt="image-20211130093835618"></p>
<h4 id="系统类型"><a href="#系统类型" class="headerlink" title="系统类型"></a>系统类型</h4><p>我们安装<code>Windows Server 2019</code>版本的服务器。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130093953176.png" alt="image-20211130093953176"></p>
<h4 id="命名虚拟机"><a href="#命名虚拟机" class="headerlink" title="命名虚拟机"></a>命名虚拟机</h4><p>填写虚拟机名称，建议以<code>主机名+IP</code>，方便区分。选择虚拟机存放路径</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094211240.png" alt="image-20211130094211240"></p>
<h4 id="固件类型"><a href="#固件类型" class="headerlink" title="固件类型"></a>固件类型</h4><p>选择使用<strong>BIOS</strong>启动</p>
<blockquote>
<p>使用UEFI 可能会出现 Time Out …这种情况</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094235421.png" alt="image-20211130094235421"></p>
<h4 id="处理器配置"><a href="#处理器配置" class="headerlink" title="处理器配置"></a>处理器配置</h4><p>处理我们选择1个CPU 2个处理核心</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094440354.png" alt="image-20211130094440354"></p>
<h4 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h4><p>内存配置为<code>4G</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094508709.png" alt="image-20211130094508709"></p>
<h4 id="网络类型"><a href="#网络类型" class="headerlink" title="网络类型"></a>网络类型</h4><p>网络类型根据实际情况来，我这里选择桥接网络，后续需要添加一个网卡。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094611392.png" alt="image-20211130094611392"></p>
<h4 id="I-O控制器类型"><a href="#I-O控制器类型" class="headerlink" title="I/O控制器类型"></a>I/O控制器类型</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094641514.png" alt="image-20211130094641514"></p>
<h4 id="磁盘类型"><a href="#磁盘类型" class="headerlink" title="磁盘类型"></a>磁盘类型</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094700337.png" alt="image-20211130094700337"></p>
<h4 id="磁盘选择"><a href="#磁盘选择" class="headerlink" title="磁盘选择"></a>磁盘选择</h4><p>选择创建新的虚拟磁盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094732722.png" alt="image-20211130094732722"></p>
<h4 id="指定磁盘容量"><a href="#指定磁盘容量" class="headerlink" title="指定磁盘容量"></a>指定磁盘容量</h4><p>磁盘大小配置为：100G</p>
<p>将磁盘存储为单个文件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094803559.png" alt="image-20211130094803559"></p>
<h4 id="指定磁盘文件"><a href="#指定磁盘文件" class="headerlink" title="指定磁盘文件"></a>指定磁盘文件</h4><p>默认，下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094902452.png" alt="image-20211130094902452"></p>
<h4 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h4><p>点击完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130094932549.png" alt="image-20211130094932549"></p>
<h3 id="虚拟机配置"><a href="#虚拟机配置" class="headerlink" title="虚拟机配置"></a>虚拟机配置</h3><h4 id="系统镜像-1"><a href="#系统镜像-1" class="headerlink" title="系统镜像"></a>系统镜像</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130095602092.png" alt="image-20211130095602092"></p>
<h4 id="添加网卡"><a href="#添加网卡" class="headerlink" title="添加网卡"></a>添加网卡</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130095229246.png" alt="image-20211130095229246"></p>
<p>配置第二块网卡的网络连接</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130095303266.png" alt="image-20211130095303266"></p>
<h4 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130095407929.png" alt="image-20211130095407929"></p>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><img data-src="https://cdn.jonty.top/img/image-20211130100913192.png" alt="image-20211130100913192"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130100928792.png" alt="image-20211130100928792"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130100943388.png" alt="image-20211130100943388"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130100953011.png" alt="image-20211130100953011"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101029992.png" alt="image-20211130101029992"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101122829.png" alt="image-20211130101122829"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101144922.png" alt="image-20211130101144922"></p>
<h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p><img data-src="https://cdn.jonty.top/img/image-20211130101330030.png" alt="image-20211130101330030"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130101611447.png" alt="image-20211130101611447"></p>
<ul>
<li>配置IP</li>
<li>更改主机名</li>
<li>关闭防火墙</li>
</ul>
<h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><p>下载安装包到共享文件夹下，在虚拟机中打开安装程序，可以在官网下载适用版本</p>
<p>光盘映像文件需要先解压，解压完后进入目录：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130151655185.png" alt="image-20211130151655185"></p>
<p>运行安装程序：</p>
<p>选择左侧安装，选择全新安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130151740122.png" alt="image-20211130151740122"></p>
<h4 id="产品密钥"><a href="#产品密钥" class="headerlink" title="产品密钥"></a>产品密钥</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130152002424.png" alt="image-20211130152002424"></p>
<h4 id="功能选择"><a href="#功能选择" class="headerlink" title="功能选择"></a>功能选择</h4><p>可以选择安装到D盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130144535838.png" alt="image-20211130144535838"></p>
<ul>
<li>数据库引擎服务</li>
<li>SQL Server 复制</li>
<li>全文和语义提取搜索</li>
<li>Data Quality Services</li>
<li>Analysis Services</li>
<li>客户端工具连接</li>
<li>客户端工具向后兼容性</li>
<li>客户端工具SDK</li>
<li>SQL 客户端连接SDK</li>
<li>Master Data Services</li>
</ul>
<h4 id="实例安装"><a href="#实例安装" class="headerlink" title="实例安装"></a>实例安装</h4><p><img data-src="https://cdn.jonty.top/img/image-20211130145023223.png" alt="image-20211130145023223"></p>
<h4 id="服务器配置-1"><a href="#服务器配置-1" class="headerlink" title="服务器配置"></a>服务器配置</h4><p>更改SQL Server代理 自动启动</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145044256.png" alt="image-20211130145044256"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145110590.png" alt="image-20211130145110590"></p>
<h4 id="数据库引擎配置"><a href="#数据库引擎配置" class="headerlink" title="数据库引擎配置"></a>数据库引擎配置</h4><p>设置密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145258502.png" alt="image-20211130145258502"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130145607022.png" alt="image-20211130145607022"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211130152522168.png" alt="image-20211130152522168"></p>
]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>SQL Server</tag>
        <tag>HA高可用</tag>
      </tags>
  </entry>
  <entry>
    <title>关于闰年那些事</title>
    <url>/2021/11/29/about-leap-year/</url>
    <content><![CDATA[<p>判断某一年是否是闰年几乎是所有编程语言的基础练习题之一，而我们必然也熟知其规则：</p>
<ul>
<li>整除但4不能整除100</li>
<li>整除100又能整除400</li>
</ul>
<blockquote>
<p>这就是俗语中的“四年一闰，百年不闰，四百年再润”，我们当然可以根据这个规则编写程序判断闰年，但你知道为什么这样规定闰年的算法么？</p>
</blockquote>
<hr>
<p>事实上，闰年是为了弥补因人为历法规定，造成的年度天数与地球实际公转周期的时间差而设立的。所以闰年有366天。</p>
<p>那么具体是怎么弥补的呢？</p>
<blockquote>
<p>我们知道，平年一年只有365天，而实际上地球绕太阳的公转周期为365天5小时48分46秒。即一回归年。所以公历的每一年都比回归年短0.2422天，四年累计起来，共短0.9688天。</p>
</blockquote>
<p>大概就是一天，所以为了弥补这一天的时间差。给2月加上1天，就有了闰年。这样一来，每四年里就有一个闰年，3个平年。这就是<strong>四年一闰</strong>。</p>
<p>那么<strong>百年不闰，四百年再闰</strong>又是怎么回事呢？</p>
<blockquote>
<p>是这样的，刚才说四年累计起来的时间差只有0.9688天，这比我们给闰年增加的一天还少0.0312天，所以每四年就会多出0.0312天。这样400年后，就会比实际天数多出3.12天。所以我们必须在这400年中少设3个闰年。这样公历年的平均长度与回归年就近似了。</p>
</blockquote>
<p>那这3个闰年怎么少呢？</p>
<p>很简单，给百年除以400即可，比如2000-2400这400年：</p>
<ul>
<li>2000/400=5</li>
<li>2100/400=5.25</li>
<li>2200/400=5.5</li>
<li>2300/400=5.75</li>
<li>2400/400=6</li>
</ul>
<p>可以发现，正好有3个不能整除的整百年。所以规定年份是整百数的必须是400的倍数才是闰年。这就是百年不闰，四百年才闰的规定。</p>
<p>你明白了吗？</p>
<hr>
<p>当然，根据规则，我们就可以编写代码判断了：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year;</span><br><span class="line">	cin &gt;&gt; year;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (year % <span class="number">100</span> != <span class="number">0</span>)<span class="comment">//1. 能整除4，不能整除100</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((year % <span class="number">100</span>==<span class="number">0</span>) &amp;&amp; (year % <span class="number">400</span>==<span class="number">0</span>))<span class="comment">//2. 能整除100， 又能整除400</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span><span class="comment">//其它情况不是闰年</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;不是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//不能整除4就不是闰年</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;不是闰年\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础入门-01</title>
    <url>/2021/11/28/getting-started-with-docker-01/</url>
    <content><![CDATA[<p><img data-src="https://cdn.jonty.top/img/docker01.png" alt="Docker"></p>
<p>Docker 是一个开源的应用容器引擎，基于 <a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a> 并遵从 Apache2.0 协议开源。</p>
<p>可以让开发者打包应用以及依赖包到一个轻量级、可移植的容器中，然后发布到其他<strong>Linux</strong>系统上，以实现虚拟化。</p>
<p><strong>优点</strong>：</p>
<ul>
<li>快速、一致地交付应用（避免在我的电脑上能运行，你那怎么就报错的情况发生）</li>
<li>响应式部署和扩展</li>
<li>在同一硬件上运行更多工作负载</li>
</ul>
<p>Docker 官网：<a href="https://www.docker.com/">https://www.docker.com</a></p>
<p>GitHub Docker 源码：<a href="https://github.com/docker/docker-ce">https://github.com/docker/docker-ce</a></p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><code>Docker</code>包括三个基本概念：</p>
<ul>
<li><p><strong>镜像</strong>（Image）: Docker镜像（Image）相当于一个<strong>root</strong>文件系统</p>
</li>
<li><p><strong>容器</strong>（Container）: 容器相当于镜像的一个实例，类比面向对象程序中的类和对象一样，镜像是静态的定义，容器是镜像的一个实例。实例（容器）可以被创建、启动、停止、删除。</p>
</li>
<li><p><strong>仓库</strong>（Repository）: 类似于代码仓库git，用于保存镜像</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Docker</th>
<th>OOP</th>
</tr>
</thead>
<tbody><tr>
<td>Container</td>
<td>Object</td>
</tr>
<tr>
<td>Images</td>
<td>Class</td>
</tr>
</tbody></table>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img data-src="https://cdn.jonty.top/img/576507-docker1.png" alt="img"></p>
<table>
<thead>
<tr>
<th>概念</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Images</td>
<td>Docker Images是创建容器的模板</td>
</tr>
<tr>
<td>Container</td>
<td>容器是镜像运行的一个实体。</td>
</tr>
<tr>
<td>Client</td>
<td>客户端通过命令行工具或Desktop等与Docker通信</td>
</tr>
<tr>
<td>Host</td>
<td>宿主（服务器），用于执行Docker守护进程和容器</td>
</tr>
<tr>
<td>Registry</td>
<td>镜像仓库，public/private 仓库</td>
</tr>
<tr>
<td>Machine</td>
<td>命令行工具</td>
</tr>
</tbody></table>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>环境：<code>Centos7.9 </code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128124726295.png" alt="cpu-memery"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a	# 查看机器信息 3.8以上</span><br><span class="line">cat /etc/redhat-release # Linux版本</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128125004040.png" alt="image-20211128125004040"></p>
<h4 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h4><p>可以先检查是否安装过旧版本的<code>Docker</code>，如果安装过则需要先卸载依赖项。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h4 id="配置仓库"><a href="#配置仓库" class="headerlink" title="配置仓库"></a>配置仓库</h4><p>安装<code>yum-utils</code>包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<p>设置仓库：</p>
<ul>
<li><p>官方源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li><p>阿里云：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这里我们使用阿里云的仓库，国内访问比较快。</p>
<h4 id="Docker引擎"><a href="#Docker引擎" class="headerlink" title="Docker引擎"></a>Docker引擎</h4><p>安装<code>Docker Engine</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>启动<code>Docker</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker	# 启动</span><br><span class="line">systemctl stop docker	# 停止</span><br><span class="line">systemctl restart docker	# 重启</span><br></pre></td></tr></table></figure>

<p>配置自启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker.service</span><br><span class="line">sudo systemctl enable containerd.service</span><br></pre></td></tr></table></figure>

<p>禁用则使用<code>disable</code></p>
<p>检查是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local yum.repos.d]# docker -v</span><br><span class="line">Docker version 20.10.8, build 3967b7d</span><br><span class="line">[root@local yum.repos.d]# </span><br></pre></td></tr></table></figure>

<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul>
<li><p>卸载Docker Engine、CLI和Containerd包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li><p>删除所有镜像、容器和卷</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>参考：官方文档<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos</a></p>
</blockquote>
<h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>国内从<code>Docker Hub</code>拉取镜像可能会比较慢，推荐配置国内的镜像加速器</p>
<ul>
<li>科大镜像：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn/</a></li>
<li>网易镜像：<a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com/</a></li>
</ul>
<p>获取个人阿里镜像加速器：</p>
<p>找到<strong>容器镜像服务</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128131145813.png" alt="image-20211128131145813"></p>
<p>镜像工具 =&gt; 镜像加速器</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128131239013.png" alt="image-20211128131239013"></p>
<h4 id="配置镜像加速器"><a href="#配置镜像加速器" class="headerlink" title="配置镜像加速器"></a>配置镜像加速器</h4><p>修改daemon配置文件<code>/etc/docker/daemon.json</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加镜像地址</span></span><br><span class="line"> &quot;registry-mirrors&quot;: [&quot;https://yoursId.mirror.aliyuncs.com&quot;]</span><br><span class="line"> </span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128131513972.png" alt="image-20211128131513972"></p>
<h4 id="检查是否生效"><a href="#检查是否生效" class="headerlink" title="检查是否生效"></a>检查是否生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128133728211.png" alt="image-20211128133728211"></p>
<h3 id="Docker容器使用"><a href="#Docker容器使用" class="headerlink" title="Docker容器使用"></a>Docker容器使用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211128134120395.png" alt="image-20211128134120395" style="zoom:80%;" />

<p>使用 <code>docker [cammand] --help</code>查看命令使用方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --help</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211128134321971.png" alt="image-20211128134321971" style="zoom:80%;" />

<h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p>从镜像仓库拉取镜像</p>
<p>命令：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull  -q nginx  # -q 不输出 </span><br><span class="line">docker images # 查看镜像列表</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128134754794.png" alt="image-20211128134754794"></p>
<h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>启动一个新的容器实例</p>
<p>命令：<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name my_nginx -p 80:80 -d nginx</span><br><span class="line"></span><br><span class="line">[root@local ~]# docker run --name my_nginx -p 80:80 -d nginx</span><br><span class="line">2fc689cc169c994ffec7aeadacbedfc13ff4de540fb3e5e7c85520f2d4da5fde</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<ul>
<li>–name：指定容器的名称</li>
<li>-p：映射的端口</li>
<li>-d : 后台运行</li>
</ul>
<p>浏览器访问我们的容器，可以看到<code>nginx</code>已经启动。</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128135337874.png" alt="image-20211128135337874"></p>
<h4 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h4><p>命令：<code>docker ps [OPTIONS]</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211128135638225.png" alt="image-20211128135638225"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">[root@local ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS         PORTS                               NAMES</span><br><span class="line">2fc689cc169c   nginx     &quot;/docker-entrypoint.…&quot;   6 minutes ago   Up 6 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   my_nginx</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<h4 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h4><p>命令：<code>docker start [OPTIONS] CONTAINER [CONTAINER...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start my_nginx</span><br><span class="line">docker restart my_nginx # 重启容器</span><br></pre></td></tr></table></figure>

<h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop my_nginx # 停止名称为my_nginx的容器</span><br><span class="line">docker stop 2fc689cc169c # container Id</span><br><span class="line"></span><br><span class="line">[root@local ~]# docker stop my_nginx</span><br><span class="line">my_nginx</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker stop --help</span><br><span class="line"></span><br><span class="line">Usage:  docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line">Stop one or more running containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -t, --time int   Seconds to wait for stop before killing it (default 10)</span><br></pre></td></tr></table></figure>

<h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>在正在运行的容器中运行命令</p>
<p>命令：<code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it my_nginx /bin/bash</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128141608965.png" alt="image-20211128141608965"></p>
<p>相当于进入容器内部，一个隔离的<code>Linux</code>系统，使用<code>exit</code>退出</p>
<h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>导出容器镜像文件</p>
<p>命令:<code>docker export [OPTIONS] CONTAINER</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker export my_nginx &gt; my_nginx.tar</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128142032945.png" alt="image-20211128142032945"></p>
<h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><p>导入镜像</p>
<p>命令：<code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]</code></p>
<p>这里我将导出的镜像文件放到<code>win</code>系统中，使用<code>Docker Desktop</code>导入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker import .\my_nginx.tar my_nginx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128142745839.png" alt="image-20211128142745839"></p>
<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>命令:<code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docekr rm my_nginx</span><br></pre></td></tr></table></figure>

<p>可选参数：</p>
<ul>
<li>-f : 强制删除正在运行的容器（不加这个参数则需要先<code>docker stop containerId</code>）</li>
<li>-v : 移除与容器相关的数据卷</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20211128144931845.png" alt="image-20211128144931845"></p>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>命令：<code> docker logs [OPTIONS] CONTAINER</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f -n 100 my_nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>-f : 跟踪日志输出</li>
<li>-n : 从日志末尾显示的行数（默认：全部）</li>
</ul>
<img data-src="https://cdn.jonty.top/img/image-20211128144724047.png" alt="image-20211128144724047" style="zoom:80%;" />



<h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker port  my_nginx</span><br><span class="line">80/tcp -&gt; 0.0.0.0:80</span><br><span class="line">80/tcp -&gt; :::80</span><br><span class="line">[root@local ~]#</span><br></pre></td></tr></table></figure>

<h3 id="Docker-镜像使用"><a href="#Docker-镜像使用" class="headerlink" title="Docker 镜像使用"></a>Docker 镜像使用</h3><p>使用<code>docker run </code>运行容器时，如果在本地没有找到镜像则会自动从<code>Docker Hub</code>拉取镜像。</p>
<img data-src="https://cdn.jonty.top/img/image-20211128145350390.png" alt="image-20211128145350390" style="zoom:80%;" />



<h4 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx         latest    ea335eea17ab   10 days ago    141MB</span><br><span class="line">hello-world   latest    feb5d9fea6a5   2 months ago   13.3kB</span><br></pre></td></tr></table></figure>

<ul>
<li>REPOSITORY : 镜像仓库源（默认：Docker Hub）</li>
<li>TAG ：镜像标签 默认拉取<strong>latest</strong>,可指定版本 <code>docker pull nginx:xxx</code></li>
<li>IMAGE ID : 镜像ID</li>
<li>CREATED : 创建时间</li>
<li>SIZE : 镜像大小</li>
</ul>
<h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><p>命令：<code> docker search [OPTIONS] TERM</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search --limit 10 nginx # 返回10条结果</span><br></pre></td></tr></table></figure>

<img data-src="https://cdn.jonty.top/img/image-20211128150050740.png" alt="image-20211128150050740" style="zoom:80%;" />

<ul>
<li>NAME ： 镜像仓库源名称</li>
<li>DESCRIPTION : 描述</li>
<li>STARS : 点赞数</li>
<li>OFFICIAL : 是否官方发布</li>
<li>AUTOMATED : 自动构建</li>
</ul>
<h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><p>命令：<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx # 拉取默认版本</span><br><span class="line">docker pull nginx:xxx # 拉取指定版本</span><br><span class="line">docker pull -q nginx # 无输出</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">eff15d958d66: Pull complete</span><br><span class="line">1e5351450a59: Pull complete</span><br><span class="line">2df63e6ce2be: Pull complete</span><br><span class="line">9171c7ae368c: Pull complete</span><br><span class="line">020f975acd28: Pull complete</span><br><span class="line">266f639b35ad: Pull complete</span><br><span class="line">Digest: sha256:097c3a0913d7e3a5b01b6c685a60c03632fc7a2b50bc8e35bcaa3691d788226e</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128150647218.png" alt="image-20211128150647218"></p>
<h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>命令：<code> docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi hello-world:latest</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128183009721.png" alt="image-20211128183009721"></p>
<h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>命令：<code>docker build [OPTIONS] PATH | URL | -</code></p>
<img data-src="https://cdn.jonty.top/img/image-20211128191400815.png" alt="image-20211128191400815" style="zoom: 67%;" />



<h4 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h4><p>命令：<code> docker tag SOURCE_IMAGE[:TAG] TARGET_IMAGE[:TAG]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag nginx:latest jontymin/my_nginx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128192133803.png" alt="image-20211128192133803"></p>
<h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><p>仓库（Repository）是集中存放镜像的地方（类比git仓库）</p>
<p><code>Docker</code>官方维护了一个公共仓库，需要注册账号以推送镜像 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<img data-src="https://cdn.jonty.top/img/1578550749282.png" alt="1578550749282" style="zoom:80%;" />

<blockquote>
<p>上图为Docker容器和本地仓库、远程仓库的关系</p>
</blockquote>
<h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login </span><br></pre></td></tr></table></figure>

<ul>
<li>-p : 密码</li>
<li>-u ： 用户名</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@local ~]# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: jontymax</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>

<h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><p>命令 : <code>docker push [OPTIONS] NAME[:TAG]</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push jontymax/my_nginx</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211128215642468.png" alt="image-20211128215642468"></p>
<blockquote>
<p>参考： <a href="https://docs.docker.com/engine/reference/run/">https://docs.docker.com/engine/reference/run/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>RedHat安装Oracle数据库</title>
    <url>/2021/11/09/rhel-install-oracle-11g-r2/</url>
    <content><![CDATA[<p>📢：本文为实操记录，练习环境为RHEL7.6(本地虚拟机)，腾讯云Centos7.6实操安装成功。不正之处望指出。</p>
<p>关于虚拟机安装Linux操作系统,<a href="https://jonty.top/2021/10/27/vmware-install-linux/">点击查看</a></p>
<h2 id="Linux主机配置"><a href="#Linux主机配置" class="headerlink" title="Linux主机配置"></a>Linux主机配置</h2><h3 id="主机名和网络配置"><a href="#主机名和网络配置" class="headerlink" title="主机名和网络配置"></a>主机名和网络配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/hosts</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#OracleBegin##</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#Public IP</span></span></span><br><span class="line">192.168.1.79   orcl79</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#OracleEnd##</span></span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211104095943481.png" alt="image-20211104095943481"></p>
<h3 id="hosts文件配置"><a href="#hosts文件配置" class="headerlink" title="hosts文件配置"></a>hosts文件配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104100304275.png" alt="image-20211104100304275"></p>
<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104100742682.png" alt="image-20211104100742682"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104100906781.png" alt="image-20211104100906781"></p>
<h3 id="SELINUX配置"><a href="#SELINUX配置" class="headerlink" title="SELINUX配置"></a>SELINUX配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211104101228439.png" alt="image-20211104101228439"></p>
<h3 id="挂载镜像"><a href="#挂载镜像" class="headerlink" title="挂载镜像"></a>挂载镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mount /dev/cdrom /mnt</span><br><span class="line">cat &lt;&lt;EOF&gt;/etc/yum.repos.d/local.repo</span><br><span class="line">[local]</span><br><span class="line">name=local</span><br><span class="line">baseurl=file:///mnt</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104101459247.png" alt="image-20211104101459247"></p>
<h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y bc \</span><br><span class="line">binutils \</span><br><span class="line">compat-libcap1 \</span><br><span class="line">compat-libstdc++-33 \</span><br><span class="line">gcc \</span><br><span class="line">gcc-c++ \</span><br><span class="line">elfutils-libelf \</span><br><span class="line">elfutils-libelf-devel \</span><br><span class="line">glibc \</span><br><span class="line">glibc-devel \</span><br><span class="line">ksh \</span><br><span class="line">libaio \</span><br><span class="line">libaio-devel \</span><br><span class="line">libgcc \</span><br><span class="line">libstdc++ \</span><br><span class="line">libstdc++-devel \</span><br><span class="line">libxcb \</span><br><span class="line">libX11 \</span><br><span class="line">libXau \</span><br><span class="line">libXi \</span><br><span class="line">libXtst \</span><br><span class="line">libXrender \</span><br><span class="line">libXrender-devel \</span><br><span class="line">make \</span><br><span class="line">net-tools \</span><br><span class="line">nfs-utils \</span><br><span class="line">smartmontools \</span><br><span class="line">sysstat \</span><br><span class="line">e2fsprogs \</span><br><span class="line">e2fsprogs-libs \</span><br><span class="line">fontconfig-devel \</span><br><span class="line">expect \</span><br><span class="line">unzip \</span><br><span class="line">openssh-clients \</span><br><span class="line">readline* \</span><br><span class="line">psmisc --skip-broken</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104102036281.png" alt="image-20211104102036281"></p>
<p>安装缺少的compat-libstdc++包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh compat-libstdc++-33-3.2.3-72.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -q bc binutils compat-libcap1 compat-libstdc++-33 gcc gcc-c++ elfutils-libelf elfutils-libelf-devel glibc glibc-devel ksh libaio libaio-devel libgcc libstdc++ libstdc++-devel libxcb libX11 libXau libXi libXtst libXrender libXrender-devel make net-tools nfs-utils smartmontools sysstat e2fsprogs e2fsprogs-libs fontconfig-devel expect unzip openssh-clients readline</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104102049805.png" alt="image-20211104102049805"></p>
<h3 id="配置ZeroConf"><a href="#配置ZeroConf" class="headerlink" title="配置ZeroConf"></a>配置ZeroConf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#关闭Zeroconf service的服务守护进程</span></span></span><br><span class="line">systemctl stop avahi-daemon.socket</span><br><span class="line">systemctl stop avahi-daemon.service</span><br><span class="line">systemctl disable avahi-daemon.service</span><br><span class="line">systemctl disable avahi-daemon.socket</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#关闭NOZEROCONF</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysconfig/network</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line">NOZEROCONF=yes</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleEnd</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104103506861.png" alt="image-20211104103506861"></p>
<h3 id="关闭透明大页和numa"><a href="#关闭透明大页和numa" class="headerlink" title="关闭透明大页和numa"></a>关闭透明大页和numa</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/quiet/quiet transparent_hugepage=never numa=off/&#x27; /etc/default/grub</span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104103747755.png" alt="image-20211104103747755"></p>
<h3 id="配置系统参数文件"><a href="#配置系统参数文件" class="headerlink" title="配置系统参数文件"></a>配置系统参数文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#计算shmall和shmmax值</span></span></span><br><span class="line">memTotal=$(grep MemTotal /proc/meminfo | awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">totalMemory=$((memTotal / 2048))</span><br><span class="line">shmall=$((memTotal / 4))</span><br><span class="line">if [ $shmall -lt 2097152 ]; then</span><br><span class="line">  shmall=2097152</span><br><span class="line">fi</span><br><span class="line">shmmax=$((memTotal * 1024 - 1))</span><br><span class="line">if [ &quot;$shmmax&quot; -lt 4294967295 ]; then</span><br><span class="line">  shmmax=4294967295</span><br><span class="line">fi</span><br><span class="line">echo $shmall</span><br><span class="line">echo $shmmax</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#配置系统参数</span></span></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmal&#x27;s Calculation formula: physical memory 8G：(8*1024*1024*1024)/4096=2097152</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#shmmax&#x27;s Calculation formula: physical memory 8G：(8/2)*1024*1024*1024 -1=4294967295</span></span></span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = $shmall  # 单个共享内存段最大值</span><br><span class="line">kernel.shmmax = $shmmax  # 共享内存页数</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#系统参数生效</span></span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/sysctl.conf</span><br><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 4294967295</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kernel.shmall = $shmall  # 单个共享内存段最大值</span><br><span class="line">kernel.shmmax = $shmmax  # 共享内存页数</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211115173131542.png" alt="image-20211115173131542"></p>
<h3 id="配置系统资源限制"><a href="#配置系统资源限制" class="headerlink" title="配置系统资源限制"></a>配置系统资源限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line">oracle soft nofile 16384</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 16384 </span><br><span class="line">oracle hard nproc 16384 </span><br><span class="line">oracle hard memlock 8000000</span><br><span class="line">oracle soft memlock 8000000</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单位kb 略低于内存</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br><span class="line">oracle hard stack 32768</span><br><span class="line">oracle soft nproc 2047 </span><br><span class="line">oracle hard nproc 16384 </span><br><span class="line">oracle hard memlock 8000000</span><br><span class="line">oracle soft memlock 8000000</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleEnd</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;&gt;/etc/pam.d/login</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleBegin</span></span><br><span class="line">session required pam_limits.so </span><br><span class="line">session required /lib64/security/pam_limits.so</span><br><span class="line"><span class="meta">#</span><span class="bash">OracleEnd</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="创建用户和组"><a href="#创建用户和组" class="headerlink" title="创建用户和组"></a>创建用户和组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/groupadd -g 54321 oinstall</span><br><span class="line">/usr/sbin/groupadd -g 54322 dba</span><br><span class="line">/usr/sbin/groupadd -g 54323 oper</span><br><span class="line"></span><br><span class="line">/usr/sbin/useradd -u 54321 -g oinstall -G dba,oper oracle</span><br><span class="line">echo oracle | passwd --stdin oracle</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建Oracle安装目录"><a href="#创建Oracle安装目录" class="headerlink" title="创建Oracle安装目录"></a>创建Oracle安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /u01/app/oracle/product/11.2.0/db</span><br><span class="line">mkdir -p /u01/app/oraInventory</span><br><span class="line">mkdir -p /oradata</span><br><span class="line">chown -R oracle:oinstall /oradata</span><br><span class="line">chown -R oracle:oinstall /u01/app</span><br><span class="line">chmod -R 775 /u01/app</span><br></pre></td></tr></table></figure>

<h3 id="用户环境变量配置"><a href="#用户环境变量配置" class="headerlink" title="用户环境变量配置"></a>用户环境变量配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt;/home/oracle/.bash_profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############OracleBegin#########################</span></span></span><br><span class="line">umask 022</span><br><span class="line">export TMP=/tmp</span><br><span class="line">export TMPDIR=\$TMP</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">export ORACLE_BASE=/u01/app/oracle</span><br><span class="line">export ORACLE_HOME=/u01/app/oracle/product/11.2.0/db</span><br><span class="line">export ORACLE_HOSTNAME=orcl79</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">export TNS_ADMIN=\$ORACLE_HOME/network/admin</span><br><span class="line">export LD_LIBRARY_PATH=\$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export PATH=/usr/sbin:\$PATH</span><br><span class="line">export PATH=\$ORACLE_HOME/bin:\$ORACLE_HOME/OPatch:\$PATH</span><br><span class="line">alias sas=&#x27;sqlplus / as sysdba&#x27;</span><br><span class="line">export PS1=&quot;[\`whoami\`@\`hostname\`:&quot;&#x27;\$PWD]\$ &#x27;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="Oracle软件安装"><a href="#Oracle软件安装" class="headerlink" title="Oracle软件安装"></a>Oracle软件安装</h2><p><a href="https://luciferliu.blog.csdn.net/article/details/118529918">https://luciferliu.blog.csdn.net/article/details/118529918</a></p>
<h3 id="软件包上传"><a href="#软件包上传" class="headerlink" title="软件包上传"></a>软件包上传</h3><p><img data-src="https://cdn.jonty.top/img/image-20211104171706862.png" alt="image-20211104171706862"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104171845746.png" alt="image-20211104171845746"></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>按顺序解压1、2软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -q p13390677_112040_Linux-x86-64_1of7.zip</span><br><span class="line">unzip -q p13390677_112040_Linux-x86-64_2of7.zip</span><br><span class="line"></span><br><span class="line">// 授权soft  to oracle</span><br><span class="line">chown -R oracle:oinstall /soft</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="VNC配置"><a href="#VNC配置" class="headerlink" title="VNC配置"></a>VNC配置</h4><h5 id="安装GNOME桌面"><a href="#安装GNOME桌面" class="headerlink" title="安装GNOME桌面"></a>安装GNOME桌面</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出的组列表里有GNOME Desktop。</span></span><br><span class="line">yum grouplist  </span><br><span class="line"><span class="meta">#</span><span class="bash">安装之</span></span><br><span class="line">yum groupinstall -y &quot;GNOME Desktop&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装完成后，修改默认启动方式为图形化界面</span></span><br><span class="line">systemctl set-default graphical.target  //设置成图形模式 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果要换回来</span> </span><br><span class="line">systemctl set-default multi-user.target  //设置成命令模式 </span><br><span class="line"><span class="meta">#</span><span class="bash">然后重启系统即可</span></span><br></pre></td></tr></table></figure>

<h5 id="安装VNC服务"><a href="#安装VNC服务" class="headerlink" title="安装VNC服务"></a>安装VNC服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install tigervnc-server -y</span><br><span class="line"></span><br><span class="line">rpm -qa|grep tigervnc-server -- 验证是否安装成功</span><br></pre></td></tr></table></figure>

<h5 id="打开VNC服务"><a href="#打开VNC服务" class="headerlink" title="打开VNC服务"></a>打开VNC服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vncserver :1  # 5901</span><br><span class="line"></span><br><span class="line">vncserver -kill :1  # 关闭</span><br><span class="line"></span><br><span class="line">vncpasswd # 重置密码</span><br></pre></td></tr></table></figure>

<p>然后配置好密码使用<code>VNC Viewer</code>连接远程桌面</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211108134312717.png" alt="image-20211108134312717"></p>
<blockquote>
<p>教程 ： <a href="https://blog.csdn.net/nahancy/article/details/86316971">https://blog.csdn.net/nahancy/article/details/86316971</a></p>
<p>VNC下载：链接：<a href="https://pan.baidu.com/s/1fEf87xSB09gWxwswNXFeYw">https://pan.baidu.com/s/1fEf87xSB09gWxwswNXFeYw</a><br>提取码：3w9b </p>
</blockquote>
<h4 id="执行Oracle安装脚本"><a href="#执行Oracle安装脚本" class="headerlink" title="执行Oracle安装脚本"></a>执行Oracle安装脚本</h4><p>进入<code>/soft/database</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./runInstaller -jreLoc /etc/alternatives/jre_1.8.0</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104172834599.png" alt="image-20211104172834599"></p>
<p><strong>安装检查的问题</strong>：</p>
<p>1、must be configured to display at least 256 colors</p>
<p>解决方法：使用oracle用户打开vnserver</p>
<p>2、交换空间需要大于150MB</p>
<p>结局方法：</p>
<p>增加<code>swap</code>分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero of=/home/swapfile bs=1M count=512</span><br><span class="line">mkswap /home/swapfile</span><br><span class="line">swapon /home/swapfile</span><br></pre></td></tr></table></figure>

<p>然后修改 /etc/fstab，加上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> vim /etc/fstab</span><br><span class="line">/home/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure>



<h4 id="配置安全更新"><a href="#配置安全更新" class="headerlink" title="配置安全更新"></a>配置安全更新</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104172939686.png" alt="image-20211104172939686"></p>
<h4 id="下载软件更新"><a href="#下载软件更新" class="headerlink" title="下载软件更新"></a>下载软件更新</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173006944.png" alt="image-20211104173006944"></p>
<h4 id="安装选项"><a href="#安装选项" class="headerlink" title="安装选项"></a>安装选项</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173036634.png" alt="image-20211104173036634"></p>
<h4 id="安装选项-1"><a href="#安装选项-1" class="headerlink" title="安装选项"></a>安装选项</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173111607.png" alt="image-20211104173111607"></p>
<h4 id="数据库版本"><a href="#数据库版本" class="headerlink" title="数据库版本"></a>数据库版本</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173154202.png" alt="image-20211104173154202"></p>
<h4 id="安装位置"><a href="#安装位置" class="headerlink" title="安装位置"></a>安装位置</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173224434.png" alt="image-20211104173224434"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173247574.png" alt="image-20211104173247574"></p>
<h4 id="操作系统组"><a href="#操作系统组" class="headerlink" title="操作系统组"></a>操作系统组</h4><p>默认</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173318474.png" alt="image-20211104173318474"></p>
<h4 id="安装前检查"><a href="#安装前检查" class="headerlink" title="安装前检查"></a>安装前检查</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104173400667.png" alt="image-20211104173400667"></p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh pdksh-5.2.14-37.el5.x86_64.rpm</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104173503682.png" alt="image-20211104173503682"></p>
<p>重新检查</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173621400.png" alt="image-20211104173621400"></p>
<p>等待安装</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173754434.png" alt="image-20211104173754434"></p>
<p><strong>错误解决</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104173840559.png" alt="image-20211104173840559"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">sed -i &#x27;s/^\(\s*\$(MK_EMAGENT_NMECTL)\)\s*$/\1 -lnnz11/g&#x27; $ORACLE_HOME/sysman/lib/ins_emagent.mk</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104174044437.png" alt="image-20211104174044437"></p>
<h4 id="执行配置脚本"><a href="#执行配置脚本" class="headerlink" title="执行配置脚本"></a>执行配置脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - root</span><br><span class="line">/u01/app/oraInventory/orainstRoot.sh</span><br><span class="line">/u01/app/oraInventory/orainstRoot.sh</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104174220290.png" alt="image-20211104174220290"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104174230792.png" alt="image-20211104174230792"></p>
<h4 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104174313280.png" alt="image-20211104174313280"></p>
<p>安装完成后重启主机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>



<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><h4 id="打开监听"><a href="#打开监听" class="headerlink" title="打开监听"></a>打开监听</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle</span><br><span class="line">lsnrctl start</span><br><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104175006137.png" alt="image-20211104175006137"></p>
<h4 id="打开配置工具"><a href="#打开配置工具" class="headerlink" title="打开配置工具"></a>打开配置工具</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LANG=en_US</span><br><span class="line">dbca</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211104175143670.png" alt="image-20211104175143670"></p>
<h4 id="创建数据库-1"><a href="#创建数据库-1" class="headerlink" title="创建数据库"></a>创建数据库</h4><p><img data-src="https://cdn.jonty.top/img/image-20211104175219629.png" alt="image-20211104175219629"></p>
<p>自定义模式</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175242442.png" alt="image-20211104175242442"></p>
<p>实例名</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175309394.png" alt="image-20211104175309394"></p>
<p>EM</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175402390.png" alt="image-20211104175402390"></p>
<p>使用统一密码</p>
<p><code>P@ssw0rd</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175458122.png" alt="image-20211104175458122"></p>
<p>使用建好的数据文件保存地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175606842.png" alt="image-20211104175606842"></p>
<p>关闭闪回和归档</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175643304.png" alt="image-20211104175643304"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175710858.png" alt="image-20211104175710858"></p>
<p>内存分配</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175742728.png" alt="image-20211104175742728"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175807092.png" alt="image-20211104175807092"></p>
<p>字符集配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104175832188.png" alt="image-20211104175832188"></p>
<p>下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190456300.png" alt="image-20211104190456300"></p>
<p>下一步</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190517979.png" alt="image-20211104190517979"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190603367.png" alt="image-20211104190603367"></p>
<p>等待创建完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104190644897.png" alt="image-20211104190644897"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211104194542389.png" alt="image-20211104194542389"></p>
<h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">su <span class="operator">-</span> oracle</span><br><span class="line">sqlplus <span class="operator">/</span> <span class="keyword">as</span> sysdba</span><br><span class="line"></span><br><span class="line">## 重启后启动数据库</span><br><span class="line">startup</span><br><span class="line"></span><br><span class="line">shutdown immediate; # 关闭数据库</span><br><span class="line"></span><br><span class="line">$ echo $ORACLE_SID  <span class="comment">-- 实例ID</span></span><br><span class="line">....                    <span class="comment">--&gt;&gt; Look what you get</span></span><br><span class="line">$ echo $ORACLE_HOME <span class="comment">-- 安装目录</span></span><br><span class="line">....                  </span><br><span class="line">$ ps <span class="operator">-</span>ef <span class="operator">|</span> grep smon    <span class="comment">--&gt;&gt; Look for smon background process which</span></span><br><span class="line">ora_smon_InfraDB        <span class="comment">--&gt;&gt; should include ORACLE_SID in it.</span></span><br><span class="line"></span><br><span class="line">$ ORACLE_SID<span class="operator">=</span>InfraDB    <span class="comment">--&gt;&gt; set to a valid value like these ones.</span></span><br><span class="line">$ ORACLE_HOME<span class="operator">=</span><span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>product<span class="operator">/</span><span class="number">12.2</span><span class="number">.0</span><span class="number">.1</span><span class="operator">/</span>dbhome_1</span><br><span class="line"></span><br><span class="line">$ lsnrctl status        <span class="comment">--&gt;&gt; Look whether listener is ON</span></span><br><span class="line">$ lsnrctl <span class="keyword">start</span>         <span class="comment">--&gt;&gt; If not, then start the listener.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v$database;</span><br><span class="line"></span><br><span class="line">##创建数据库用户</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> test identified <span class="keyword">by</span> test;</span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> test; # RESOURCE</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> session <span class="keyword">to</span> test</span><br><span class="line">conn test<span class="operator">/</span>test</span><br><span class="line"></span><br><span class="line">##创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (id number <span class="keyword">not</span> <span class="keyword">null</span>,name varchar2(<span class="number">100</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;jonty&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211104194801063.png" alt="image-20211104194801063"></p>
<p><strong>注意</strong>：如果执行SQL命令<a href="https://stackoverflow.com/questions/50219312/ora-01034-oracle-not-available">ORA-01034: ORACLE not available</a>，可能是实例ID对不上</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $ORACLE_SID   -- 查看当前实例</span><br><span class="line"></span><br><span class="line">echo $ORACLE_HOME -- 安装目录</span><br><span class="line"></span><br><span class="line">ORACLE_SID=medprodb  -- 设置</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/image-20211108134715074.png" alt="image-20211108134715074"></p>
<h2 id="数据库补丁安装"><a href="#数据库补丁安装" class="headerlink" title="数据库补丁安装"></a>数据库补丁安装</h2><h3 id="上传补丁"><a href="#上传补丁" class="headerlink" title="上传补丁"></a>上传补丁</h3><p>上传PSU文件夹到<code>/soft</code>目录下并解压</p>
<p> p6880880_112000_Linux-x86-64.zip</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211118190817028.png" alt="image-20211118190817028"></p>
<h3 id="关闭数据库服务"><a href="#关闭数据库服务" class="headerlink" title="关闭数据库服务"></a>关闭数据库服务</h3><p>停掉所有数据库服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl stop # 关闭监听</span><br><span class="line"></span><br><span class="line">emctl stop dbconsole; # 关闭EM</span><br><span class="line"></span><br><span class="line">shutdown immediate; # 关闭数据库</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="替换OPatch"><a href="#替换OPatch" class="headerlink" title="替换OPatch"></a>替换OPatch</h3><p>替换<strong>OPatch</strong>工具</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd $ORACLE_HOME</span><br><span class="line">cd /OPatch</span><br><span class="line">./opatch version</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118192559635.png" alt="image-20211118192559635"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv Opatch OPatch_old # 备份</span><br><span class="line">cp -r /soft/Opatch . # 复制</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118193207365.png" alt="image-20211118193207365"></p>
<h3 id="执行补丁脚本"><a href="#执行补丁脚本" class="headerlink" title="执行补丁脚本"></a>执行补丁脚本</h3><p>进入补丁目录</p>
<p>查看<code>README.html</code>文档</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opatch prereq CheckConflictAgainstOHWithDetail -ph ./</span><br><span class="line">opatch apply</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果OPatch failed with error code 73</span></span><br><span class="line">ps -ef|grep smon</span><br><span class="line">kill -9 进程id</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118194022739.png" alt="image-20211118194022739"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">opatch lsinventory # 查看</span><br><span class="line"></span><br><span class="line">cd $ORACLE_HOME/rdbms/admin</span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">startup # 启动</span><br><span class="line">@catbundle.sql psu apply # 执行脚本</span><br><span class="line">@utlrp.sql</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118194940622.png" alt="image-20211118194940622"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211118195242997.png" alt="image-20211118195242997"></p>
<p>重启数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown immediate;</span><br><span class="line">startup;</span><br></pre></td></tr></table></figure>



<h2 id="基础维护"><a href="#基础维护" class="headerlink" title="基础维护"></a>基础维护</h2><h3 id="关闭密码过期"><a href="#关闭密码过期" class="headerlink" title="关闭密码过期"></a>关闭密码过期</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_profiles <span class="keyword">where</span> profile <span class="operator">=</span> <span class="string">&#x27;DEFAULT&#x27;</span>; # 查看</span><br><span class="line"><span class="keyword">alter</span> profile <span class="keyword">default</span> limit PASSWORD_LIFE_TIME UNLIMITED;</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> audit; # 审计</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> audit_trail <span class="operator">=</span> <span class="keyword">none</span> <span class="keyword">scope</span> <span class="operator">=</span> spfile;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> v$datafile; # 查看数据文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> sga; # 查看sga</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> pga; # 查看pga</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> proc; # 进程数</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> <span class="keyword">open</span>; # 游标</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> open_cursors <span class="operator">=</span> <span class="number">2000</span> <span class="keyword">scope</span> <span class="operator">=</span> spfile;</span><br></pre></td></tr></table></figure>



<h3 id="警告日志"><a href="#警告日志" class="headerlink" title="警告日志"></a>警告日志</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> dump</span><br><span class="line">cd <span class="operator">/</span>u01<span class="operator">/</span>app<span class="operator">/</span>oracle<span class="operator">/</span>diag<span class="operator">/</span>rdbms<span class="operator">/</span>orcl<span class="operator">/</span>orcl<span class="operator">/</span>trace</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211118201536713.png" alt="image-20211118201536713"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211118201633885.png" alt="image-20211118201633885"></p>
<h3 id="归档日志"><a href="#归档日志" class="headerlink" title="归档日志"></a>归档日志</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">archive log list;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> recover;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest_size<span class="operator">=</span><span class="number">5</span>g;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_recovery_file_dest <span class="operator">=</span> <span class="string">&#x27;/archive&#x27;</span>;</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line"><span class="keyword">alter</span> database archivelog;</span><br><span class="line">archive log list;</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure>

<p>配置完成后关闭，迁移数据后生产再打开</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line"><span class="keyword">alter</span> database noarchivelog;</span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>;</span><br></pre></td></tr></table></figure>



<p>备份一下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> root用户</span></span><br><span class="line">tar zcvf oracle.tar.gz /u01/app/oracle</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>DBA</category>
      </categories>
      <tags>
        <tag>DBA</tag>
        <tag>Linux</tag>
        <tag>Oracle</tag>
        <tag>RedHat</tag>
      </tags>
  </entry>
  <entry>
    <title>52ABP开发MVC项目</title>
    <url>/2021/11/07/introduction-with-aspNet-core-and-entity-framework-core/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文介绍使用ASP.NET Core、Entity FrameWork Core和<a href="https://www.52abp.com/">52ABP</a>创建WEB.MVC项目。</p>
<p>在本文中将使用以下技术创建一个简单的跨平台<strong>分层</strong>Web应用程序：</p>
<ul>
<li>.NET Core作为基础跨平台应用程序开发框架</li>
<li><a href="https://www.52abp.com/">52ABP</a>作为启动模板和应用程序框架</li>
<li>ASP.NET Core 作为Web框架</li>
<li>Entity FrameWork Core 作为ORM框架</li>
<li>Bootstrap作为HHML和CSS框架</li>
<li>JQuery作为客户端Ajax和DOM库</li>
</ul>
<p>还包括52ABP启动模板中包含的：</p>
<ul>
<li>AutoMapper</li>
<li>分层架构</li>
<li>领域驱动设计(DDD)</li>
<li>依赖注入(DI)</li>
</ul>
<h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul>
<li><p>.NET SDK 5.0</p>
</li>
<li><p>Visual Studio 2019</p>
</li>
<li><p>SQL Server</p>
</li>
</ul>
<h2 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h2><p>使用52abp启动模板(<a href="https://www.52abp.com/Download)%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%90%8D%E4%B8%BA%E2%80%9C**MyPortal**%E2%80%9D%E7%9A%84">https://www.52abp.com/Download)创建一个名为“**MyPortal**”的</a> Web应用程序。</p>
<p><img data-src="https://cdn.jonty.top/img/create-template-program.png"></p>
<p>创建了一个多层架构的解决方案</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106145537934.png" alt="image-20211106145537934"></p>
<p>包括7个以<code>MyPortal</code>开头的项目</p>
<ul>
<li>.Core项目针对领域/业务层（实体、领域服务）</li>
<li>.Application项目是针对应用层的（DTO、应用服务）</li>
<li>.EntityFramework项目用于EFCore集成</li>
<li>.Migrator项目用于迁移数据库</li>
<li>.WebCore用于Web服务公共层</li>
<li>.Web.MVC用于ASP.NET MVC层</li>
<li>.Tests项目用于测试</li>
</ul>
<p>创建数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Add-Migration &#x27;InitialDb&#x27;</span><br><span class="line">Update-Database</span><br></pre></td></tr></table></figure>

<p>运行应用程序</p>
<p>默认账号：admin</p>
<p>密码：bb123456</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106231550438.png" alt="image-20211106231550438"></p>
<p>首页</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106161022373.png" alt="image-20211106161022373"></p>
<h2 id="开发应用程序"><a href="#开发应用程序" class="headerlink" title="开发应用程序"></a>开发应用程序</h2><h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>我们在<strong>Core</strong>层创建一个Task实体</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"><span class="keyword">using</span> Abp.Domain.Entities;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学生表</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Table(<span class="meta-string">&quot;Abp_Student&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Entity</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称最大长度</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> MaxNameLength = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址最大长度</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">int</span> MaxAddressLength = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(MaxNameLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StringLength(MaxAddressLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>Task</code>派生自<code>AuditedEntity</code>,默认情况下包含<code>Id</code>属性为<code>int</code>,也可以指定<code>Entity&lt;TPrimaryKey&gt;</code>来选择不同的<strong>PK</strong>类型</li>
</ul>
<h3 id="将实体添加到DbContext"><a href="#将实体添加到DbContext" class="headerlink" title="将实体添加到DbContext"></a>将实体添加到DbContext</h3><p><code>.EntityFrameWorkCore</code>项目包含一个预定义的<code>DbContext</code>,注册<code>Task</code>实体</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Abp.Zero.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Authorization.Roles;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Authorization.Users;</span><br><span class="line"><span class="keyword">using</span> MyPortal.MultiTenancy;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.EntityFrameworkCore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyPortalDbContext</span> : <span class="title">AbpZeroDbContext</span>&lt;<span class="title">Tenant</span>, <span class="title">Role</span>, <span class="title">User</span>, <span class="title">MyPortalDbContext</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Define a DbSet for each entity of the application */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyPortalDbContext</span>(<span class="params">DbContextOptions&lt;MyPortalDbContext&gt; options</span>)</span></span><br><span class="line"><span class="function">            : <span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建数据库迁移"><a href="#创建数据库迁移" class="headerlink" title="创建数据库迁移"></a>创建数据库迁移</h3><p>创建数据库迁移<code>Abp_Tasks</code>表，选择默认项目<code>.EntityFrameWorkCore</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Add-Migration &#x27;Create_Abp_Tasks&#x27;</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211106210823677.png" alt="image-20211106210823677"></p>
<p>生成的迁移类：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106210905907.png" alt="image-20211106210905907"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Migrations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Migrations</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">CreateStudentTable</span> : <span class="title">Migration</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Up</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            migrationBuilder.CreateTable(</span><br><span class="line">                name: <span class="string">&quot;Abp_Student&quot;</span>,</span><br><span class="line">                columns: table =&gt; <span class="keyword">new</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Id = table.Column&lt;<span class="built_in">int</span>&gt;(type: <span class="string">&quot;uniqueidentifier&quot;</span>, nullable: <span class="literal">false</span>),</span><br><span class="line">                    Name = table.Column&lt;<span class="built_in">string</span>&gt;(type: <span class="string">&quot;nvarchar(50)&quot;</span>, maxLength: <span class="number">50</span>, nullable: <span class="literal">false</span>),</span><br><span class="line">                    Age = table.Column&lt;<span class="built_in">int</span>&gt;(type: <span class="string">&quot;int&quot;</span>, nullable: <span class="literal">false</span>),</span><br><span class="line">                    Address = table.Column&lt;<span class="built_in">string</span>&gt;(type: <span class="string">&quot;nvarchar(200)&quot;</span>, maxLength: <span class="number">200</span>, nullable: <span class="literal">true</span>),</span><br><span class="line">                   </span><br><span class="line">                &#125;,</span><br><span class="line">                constraints: table =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    table.PrimaryKey(<span class="string">&quot;PK_Abp_Student&quot;</span>, x =&gt; x.Id);</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Down</span>(<span class="params">MigrationBuilder migrationBuilder</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            migrationBuilder.DropTable(</span><br><span class="line">                name: <span class="string">&quot;Abp_Student&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>程序包管理控制台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Update-Database</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211106210959548.png" alt="image-20211106210959548"></p>
<p>执行命令后会在<code>SQL Server</code>中创建一个名为<code>52AbpFree_db</code>的数据库，包含定义的实体表和迁移记录</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106211155510.png" alt="image-20211106211155510"></p>
<p>注意：数据库连接字符串在<code>.Web.Mvc</code>项目中的<code>appsettings.json</code>中配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;ConnectionStrings&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;Default&quot;</span>: <span class="string">&quot;Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=52AbpFree_db;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>应用服务层用于向表示层提供逻辑处理，表示层调用应用服务层，并以数据传输对象<code>DTO</code>作为参数，使用领域对象执行业务逻辑，并将<code>DTO</code>返回表示层。</p>
<p>我们在<code>.Application</code> 创建一个<code>StudentAppService</code>和对应的<code>IStudentAppService</code>,以执行相关的应用程序逻辑。</p>
<p>首先定义一个服务接口：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Abp.Application.Services;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 学生应用服务接口</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IStudentAppService</span> : <span class="title">IAsyncCrudAppService</span>&lt;<span class="title">StudentDto</span>, <span class="title">int</span>, <span class="title">PagedStudentResultRequestDto</span>,</span><br><span class="line">        <span class="title">CreateStudentDto</span>, <span class="title">StudentDto</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>定义服务接口不是固定的，但是按照约定，所有的应用服务都应该实现<code>IApplicationService</code>。</p>
<p>并为此定义了以下<code>DTO</code>对象：</p>
<ul>
<li><strong>StudentDto</strong>:用于返回查询</li>
<li><strong>PagedStudentResultRequestDto</strong>：用于分页和搜索过滤</li>
<li><strong>CreateStudentDto</strong>：用于新增或修改</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"><span class="keyword">using</span> Abp.AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students.Dtos</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AutoMap(typeof(Student))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentDto</span>:<span class="title">EntityDto</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(Student.MaxNameLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StringLength(Student.MaxAddressLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"><span class="keyword">using</span> Abp.AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students.Dtos</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">AutoMapTo(typeof(Student))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateStudentDto</span>:<span class="title">EntityDto</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 名称</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">Required</span>]</span><br><span class="line">        [<span class="meta">StringLength(Student.MaxNameLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 年龄</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 地址</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">StringLength(Student.MaxAddressLength)</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Address &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students.Dtos</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PagedStudentResultRequestDto</span> : <span class="title">PagedResultRequestDto</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Keyword &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：[AutoMapFrom]属性用来创建<code>Student</code>=&gt;<code>Dto</code>的<strong>AutoMapper</strong>映射</p>
<p>现在我们可以实现<code>IStudentAppService</code>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services;</span><br><span class="line"><span class="keyword">using</span> Abp.Domain.Repositories;</span><br><span class="line"><span class="keyword">using</span> Abp.Extensions;</span><br><span class="line"><span class="keyword">using</span> Abp.Linq.Extensions;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentAppService</span> : <span class="title">AsyncCrudAppService</span>&lt;<span class="title">Student</span>, <span class="title">StudentDto</span>, <span class="title">int</span>, <span class="title">PagedStudentResultRequestDto</span>, <span class="title">CreateStudentDto</span>, <span class="title">StudentDto</span>&gt;, <span class="title">IStudentAppService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StudentAppService</span>(<span class="params">IRepository&lt;Student, <span class="built_in">int</span>&gt; repository</span>) : <span class="title">base</span>(<span class="params">repository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IQueryable&lt;Student&gt; <span class="title">CreateFilteredQuery</span>(<span class="params">PagedStudentResultRequestDto input</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Repository.GetAll()</span><br><span class="line">                .WhereIf(!input.Keyword.IsNullOrWhiteSpace(), x =&gt; x.Name.Contains(input.Keyword));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>StudentAppService</strong>继承自<strong>AsyncCrudAppService</strong></li>
<li>使用构造函数注入<strong>IRepository</strong></li>
</ul>
<p><strong>AsyncCrudAppService</strong>帮我们实现了基本的增删改查操作：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107101650994.png" alt="image-20211107101650994"></p>
<p>目录结构：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107101751193.png" alt="image-20211107101751193"></p>
<h3 id="学生列表视图"><a href="#学生列表视图" class="headerlink" title="学生列表视图"></a>学生列表视图</h3><h4 id="添加新的菜单项"><a href="#添加新的菜单项" class="headerlink" title="添加新的菜单项"></a>添加新的菜单项</h4><p>在<strong>MyPortal.Web</strong>项目中<code>Startup -&gt; MyPortalNavigationProvider</code>中添加新的菜单项</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Abp.Application.Navigation;</span><br><span class="line"><span class="keyword">using</span> Abp.Authorization;</span><br><span class="line"><span class="keyword">using</span> Abp.Localization;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Authorization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Web.Startup</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> This class defines menus for the application.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyPortalNavigationProvider</span> : <span class="title">NavigationProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">SetNavigation</span>(<span class="params">INavigationProviderContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.Manager.MainMenu</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.About,</span><br><span class="line">                        L(<span class="string">&quot;About&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-info-circle&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Home,</span><br><span class="line">                        L(<span class="string">&quot;HomePage&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-home&quot;</span>,</span><br><span class="line">                        requiresAuthentication: <span class="literal">true</span></span><br><span class="line">                    )</span><br><span class="line">                ).AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Tenants,</span><br><span class="line">                        L(<span class="string">&quot;Tenants&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;Tenants&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-building&quot;</span>,</span><br><span class="line">                        permissionDependency: <span class="keyword">new</span> SimplePermissionDependency(PermissionNames.Pages_Tenants)</span><br><span class="line">                    )</span><br><span class="line">                ).AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Users,</span><br><span class="line">                        L(<span class="string">&quot;Users&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;Users&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-users&quot;</span>,</span><br><span class="line">                        permissionDependency: <span class="keyword">new</span> SimplePermissionDependency(PermissionNames.Pages_Users)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Roles,</span><br><span class="line">                        L(<span class="string">&quot;Roles&quot;</span>),</span><br><span class="line">                        url: <span class="string">&quot;Roles&quot;</span>,</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-theater-masks&quot;</span>,</span><br><span class="line">                        permissionDependency: <span class="keyword">new</span> SimplePermissionDependency(PermissionNames.Pages_Roles)</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                <span class="comment">// 学生列表菜单</span></span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        PageNames.Students, <span class="comment">// 菜单名称</span></span><br><span class="line">                        L(<span class="string">&quot;Students&quot;</span>), <span class="comment">// 显示名称</span></span><br><span class="line">                        url: <span class="string">&quot;Students&quot;</span>, <span class="comment">// Url地址 对应Controller名称</span></span><br><span class="line">                        icon: <span class="string">&quot;fa fa-tasks&quot;</span> <span class="comment">// 图标</span></span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">                .AddItem(</span><br><span class="line">                    <span class="keyword">new</span> MenuItemDefinition(</span><br><span class="line">                        <span class="string">&quot;MultiLevelMenu&quot;</span>,</span><br><span class="line">                        L(<span class="string">&quot;MultiLevelMenu&quot;</span>),</span><br><span class="line">                        icon: <span class="string">&quot;fas fa-circle&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ILocalizableString <span class="title">L</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LocalizableString(name, MyPortalConsts.LocalizationSourceName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="创建Controller和View"><a href="#创建Controller和View" class="headerlink" title="创建Controller和View"></a>创建Controller和View</h4><p>在<strong>Web.MVC</strong>项目下新建新的控制器类<strong>StudentsController</strong>:</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211106222518121.png" alt="image-20211106222518121"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Runtime.CompilerServices;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Abp.Application.Services.Dto;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Controllers;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Web.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentsController</span>: <span class="title">MyPortalControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IStudentAppService _studentAppService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StudentsController</span>(<span class="params">IStudentAppService studentAppService</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _studentAppService = studentAppService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span> =&gt; View();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">EditModal</span>(<span class="params"><span class="built_in">int</span> studentId</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> tenantDto = <span class="keyword">await</span> _studentAppService.GetAsync(<span class="keyword">new</span> EntityDto(studentId));</span><br><span class="line">            <span class="keyword">return</span> PartialView(<span class="string">&quot;_EditModal&quot;</span>, tenantDto);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>StudentsController</strong>继承自<strong>MyPortalControllerBase</strong></li>
<li>**Index()**返回一个视图</li>
</ul>
<p><img data-src="https://cdn.jonty.top/img/image-20211106222653044.png" alt="image-20211106222653044"></p>
<ul>
<li>使用构造函数注入<strong>IStudentAppService</strong></li>
</ul>
<h4 id="学生列表视图-1"><a href="#学生列表视图-1" class="headerlink" title="学生列表视图"></a>学生列表视图</h4><p>学生展示列表如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using MyPortal.Web.Startup</span><br><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = L(&quot;Students&quot;);</span><br><span class="line">    ViewBag.CurrentPageName = PageNames.Students;</span><br><span class="line">&#125;</span><br><span class="line">@section scripts</span><br><span class="line">&#123;</span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">names</span>=<span class="string">&quot;Development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/view-resources/Views/Students/Index.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">names</span>=<span class="string">&quot;Staging,Production&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/view-resources/Views/Students/Index.min.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span>@L(&quot;Students&quot;)<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">data-target</span>=<span class="string">&quot;#StudentCreateModal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue float-sm-right&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus-square&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                    @L(&quot;CreateNewStudent&quot;)</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container-fluid&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-12&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--Use for bulk actions--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6&quot;</span>&gt;</span></span><br><span class="line">                                @await Html.PartialAsync(&quot;~/Views/Students/Index.AdvancedSearch.cshtml&quot;)</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-responsive&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;StudentsTable&quot;</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>@L(&quot;Name&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>@L(&quot;Age&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>@L(&quot;Address&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px&quot;</span>&gt;</span>@L(&quot;Actions&quot;)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@await Html.PartialAsync(&quot;~/Views/Students/_CreateModal.cshtml&quot;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentEditModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;StudentEditModalLabel&quot;</span> <span class="attr">data-backdrop</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们加入了<strong>新增</strong>、<strong>编辑</strong>、<strong>删除</strong>以及<strong>搜索</strong>的按钮，将在后续补充完整</p>
<p>可以看到，我们为此视图引入了对应的<code>js</code>文件，并放在<strong>wwwroot</strong>静态资源目录下</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107104617786.png" alt="image-20211107104617786"></p>
<p>并使用<code>Jquery</code>来渲染我们的表格：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _studentService = abp.services.app.student,</span><br><span class="line">        l = abp.localization.getSource(<span class="string">&#x27;MyPortal&#x27;</span>),</span><br><span class="line">        _$modal = $(<span class="string">&#x27;#StudentCreateModal&#x27;</span>),</span><br><span class="line">        _$form = _$modal.find(<span class="string">&#x27;form&#x27;</span>),</span><br><span class="line">        _$table = $(<span class="string">&#x27;#StudentsTable&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _$studentsTable = _$table.DataTable(&#123;</span><br><span class="line">        <span class="attr">paging</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">serverSide</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">ajax</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data, callback, settings</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> filter = $(<span class="string">&#x27;#StudentSearchForm&#x27;</span>).serializeFormToObject(<span class="literal">true</span>);</span><br><span class="line">            filter.maxResultCount = data.length;</span><br><span class="line">            filter.skipCount = data.start;</span><br><span class="line"></span><br><span class="line">            abp.ui.setBusy(_$table);</span><br><span class="line">            _studentService.getAll(filter).done(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                callback(&#123;</span><br><span class="line">                    <span class="attr">recordsTotal</span>: result.totalCount,</span><br><span class="line">                    <span class="attr">recordsFiltered</span>: result.totalCount,</span><br><span class="line">                    <span class="attr">data</span>: result.items</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                abp.ui.clearBusy(_$table);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">buttons</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;refresh&#x27;</span>,</span><br><span class="line">                <span class="attr">text</span>: <span class="string">&#x27;&lt;i class=&quot;fas fa-redo-alt&quot;&gt;&lt;/i&gt;&#x27;</span>,</span><br><span class="line">                <span class="attr">action</span>: <span class="function">() =&gt;</span> _$studentsTable.draw(<span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">responsive</span>: &#123;</span><br><span class="line">            <span class="attr">details</span>: &#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;column&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">columnDefs</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">className</span>: <span class="string">&#x27;control&#x27;</span>,</span><br><span class="line">                <span class="attr">defaultContent</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">2</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;age&#x27;</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="string">&#x27;address&#x27;</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">targets</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">sortable</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">autoWidth</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">defaultContent</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="attr">render</span>: <span class="function">(<span class="params">data, type, row, meta</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> [</span><br><span class="line">                        <span class="string">`   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm bg-secondary edit-student&quot; data-student-id=&quot;<span class="subst">$&#123;row.id&#125;</span>&quot; data-toggle=&quot;modal&quot; data-target=&quot;#StudentEditModal&quot;&gt;`</span>,</span><br><span class="line">                        <span class="string">`       &lt;i class=&quot;fas fa-pencil-alt&quot;&gt;&lt;/i&gt; <span class="subst">$&#123;l(<span class="string">&#x27;Edit&#x27;</span>)&#125;</span>`</span>,</span><br><span class="line">                        <span class="string">&#x27;   &lt;/button&gt;&#x27;</span>,</span><br><span class="line">                        <span class="string">`   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm bg-danger delete-student&quot; data-student-id=&quot;<span class="subst">$&#123;row.id&#125;</span>&quot; data-student-name=&quot;<span class="subst">$&#123;row.name&#125;</span>&quot;&gt;`</span>,</span><br><span class="line">                        <span class="string">`       &lt;i class=&quot;fas fa-trash&quot;&gt;&lt;/i&gt; <span class="subst">$&#123;l(<span class="string">&#x27;Delete&#x27;</span>)&#125;</span>`</span>,</span><br><span class="line">                        <span class="string">&#x27;   &lt;/button&gt;&#x27;</span></span><br><span class="line">                    ].join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>abp.services.app.student</strong>用来获取<code>StudentAppService</code></p>
</li>
<li><p><code>l = abp.localization.getSource(&#39;MyPortal&#39;)</code>获取本地化资源</p>
</li>
<li><p><strong>columnDefs</strong>中定义表格字段</p>
</li>
</ul>
<p>页面效果如下：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107104031390.png" alt="image-20211107104031390"></p>
<h4 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h4><p>我们在视图中使用了<strong>L</strong>方法，它用于<strong>本地化</strong>字符串。可以在<code>.Core</code>项目下的本地资源中找到它并配置：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107105529411.png" alt="image-20211107105529411"></p>
<p>我们将页面需要的字符串添加到对应语言的<strong>XML</strong>文件下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;Students&quot;</span> <span class="attr">value</span>=<span class="string">&quot;学生列表&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;地址&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;年龄&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;EditStudent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;编辑学生&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">name</span>=<span class="string">&quot;CreateNewStudent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加学生&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="过滤学生视图"><a href="#过滤学生视图" class="headerlink" title="过滤学生视图"></a>过滤学生视图</h4><p>我们新建一个视图文件<code>Index.AdvancedSearch.cshtml</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;abp-advanced-search&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;StudentSearchForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn bg-blue btn-search&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-search&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Keyword&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control txt-search&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>导入并使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">@await Html.PartialAsync(<span class="string">&quot;~/Views/Students/Index.AdvancedSearch.cshtml&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>对应的，在<code>index.js</code>文件中加入<strong>搜索触发事件</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.btn-search&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">     _$studentsTable.ajax.reload();</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> $(<span class="string">&#x27;.txt-search&#x27;</span>).on(<span class="string">&#x27;keypress&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (e.which == <span class="number">13</span>) &#123;</span><br><span class="line">         _$studentsTable.ajax.reload();</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<p>在<code>StudentAppService</code>中重写过滤查询方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> IQueryable&lt;Student&gt; <span class="title">CreateFilteredQuery</span>(<span class="params">PagedStudentResultRequestDto input</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Repository.GetAll()</span><br><span class="line">                .WhereIf(!input.Keyword.IsNullOrWhiteSpace(), x =&gt; x.Name.Contains(input.Keyword));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>查看效果：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107110550326.png" alt="image-20211107110550326"></p>
<h3 id="新增学生视图"><a href="#新增学生视图" class="headerlink" title="新增学生视图"></a>新增学生视图</h3><p>首先创建一个<strong>新增学生</strong>的模态框视图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using MyPortal.Web.Models.Common.Modals</span><br><span class="line">@model MyPortal.Web.Models.Students.StudentListViewModel</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentCreateModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;StudentCreateModalLabel&quot;</span> <span class="attr">data-backdrop</span>=<span class="string">&quot;static&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog modal-lg&quot;</span> <span class="attr">role</span>=<span class="string">&quot;document&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">            @await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalHeader.cshtml&quot;, new ModalHeaderViewModel(L(&quot;CreateNewStudent&quot;)))</span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;roleCreateForm&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>@L(&quot;Name&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>@L(&quot;Age&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">required</span> <span class="attr">max</span>=<span class="string">&quot;130&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>@L(&quot;Address&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                @await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml&quot;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为此，我们需要新建一个<strong>视图模型类</strong>:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> MyPortal.Students.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyPortal.Web.Models.Students</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentListViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> IReadOnlyList&lt;StudentDto&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211107112541841.png" alt="image-20211107112541841"></p>
<p>最后我们在<code>index.js</code>中加入<strong>创建学生</strong>的请求方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_$form.find(<span class="string">&#x27;.save-button&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!_$form.valid()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> student = _$form.serializeFormToObject();</span><br><span class="line"></span><br><span class="line">    abp.ui.setBusy(_$modal);</span><br><span class="line"></span><br><span class="line">    _studentService</span><br><span class="line">        .create(student)</span><br><span class="line">        .done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            _$modal.modal(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">            _$form[<span class="number">0</span>].reset();</span><br><span class="line">            abp.notify.info(l(<span class="string">&#x27;SavedSuccessfully&#x27;</span>));</span><br><span class="line">            _$studentsTable.ajax.reload();</span><br><span class="line">        &#125;)</span><br><span class="line">        .always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            abp.ui.clearBusy(_$modal);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>查看效果：</p>
<p>点击<strong>添加学生</strong>按钮，弹出<strong>模态框</strong></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107113021877.png" alt="image-20211107113021877"></p>
<p>我们输入数据，并点击保存：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107113201560.png" alt="image-20211107113201560"></p>
<p>可以看，表格中已经将我们刚刚新增的数据展示出来了</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107113240720.png" alt="image-20211107113240720"></p>
<h3 id="编辑学生视图"><a href="#编辑学生视图" class="headerlink" title="编辑学生视图"></a>编辑学生视图</h3><p>我们先创建一个<strong>编辑页面</strong>视图：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@using MyPortal.Web.Models.Common.Modals</span><br><span class="line">@model MyPortal.Students.Dtos.StudentDto</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line">@await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalHeader.cshtml&quot;, new ModalHeaderViewModel(L(&quot;EditStudent&quot;)))</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;StudentEditForm&quot;</span> <span class="attr">role</span>=<span class="string">&quot;form&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-horizontal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>@L(&quot;Name&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Name&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;50&quot;</span> <span class="attr">minlength</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row required&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;age&quot;</span>&gt;</span>@L(&quot;Age&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Age&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;128&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group row&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;col-md-3 col-form-label&quot;</span> <span class="attr">for</span>=<span class="string">&quot;address&quot;</span>&gt;</span>@L(&quot;Address&quot;)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@Model.Address&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    @await Html.PartialAsync(&quot;~/Views/Shared/Modals/_ModalFooterWithSaveAndCancel.cshtml&quot;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;~/view-resources/Views/Students/_EditModal.js&quot;</span> <span class="attr">asp-append-version</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>并创建一个<strong>编辑视图</strong>的<code>_EditModal.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _studentService = abp.services.app.student,</span><br><span class="line">        l = abp.localization.getSource(<span class="string">&#x27;MyPortal&#x27;</span>),</span><br><span class="line">        _$modal = $(<span class="string">&#x27;#StudentEditModal&#x27;</span>),</span><br><span class="line">        _$form = _$modal.find(<span class="string">&#x27;form&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_$form.valid()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> student = _$form.serializeFormToObject();</span><br><span class="line"></span><br><span class="line">        abp.ui.setBusy(_$form);</span><br><span class="line">        _studentService.update(student).done(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            _$modal.modal(<span class="string">&#x27;hide&#x27;</span>);</span><br><span class="line">            abp.notify.info(l(<span class="string">&#x27;SavedSuccessfully&#x27;</span>));</span><br><span class="line">            abp.event.trigger(<span class="string">&#x27;student.edited&#x27;</span>, student);</span><br><span class="line">        &#125;).always(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            abp.ui.clearBusy(_$form);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _$form.closest(<span class="string">&#x27;div.modal-content&#x27;</span>).find(<span class="string">&quot;.save-button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        save();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _$form.find(<span class="string">&#x27;input&#x27;</span>).on(<span class="string">&#x27;keypress&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.which === <span class="number">13</span>) &#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            save();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    _$modal.on(<span class="string">&#x27;shown.bs.modal&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        _$form.find(<span class="string">&#x27;input[type=text]:first&#x27;</span>).focus();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>

<p>在<code>Index</code>页面，当我们点击编辑时，需要先查询当前实体，然后填充到编辑视图中去：</p>
<p>在<code>index.js</code>中加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.edit-student&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> studentId = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;data-student-id&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    abp.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>: abp.appPath + <span class="string">&#x27;Students/EditModal?studentId=&#x27;</span> + studentId,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&#x27;#StudentEditModal div.modal-content&#x27;</span>).html(content);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>对应的，在<strong>StudentController</strong>中需要添加<strong>EditModal</strong>方法，并接收一个<strong>studentId</strong>参数，如下：</p>
<p>根据学生Id查询当前编辑的学生，并将值返回给编辑的模态框</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;ActionResult&gt; <span class="title">EditModal</span>(<span class="params"><span class="built_in">int</span> studentId</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">var</span> tenantDto = <span class="keyword">await</span> _studentAppService.GetAsync(<span class="keyword">new</span> EntityDto(studentId));</span><br><span class="line">          <span class="keyword">return</span> PartialView(<span class="string">&quot;_EditModal&quot;</span>, tenantDto);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p>我们将前面新增的数据<code>jiejie</code>的年龄更改为<code>202</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115502392.png" alt="image-20211107115502392"></p>
<p>保存后刷新列表并且右下角弹出<strong>保存成功</strong>，编辑功能就完成了</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115543250.png" alt="image-20211107115543250"></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>删除需要我们传入要删除的学生Id,我们只需要在<code>index.js</code>中加入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteStudent</span>(<span class="params">studentId, studentName</span>) </span>&#123;</span><br><span class="line">    abp.message.confirm(</span><br><span class="line">        abp.utils.formatString(</span><br><span class="line">            l(<span class="string">&#x27;AreYouSureWantToDelete&#x27;</span>),</span><br><span class="line">            studentName</span><br><span class="line">        ),</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        <span class="function">(<span class="params">isConfirmed</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isConfirmed) &#123;</span><br><span class="line">                _studentService</span><br><span class="line">                    .delete(&#123;</span><br><span class="line">                        <span class="attr">id</span>: studentId</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .done(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        abp.notify.info(l(<span class="string">&#x27;SuccessfullyDeleted&#x27;</span>));</span><br><span class="line">                        _$studentsTable.ajax.reload();</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击删除，弹出提示框：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115722754.png" alt="image-20211107115722754"></p>
<p>点击确定，刷新列表并弹出删除成功提示</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211107115801144.png" alt="image-20211107115801144"></p>
<h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>你可以从以下仓库地址获取源码：</p>
<p><a href="https://github.com/JontyMin/52abp_examples/tree/main/src/MyPortal/src/myportal-aspnet-core">https://github.com/JontyMin/52abp_examples/tree/main/src/MyPortal/src/myportal-aspnet-core</a></p>
<blockquote>
<p>版权声明：本人为52abp社区成员，与52abp社区wiki内容一致，不存在内容侵权。</p>
<p>本文PR:<a href="https://github.com/52ABP/Documents/pull/109">https://github.com/52ABP/Documents/pull/109</a></p>
</blockquote>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>ABP</tag>
        <tag>.NET</tag>
        <tag>CSharp</tag>
        <tag>MVC</tag>
        <tag>EF Core</tag>
        <tag>DDD</tag>
        <tag>Visual Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装Linux</title>
    <url>/2021/10/27/vmware-install-linux/</url>
    <content><![CDATA[<h3 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h3><p>虚拟机(Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。<br>虚拟系统通过生成现有操作系统的全新虚拟镜像，它具有真实windows系统完全一样的功能，进入虚拟系统后，所有操作都是在这个全新的独立的虚拟系统里面进行，可以独立安装运行软件，保存数据，拥有自己的独立桌面，不会对真正的系统产生任何影响，而且具有能够在现有系统与虚拟镜像之间灵活切换的一类操作系统。<br>流行的虚拟机厂家有VMware、 loracle Virtual Bo、微软Virtua PC，它们都能在Windows系统上虚拟出多个计算机(Win/Linux)</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用VMware安装Oracle Linux 7.6</p>
<p>需要安装好<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">VMware Workstation</a></p>
<h4 id="虚拟机设置"><a href="#虚拟机设置" class="headerlink" title="虚拟机设置"></a>虚拟机设置</h4><h5 id="新建向导"><a href="#新建向导" class="headerlink" title="新建向导"></a>新建向导</h5><img data-src="https://cdn.jonty.top/img/image-20211027184244784.png" alt="image-20211027184244784"  />

<h5 id="选择兼容版本"><a href="#选择兼容版本" class="headerlink" title="选择兼容版本"></a>选择兼容版本</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027184306364.png" alt="image-20211027184306364"></p>
<h5 id="稍后安装操作系统"><a href="#稍后安装操作系统" class="headerlink" title="稍后安装操作系统"></a>稍后安装操作系统</h5><p>方便后续自定义配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027184359980.png" alt="image-20211027184359980"></p>
<h5 id="选择Linux"><a href="#选择Linux" class="headerlink" title="选择Linux"></a>选择Linux</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027191801120.png" alt="image-20211027191801120"></p>
<h5 id="名称和存储位置"><a href="#名称和存储位置" class="headerlink" title="名称和存储位置"></a>名称和存储位置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192047604.png" alt="image-20211027192047604"></p>
<h5 id="处理器配置"><a href="#处理器配置" class="headerlink" title="处理器配置"></a>处理器配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192100304.png" alt="image-20211027192100304"></p>
<h5 id="内存配置"><a href="#内存配置" class="headerlink" title="内存配置"></a>内存配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192129135.png" alt="image-20211027192129135"></p>
<h5 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192149657.png" alt="image-20211027192149657"></p>
<h5 id="存储配置"><a href="#存储配置" class="headerlink" title="存储配置"></a>存储配置</h5><p>控制器类型</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192206105.png" alt="image-20211027192206105"></p>
<p>磁盘类型</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192223604.png" alt="image-20211027192223604"></p>
<p>创建磁盘</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192248532.png" alt="image-20211027192248532"></p>
<p>指定磁盘容量，存储为单个文件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192321137.png" alt="image-20211027192321137"></p>
<p>指定磁盘文件</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027192421162.png" alt="image-20211027192421162"></p>
<h5 id="配置完成"><a href="#配置完成" class="headerlink" title="配置完成"></a>配置完成</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192428709.png" alt="image-20211027192428709"></p>
<h4 id="镜像设置"><a href="#镜像设置" class="headerlink" title="镜像设置"></a>镜像设置</h4><img data-src="https://cdn.jonty.top/img/image-20211027192737113.png" alt="image-20211027192737113" style="zoom:67%;" />

<h4 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h4><h5 id="禁用内存页面休整"><a href="#禁用内存页面休整" class="headerlink" title="禁用内存页面休整"></a>禁用内存页面休整</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192833894.png" alt="image-20211027192833894"></p>
<h5 id="添加共享文件夹"><a href="#添加共享文件夹" class="headerlink" title="添加共享文件夹"></a>添加共享文件夹</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027192934066.png" alt="image-20211027192934066"></p>
<h4 id="Linux系统设置"><a href="#Linux系统设置" class="headerlink" title="Linux系统设置"></a>Linux系统设置</h4><h5 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h5><p>点击启动虚拟机，选择安装Oracle,按<code>Enter</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027193123710.png" alt="image-20211027193123710"></p>
<h5 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027193415173.png" alt="image-20211027193415173"></p>
<h5 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027194247111.png" alt="image-20211027194247111"></p>
<p>可按照自己的需求配置，这里选择了带有操作界面的服务器选项</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027194812583.png" alt="image-20211027194812583"></p>
<p>添加附加选项，按实际需求选择</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027194850975.png" alt="image-20211027194850975"></p>
<h5 id="安装目标位置"><a href="#安装目标位置" class="headerlink" title="安装目标位置"></a>安装目标位置</h5><p>自定义分区，选择<code>我要配置分区</code>后点击完成</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195039952.png" alt="image-20211027195039952"></p>
<p>选择标准分区 自动创建</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195251934.png" alt="image-20211027195251934"></p>
<p>将/home的挂载点更改为/opt/oracle,点击完成</p>
<p>方便后续安装<code>Oracle</code></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195443704.png" alt="image-20211027195443704"></p>
<p>接受更改</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027195634673.png" alt="image-20211027195634673"></p>
<h5 id="更改网络配置"><a href="#更改网络配置" class="headerlink" title="更改网络配置"></a>更改网络配置</h5><p>打开网卡，点击配置</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200029445.png" alt="image-20211027200029445"></p>
<p>选择IPV4地址</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200121652.png" alt="image-20211027200121652"></p>
<p>需要对应本机电脑的网络配置，下面是我的，仅供参考</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200202788.png" alt="image-20211027200202788"></p>
<h5 id="关闭安全策略"><a href="#关闭安全策略" class="headerlink" title="关闭安全策略"></a>关闭安全策略</h5><p><img data-src="https://cdn.jonty.top/img/image-20211027200302409.png" alt="image-20211027200302409"></p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200314652.png" alt="image-20211027200314652"></p>
<h5 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h5><p>点击开始安装后，配置<strong>root</strong>用户密码</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200422604.png" alt="image-20211027200422604"></p>
<p>可以顺便创建一个普通用户</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027200540510.png" alt="image-20211027200540510"></p>
<h5 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h5><p>安装完成后重启进入系统</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027202258848.png" alt="image-20211027202258848"></p>
<p>记得接受许可证</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211027202457891.png" alt="image-20211027202457891"></p>
<p>至此就安装完成。不当之处欢迎指正</p>
<blockquote>
<p>种一棵树最好的时间是十年前,其次是现在</p>
</blockquote>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware桥接模式连接失败</title>
    <url>/2021/10/27/vmware-bridge-ping-nowhere/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习<code>Linux</code>以及<code>Oracle</code>数据库，为出差<code>AMD</code>做准备。（未知）顺便顺点CPU回来😂</p>
<p>🐂*吹过头了，话不多说，上图：</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204530933.png" alt="image-20211027204530933" style="zoom:67%;" />

<p>使用<strong>VMware</strong>安装<strong>Oracle Linux</strong>,使用<u>桥接模式(Bridge)</u>连接网络。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping 192.168.2.1</span><br></pre></td></tr></table></figure>

<p>在<code>ping</code>本机时发现无法连接。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="检查网络设置"><a href="#检查网络设置" class="headerlink" title="检查网络设置"></a>检查网络设置</h3><p>查看<strong>Linux</strong>中<strong>IPv4</strong>设置，</p>
<p>这里使用的手动模式获取，</p>
<ul>
<li>地址：192.168.2.51</li>
<li>掩码：255.255.255.0</li>
<li>网关：192.168.2.1</li>
</ul>
<img data-src="https://cdn.jonty.top/img/image-20211027204554710.png" alt="image-20211027204554710" style="zoom:67%;" />

<p>与本机地址对比，检查是否配置错误</p>
<p>使用以下命令查看<code>win</code>的网络配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PS：linux中为：ifconfig</p>
</blockquote>
<img data-src="https://cdn.jonty.top/img/image-20211027200202788.png" style="zoom:67%;" />

<p>对比发现：掩码和网关一致，IP也未冲突。所以Linux中配置无误。</p>
<h3 id="检查虚拟网络编辑器"><a href="#检查虚拟网络编辑器" class="headerlink" title="检查虚拟网络编辑器"></a>检查虚拟网络编辑器</h3><p>查看一下<strong>VMware</strong>网络编辑器中<strong>桥接模式</strong>的配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204653746.png" alt="image-20211027204653746" style="zoom:67%;" />

<p>点击更改设置，一般桥接模式<strong>桥接地址</strong>为<strong>自动</strong>选择，建议配置为电脑网络连接使用的网卡地址。</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204735327.png" alt="image-20211027204735327" style="zoom:67%;" />

<h3 id="检查本机网卡"><a href="#检查本机网卡" class="headerlink" title="检查本机网卡"></a>检查本机网卡</h3><p>打开<strong>控制面板</strong>，找到当前连接网络</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204905408.png" alt="image-20211027204905408" style="zoom:67%;" />

<p>查看连接网络属性</p>
<img data-src="https://cdn.jonty.top/img/image-20211027204929950.png" alt="image-20211027204929950" style="zoom:67%;" />

<p>可以看到，当前连接网络使用的网卡为：<code>Realtek PCIe GbE Family Controller</code>,我们将VMware虚拟网络编辑器中桥接模式的网卡设置为本机当前网络使用的网卡。</p>
<p>选择后点击<strong>应用</strong></p>
<img data-src="https://cdn.jonty.top/img/image-20211027205006171.png" alt="image-20211027205006171" style="zoom:67%;" />

<h3 id="检查连接状态"><a href="#检查连接状态" class="headerlink" title="检查连接状态"></a>检查连接状态</h3><p>回到<strong>Linux</strong>中，再次<code>ping</code>连接成功。</p>
<img data-src="https://cdn.jonty.top/img/image-20211027205030251.png" alt="image-20211027205030251" style="zoom:67%;" />

<p>这是一个很小的问题，记录一下。</p>
<blockquote>
<p>有时候问题很复杂，答案却很简单</p>
</blockquote>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>VMware桥接模式</strong>：</p>
<p>VMware桥接模式，也就是将虚拟机的虚拟网络适配器与主机的物理网络适配器进行交接，虚拟机中的虚拟网络适配器可通过主机中的物理网络适配器直接访问到外部网络。</p>
<p>简而言之，这就好像在上图所示的局域网中添加了一台新的、独立的计算机一样。因此，虚拟机也会占用局域网中的一个IP地址，并且可以和其他终端进行相互访问。</p>
<p>桥接模式网络连接支持有线和无线主机网络适配器。如果你想把虚拟机当做一台完全独立的计算机看待，并且允许它和其他终端一样的进行网络通信，那么桥接模式通常是虚拟机访问网络的最简单途径。因为”桥接模式”下虚拟机相当于局域网中的一台电脑，所以IP同主机的IP在同一网段</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VMware</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>温故而知新-C#泛型</title>
    <url>/2021/10/08/csharp-generic-review-02/</url>
    <content><![CDATA[<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>除了有<strong>泛型方法</strong>，还有<strong>泛型类</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DocumentManager</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">readonly</span>  <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; _documentQueue</span>= <span class="keyword">new</span> Queue&lt;T&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsAvailable =&gt;_documentQueue.Count &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddDocument</span>(<span class="params">T doc</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            _documentQueue.Enqueue(doc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetDocument</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        T doc = <span class="literal">default</span>;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            doc=_documentQueue.Dequeue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>可以看到在<code>GetDocument</code>这个方法中初始化<code>doc</code>变量时，我们使用了<code>default</code>关键字</p>
<blockquote>
<p>default关键字根据上下文可以有多种含义，switch语句中使用default定义默认情况。在泛型中取决于泛型类型是值类型还是引用类型，泛型default关键字将泛型类型初始化为null或0</p>
</blockquote>
<h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p><strong>泛型类</strong>都有了，<strong>泛型接口</strong>也可以有</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDocumentManager</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">AddDocument</span>(<span class="params">T doc</span>)</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="function">T <span class="title">GetDocument</span>(<span class="params"></span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>还有<strong>泛型委托</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">T t</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<p>1、泛型在声明的时候可以不指定具体的类型，在使用时需要指定具体类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AClass</span>:<span class="title">BClass</span>&lt;<span class="title">int</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>2、如果子类也是泛型的，那么继承的时候可以不指定具体类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AClass</span>&lt;<span class="title">T</span>&gt;:<span class="title">BClass</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="逆变和协变"><a href="#逆变和协变" class="headerlink" title="逆变和协变"></a>逆变和协变</h4><p>在<code>.NET4.0</code>之前，泛型接口是不变的。</p>
<p><strong>协变</strong>和<strong>逆变</strong>指对参数和返回值的类型进行转换。只能放在接口或委托的泛型参数前面</p>
<p><code>out</code>协变 covariant 用来修饰返回值；</p>
<p><code>in</code>逆变 contravariant 用来修饰传入参数；</p>
<p>示例：</p>
<p>定义一个<code>Animal</code>类，再定义一个<code>Cat</code>类继承<code>Animal</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">Animal animal1 = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; animals = <span class="keyword">new</span> List&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Cat&gt;cats= <span class="keyword">new</span> List&lt;Cat&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; list = <span class="keyword">new</span> List&lt;Cat&gt;(); <span class="comment">// 报错 没有父子级关系</span></span><br></pre></td></tr></table></figure>

<p>这个时候可以使用<strong>协变</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">IEnumerable list = <span class="keyword">new</span> List&lt;Cat&gt;();</span><br></pre></td></tr></table></figure>

<p><img data-src="https://cdn.jonty.top/img/image-20211008001058082.png" alt="image-20211008001058082"></p>
<p>可以看到，泛型接口使用了<code>out</code>参数修饰，<code>T</code>只能是返回值类型，不能作为参数类型。使用<strong>协变</strong>后，左边声明的是基类，右边可以声明子类或基类。</p>
<p>协变也可用于委托：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Func&lt;Animal&gt;func = <span class="keyword">new</span> Func&lt;Cat&gt;(()=&gt;<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="自定义协变"><a href="#自定义协变" class="headerlink" title="自定义协变"></a>自定义协变</h4><p><strong>out</strong>协变，只能是返回结果</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerListOut</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">Get</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerListOut</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICustomerListOut</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ICustomerListOut&lt;Animal&gt; list1 = <span class="keyword">new</span> CustomerListOut&lt;Cat&gt;();</span><br></pre></td></tr></table></figure>

<h4 id="自定义逆变"><a href="#自定义逆变" class="headerlink" title="自定义逆变"></a>自定义逆变</h4><p><strong>in</strong>逆变，只能作为方法参数，不能作为返回值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerListIn</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span>(<span class="params">T t</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerListIn</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICustomerListIn</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params">T t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ICustomerListIn&lt;Cat&gt; list2 = <span class="keyword">new</span> CustomerListIn&lt;Animal&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>如果泛型类需要调用泛型类型中的方法，则需要添加约束。</p>
<p>定义一个<code>IDocument</code>接口，定义两个<strong>只读属性</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDocument</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Document</span>:<span class="title">IDocument</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Document</span>(<span class="params"><span class="built_in">string</span> title,<span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Title = title;</span><br><span class="line">        <span class="keyword">this</span>.Content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要显示<strong>Document</strong>的标题，我们可以这样写:</p>
<p>将<code>T</code>强制转换为<code>IDocument</code>接口</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayAllDocuments</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> _documentQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(((IDocument)doc).Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果我们实现的不是<code>IDocument</code>呢？而是其他的，并没有<code>Title</code>，这个时候就会报错。</p>
<p>这个时候我们可以给<code>DocumentManager</code>一个约束：<strong>T</strong>类型必须实现<strong>IDocument</strong>接口，使用<code>Where</code>关键字</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">DocumentManager&lt;T&gt;:IDocumentManager&lt;T&gt; <span class="keyword">where</span> T : <span class="function">IDocument</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayAllDocuments</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> _documentQueue)</span><br><span class="line">   &#123;</span><br><span class="line">       Console.WriteLine(doc.Title);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img data-src="https://cdn.jonty.top/img/image-20211007223036959.png" alt="image-20211007223036959" style="zoom:80%;" />

<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><table>
<thead>
<tr>
<th align="center">约束</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">where T:struct</td>
<td align="center">T类型必须是值类型</td>
</tr>
<tr>
<td align="center">where T:class</td>
<td align="center">T类型必须是引用类型（类、接口、委托、数组等）</td>
</tr>
<tr>
<td align="center">where T:IFoo</td>
<td align="center">指定类型必须实现接口IFoo</td>
</tr>
<tr>
<td align="center">where T:Foo</td>
<td align="center">指定类型T必须派生自基类Foo</td>
</tr>
<tr>
<td align="center">where T:new()</td>
<td align="center">构造函数约束，指定类型T必须有一个默认构造函数，需最后指定</td>
</tr>
<tr>
<td align="center">where T1:T2</td>
<td align="center">T1派生自泛型类型T2</td>
</tr>
</tbody></table>
<blockquote>
<p>new()只能为默认构造函数定义构造函数约束，不能为其他构造函数定义构造函数约束</p>
<p>基类约束时，基类不能是密封类（即sealed类），sealed类不能被继承，则此约束无意义。</p>
</blockquote>
<p>泛型约束可以多个约束：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>&lt;<span class="title">T</span>&gt;(<span class="params">T t</span>) <span class="keyword">where</span> T:Document,<span class="keyword">new</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">DocumentManager</span>&lt;<span class="symbol">T</span>&gt; : <span class="symbol">IDocumentManager</span>&lt;<span class="symbol">T</span>&gt; <span class="symbol">where</span> <span class="symbol">T</span> : <span class="symbol">IDocument</span></span><br></pre></td></tr></table></figure>

<p>泛型类型可以实现泛型接口，也可以派生自一个类。泛型类可以派生自泛型基类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span>&lt;<span class="title">T</span>&gt;:<span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>必须重复实现接口的泛型类型，或者必须执行基类的类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span>&lt;<span class="title">T</span>&gt;:<span class="title">Base</span>&lt;<span class="title">string</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>派生类可以是<strong>泛型类</strong>或<strong>非泛型类</strong></p>
<p>例子：定义一个抽象的泛型类,在派生类中用另一种实现</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Calc</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">Add</span>(<span class="params">T x, T y</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntCalc</span> : <span class="title">Calc</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>泛型类的静态成员只能在类的一个实例中共享</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StaticDemo</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StaticDemo&lt;<span class="built_in">string</span>&gt;.x = <span class="number">4</span>;</span><br><span class="line">StaticDemo&lt;<span class="built_in">int</span>&gt;.x = <span class="number">5</span>;</span><br><span class="line">Console.WriteLine(StaticDemo&lt;<span class="built_in">string</span>&gt;.x);</span><br></pre></td></tr></table></figure>

<p>结果： </p>
<p><img data-src="https://cdn.jonty.top/img/image-20211007233059047.png" alt="image-20211007233059047"></p>
<h3 id="泛型缓存"><a href="#泛型缓存" class="headerlink" title="泛型缓存"></a>泛型缓存</h3><p>我们知道，类的静态构造函数只会执行一次，所以不管无论实例化多少次，在内存中只会有一个。</p>
<p>在泛型中，<code>T</code>类型不同，每个不同的<code>T</code>类型都会生成一个不同的副本，会产生不同的静态属性、静态构造函数。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">int</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">long</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">string</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;DateTime&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GenericCache</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _typeTime;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">GenericCache</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;static&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _typeTime = <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">typeof</span>(T).FullName&#125;</span>_<span class="subst">&#123;DateTime.Now:yyyyMMddHHmmss.fff&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCache</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _typeTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img data-src="https://cdn.jonty.top/img/image-20211008003511609.png" alt="image-20211008003511609" style="zoom:80%;" />

<p>泛型会为不同类型都创建一个副本，构造函数执行5次，后面获取的缓存都是相同的。</p>
<p>注意：只能为不同的类型缓存一次。泛型缓存比字典缓存效率高，但是不能主动释放。</p>
<h3 id="泛型结构"><a href="#泛型结构" class="headerlink" title="泛型结构"></a>泛型结构</h3><p>与类一样，结构也可以是泛型的。但是不同于类，不能继承。</p>
<p>以<code>Nullable&lt;T&gt;</code>为例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Nullable&lt;T&gt; <span class="keyword">where</span> T: <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _hasValue;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> HasValue =&gt; _hasValue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Nullable</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _hasValue = <span class="literal">true</span>;</span><br><span class="line">        _value = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T _value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T Value</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_hasValue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;no value&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">T</span>(<span class="params">Nullable&lt;T&gt; <span class="keyword">value</span></span>)</span> =&gt; <span class="keyword">value</span>.Value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">Nullable</span>&lt;<span class="title">T</span>&gt;(<span class="params">T <span class="keyword">value</span></span>)</span> =&gt; <span class="keyword">new</span> Nullable&lt;T&gt;(<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span>? ToString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !HasValue ? <span class="built_in">string</span>.Empty : _value.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Nullable&lt;<span class="built_in">int</span>&gt; x;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (x.HasValue)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(x.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h4><p>在<code>c#</code>中，使用<code>?</code>定义可空类型</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? i = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>可空类型可以与<code>null</code>或数字比较</li>
<li>可空类型可以与算数运算符使用</li>
</ul>
<p>非可空类型可以转换成可空类型，隐式转换</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span>? y = x;</span><br></pre></td></tr></table></figure>

<p>可空类型转为非可空类型可能会失败，如果可空类型<code>null</code>赋值给非可空类型则会抛出<code>InvalidOperationException</code>异常，需要强制类型转换</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? x = GetNullableType(); <span class="comment">// 可能返回null</span></span><br><span class="line"><span class="built_in">int</span> y = (<span class="built_in">int</span>)x;</span><br></pre></td></tr></table></figure>

<p>如果不进行显示转换，则可以使用合并运算符从可空类型转换成非可空类型，关键词<code>??</code>，为转换定义一个默认值，以防可控类型的值为<code>null</code>。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span>? x = GetNullableType();</span><br><span class="line"><span class="built_in">int</span> y = x ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Generic</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>温故而知新-C#泛型</title>
    <url>/2021/10/04/csharp-generic-review-01/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发中，经常会遇到功能相同的模块，但是参数类型不同，这时候只能分别写不同的方法处理不同的数据类型。那么有没有一种办法，只用同一个方法来处理不同类型参数的方法</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params"><span class="built_in">string</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params">DateTime i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面几个方法分别获取<code>int、string、DateTime</code>类型的名称，可以看到对应写了三种类型的<code>重载</code>方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowTypeName(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowTypeName(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowTypeName(DateTime.Now);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004162840338.png"></p>
<p>这个时候我们就会想<strong>面向对象的继承</strong>，我们知道在<code>C#</code>语言中，所有的类型都继承自基类<code>object</code></p>
<p>优化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowObjectName</span>(<span class="params"><span class="built_in">object</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004163223821.png" alt="image-20211004163223821"></p>
<p>可以看到，使用<code>object</code>类型作为参数传入达到了我们预期的效果，解决了代码的<strong>复用性</strong>。</p>
<p>但是这里又会引发另一个问题：装箱和拆箱带来的性能损耗问题。</p>
<blockquote>
<p>装箱和拆箱：在把值类型转换为引用类型或把引用类型转换成值类型时，需要进行装箱和拆箱的操作。</p>
<p>值类型存储在栈上，引用类型存储在堆上。</p>
<p>值类型  ==&gt; 引用类型  装箱    隐式转换(自动转换)  </p>
<p>引用类型 ==&gt; 值类型   拆箱    显示转换（强制转换）需要类型转换运算符</p>
</blockquote>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>泛型就是为了解决这个问题而产生的，在<code>.NET2.0</code>推出泛型</p>
<blockquote>
<p>泛型是<code>C#</code>和<code>.NET</code>的一个重要概念，不仅是<code>C#</code>语言的一部分而且和<code>IL</code>中间语言紧密结合。</p>
<p>在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。</p>
<p>泛型类( <code>GenericList&lt;T&gt;</code>)无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 若要使用 <code>GenericList&lt;T&gt;</code>，客户端代码必须通过指定尖括号内的类型参数来声明并实例化构造类型。 此特定类的类型参数可以是编译器可识别的任何类型。 可创建任意数量的构造类型实例，其中每个使用不同的类型参数。</p>
</blockquote>
<h4 id="定义泛型参数"><a href="#定义泛型参数" class="headerlink" title="定义泛型参数"></a>定义泛型参数</h4><p>优化：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowName</span>&lt;<span class="title">T</span>&gt;(<span class="params">T i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i?.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Jonty&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> d = DateTime.Now;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************CommonMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowTypeName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowTypeName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowTypeName(d);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************ObjectMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowObjectName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowObjectName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowObjectName(d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************GenericMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowName(d);</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure>

<p>可以看到，效果是一摸一样的：</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004170341353.png" alt="image-20211004170341353"></p>
<p><strong>为什么泛型可以解决这个问题呢？</strong></p>
<p>泛型是延迟声明的：即定义的时候没有指定具体的参数类型，把参数类型的声明推迟到了调用的时候才指定参数类型</p>
<p><strong>泛型是如何工作的呢？</strong></p>
<p>控制台程序最终会编译成一个exe程序，exe被点击的时候，会经过JIT(即时编译器)的编译，最终生成二进制代码，才能被计算机执行。泛型加入到语法以后，<code>visual studio</code>自带的编译器又做了升级，升级之后编译时遇到泛型，会做特殊的处理：生成占位符。再次经过JIT编译的时候，会把上面编译生成的占位符替换成具体的数据类型。</p>
<p>示例:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Console.WriteLine(<span class="keyword">typeof</span>(List&lt;&gt;));</span><br><span class="line">Console.WriteLine(<span class="keyword">typeof</span>(Dictionary&lt;,&gt;));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p>可以看到，泛型在编译后会生成占位符</p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004171349172.png" alt="image-20211004171349172"></p>
<p><strong>性能对比：</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">11932</span></span><br><span class="line">    <span class="built_in">long</span> commonSecond = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> objectSecond = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> genericSecond = <span class="number">0</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowInt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        commonSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowObject(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        objectSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Show(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        genericSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(</span><br><span class="line">        <span class="string">$&quot;commonMethod:<span class="subst">&#123;commonSecond&#125;</span>\nobjectMethod:<span class="subst">&#123;objectSecond&#125;</span>\ngenericMethod:<span class="subst">&#123;genericSecond&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Private Metho</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowInt</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowObject</span>(<span class="params"><span class="built_in">object</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>&lt;<span class="title">T</span>&gt;(<span class="params">T i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<p>泛型方法&lt;普通方法&lt;Object方法 </p>
<p><img data-src="https://cdn.jonty.top/img/image-20211004172530409.png" alt="image-20211004172530409"></p>
<h3 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h3><p>泛型的另一个特性就是<strong>类型安全</strong></p>
<p>示例：</p>
<p><code>ArrayList</code>可以添加任意类型的参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arrayList.Add(<span class="number">123</span>);</span><br><span class="line">arrayList.Add(<span class="string">&quot;jonty&quot;</span>);</span><br><span class="line">arrayList.Add(DateTime.Now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arrayList)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用泛型可以进行类型约束：</p>
<p>如果我们添加其他类型的参数则会编译报错，<strong>参数无效</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; arrInts = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">arrInts.Add(<span class="number">1</span>);</span><br><span class="line">arrInts.Add(<span class="number">2</span>);</span><br><span class="line">arrInts.Add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><ul>
<li><p>泛型类型的名称首字母用<code>T</code></p>
</li>
<li><p>如果没有特殊要求，泛型类型允许用任何类代替；且只使用了一个泛型类型时，可以直接使用<code>T</code>作为泛型类型的名称</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果泛型的类型有特殊的要求，或者使用了两个或多个泛型类型，那么泛型类应该使用描述性名称</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Eventhandler</span>&lt;<span class="title">TEventArgs</span>&gt;(<span class="params">Object sender,TEventargs e</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SortedList</span>&lt;<span class="title">Tkey</span>,<span class="title">TValue</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>.NET</tag>
        <tag>Generic</tag>
        <tag>CSharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows Terminal 美化</title>
    <url>/2021/10/03/windows-terminal-beautify/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用了很久的<code>Terminal+PowerShell</code>,加上装了<code>oh-my-posh</code>这个插件，不管用起来还是看起来都很舒服。</p>
<img data-src="https://cdn.jonty.top/img/image-20211003000724702.png" alt="image-20211003000724702" style="zoom: 80%;" />

<p>由于电脑恢复了，重新配置一下，记录以供参考。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>1、下载<code>Terminal</code></p>
<p>可以直接在微软商店下载，我这里已经安装过了。</p>
<img data-src="https://cdn.jonty.top/img/image-20211003001214531.png" alt="image-20211003001214531" style="zoom:80%;" />

<p>2、安装<code>PowerShell</code></p>
<blockquote>
<p>这里的PowerShell并非<code>win</code>系统自带的<code>PowerShell</code>,而是它的一个跨平台版本，类似于<code>.NET</code>与<code>.NET Core</code>的关系。</p>
</blockquote>
<p><a href="https://github.com/PowerShell/PowerShell/releases">下载地址</a>，找到系统对应的版本下载安装，我这里下载的是这个版本</p>
<img data-src="https://cdn.jonty.top/img/image-20211003001938075.png" alt="image-20211003001938075" style="zoom:80%;" />

<p>3、安装插件</p>
<ul>
<li><code>PSReadLine</code>:提供自动补全等功能，GitHub地址：<a href="https://github.com/PowerShell/PSReadLine">https://github.com/PowerShell/PSReadLine</a></li>
<li><code>posh-git</code>:提供git的状态显示和命令补全。</li>
<li><code>oh-my-posh</code>:提供自定义主题和配色等,官网：<a href="https://ohmyposh.dev/">https://ohmyposh.dev/</a></li>
</ul>
<p>使用管理员打开新安装的<code>PowerShell</code>,执行下列命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Install-Module PSReadline</span><br><span class="line">Install-Module posh-git</span><br><span class="line">winget install oh-my-posh</span><br></pre></td></tr></table></figure>

<p>安装时提示则直接输入<code>y</code>信任即可。</p>
<p>4、安装字体</p>
<p><a href="https://www.nerdfonts.com/font-downloads">下载字体</a> 选择合适的字体，我这里使用的是<code>FiraCode</code></p>
<blockquote>
<p>顺便推荐一下使用<code>FiraCode</code>码代码也挺爽的</p>
<p>使用Nerd Font不会导致乱码，特殊的一些符号会乱码，如图</p>
</blockquote>
<img data-src="https://cdn.jonty.top/img/image-20211003003954813.png" alt="image-20211003003954813" style="zoom:80%;" />

<p>将下载下来的字体文件全选，拖入安装</p>
<img data-src="https://cdn.jonty.top/img/image-20211003004813071.png" alt="image-20211003004813071" style="zoom:80%;" />

<p>5、编辑<code>$Profile</code>文件</p>
<p>Windows:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">notepad<span class="selector-class">.exe</span> <span class="variable">$Profile</span></span><br></pre></td></tr></table></figure>

<p>没有文件则创建，配置一下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$OutputEncoding</span> = [console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding</span><br><span class="line"><span class="comment">#------------------------------- Import Modules BEGIN -------------------------------</span></span><br><span class="line"><span class="comment"># 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 PowerShell 主题 jandedobbeleer替换成主题名称</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;<span class="variable">$env</span>:POSH_THEMES_PATH\jandedobbeleer.omp.json&quot;</span> | Invoke-Expression</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#------------------------------- Import Modules END   -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------  Set Hot-keys BEGIN  -------------------------------</span></span><br><span class="line"><span class="comment"># 设置 Tab 键补全</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key Tab -Function Complete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+d 为菜单补全和 Intellisense</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Tab&quot;</span> -Function MenuComplete</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key <span class="string">&quot;Ctrl+d&quot;</span> -Function ViExit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置预测文本来源为历史记录</span></span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Ctrl+z 为撤销</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key <span class="string">&quot;Ctrl+z&quot;</span> -Function Undo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置向上键为后向搜索历史记录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置向下键为前向搜索历史纪录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line"><span class="comment">#-------------------------------  Set Hot-keys END    -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#-------------------------------   Set Alias Begin    -------------------------------</span></span><br><span class="line"><span class="comment"># 1. 编译函数 make</span></span><br><span class="line"><span class="keyword">function</span> MakeThings &#123;</span><br><span class="line">    nmake.exe <span class="variable">$args</span> -nologo</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name make -Value MakeThings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 更新系统 os-update</span></span><br><span class="line">Set-Alias -Name os-update -Value Update-Packages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 查看目录 ls &amp; ll</span></span><br><span class="line"><span class="keyword">function</span> ListDirectory &#123;</span><br><span class="line">    (Get-ChildItem).Name</span><br><span class="line">    Write-Host(<span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name ls -Value ListDirectory</span><br><span class="line">Set-Alias -Name ll -Value Get-ChildItem</span><br><span class="line"><span class="comment">#-------------------------------    Set Alias END     -------------------------------</span></span><br></pre></td></tr></table></figure>

<p>主题可以通过<code>Get-PoshThemes</code>命令查看，选择喜欢的然后将主题名称替换即可。</p>
<p>6、配置<code>Terminal</code></p>
<p>打开配置文件</p>
<img data-src="https://cdn.jonty.top/img/image-20211003005518036.png" alt="image-20211003005518036" style="zoom:80%;" />

<p>加入以下配置：</p>
<p>视各自的情况配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;defaultProfile&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, # 设置默认</span><br><span class="line">&quot;profiles&quot;: </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;defaults&quot;: &#123;&#125;,</span><br><span class="line">        &quot;list&quot;: </span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;acrylicOpacity&quot;: 0.5,</span><br><span class="line">                &quot;backgroundImage&quot;: null,</span><br><span class="line">                &quot;commandline&quot;: &quot;C:/Program Files/PowerShell/7/pwsh.exe -nologo&quot;,</span><br><span class="line">                &quot;fontSize&quot;: 11,</span><br><span class="line">                &quot;fontFace&quot;: &quot;FiraCode Nerd Font&quot;,</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,</span><br><span class="line">                &quot;hidden&quot;: false,</span><br><span class="line">                &quot;historySize&quot;: 9001,</span><br><span class="line">                &quot;name&quot;: &quot;pwsh&quot;,</span><br><span class="line">                &quot;padding&quot;: &quot;5, 5, 20, 25&quot;,</span><br><span class="line">                &quot;snapOnInput&quot;: true,</span><br><span class="line">                &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;,</span><br><span class="line">                &quot;startingDirectory&quot;: &quot;.&quot;,</span><br><span class="line">                &quot;useAcrylic&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>7、<code>VsCode</code>配置</p>
<img data-src="https://cdn.jonty.top/img/image-20211003005954791.png" alt="image-20211003005954791" style="zoom:80%;" />

<p>至此大功告成，这下是不是卷的更有动力了。</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>Terminal</tag>
        <tag>Windows</tag>
        <tag>PowerShell</tag>
        <tag>OhMyPosh</tag>
      </tags>
  </entry>
  <entry>
    <title>知乎关于我国高等教育的看法</title>
    <url>/2021/09/27/the-systematic-failure-of-higher-education-in-china/</url>
    <content><![CDATA[<p>和老同学聊到在学校的生活，突然想到之前在知乎看到的这篇帖子，转载记录一下</p>
<p><a href="https://www.zhihu.com/people/517a82a684971b49348575efaa8f6fdd">@Youngster38324</a> 的回答透露出来了我国高等教育系统中的不少问题：</p>
<ol>
<li><strong>「进大学前唯分数和同质化教育」</strong>导致了太多人去大学后根本不知道自己要干嘛，很多人专业根本就不是自己选的更不要说知道自己有没有兴趣了，即便是很多高分考生也路径依赖地以为继续努力填鸭就能成功，没有意识到高考后的人生已经换赛道了。作为解决方案，可以引入类似美国 AP（Advanced Placement）的预科制度以及调整整个社会鼓励向自我发展看而不是向钱看的风气。</li>
<li><strong>「进大学后专业制度没有容错性」</strong>，即便已经发现自己不喜欢被录取专业了也没有办法，因为转专业制度不完善（通常要求你先要在你已经不喜欢了的本专业内卷到班级前多少名）。在不少西方学校，专业可以 undecided（先上课再决定专业，比如经典的哈佛 CS50，你上下来感兴趣了再去选 CS）；学位本身只是某个学科下课程学分累计的自然结果，因此可以灵活的转专业与多学位；班级这种促进内卷的概念也被弱化，强调跟自己比关注个人的成长，学生自己控制上几年课，念几个学位，中间休学一下都没关系。</li>
<li>前两步的结果就是导致大学为了毕业率把<strong>「评判标准搞成了平均主义」</strong>，为了能够每年顺利向社会输送一批（80% 将来都不会从事本专业）的人才，打分根据每年学生情况动态规划自适应，把大学搞成了「严进宽出」。其实大学教育更应该强调「宽进严出」，无论你底子如何，无论重修几次，你只要通过了某个（相对稳定的）客观标准就是合格，为了保证该制度的机械性运作，就要辅以严格的日常作业计分，对「作弊」零容忍（自动化判重，发现一次重修两次退学）。</li>
<li>平均主义进一步导致<strong>「课程设置没有灵活性无法自定义」</strong>，老师不但要照顾及格率还有一颗圣母心希望那些对专业没什么兴趣的人能好歹学到点东西，同时又真心欣赏且想要给予好学的尖子生资源，最后即便绞尽脑汁了也还是只能弄出个在差生里下限高在尖子生里上限低的课程安排两面不当人 —— 尖子生觉得课程要求太低不能激发自己的潜力喂不饱（常见于私下要求加难度或者去无学分旁听），摸鱼的觉得老师影响了我的快乐学习（常见于课堂上一布置作业下面就叫苦连天）该挂还是挂或者 60 分万岁。在不少西方学校学生，课程表可以自行安排，一个课可以开多个班次照顾灵活性，学霸可以比别人多上任意节课，也可以跨专业选课或者减少课程增加实习或研究，而且难度自选只要你点过前置技能就行。</li>
</ol>
<p>有类似迟先生这样诉求的人很多，可是一个系统很难由系统内的个体改变，所以很多个体选择了做局部优化趋利避害陪玩成为既得利益者，或者全局优化更换自己所处的系统。</p>
<p>只要所处系统里的大部分个体都已经默许了这个游戏规则，无论迟先生是「凡尔赛」还是「理想主义」，改变赛道规则就会被其他个体认为侵害到利益。小孩才分对错，成年人的屁股都是歪得，都是各取所需。</p>
<blockquote>
<p>作者：黄玄<br>链接：<a href="https://www.zhihu.com/question/439622084/answer/1685314467">https://www.zhihu.com/question/439622084/answer/1685314467</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Share</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器实现静默打印</title>
    <url>/2021/09/25/browser-silent-printing/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近有一个需求涉及到<code>静默打印</code>,也就是打印时不需要弹出打印配置框，而是直接调用打印机</p>
<img data-src="https://cdn.jonty.top/img/image-20210925223925277.png">

<blockquote>
<p>在实际生产中，采用的是FastReport实现静默打印方案，以下仅供参考</p>
</blockquote>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>经过讨论大概是以下几种方案：</p>
<ul>
<li>把打印配置弹窗干掉、模拟点击打印事件</li>
<li>浏览器实现静默打印</li>
<li>本地运行一个服务，客户端返回请求状态后请求本地接口调用打印</li>
</ul>
<h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>第一种没有去尝试，所以先讲讲第二种解决方案，通过前端控制浏览器打印，但是百度一圈下来的解决方案都是通过设置浏览器参数，然后创建一个快捷程序并设置启动参数，操作很简单，但实在不符合需求，总不能给每个客户也这样配置一边吧，所以第二种也<code>pass</code>。</p>
<p>操作如下：</p>
<img data-src="https://cdn.jonty.top/img/image-20210925225136606.png">

<h5 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h5><p>重点讲一下方案，也是目前在探索中，后续有更好的方法会发出来，也欢迎各位提出更好的解决方案。</p>
<p>目前仅支持windows环境，<code>winform</code>最终是<code>.exe</code>程序</p>
<h4 id="新建Winform程序"><a href="#新建Winform程序" class="headerlink" title="新建Winform程序"></a>新建Winform程序</h4><h5 id="使用VS2019创建"><a href="#使用VS2019创建" class="headerlink" title="使用VS2019创建"></a>使用<code>VS2019</code>创建</h5><img data-src="https://cdn.jonty.top/img/image-20210925225722885.png">

<h5 id="拖入ComboBox控件，用来选择本地打印机"><a href="#拖入ComboBox控件，用来选择本地打印机" class="headerlink" title="拖入ComboBox控件，用来选择本地打印机"></a>拖入<code>ComboBox</code>控件，用来选择本地打印机</h5><img data-src="https://cdn.jonty.top/img/image-20210925225843764.png">

<h5 id="获取打印机列表填充下拉"><a href="#获取打印机列表填充下拉" class="headerlink" title="获取打印机列表填充下拉"></a>获取打印机列表填充下拉</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 加载打印机列表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitPrinterList</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> print = <span class="keyword">new</span> PrintDocument();</span><br><span class="line">    <span class="keyword">var</span> defaultPrinter = print.PrinterSettings.PrinterName;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PrinterSettings.InstalledPrinters.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = PrinterSettings.InstalledPrinters[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp == defaultPrinter)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp += <span class="string">&quot;(默认)&quot;</span>; <span class="comment">// 标记默认的打印机</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.comboBox1.Items.Add(tmp);  <span class="comment">// 下拉项新增</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    InitPrinterList(); <span class="comment">// 窗体加载事件中调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ctrl-f5运行窗体查看效果"><a href="#ctrl-f5运行窗体查看效果" class="headerlink" title="ctrl+f5运行窗体查看效果"></a><code>ctrl+f5</code>运行窗体查看效果</h5><img data-src="https://cdn.jonty.top/img/image-20210925230348173.png">

<h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>没有使用<code>socket</code>,而是在<code>winform</code>中创建了一个<code>http</code>服务，并开放端口供浏览器本地请求</p>
<p>先新增两个依赖：</p>
<ol>
<li>BeetleX 1.5.1.7 </li>
<li>BeetleX.FastHttpApi 1.8.2.61</li>
</ol>
<p>这两个版本是支持<code>.net framework</code>的，<a href="https://github.com/IKende/BeetleX/">BeetleX</a>是一个基于.Net Core开发的一个开源跨平台TCP通讯框架，它提供了完整的会话服务管理，协议分析扩展，TLS支持和缓冲区管理等完全服务基础功能。有兴趣的可以去Github参观一下。</p>
<h5 id="初始化Http服务"><a href="#初始化Http服务" class="headerlink" title="初始化Http服务"></a>初始化Http服务</h5><p>在Load方法中调用<code>InitHttpServer()</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 初始化网关服务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">InitHttpServer</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _httpApiServer = <span class="keyword">new</span> HttpApiServer(<span class="keyword">new</span> HttpOptions()</span><br><span class="line">    &#123;</span><br><span class="line">        Port = <span class="number">9000</span>, <span class="comment">// 本地开放的端口 要注意不要被占用</span></span><br><span class="line">        LogToConsole = <span class="literal">true</span>,</span><br><span class="line">        LogLevel = BeetleX.EventArgs.LogType.Debug</span><br><span class="line">     &#125;);</span><br><span class="line">    _httpApiServer.IPv4Tables.AddWhite(<span class="string">&quot;127.0.0.1/24&quot;</span>);</span><br><span class="line">    _httpApiServer.Options.CrossDomain = <span class="keyword">new</span> OptionsAttribute() &#123; AllowOrigin = <span class="string">&quot;*&quot;</span>, AllowMethods = <span class="string">&quot;*&quot;</span>, AllowHeaders = <span class="string">&quot;*&quot;</span> &#125;; <span class="comment">// 跨域配置，这个很重要</span></span><br><span class="line">    _httpApiServer.Register(<span class="keyword">typeof</span>(Home).Assembly);</span><br><span class="line">    _httpApiServer.Open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册的程序就是<code>Controller</code></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">Controller(BaseUrl = <span class="meta-string">&quot;/home&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Home</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Hello Word</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>string:  you name<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>string<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> &#123; Hello = <span class="string">&quot;hello &quot;</span> + name, Time = DateTime.Now &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制下服务的生命周期</p>
<img data-src="https://cdn.jonty.top/img/image-20210925231850394.png">

<p>使用<code>Postman</code>请求一下</p>
<p><code>http://localhost:9000/home/Hello?name=test</code> 返回成功</p>
<img data-src="https://cdn.jonty.top/img/image-20210925232302311.png">

<h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p>客户端向本地请求打印接口，传入参数</p>
<p>这里传入了pdf文件地址，通过请求文件并打印</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打印接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;printCount&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">int</span> printCount</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    url = url.Replace(<span class="string">&quot;\n &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(WebRequest.Create(url) <span class="keyword">is</span> HttpWebRequest request)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(request.GetResponse() <span class="keyword">is</span> HttpWebResponse response)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> stream = response.GetResponseStream();</span><br><span class="line">    <span class="comment">// 创建打印机</span></span><br><span class="line">    <span class="keyword">var</span> pdf = <span class="keyword">new</span> InputPdf(ReadFully(stream));</span><br><span class="line">    <span class="keyword">var</span> printJob = <span class="keyword">new</span> PrintJob(Printer.Default, pdf); <span class="comment">// 默认打印机</span></span><br><span class="line">    printJob.PrintOptions.Copies = printCount; <span class="comment">//打印数量</span></span><br><span class="line">    printJob.Print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取字节流</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;input&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">ReadFully</span>(<span class="params">Stream input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        input.CopyTo(ms);</span><br><span class="line">        <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>打印插件调用的<code>DynamicPdf</code></p>
<p>打印插件文档：<a href="https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options">https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options</a> </p>
</blockquote>
<h4 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h4><p>可以通过下拉框选择的打印机打印,需要记录选择的打印机</p>
<p>通过读取和设置<code>config</code>值实现,引入<code>System.Configuration</code></p>
<p>ConfigHelper类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConfigHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>返回*.exe.config文件中appSettings配置节的value项  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAppConfig</span>(<span class="params"><span class="built_in">string</span> strKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">        <span class="keyword">var</span> config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">        <span class="keyword">return</span> config.AppSettings.Settings.AllKeys.Any(key =&gt; key == strKey) ? config.AppSettings.Settings[strKey].Value.ToString() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>在*.exe.config文件中appSettings配置节增加一对键值对  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;newKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;newValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateAppConfig</span>(<span class="params"><span class="built_in">string</span> newKey, <span class="built_in">string</span> newValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">        <span class="keyword">var</span> config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">        <span class="keyword">var</span> exist = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> config.AppSettings.Settings.AllKeys)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == newKey)</span><br><span class="line">            &#123;</span><br><span class="line">                exist = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exist)</span><br><span class="line">        &#123;</span><br><span class="line">            config.AppSettings.Settings.Remove(newKey);</span><br><span class="line">        &#125;</span><br><span class="line">        config.AppSettings.Settings.Add(newKey, newValue);</span><br><span class="line">        config.Save(ConfigurationSaveMode.Modified);</span><br><span class="line">        ConfigurationManager.RefreshSection(<span class="string">&quot;appSettings&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="设置下拉选择事件"><a href="#设置下拉选择事件" class="headerlink" title="设置下拉选择事件"></a>设置下拉选择事件</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comboBox1_SelectedIndexChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新setting设置</span></span><br><span class="line">    <span class="keyword">var</span> selectedPrint = <span class="keyword">this</span>.comboBox1.SelectedItem.ToString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(selectedPrint))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除掉初始化打印机列表添加的默认文本</span></span><br><span class="line">    <span class="keyword">if</span> (selectedPrint.Contains(<span class="string">&quot;默认&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        selectedPrint = selectedPrint.Replace(<span class="string">&quot;(默认)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigHelper.UpdateAppConfig(<span class="string">&quot;defaultPrint&quot;</span>, selectedPrint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="优化后的打印接口"><a href="#优化后的打印接口" class="headerlink" title="优化后的打印接口"></a>优化后的打印接口</h5><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 获取设置的打印机 （读取配置）</span></span><br><span class="line"><span class="keyword">var</span> defaultPrinter = ConfigHelper.GetAppConfig(<span class="string">&quot;defaultPrint&quot;</span>);</span><br><span class="line"><span class="comment">// 创建打印机</span></span><br><span class="line"><span class="keyword">var</span> printer = <span class="keyword">new</span> Printer(defaultPrinter);</span><br><span class="line"><span class="keyword">var</span> pdf = <span class="keyword">new</span> InputPdf(ReadFully(stream));</span><br><span class="line"><span class="keyword">var</span> printJob = <span class="keyword">new</span> PrintJob(printer, pdf);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这样就能实现简单的静默打印，当然还有很多欠缺之处，后续优化，不当之处请指出</p>
]]></content>
      <categories>
        <category>搬砖那些事儿</category>
      </categories>
      <tags>
        <tag>WinForm</tag>
        <tag>Print</tag>
        <tag>.NET</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker中安装jira</title>
    <url>/2021/09/23/install-jira-in-docker/</url>
    <content><![CDATA[<h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>其他数据库请参考文档</p>
<p><a href="https://confluence.atlassian.com/adminjiraserver/connecting-jira-applications-to-a-database-938846850.html">Connecting Jira applications to a database</a></p>
<p>这里使用的是PostgreSql</p>
<ol>
<li><p>创建空数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jiradb <span class="keyword">WITH</span> ENCODING <span class="string">&#x27;UNICODE&#x27;</span> LC_COLLATE <span class="string">&#x27;C&#x27;</span> LC_CTYPE <span class="string">&#x27;C&#x27;</span> TEMPLATE template0;</span><br></pre></td></tr></table></figure></li>
<li><p>创建用户(也可以使用默认用户)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jira <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;bb123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 给权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE jiradb <span class="keyword">TO</span> jira</span><br></pre></td></tr></table></figure></li>
</ol>
<p><img data-src="https://cdn.jonty.top/img/20210711235815.png" alt="image-20210708171601263"></p>
<h3 id="Jira安装"><a href="#Jira安装" class="headerlink" title="Jira安装"></a>Jira安装</h3><p><a href="https://confluence.atlassian.com/adminjiraserver071/jira-applications-installation-requirements-802592164.html">需要保证服务器有<code>4GB</code>以上内存</a></p>
<p>我在安装的时候1核2G跑不动换成了4核8G👀</p>
<p><img data-src="https://cdn.jonty.top/img/20210711235851.png" alt="image-20210708164819758"></p>
<h4 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h4><p>查看docker文档</p>
<p><img data-src="https://cdn.jonty.top/img/20210712000508.png"></p>
<ol>
<li>创建卷</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create --name jiraVolume</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>拉取镜像并运行</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -v jiraVolume:/var/atlassian/application-data/jira --name=<span class="string">&quot;jira&quot;</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> atlassian/jira-software:<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps：注意：我们破解的版本的为8.1.0，拉镜像需要指定版本</p>
</blockquote>
<p><img data-src="https://cdn.jonty.top/img/20210712001529.png" alt="image-20210708170606734"></p>
<ol start="4">
<li>浏览器打开<code>IP:8080</code>端口</li>
</ol>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初次打开为英文，可在右上角设置为中文。选择第二个，自定义配置</p>
<p><img data-src="https://cdn.jonty.top/img/20210712001604.png" alt="image-20210708170935567"></p>
<p>点击下一步</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102437.png" alt="image-20210708171706660"></p>
<p><img data-src="https://cdn.jonty.top/img/20210721102449.png" alt="image-20210708171725265"></p>
<p>点击下一步，等待几分钟，正在创建数据库表</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102444.png" alt="image-20210708171808729"></p>
<p>数据库创建完成之后</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102454.png" alt="image-20210708172102316"></p>
<p>点击下一步，获取授权码，可以有30天试用</p>
<p>需要先按照提示去官方获取试用授权码，这样才可以进入系统，然后进行破解包的替换，重启服务即可。</p>
<p>点击连接去官网生成许可证</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102458.png" alt="image-20210708172300316"></p>
<p>我这里是直接用微软账号登录申请的，点击生成按钮后自动跳转回来并自动填入授权码</p>
<p><img data-src="https://cdn.jonty.top/img/20210712001647.png" alt="image-20210708172452780"></p>
<p>配置管理员账号</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102555.png" alt="image-20210708172617985"></p>
<p>邮件服务器，以后再说</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102602.png" alt="image-20210708172653783"></p>
<p>设置默认语言</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102726.png" alt="image-20210708172918673"></p>
<p>选择头像</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102743.png" alt="image-20210708172949746"></p>
<p>这里可以选择创建示例项目</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102835.png" alt="image-20210708173027592"></p>
<p><img data-src="https://cdn.jonty.top/img/20210721102859.png" alt="image-20210708173118682"></p>
<p>进入首页面板</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102910.png" alt="image-20210708173327874"></p>
<p>点击右上角的管理&gt;应用程序</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102535.png" alt="image-20210708173606783"></p>
<h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><ol>
<li>下载破解包</li>
</ol>
<p><a href="https://cloud.189.cn/t/2MFZFvriQ7fe">atlassian-extras-3.2</a></p>
<ol start="2">
<li>使用ftp工具上传到服务器</li>
</ol>
<p><img data-src="https://cdn.jonty.top/img/20210721102527.png" alt="image-20210708174235612"></p>
<ol start="3">
<li><p>替换</p>
<p>通过docker ps 获取jira容器id，然后把破解包上传至宿主机通过docker cp 命令复制到容器中，重启jira容器　</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker cp atlassian-extras-3.2.jar  06849baab1a6:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib</span><br><span class="line"></span><br><span class="line">docker restart 06849baab1a6</span><br></pre></td></tr></table></figure>



<p><img data-src="https://cdn.jonty.top/img/20210721091151.png" alt="image-20210708174512592"></p>
</li>
</ol>
<p>破解成功</p>
<p><img data-src="https://cdn.jonty.top/img/20210721102816.png" alt="image-20210708174733130"></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Jira</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/05/hello-world/</url>
    <content><![CDATA[<div class="note info"><p>我觉得程序员这个群体是非常幸运的一群人，我们生在一个技术改变世界的时代，而我们可能正做着能够改变世界的技术，这是何等的荣耀和机遇。 ——《MacTalk 人生元编程》</p>
</div>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大概每个程序员在开篇都会写一个<code>Hello World!</code>来作为开始。这是我的第一篇博客，就来写一写程序员眼中的<code>Hello World!</code>。</p>
<h3 id="这是一个-01-的世界"><a href="#这是一个-01-的世界" class="headerlink" title="这是一个 01 的世界"></a>这是一个 01 的世界</h3><p>每个伟大的梦想都来自最小的尝试。秒写一个代码：<code>hello.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码相信大家都很熟悉，无非就是输出一个<code>Hello world</code>字符串。下面我们就来分析一下这段代码。</p>
<h4 id="预处理阶段"><a href="#预处理阶段" class="headerlink" title="预处理阶段"></a>预处理阶段</h4><p>我们可以使用<code>gcc -E hello.c -o hello.i</code>来将预处理之后的数据存到<code>hello.i</code>中，或者使用<code>&gt;</code>重定向到指定的文件，预处理的结果比较简单，大家可以直接看输出的结果。 </p>
<h4 id="编译阶段"><a href="#编译阶段" class="headerlink" title="编译阶段"></a>编译阶段</h4><p><code>gcc -S hello.i -o hello.s</code>将预处理之后的文件编译成<code>hello.s</code>文件。<br>在编译阶段，编译器检查代码的规范性、是否有语法错误等，在检查无误后，gcc 把代码翻译成汇编语言。 我们来看一下编译之后的文件 <code>&gt;more hello.s</code></p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">    .file	<span class="string">&quot;hello.c&quot;</span></span><br><span class="line">.section	.rodata</span><br><span class="line">.LC0:</span><br><span class="line">    .<span class="type">string</span>	<span class="string">&quot;Hello world&quot;</span></span><br><span class="line">    .<span class="keyword">text</span></span><br><span class="line">    .globl	main</span><br><span class="line">    .type	main, @<span class="keyword">function</span></span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line">.LFB0:</span><br><span class="line">    .cfi_startproc</span><br><span class="line">    pushq	%rbp</span><br><span class="line">    .cfi_def_cfa_offset <span class="number">16</span></span><br><span class="line">    .cfi_offset <span class="number">6</span>, -<span class="number">16</span></span><br><span class="line">    movq	%rsp, %rbp</span><br><span class="line">    .cfi_def_cfa_register <span class="number">6</span></span><br><span class="line">    movl	$.LC0, %edi</span><br><span class="line">    <span class="keyword">call</span>	puts</span><br><span class="line">    movl	$<span class="number">0</span>, %eax</span><br><span class="line">    popq	%rbp</span><br><span class="line">    .cfi_def_cfa <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">    ret</span><br><span class="line">    .cfi_endproc</span><br><span class="line">.LFE0:</span><br><span class="line">    .size	main, .-main</span><br><span class="line">    .ident	<span class="string">&quot;GCC: (Ubuntu 4.8.2-19ubuntu1) 4.8.2&quot;</span></span><br><span class="line">    .section	.note.GNU-stack,<span class="string">&quot;&quot;</span>,@progbits</span><br></pre></td></tr></table></figure>

<h4 id="汇编阶段"><a href="#汇编阶段" class="headerlink" title="汇编阶段"></a>汇编阶段</h4><p>汇编阶段将编译阶段生成的<code>.s</code>文件转成二进制目标代码。 <code>gcc -c hello.s -o hello.o</code> 生成了<code>.o</code>二进制文件，这时就不能使用<code>more</code>来进行文本查看了，可以使用<code>objdump</code>命令。 <code>objdump -d hello.o</code></p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line">hello.o:     file format elf64-x86-<span class="number">64</span></span><br><span class="line"></span><br><span class="line">Disassembly <span class="keyword">of</span> section .<span class="keyword">text</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">0000000000000000</span> &lt;main&gt;:</span><br><span class="line">   <span class="number">0</span>:	<span class="number">55</span>                   	push   %rbp</span><br><span class="line">   <span class="number">1</span>:	<span class="number">48</span> <span class="number">89</span> e5             	mov    %rsp,%rbp</span><br><span class="line">   <span class="number">4</span>:	bf <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0</span>x0,%edi</span><br><span class="line">   <span class="number">9</span>:	e8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	callq  e &lt;main+<span class="number">0</span>xe&gt;</span><br><span class="line">   e:	b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0</span>x0,%eax</span><br><span class="line">  <span class="number">13</span>:	<span class="number">5</span>d                   	pop    %rbp</span><br><span class="line">  <span class="number">14</span>:	c3                   	retq</span><br></pre></td></tr></table></figure>

<p>我们可以看到，<code>main</code>函数的汇编代码。</p>
<h4 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h4><p>最后就是链接啦，将<code>.o</code>文件链接成可执行文件<code>gcc hello.o -o hello</code> ，我们仍然使用<code>objdump</code>命令来查看<code>hello</code>文件 <code>objdump -d hello</code><br>输出比较长，我们截取 main 函数的部分来看。</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="number">000000000040052</span>d &lt;main&gt;:</span><br><span class="line">  <span class="number">40052</span>d:	<span class="number">55</span>                   	push   %rbp</span><br><span class="line">  <span class="number">40052</span>e:	<span class="number">48</span> <span class="number">89</span> e5             	mov    %rsp,%rbp</span><br><span class="line">  <span class="number">400531</span>:	bf d4 <span class="number">05</span> <span class="number">40</span> <span class="number">00</span>       	mov    $<span class="number">0</span>x4005d4,%edi</span><br><span class="line">  <span class="number">400536</span>:	e8 d5 fe ff ff       	callq  <span class="number">400410</span> &lt;puts@plt&gt;</span><br><span class="line">  <span class="number">40053</span>b:	b8 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>       	mov    $<span class="number">0</span>x0,%eax</span><br><span class="line">  <span class="number">400540</span>:	<span class="number">5</span>d                   	pop    %rbp</span><br><span class="line">  <span class="number">400541</span>:	c3                   	retq</span><br><span class="line">  <span class="number">400542</span>:	<span class="number">66</span> <span class="number">2</span>e <span class="number">0</span>f <span class="number">1</span>f <span class="number">84</span> <span class="number">00</span> <span class="number">00</span> 	nopw   %cs:<span class="number">0</span>x0(%rax,%rax,<span class="number">1</span>)</span><br><span class="line">  <span class="number">400549</span>:	<span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">  <span class="number">40054</span>c:	<span class="number">0</span>f <span class="number">1</span>f <span class="number">40</span> <span class="number">00</span>          	nopl   <span class="number">0</span>x0(%rax)</span><br></pre></td></tr></table></figure>

<p>最后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;./hello</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure>

<p>到现在我们只是从一个<code>Hello World</code>程序的输出结果走马观花了一下程序运行的过程，对于过程中的每一个文件分析并没有写出，算是留一点神秘感吧，从程序数据组织，包括代码段、数据段等，到汇编代码的底层实现，计算机有着太多的东西让我们去发现和思考。</p>
<p>正如开头所说，生在这样的一个时代是非常幸运的。但行好事，莫问前程，出发！</p>
]]></content>
      <categories>
        <category>人生是一场未知的旅行</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
