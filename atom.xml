<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonty Blog</title>
  
  <subtitle>记录搬砖生活</subtitle>
  <link href="https://jonty.top/atom.xml" rel="self"/>
  
  <link href="https://jonty.top/"/>
  <updated>2023-03-23T02:20:23.981Z</updated>
  <id>https://jonty.top/</id>
  
  <author>
    <name>JontyWang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Blazor-04】- Razor组件</title>
    <link href="https://jonty.top/2023/03/23/razor-components/"/>
    <id>https://jonty.top/2023/03/23/razor-components/</id>
    <published>2023-03-23T02:08:52.000Z</published>
    <updated>2023-03-23T02:20:23.981Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Blazor是一个<strong>组件驱动</strong>的框架，这意味着组件是<strong>Blazor</strong>应用的<strong>基本构建块</strong>。</li><li>它们可以嵌套、复用，甚至可以在多个项目之间共享。</li><li>组件文件的扩展名为 <strong>.razor</strong></li></ul><p>下面是我们新建项目时创建的<strong>Counter</strong>组件</p><p><code>Counter.razor</code></p><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@page &quot;/counter&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PageTitle</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">PageTitle</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">role</span>=<span class="string">&quot;status&quot;</span>&gt;</span>Current count: @currentCount<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;IncrementCount&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    private int currentCount = 0;</span><br><span class="line"></span><br><span class="line">    private void IncrementCount()</span><br><span class="line">    &#123;</span><br><span class="line">        currentCount++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 可以看到这是两种语言的结合</p><ul><li>HTML标记定义了组件的用户界面（即外观）。</li><li>定义处理逻辑的C#代码</li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220412230131617.png" alt="image-20220412230131617"></p><p>在这个例子中：</p><ol><li>每次单击按钮时，C#代码都会将<code>currentCount</code>变量的值增加<code>1</code></li><li>单击按钮时，必须调用<code>IncrementCount()</code>函数，使用<code>onclick</code>属性调用的</li><li>在HTML中，要访问私有变量<code>currentCount</code>，需要使用<code>@</code>符号</li><li>C#代码放在<code>@code</code>块中，可以有多个<code>@code</code>块</li></ol><p>编译应用程序时，将 HTML 和 C# 代码转换为组件类。生成的类的名称与组件文件的名称匹配。组件文件名必须<strong>以大写字符开头</strong>。如果添加以小写字符开头的组件文件，则代码将无法编译，并且会出现以下编译器错误。</p><blockquote><p><strong>组件名称不能以小写字符开头</strong></p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220412225942530.png" alt="image-20220412225942530"></p><p>请记住，Blazor Server项目在服务器上运行。</p><ul><li>在服务器和客户端浏览器之间建立 SignalR 连接。在最初呈现计数器组件之后并且当用户单击按钮时。</li><li>有关单击事件的信息通过 SignalR 连接发送到服务器。</li><li>作为对该事件的响应，组件会重新生成，但不会将整个 HTML 发送回客户端。它只是差异，即渲染树中的差异，在这种情况下，是发送到客户端浏览器的新计数器值。</li><li>由于仅更新页面的更改部分而不是重新加载和更新整个页面，因此应用程序感觉更快，对用户的响应更快。</li></ul><h2 id="嵌套Blazor组件"><a href="#嵌套Blazor组件" class="headerlink" title="嵌套Blazor组件"></a>嵌套Blazor组件</h2><p>呈现Counter组件的一种方法是在浏览器中导航到<code>/counter</code>。此路径由组件顶部的<code>@page</code>指令指定。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@page &quot;/counter&quot;</span><br></pre></td></tr></table></figure><p>一个组件也可以使用 HTML 语法嵌套在另一个组件中。例如，使用**&lt; Counter /&gt;<strong>将</strong>Counter**组件嵌套在其他组件中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@page <span class="string">&quot;/test&quot;</span></span><br><span class="line">&lt;PageTitle&gt;test&lt;/PageTitle&gt;</span><br><span class="line">&lt;h3&gt;test&lt;/h3&gt;</span><br><span class="line">    </span><br><span class="line">@* 嵌套组件 *@</span><br><span class="line">&lt;Counter&gt;&lt;/Counter&gt;</span><br><span class="line">@code &#123;&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220412230557300.png" alt="image-20220412230557300"></p><h2 id="组件存放位置"><a href="#组件存放位置" class="headerlink" title="组件存放位置"></a>组件存放位置</h2><p>组件可以放在Blazor项目中任何位置。将生成网页的组件放置在<strong>Pages</strong>文件夹中并将可重用的非页面组件放置在<strong>Shared</strong>文件夹中是一种很好的做法。</p><p>如果需要，还可以将它们放在项目中完全不同的<strong>自定义文件夹</strong>中。</p><h2 id="拆分组件HTML和C-代码"><a href="#拆分组件HTML和C-代码" class="headerlink" title="拆分组件HTML和C#代码"></a>拆分组件HTML和C#代码</h2><p>在此示例中，HTML 和 C# 都在一个文件中。这对于像这个计数器这样的简单组件来说很好，但是将 HTML 和 C# 代码分离到它们自己的文件中通常是一个好习惯。它不仅从维护的角度来看很好，而且也很容易进行单元测试。</p><p>有 2 种方法，将组件 HTML 和 C# 代码拆分为各自独立的文件。</p><ol><li>部分文件方法</li><li>基类方法</li></ol><p>我们将在下一节中讨论这两种方法。</p>]]></content>
    
    
    <summary type="html">Blazor系列翻译04-Razor组件</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="Blazor" scheme="https://jonty.top/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>【Blazor-03】- Blazor项目结构</title>
    <link href="https://jonty.top/2023/03/23/blazor-project-structure/"/>
    <id>https://jonty.top/2023/03/23/blazor-project-structure/</id>
    <published>2023-03-23T02:07:10.000Z</published>
    <updated>2023-03-23T02:20:23.981Z</updated>
    
    <content type="html"><![CDATA[<p>了解ASP.NET Core Blazor项目中的文件和文件夹</p><p><img data-src="https://cdn.jonty.top/img/image-20220411230426968.png" alt="image-20220411230426968"></p><h2 id="Program-cs"><a href="#Program-cs" class="headerlink" title="Program.cs"></a>Program.cs</h2><p>应用程序启动代码，用于：</p><ul><li>配置应用所需服务</li><li>请求管道注册中间件</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> StudentManagement.Api.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add services to the container.</span></span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the HTTP request pipeline.</span></span><br><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p><code>builder</code> 是一个 <code>WebApplicationBuilder</code>，用于将配置、日志和其他服务添加到<strong>DI</strong>容器中。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务到容器中</span></span><br><span class="line"></span><br><span class="line">builder.Services.AddControllers();</span><br><span class="line">builder.Services.AddEndpointsApiExplorer();</span><br><span class="line">builder.Services.AddSwaggerGen();</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>请求处理管道由一系列中间件组件组成。 每个组件在 <a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/http-context?view=aspnetcore-6.0"><code>HttpContext</code></a> 上执行操作，调用管道中的下一个中间件或终止请求。</p><p>通过调用 <code>Use&#123;Feature&#125;</code> 扩展方法，向管道添加中间件组件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = builder.Build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册HTTP请求管道</span></span><br><span class="line"><span class="keyword">if</span> (app.Environment.IsDevelopment())</span><br><span class="line">&#123;</span><br><span class="line">    app.UseSwagger();</span><br><span class="line">    app.UseSwaggerUI();</span><br><span class="line">&#125;</span><br><span class="line">app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">app.MapControllers();</span><br><span class="line"></span><br><span class="line">app.Run();</span><br></pre></td></tr></table></figure><h2 id="wwwroot"><a href="#wwwroot" class="headerlink" title="wwwroot"></a>wwwroot</h2><p>对于所有项目类型，这个文件夹包含了静态文件，如图片、样式表等。</p><h2 id="App-razor"><a href="#App-razor" class="headerlink" title="App.razor"></a>App.razor</h2><p>这是应用程序的根组件。它使用了内置的Router组件，并设置了客户端路由。正是这个Router组件拦截了浏览器的导航，并渲染出与请求地址匹配的页面。当找到匹配后，Router使用Found属性来显示内容。如果没有找到匹配的内容，NotFound属性用于显示消息–对不起，这个地址没有任何内容。</p><h2 id="页面文件夹"><a href="#页面文件夹" class="headerlink" title="页面文件夹"></a>页面文件夹</h2><p>这个文件夹包含_Host  Razor Pages和组成Brazor应用程序的可路由组件。这些组件的扩展名是**.razor**。</p><ul><li>索引组件 (Index.razor) - 当我们导航到根应用程序的URL时显示。</li><li>Counter组件 (Counter.razor) - 当我们导航到路径/counter时显示。</li><li>FetchData组件(FetchData.razor) - 当我们导航到路径/fetchdata时显示。</li><li>Error组件(Error.razor) - 当blazor应用程序中出现未处理的异常时，会被渲染。</li></ul><h2 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h2><p>当我们导航到/fetchdata的路径时显示。顾名思义，包含了共享的组件</p><h2 id="MainLayout组件-MainLayout-razor"><a href="#MainLayout组件-MainLayout-razor" class="headerlink" title="MainLayout组件 (MainLayout.razor)"></a>MainLayout组件 (MainLayout.razor)</h2><p>应用程序的主要布局组件</p><h2 id="NavMenu组件-NavMenu-razor"><a href="#NavMenu组件-NavMenu-razor" class="headerlink" title="NavMenu组件 (NavMenu.razor)"></a>NavMenu组件 (NavMenu.razor)</h2><p>实现了侧边栏上的导航菜单。NavLink组件，渲染导航链接到其他Razor组件，如索引、计数器和fetchdata组件。这个NavLink组件足够智能，如果导航菜单项当前显示的是它的组件，那么它可以高亮显示导航菜单项。</p><h2 id="Imports-razor"><a href="#Imports-razor" class="headerlink" title="_Imports.razor"></a>_Imports.razor</h2><p>这就像<strong>Asp.Net Core MVC</strong>项目中的**_ViewImports.cshtml**文件。这个文件包含了常用的命名空间，所以我们不需要在每一个razor组件中都包含它们。</p><h2 id="wwwroot-index-html"><a href="#wwwroot-index-html" class="headerlink" title="wwwroot/index.html"></a>wwwroot/index.html</h2><p>这是<strong>Blazor WebAssembly</strong>项目中的根页面，以<strong>html</strong>页面的形式实现。当第一个请求进入应用程序时，最初服务的就是这个页面。它有标准的HTML、HEAD和BODY标记。它指定了根应用程序组件<strong>App.razor</strong>应该被渲染到哪里。可以在根项目文件夹中找到这个App.razor根组件。它作为一个HTML元素<app>包含在页面中。我们将在接下来的视频中详细讨论razor组件。</p><p>这个<strong>index.html</strong>页面还加载了<strong>Blazor WebAssembly JavaScript</strong>文件（**_framework/blazor.webassembly.js**）。这个文件就是负责下载的文件。</p><ul><li>编译后的blazor应用程序，它的依赖关系和.NET运行时。</li><li>它还会初始化运行时，以便在浏览器中运行blazor应用程序。</li></ul><h2 id="Pages-Host-cshtml"><a href="#Pages-Host-cshtml" class="headerlink" title="Pages/_Host.cshtml"></a>Pages/_Host.cshtml</h2><p>这是应用程序的根页面，通过调用 MapFallbackToPage(“/_Host”) 方法指定。它的实现是<strong>Razor</strong>页面。</p><p>这个页面是在第一个请求到达应用程序时提供的。它具有标准的 HTML、HEAD 和 BODY 标签。它还指定了根应用程序组件 App 组件 (App.razor) 必须呈现的位置。最后，它还加载 blazor.server.js JavaScript 文件，该文件在服务器和客户端浏览器之间建立实时 SignalR 连接。此连接用于在客户端和服务器之间交换信息。SignalR 是一个很好的框架，用于向应用程序添加实时 Web 功能。 </p><h2 id="Data-folder-Blazor-Server"><a href="#Data-folder-Blazor-Server" class="headerlink" title="Data folder (Blazor Server)"></a>Data folder (Blazor Server)</h2><p>包含与示例 WeatherForecast 服务相关的代码文件</p><h2 id="appsettings-json-Blazor-Server"><a href="#appsettings-json-Blazor-Server" class="headerlink" title="appsettings.json (Blazor Server)"></a>appsettings.json (Blazor Server)</h2><p>就像 <strong>ASP.NET Core MVC</strong>项目一样，Blazor 项目也使用此文件来存储配置设置。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Blazor Server 和 Blazor WebAssembly 只是我们托管 Blazor 应用程序的两种不同方式。</p><p>Blazor 应用程序中的所有内容都是 razor 组件。组件是 Blazor 应用程序的基本构建块。</p><p>对于 Blazor 服务器应用和 Blazor WebAssembly 应用，我们构建这些组件的方式是相同的。</p><p>因此，只有一个 Blazor 框架，而构建的方式，<strong>Blazor Server</strong>应用程序和 <strong>Blazor WebAssembly</strong> 应用程序非常相似。</p><p><strong>唯一的区别</strong>在于应用程序的<strong>托管方式</strong>。</p>]]></content>
    
    
    <summary type="html">Blazor系列翻译03-Blazor项目结构</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="Blazor" scheme="https://jonty.top/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>Blazor系列文章目录</title>
    <link href="https://jonty.top/2023/03/23/blazor-server-basic-tutorial/"/>
    <id>https://jonty.top/2023/03/23/blazor-server-basic-tutorial/</id>
    <published>2023-03-23T01:57:11.000Z</published>
    <updated>2023-03-23T02:19:30.426Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>Blazor可以直接在浏览器中运行C#代码，使用WebAssembly。它和Angular、React、Vue等JavaScript框架一样，在相同的安全沙盒中运行。不仅仅是C#，我们可以使用WebAssembly在浏览器中运行任何类型的代码。</p><p>WebAssembly是基于开放的Web标准。所以它是所有现代浏览器包括移动浏览器的原生部分。这意味着blazor应用程序的工作，不需要像<code>silverlight</code>和<code>flash</code>时代那样安装任何特殊的插件。</p></div><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li><input checked="" disabled="" type="checkbox"> <a href="../what-is-blazor">Blazor 简介</a></li><li><input checked="" disabled="" type="checkbox"> <a href="../blazor-hosting-models">Blazor 托管模型</a></li><li><input checked="" disabled="" type="checkbox"> <a href="../blazor-project-structure">Blazor 项目结构</a></li><li><input checked="" disabled="" type="checkbox"> <a href="../razor-components">Blazor Razor 组件</a></li><li><input disabled="" type="checkbox"> Blazor 拆分组件</li><li><input disabled="" type="checkbox"> Blazor 模型类</li><li><input disabled="" type="checkbox"> 员工列表组件</li><li><input disabled="" type="checkbox"> Blazor 加载指示器</li><li><input disabled="" type="checkbox"> Blazor 数据访问策略</li><li><input disabled="" type="checkbox"> 什么是 RESTful API</li><li><input disabled="" type="checkbox"> 创建 REST API</li><li><input disabled="" type="checkbox"> REST API 数据库上下文</li><li><input disabled="" type="checkbox"> REST API 中的存储库模式</li><li><input disabled="" type="checkbox"> REST API 获取列表</li><li><input disabled="" type="checkbox"> REST API 通过 ID 获取</li><li><input disabled="" type="checkbox"> 在 REST API 中发布</li><li><input disabled="" type="checkbox"> REST API 模型验证</li><li><input disabled="" type="checkbox"> 使用 REST API</li><li><input disabled="" type="checkbox"> 在 REST API 中删除</li><li><input disabled="" type="checkbox"> 在 REST API 中搜索</li><li><input disabled="" type="checkbox"> 从 Blazor 调用 REST API</li><li><input disabled="" type="checkbox"> Blazor 路由参数</li><li><input disabled="" type="checkbox"> 来自多个表的数据</li><li><input disabled="" type="checkbox"> Blazor 事件处理</li><li><input disabled="" type="checkbox"> Blazor 数据绑定</li><li><input disabled="" type="checkbox"> Blazor 双向绑定</li><li><input disabled="" type="checkbox"> 组件参数</li><li><input disabled="" type="checkbox"> Blazor 事件回调</li><li><input disabled="" type="checkbox"> 构建 Blazor 表单</li><li><input disabled="" type="checkbox"> Blazor 选择列表</li><li><input disabled="" type="checkbox"> 自定义输入组件</li><li><input disabled="" type="checkbox"> RCL 项目</li><li><input disabled="" type="checkbox"> 将枚举绑定到选择</li><li><input disabled="" type="checkbox"> Blazor 日期选择器</li><li><input disabled="" type="checkbox"> Blazor 表单验证</li><li><input disabled="" type="checkbox"> 自定义表单验证</li><li><input disabled="" type="checkbox"> 比较验证</li><li><input disabled="" type="checkbox"> 复杂模型验证</li><li><input disabled="" type="checkbox"> ASP.NET Core 中的 AutoMapper</li><li><input disabled="" type="checkbox"> 编辑和更新</li><li><input disabled="" type="checkbox"> 创建操作</li><li><input disabled="" type="checkbox"> 强制重新加载组件</li><li><input disabled="" type="checkbox"> 删除操作</li><li><input disabled="" type="checkbox"> 组件通信</li><li><input disabled="" type="checkbox"> 删除确认</li><li><input disabled="" type="checkbox"> 属性溅射</li><li><input disabled="" type="checkbox"> 任意属性</li><li><input disabled="" type="checkbox"> 级联值</li><li><input disabled="" type="checkbox"> 多个级联参数</li><li><input disabled="" type="checkbox"> 级联值性能</li><li><input disabled="" type="checkbox"> Blazor 中的身份设置</li><li><input disabled="" type="checkbox"> Cookie 身份验证</li><li><input disabled="" type="checkbox"> 身份验证 - 登录页面</li><li><input disabled="" type="checkbox"> 身份验证 - 注销页面</li><li><input disabled="" type="checkbox"> Blazor 中的授权</li><li><input disabled="" type="checkbox"> Blazor 授权属性</li><li><input disabled="" type="checkbox"> 代码中的 Blazor 授权</li></ul>]]></content>
    
    
    <summary type="html">Blazor系列文章目录</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="Blazor" scheme="https://jonty.top/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>【Blazor-02】- Blazor的托管模型</title>
    <link href="https://jonty.top/2023/03/23/blazor-hosting-models/"/>
    <id>https://jonty.top/2023/03/23/blazor-hosting-models/</id>
    <published>2023-03-23T01:50:13.000Z</published>
    <updated>2023-03-23T02:20:04.989Z</updated>
    
    <content type="html"><![CDATA[<p>你如果还没有安装开发环境，可以前往<a href="./what-is-blazor.md#Blazor%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83">Blazor介绍</a>的下方有机器配置说明</p><p>我们将创建我们的第一个Blazor项目。</p><p>事实上，我们将创建2个Blazor项目。</p><ul><li>一个是服务器端托管:Blazor Server</li><li>另一个是客户端托管: Blazor WebAssembly</li></ul><p>然后，我们将运行这两个项目，看看它们在执行中的区别。</p><ul><li>了解这两种托管模式的区别以及各自的优缺点。</li></ul><h2 id="创建Blazor应用程序"><a href="#创建Blazor应用程序" class="headerlink" title="创建Blazor应用程序"></a>创建Blazor应用程序</h2><p><img data-src="https://cdn.jonty.top/img/image-20220411221907210.png" alt="image-20220411221907210"></p><h2 id="Bloazor托管模式"><a href="#Bloazor托管模式" class="headerlink" title="Bloazor托管模式"></a>Bloazor托管模式</h2><p>Blazor有两种托管模式：Blazor WebAssembly（客户端托管模式）和Blazor Server（服务器托管模式）。</p><p><img data-src="https://cdn.jonty.top/img/blazorhostingmodelsexplained.png"></p><p>正如模板名称所暗示的那样，使用Blazor Server App模板来创建一个带有服务器托管模式的Blazor应用程序，使用Blazor WebAssembly模板来创建一个带有客户端托管模式的Blazor应用程序。</p><p>Blazor服务器与Blazor WebAssembly的比较<br>2种项目类型的项目结构和布局没有太大的区别。</p><h2 id="blazor-server-vs-blazor-webassembly"><a href="#blazor-server-vs-blazor-webassembly" class="headerlink" title="blazor server vs blazor webassembly"></a>blazor server vs blazor webassembly</h2><p>我们将在下一个节中详细讨论这些不同文件和文件夹的目的。</p><p><img data-src="https://cdn.jonty.top/img/blazorservervsblazorwebassembly.png"></p><h2 id="在-Visual-Studio-中配置多个启动项目"><a href="#在-Visual-Studio-中配置多个启动项目" class="headerlink" title="在 Visual Studio 中配置多个启动项目"></a>在 Visual Studio 中配置多个启动项目</h2><p>我们可以在Visual Studio中配置多个项目作为<strong>StartUp项目</strong>。</p><p>具体步骤如下:</p><p>在解决方案资源管理器中右键点击解决方案名称，选择设置<strong>StartUp项目</strong>选项</p><p><img data-src="https://cdn.jonty.top/img/image-20220411222732534.png" alt="image-20220411222732534"></p><p>选择 <strong>多个启动项目</strong>单选按钮。针对每个要设置为启动项目的项目，从 <strong>操作</strong>下拉列表中选择 <strong>启动</strong>。</p><p><img data-src="https://cdn.jonty.top/img/image-20220411222844570.png" alt="image-20220411222844570"></p><h2 id="Blazor-WebAssembly托管模式"><a href="#Blazor-WebAssembly托管模式" class="headerlink" title="Blazor WebAssembly托管模式"></a>Blazor WebAssembly托管模式</h2><p>在这种托管模式下，应用程序直接在浏览器中的WebAssembly上。</p><p>因此，应用程序所需要的一切，即编译后的应用程序，它的依赖关系和.NET运行时都会从服务器下载到客户端浏览器，这一点和Angular、Vue、React等开发模式是一致的。<br>Blazor WebAssembly应用程序可以完全在客户端上运行，而不需要连接到服务器，或者可以使用Web API调用或SignalR来配置它与服务器进行交互。</p><p><img data-src="https://cdn.jonty.top/img/BlazorWebAssemblyhostingmodel.png" alt="Blazor WebAssembly 托管模型"></p><p><img data-src="https://cdn.jonty.top/img/image-20220411223744216.png" alt="image-20220411223744216"></p><h3 id="Blazor-WebAssembly托管模式的好处。"><a href="#Blazor-WebAssembly托管模式的好处。" class="headerlink" title="Blazor WebAssembly托管模式的好处。"></a>Blazor WebAssembly托管模式的好处。</h3><ul><li>一个Blazor WebAssembly应用程序可以完全在客户端机器上运行。它可以离线工作。当失去了与服务器的网络连接时，客户端应用程序可以继续运行</li></ul><ul><li><p>它也可以很容易地作为一个渐进式的Web App运行，这意味着客户可以选择将我们的App安装到他们的设备上，在没有任何网络连接的情况下随时运行。</p></li><li><p>Web Assembly在客户端上运行，在浏览器内部，因此可以作为静态文件部署。尽管如此，由于浏览器的安全限制，Blazor Wasm应用程序不会直接从本地文件系统中运行。</p></li></ul><ul><li>当应用程序从服务器下载到客户端后，平时的计算工作使用的是客户端的资源和能力。在客户机上运行的代码，意味着服务器的负载大大降低。</li></ul><ul><li>我们不需要一个完整的ASP.NET Core web服务器来托管应用程序。我们只需要一台服务器，便可以将应用程序传送到客户端的浏览器上。这意味着我们可以在互联网上的任何地方，在云端，在Azure上作为静态网站，甚至在CDN内容交付网络上，将应用程序托管在自己的服务器上。</li></ul><h3 id="Blazor-WebAssembly托管的缺点"><a href="#Blazor-WebAssembly托管的缺点" class="headerlink" title="Blazor WebAssembly托管的缺点"></a>Blazor WebAssembly托管的缺点</h3><p>Blazor WebAssembly简称为Blazor Wasm。</p><ul><li><p>第一次请求通常需要较长的时间，因为<code>blazor.webassembly.js</code>文件对客户端应用程序进行引导,所以整个应用程序、其依赖关系和.NET运行时必须下载到客户端浏览器。但请记住，这只是第一次请求所花费的时间比平时长。如果那个相同的客户端稍后访问该应用程序，通常会快速启动，因为浏览器会缓存文件。</p></li><li><p>由于应用程序完全在客户端浏览器上运行，所以它受限于浏览器的计算能力。</p></li><li><p>根据应用的性质，需要有一定能力的客户端硬件和软件。例如，从软件的角度来看，至少需要一个支持WebAssembly的浏览器。</p></li></ul><ul><li><p>Mono框架解释的是.NET中间语言，因此比运行服务器端Blazor要慢。Ahead-of-time (AOT) 编译计划在未来的一个版本中进行。</p></li><li><p>Blazor Wasm还不支持一个以上的线程，所以所有的处理都发生在UI线程上–但服务器/JavaScript等的调用是异步进行的，所以不会阻碍UI的响应速度。</p></li><li><p>与服务器端不同的是，Blazor Wasm还不支持在Visual Studio中进行调试。在浏览器内调试C#代码是可能的，但尽管可行，但这并不是最好的体验。</p></li><li><p>此外，Blazor Wasm只适用于较新的浏览器，并且不支持搜索引擎（除非我们启用服务器端预渲染）。</p></li></ul><h2 id="Blazor-Server服务器托管模式"><a href="#Blazor-Server服务器托管模式" class="headerlink" title="Blazor Server服务器托管模式"></a>Blazor Server服务器托管模式</h2><p>在这种托管模式下，应用程序需要在服务器上执行。在客户端和服务器之间建立了一个SignalR连接。当一个事件发生在客户端，例如点击按钮，事件的信息通过SignalR连接发送到服务器。服务器处理该事件，并计算出生成的HTML的差异（差值）。整个HTML不会再次被发送到客户端，只有差值通过SignalR连接发送到客户端。然后浏览器更新UI。由于只应用了差异化的内容来更新UI，所以应用程序感觉更快，对用户的响应也更快。</p><p><img data-src="https://cdn.jonty.top/img/BlazorServerhostingmodel.png" alt="Blazor 服务器托管模型"></p><p><img data-src="https://cdn.jonty.top/img/image-20220411223908163.png" alt="image-20220411223908163"></p><h3 id="Blazor服务器托管模式的好处"><a href="#Blazor服务器托管模式的好处" class="headerlink" title="Blazor服务器托管模式的好处"></a>Blazor服务器托管模式的好处</h3><ul><li><p>Blazor服务器端在将HTML内容发送到客户端的浏览器之前，会预先渲染HTML内容。这使得它对搜索引擎友好，而且没有明显的启动时间。</p></li><li><p>由于下载量明显小于Blazor WebAssembly应用程序，因此加载速度更快</p></li><li><p>由于该应用程序运行在服务器上，因此它可以充分利用服务器的功能，包括使用任何.NET Core兼容的API。<br>客户端只需要一个浏览器就可以使用该应用。即使是不支持WebAssembly的浏览器也可以使用。</p></li><li><p>更加安全，因为应用程序的.NET/C#代码不会被发送到客户端。</p></li></ul><ul><li>Blazor服务器端应用程序可以在旧的浏览器上运行，因为不需要Web汇编，只需要HTML和JavaScript。由于代码是在服务器上执行的，所以也可以在Visual Studio中调试我们的.NET代码。</li></ul><h3 id="Blazor服务器托管-NET的缺点。"><a href="#Blazor服务器托管-NET的缺点。" class="headerlink" title="Blazor服务器托管.NET的缺点。"></a>Blazor服务器托管.NET的缺点。</h3><ul><li>需要一个完整的ASP.NET Core服务器来托管应用程序。在无服务器部署场景，比如希望从CDN中运行应用程序，是不可能实现的。</li><li>需要始终保持与服务器的主动连接。这意味着需要保持服务器24小时不间断地运行。如果服务器瘫痪，应用程序就会停止工作。</li><li>由于每个用户的交互都需要往返于服务器之间，与Blazor WebAssembly托管相比，通常会有较高的延迟。</li></ul><ul><li>Blazor服务器端为当前客户端建立一个内存内会话，并使用SignalR在服务器上运行的.NET和客户端的浏览器之间进行通信。所有的内存和CPU的使用都是以服务器为代价的，对所有用户来说。这也意味着客户端被绑定到最初服务于它的服务器上，所以不具备负载均衡功能，但是我们可以通过使用Azure SignalR服务与Blazor服务器应用程序来克服这个可扩展性问题。这个服务可以让Blazor Server app通过支持大量的并发SignalR连接来实现良好的扩展性。</li></ul>]]></content>
    
    
    <summary type="html">Blazor系列翻译02-Blazor的托管模型</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="Blazor" scheme="https://jonty.top/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>AQL抽样方法介绍</title>
    <link href="https://jonty.top/2023/02/17/acceptance-quality-limit/"/>
    <id>https://jonty.top/2023/02/17/acceptance-quality-limit/</id>
    <published>2023-02-17T08:03:55.000Z</published>
    <updated>2023-03-23T01:56:11.471Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/AQL-rev-8.jpg" alt="AQL-rev-8"></p><h2 id="AQL的定义"><a href="#AQL的定义" class="headerlink" title="AQL的定义"></a>AQL的定义</h2><p>AQL原来叫<strong>合格质量水平（Acceptable Quality Level）</strong>，在新版国家标准《GB/T 2828.1-2003 计数抽样检验程序 第1部分：按接收质量限（AQL）检索的逐批检验抽样计划》中，AQL的全称被改为了<strong>接收质量限制（Acceptance Quality Limit）</strong>，其定义为：当一个连续系列批被提交验收抽样时，可允许的最差过程平均质量水平。</p><h2 id="检验水平"><a href="#检验水平" class="headerlink" title="检验水平"></a>检验水平</h2><p>在AQL中，有三种一般检验水平（Ⅰ、Ⅱ、Ⅲ）和四种特殊检验水平（S-1、S-2、S-3、S-4）。<br>在三种一般检验水平中，LEVELⅡ是常规水平，也是最经常采用的水平。从LEVELⅠ到LEVELⅢ抽样的数量逐渐增加。LEVELⅠ的抽样数是LEVELⅡ的40％，适用于品质较为稳定或产品出现不一致可能性极小的状况。LEVELⅢ的抽样数是LEVELⅡ的160％，加大检验的样本数量可以降低接受不合格产品的可能性。<br>四种特殊检验水平的特点是抽样数量少，因为在某些情况下，例如检验的成本高、检验所花费的时间长、货物的品质比较稳定（单一产品的重复加工），通过少量的抽样检验就可以反应总体的品质水平。从S-1到S-4抽样检验数逐步增加。在服装辅料的检验中有时会采用特殊检验水平，例如拉链、纽扣等的检验。</p><h2 id="抽样方案"><a href="#抽样方案" class="headerlink" title="抽样方案"></a>抽样方案</h2><p>AQL有一次、二次、多次（五次）3种抽样方案。确定抽样方案可以从下面几个方面来考虑：<br>1）简便易行：一次优于二次，二次优于五次。<br>2）平均样本量：五次少于二次，二次少于一次。<br>3）管理难度：五次难于二次，二次难于一次。<br>4）取样的难易程度：取样麻烦时，一次优于二次，二次优于五次。<br>5）试验时间的长短：根据单个试验时间的长短和是否可以多个样品同时进行试验来确定总的试验时间。</p><h2 id="严格程度"><a href="#严格程度" class="headerlink" title="严格程度"></a>严格程度</h2><p>AQL中制定了三种严格程度：正常（NORMAL）、加严（TIGHTENED）、放宽（REDUCED）。<br>正常检验是最常用的检验水平，刚开始检验新的供应商生产的货物时，应采用正常检验。<br>一旦采用了正常、严格、放宽中的任何一种，那么在以后对同系列或同类型产品的检验中都应采取这一标准，除非供应商的产品品质发生了变动。</p><h3 id="AQL值"><a href="#AQL值" class="headerlink" title="AQL值"></a>AQL值</h3><p>对于不同的质量水平或要求，AQL有多种规定的数值，从0.010~1000。服装业最常用的AQL值是2.5，要求高一些的用1.5，要求稍低的用4.0。不同的AQL值体现了不同的质量水平，通常AQL值越小代表品质要求越高。</p><h2 id="转移规则和程序"><a href="#转移规则和程序" class="headerlink" title="转移规则和程序"></a>转移规则和程序</h2><h3 id="正常到加严"><a href="#正常到加严" class="headerlink" title="正常到加严"></a>正常到加严</h3><p>当正在采用正常检验时，只要初次检验中连续5批或少于5批中有2批是不可接收的，则转移到加严检验。<br>（注：初次检验指第一次检验，区别于拒收后的再次提交批的检验。再次提交批的检验结果不参与转移。）</p><h3 id="加严到正常"><a href="#加严到正常" class="headerlink" title="加严到正常"></a>加严到正常</h3><p>当正在采用加严检验时，如果初次检验的接连5批已被认为是可接收的，应恢复正常检验。</p><h3 id="正常到放宽"><a href="#正常到放宽" class="headerlink" title="正常到放宽"></a>正常到放宽</h3><p>当正在采用正常检验时，如果连续10次检验都合格、并且生产处于稳定状态的话，可以转移到放宽检验。<br>（注：这个跟GB/T 2828.1-2003的规定不同，因为GB/T 2828.1-2003的条件比较负责，所以可以考虑采用这个比较简单的方法。）</p><h3 id="放宽到正常"><a href="#放宽到正常" class="headerlink" title="放宽到正常"></a>放宽到正常</h3><p>当正在执行放宽检验时，如果初次检验出现下列任一情况，应恢复正常检验：<br>a）一个批未被接收；<br>b）生产不稳定或延迟；<br>c）认为恢复正常检验是正当的其他情况。</p><h3 id="暂停检验"><a href="#暂停检验" class="headerlink" title="暂停检验"></a>暂停检验</h3><p>如果在初次加严检验的一系列连续批中未接受批的累计数达到5批，应暂时停止检验。直到供应商为改进所提供产品或服务的质量已采取行动，而且负责部门承认此行动可能有效时，才能恢复检验。恢复检验应从使用加严检验开始。</p><p>放宽检验是非强制性的，在条件不成熟或无把握的情况下可以不执行。<br>暂停检验也可以不执行。<br>至少要执行正常和加严检验之间的转移规则。</p><h3 id="二次抽样方案"><a href="#二次抽样方案" class="headerlink" title="二次抽样方案"></a>二次抽样方案</h3><p>第一次检验的样品数量应等于该方案给出的第一样本量。如果第一样本中发现的不合格数小于或等于第一接收数，则该批可接收；如果第一样本中发现的不合格品数大于或等于第一拒收数，则该批不可接收。<br>如果第一样本中发现的不合格品数介于第一接收数与第二拒收数之间，应检验由方案给出样本量的第二样本并累计在第一样本和第二样本中发现的不合格品数。如果不合格品累计数小于或等于第二接收数，则判定批可接收；如果不合格品累计数大于或等于第二拒收数，则判定该批不可接收。<br>二次抽样方案的目的是通过检验较少样品数而节约时间，然而当必须进行第二次检验时，抽样检验的总数要超过一次抽样检验的数量，所以二次抽样方案适合于质量比较稳定的产品。</p><h3 id="不合格产品的判定"><a href="#不合格产品的判定" class="headerlink" title="不合格产品的判定"></a>不合格产品的判定</h3><p>根据不同类型的服装可参考相应的行业标准或企业标准，如T恤和Polo衫可参考纺织行业标准《FZ/T 73008-2002 针织T恤衫》。<br>有的公司以一件衣服上有一个或以上严重疵点为一个不合格品，一件衣服上有3个轻微疵点也算一件不合格品。<br>有的公司采用的是记点的方式，即计算样本中的不合格数来判定。</p><p>当样本数超过批量时，应该以整批作为样本（全检），判定数不变。</p><h3 id="AQL抽样检验的方法和步骤"><a href="#AQL抽样检验的方法和步骤" class="headerlink" title="AQL抽样检验的方法和步骤"></a>AQL抽样检验的方法和步骤</h3><p>1、决定检验方案（检验水平、抽样方案、严格程度和AQL值）。检验方案一般由客户决定，也有客户和供应商协商决定的。<br>2、根据检验方案查找样本量字码。<br>3、抽样方案。在AQL中给出了一系列的抽样方案表格，这些表格给出了在不同的品质水平下抽样检验的样本数和接收数（Ac）、拒收数（Re）。<br>4、产品检验。从所要检验的产品中，按照以上所述的样本数，随机抽取样品。在检验中应保证100％地检验所抽取的样本，既使在检验若干件后，发现不合格数已经超过拒收数，仍然应该继续检验剩余的样本，因为检验的目的除了要知道“接受”或“拒收”的结果外，还需要了解货物究竟处于何种质量水平，并且可以通过积累历史数据来判断供应商是否合格和决定以后对供应商的检验方案。对供应商来说，也可以清楚如何去改善产品的品质。<br>5、统计不合格数。<br>6、判定是否接受。对照抽样方案表格中的接收数和拒收数来决定是“接受”还是“拒收”。</p><p>例一：<br>检验方案为一般检验水平Ⅱ、正常检验一次抽样方案、AQL 2.5。<br>如有一批衣服的数量为5000件，则找到对应的“样本量字码”为“L”。<br>在“正常检验一次抽样方案（主表）”中找到样本量字码L，对应的样本量为“200”，表示要抽查200件衣服；AQL 2.5对应的“接收/拒收数”为“10 11”，表示抽查的200件样本中，如果发现的不合格品小于或等于10件的话，则该批产品可接受；如果不合格品等于或大于11的话，则该批产品不可接受。</p><p>例二：<br>检验方案为一般检验水平Ⅱ、正常检验二次抽样方案、AQL 4.0。<br>如有一批衣服的数量为20000件，则找到对应的样本量字码为“M”。<br>从“正常检验二次抽样方案（主表）”中查找到对应的样本量和接收/拒收数。<br>第一次抽样200件，接收/拒收数为“11 16”，不合格品数小于或等于11则接受，不合格品数等于或大于16则拒收，不合格品数为12~15之间则进行第二次抽查；<br>第二次再抽查200件，接收/拒收数为“26 27”，累计不合格品数（加上第一次抽查发现的不合格品数）小于或等于26则接受，累计不合格品数等于或大于27则拒收。</p>]]></content>
    
    
    <summary type="html">AQL-接收质量限制（Acceptance Quality Limit）</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="AQL" scheme="https://jonty.top/tags/AQL/"/>
    
  </entry>
  
  <entry>
    <title>【Blazor-01】-什么是Blazor?</title>
    <link href="https://jonty.top/2023/02/15/what-is-blazor/"/>
    <id>https://jonty.top/2023/02/15/what-is-blazor/</id>
    <published>2023-02-14T23:59:05.000Z</published>
    <updated>2023-03-23T02:20:23.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现如今如何开发Web应用程序"><a href="#现如今如何开发Web应用程序" class="headerlink" title="现如今如何开发Web应用程序"></a>现如今如何开发Web应用程序</h2><p><img data-src="https://cdn.jonty.top/img/whatisblazor.png" alt="img"></p><ul><li>对于服务端开发，我们使用C#、Java、PHP等编程语言，这些都是服务端编程语言。</li><li>对于客户端开发，使用 Angular、React、Vue 等<strong>JavaScript</strong>框架，这些JavaScript框架也是最近几年开始主导客户端开发。</li></ul><p>作为开发人员，为了在业务中持续保持竞争力，我们不可避免的要同时学习服务端编程语言和客户端编程语言。但问题是，我们为什么要学习和使用两套不同的编程语言和框架呢？</p><h2 id="使用C-同时进行服务端和客户端开发"><a href="#使用C-同时进行服务端和客户端开发" class="headerlink" title="使用C#同时进行服务端和客户端开发"></a>使用C#同时进行服务端和客户端开发</h2><p><img data-src="https://cdn.jonty.top/img/whyshouldweuseblazor.png" alt="我们为什么要使用 blazor"></p><p>可以使用C#同时进行服务端和客户端开发吗？答案是可以的，借助<strong>Blazor</strong>,我们可以使用C#而不是JavaScript构建交互式的Web UI。C#代码可以在服务器和客户端浏览器上执行。这意味着.Net开发人员可以重用他们的C#技能，而不是学习新的JavaScript框架而带来的巨大的学习成本。</p><h2 id="浏览器如何执行C-代码"><a href="#浏览器如何执行C-代码" class="headerlink" title="浏览器如何执行C#代码"></a>浏览器如何执行C#代码</h2><p>众所周知，浏览器只能执行JavaScript代码。那么如何在客户端浏览器执行C#代码？答案是<strong>WebAssembly</strong></p><p><img data-src="https://cdn.jonty.top/img/blazorandwebassembly.png" alt="blazor 和 webassembly"></p><p>Blazor 可以使用 WebAssembly 在浏览器中直接运行 C# 代码。它与 Angular、React、Vue 等 JavaScript 框架在同一个安全沙箱中运行。</p><p>事实上，不仅仅是 C#，我们可以使用 WebAssembly 在浏览器中运行任何类型的代码。</p><p>WebAssembly 基于开放的 Web 标准。所以它是所有现代浏览器的原生部分，包括移动浏览器。这意味着要是Blazor应用程序正常工作，不需要安装任何插件。</p><h2 id="Blazor托管模型"><a href="#Blazor托管模型" class="headerlink" title="Blazor托管模型"></a>Blazor托管模型</h2><p>Blazor 提供 2 种托管模型。</p><ul><li> Blazor WebAssembly</li><li> Blazor Server</li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220411220906408.png" alt="image-20220411220906408"></p><h3 id="Blazor-WebAssembly"><a href="#Blazor-WebAssembly" class="headerlink" title="Blazor WebAssembly"></a>Blazor WebAssembly</h3><p>客户端托管模型：应用程序直接在 WebAssembly 的浏览器中运行。</p><p>因此，应用程序所需的一切，即编译后的应用程序代码本身、它的依赖项和 .NET 运行时都下载到浏览器。</p><blockquote><p> 使用 <code>Blazor WebAssembly App </code>模板来创建具有客户端托管模型的 Blazor 应用程序。</p></blockquote><h3 id="Blazor-server"><a href="#Blazor-server" class="headerlink" title="Blazor server"></a>Blazor server</h3><p>服务器托管模型：应用程序在 ASP.NET Core 应用程序内的服务器上执行。</p><p>在客户端和服务器之间，建立了 <strong>SignalR</strong> 连接。</p><p>例如，当客户端上发生事件（例如单击按钮）时，有关事件的信息将通过 SignalR 连接发送到服务器。服务器处理事件并为生成的 HTML 计算差异。整个 HTML 不会再次发送回客户端，它只是通过已建立的 SignalR 连接发送给客户端的差异。然后浏览器更新 UI。Blazor 采用单页面应用程序体系结构。</p><blockquote><p>使用 Blazor Server应用程序模板来创建具有服务器托管模型的 Blazor 应用程序</p></blockquote><h2 id="Blazor开发环境"><a href="#Blazor开发环境" class="headerlink" title="Blazor开发环境"></a>Blazor开发环境</h2><p><a href="https://dotnet.microsoft.com/en-us/download/dotnet/6.0">安装.NET6或更高版本</a></p><p>验证本地安装的.NET SDK</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet --list-sdks</span><br></pre></td></tr></table></figure><p>可以使用Visual Studio、Visual Studio Code 或 .NET Core CLI 构建 Blazor 应用程序。 </p><p><a href="https://visualstudio.microsoft.com/zh-hans/?rr=https://www.microsoft.com/zh-cn">下载Visual Studio</a></p><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p><img data-src="https://cdn.jonty.top/img/image-20220411220940383.png" alt="image-20220411220940383"></p>]]></content>
    
    
    <summary type="html">Blazor系列翻译01-什么是Blazor?</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="Blazor" scheme="https://jonty.top/tags/Blazor/"/>
    
  </entry>
  
  <entry>
    <title>Redis高可用集群部署-Cluster</title>
    <link href="https://jonty.top/2023/02/03/docker-swarm-redis-cluster/"/>
    <id>https://jonty.top/2023/02/03/docker-swarm-redis-cluster/</id>
    <published>2023-02-03T15:08:58.000Z</published>
    <updated>2023-02-03T15:10:18.760Z</updated>
    
    <content type="html"><![CDATA[<p>Redis cluster是redis的官方集群方案，但是要求客户端自己做重定向，所以连接单机redis和集群redis的客户端会有些不同，连接集群版redis的时候要客户端连接6个redis实例。</p><p>官方为了屏蔽这种差异，做了一个redis-cluster-proxy，经过这个proxy的代理后，连接redis集群就和连接单机redis一样了。</p><blockquote><p><a href="https://github.com/RedisLabs/redis-cluster-proxy">RedisLabs/redis-cluster-proxy: A proxy for Redis clusters. (github.com)</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20230203142147518.png" alt="image-20230203142147518"></p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><p>搭建3master+3slave+1proxy，共三个节点，如下：</p><table><thead><tr><th>IP</th><th>hostname</th><th>部署实例</th></tr></thead><tbody><tr><td>192.168.2.213</td><td>manager</td><td>redis1、redis2、proxy(1实例)</td></tr><tr><td>192.168.2.214</td><td>worker1</td><td>redis3、redis4</td></tr><tr><td>192.168.2.215</td><td>worker2</td><td>redis5、redis5</td></tr></tbody></table><h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux manager 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@manager ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>查看Docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.23</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.18.10</span><br><span class="line"> Git commit:        7155243</span><br><span class="line"> Built:             Thu Jan 19 17:36:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.23</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.10</span><br><span class="line">  Git commit:       6051f14</span><br><span class="line">  Built:            Thu Jan 19 17:34:26 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.15</span><br><span class="line">  GitCommit:        5b842e528e99d4d4c1686467debf2bd4b88ecd86</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>所有节点执行以下命令，打开集群初始化所需端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br></pre></td></tr></table></figure><p>重启防火墙以及Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p>创建3个manager节点，如下：</p><p><img data-src="https://cdn.jonty.top/img/image-20230203101937613.png" alt="image-20230203101937613"></p><p>manager节点初始化集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.213</span><br></pre></td></tr></table></figure><p>manager节点获取加入manager token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure><p>worker节点以<code>manager</code>身份加入集群</p><pre><code>docker swarm join \--token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 \192.168.2.213:2377</code></pre><h2 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h2><img data-src="https://cdn.jonty.top/img/2020-12-02-150023.jpg" alt="redis_cluster" style="zoom: 33%;" /><h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir redis-cluster</span><br><span class="line"><span class="built_in">cd</span> redis-cluster</span><br></pre></td></tr></table></figure><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>编写<code>docker-compose.yml</code>文件，需要根据实际IP地址做调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  redis-node1:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node1</span><br><span class="line">    ports:</span><br><span class="line">      - 7001:6379</span><br><span class="line">      - 17001:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node1-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;redis-server&quot;</span></span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.213&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7001&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17001&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == manager</span><br><span class="line"></span><br><span class="line">  redis-node2:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node2</span><br><span class="line">    ports:</span><br><span class="line">      - 7002:6379</span><br><span class="line">      - 17002:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node2-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;redis-server&quot;</span></span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.213&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7002&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17002&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == manager</span><br><span class="line"></span><br><span class="line">  redis-node3:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node3</span><br><span class="line">    ports:</span><br><span class="line">      - 7003:6379</span><br><span class="line">      - 17003:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node3-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;redis-server&quot;</span></span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.214&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7003&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17003&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker1</span><br><span class="line"></span><br><span class="line">  redis-node4:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node4</span><br><span class="line">    ports:</span><br><span class="line">      - 7004:6379</span><br><span class="line">      - 17004:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node4-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.214&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7004&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17004&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker1</span><br><span class="line"></span><br><span class="line">  redis-node5:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node5</span><br><span class="line">    ports:</span><br><span class="line">      - 7005:6379</span><br><span class="line">      - 17005:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node5-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.215&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7005&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17005&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker2</span><br><span class="line"></span><br><span class="line">  redis-node6:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-node6</span><br><span class="line">    ports:</span><br><span class="line">      - 7006:6379</span><br><span class="line">      - 17006:16379</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">&quot;redis-node6-data:/data&quot;</span></span><br><span class="line">    <span class="built_in">command</span>: </span><br><span class="line">      - <span class="string">&quot;--appendonly yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-enabled yes&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-config-file nodes.conf&quot;</span></span><br><span class="line">      - <span class="string">&quot;--requirepass bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--masterauth bb123456&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-ip 192.168.2.215&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-port 7006&quot;</span></span><br><span class="line">      - <span class="string">&quot;--cluster-announce-bus-port 17006&quot;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: replicated</span><br><span class="line">      replicas: 1</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == worker2</span><br><span class="line"></span><br><span class="line">  redis-cluster:</span><br><span class="line">    image: redis:6.2.4</span><br><span class="line">    hostname: redis-cluster</span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis-node1</span><br><span class="line">      - redis-node2</span><br><span class="line">      - redis-node3</span><br><span class="line">      - redis-node4</span><br><span class="line">      - redis-node5</span><br><span class="line">      - redis-node6</span><br><span class="line">    <span class="built_in">command</span>: <span class="string">&#x27;redis-cli --cluster create</span></span><br><span class="line"><span class="string">    192.168.2.213:7001 192.168.2.213:7002 192.168.2.214:7003</span></span><br><span class="line"><span class="string">    192.168.2.214:7004 192.168.2.215:7005 192.168.2.215:7006</span></span><br><span class="line"><span class="string">    --cluster-yes --cluster-replicas 1 -a bb123456&#x27;</span></span><br><span class="line">    deploy:</span><br><span class="line">      restart_policy:</span><br><span class="line">        condition: on-failure</span><br><span class="line">        delay: 5s</span><br><span class="line">        max_attempts: 5</span><br><span class="line">      placement:</span><br><span class="line">        constraints:</span><br><span class="line">          - node.hostname == manager</span><br><span class="line"></span><br><span class="line">  redis-proxy:</span><br><span class="line">    image: jontymax/redis-cluster-proxy:dev</span><br><span class="line">    hostname: redis-proxy</span><br><span class="line">    ports: </span><br><span class="line">      - <span class="string">&quot;7777:7777&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - redis-swarm</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis-cluster</span><br><span class="line">    <span class="built_in">command</span>: <span class="string">&#x27;redis-cluster-proxy --auth bb123456 192.168.2.213:7001 192.168.2.213:7002 192.168.2.214:7003 192.168.2.214:7004 192.168.2.215:7005 192.168.2.215:7006&#x27;</span></span><br><span class="line">    deploy:</span><br><span class="line">      mode: global</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  redis-swarm:</span><br><span class="line">    driver: overlay</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  redis-node1-data:</span><br><span class="line">  redis-node2-data:</span><br><span class="line">  redis-node3-data:</span><br><span class="line">  redis-node4-data:</span><br><span class="line">  redis-node5-data:</span><br><span class="line">  redis-node6-data:</span><br></pre></td></tr></table></figure><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml redis-cluster-proxy</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230203145125983.png" alt="image-20230203145125983"></p><h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls | grep redis-cluster</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230203145230510.png" alt="image-20230203145230510"></p><p>redis-cluster服务用于初始化集群，启动完成日志如下:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.</span><br><span class="line">&gt;&gt;&gt; Performing hash slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 192.168.2.214:7004 to 192.168.2.213:7001</span><br><span class="line">Adding replica 192.168.2.215:7006 to 192.168.2.214:7003</span><br><span class="line">Adding replica 192.168.2.213:7002 to 192.168.2.215:7005</span><br><span class="line">M: 9ee907ba218b782c264be77e4dd5ca53a79b7350 192.168.2.213:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">S: 567cbca6ba03a2c4d1f4461882cf64a369daaafb 192.168.2.213:7002</span><br><span class="line">   replicates 98719ee5734cdc8b9b06519e2ebcf23b66041266</span><br><span class="line">M: c912e5bc90cdaed6159a5ca83725848556a8e68d 192.168.2.214:7003</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">S: 257d31f2f29f658103e9032584de8c2803bfb7b9 192.168.2.214:7004</span><br><span class="line">   replicates 9ee907ba218b782c264be77e4dd5ca53a79b7350</span><br><span class="line">M: 98719ee5734cdc8b9b06519e2ebcf23b66041266 192.168.2.215:7005</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: de5dbc1a51252d1c2ccf863470a85e5bd9e168bd 192.168.2.215:7006</span><br><span class="line">   replicates c912e5bc90cdaed6159a5ca83725848556a8e68d</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">......</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 192.168.2.213:7001)</span><br><span class="line">M: 9ee907ba218b782c264be77e4dd5ca53a79b7350 192.168.2.213:7001</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: c912e5bc90cdaed6159a5ca83725848556a8e68d 192.168.2.214:7003</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 567cbca6ba03a2c4d1f4461882cf64a369daaafb 192.168.2.213:7002</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 98719ee5734cdc8b9b06519e2ebcf23b66041266</span><br><span class="line">S: 257d31f2f29f658103e9032584de8c2803bfb7b9 192.168.2.214:7004</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9ee907ba218b782c264be77e4dd5ca53a79b7350</span><br><span class="line">S: de5dbc1a51252d1c2ccf863470a85e5bd9e168bd 192.168.2.215:7006</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates c912e5bc90cdaed6159a5ca83725848556a8e68d</span><br><span class="line">M: 98719ee5734cdc8b9b06519e2ebcf23b66041266 192.168.2.215:7005</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check for open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><p>redis-proxy服务用于代理redis-cluster，等待redis-cluster初始化完成，启动完成日志如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[2023-02-03 06:28:08.955/M] Redis Cluster Proxy v999.999.999 (unstable)</span><br><span class="line">[2023-02-03 06:28:08.955/M] Commit: (ac83840d/0)</span><br><span class="line">[2023-02-03 06:28:08.955/M] Git Branch: unstable</span><br><span class="line">[2023-02-03 06:28:08.955/M] PID: 1</span><br><span class="line">[2023-02-03 06:28:08.955/M] OS: Linux 3.10.0-957.el7.x86<span class="built_in">_</span>64 x86<span class="built_in">_</span>64</span><br><span class="line">[2023-02-03 06:28:08.955/M] Bits: 64</span><br><span class="line">[2023-02-03 06:28:08.955/M] Log level: info</span><br><span class="line">[2023-02-03 06:28:08.955/M] Connections pool size: 10 (respawn 2 every 50ms if below 10)</span><br><span class="line">[2023-02-03 06:28:08.955/M] The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">[2023-02-03 06:28:08.955/M] Listening on *:7777</span><br><span class="line">[2023-02-03 06:28:08.955/M] Starting 8 threads...</span><br><span class="line">[2023-02-03 06:28:08.955/M] Fetching cluster configuration...</span><br><span class="line">[2023-02-03 06:28:08.962/M] Cluster Address: 192.168.2.213:7001</span><br><span class="line">[2023-02-03 06:28:08.962/M] Cluster has 3 masters and 3 replica(s)</span><br><span class="line">[2023-02-03 06:28:09.057/M] All thread(s) started!</span><br></pre></td></tr></table></figure><blockquote><p>如果初始化或代理启动失败，可以尝试移除服务重新创建</p></blockquote><h4 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm redis-cluster</span><br></pre></td></tr></table></figure><h2 id="服务连接"><a href="#服务连接" class="headerlink" title="服务连接"></a>服务连接</h2><h3 id="连接到集群"><a href="#连接到集群" class="headerlink" title="连接到集群"></a>连接到集群</h3><p>连接任意节点<code>IP:700x</code>可连接到集群</p><p><img data-src="https://cdn.jonty.top/img/image-20230203145831336.png" alt="image-20230203145831336"></p><p>可正常使用</p><p><img data-src="https://cdn.jonty.top/img/image-20230203150113829.png" alt="image-20230203150113829"></p><p>查看集群节点信息</p><p><img data-src="https://cdn.jonty.top/img/image-20230203150222570.png" alt="image-20230203150222570"></p><h3 id="连接到代理"><a href="#连接到代理" class="headerlink" title="连接到代理"></a>连接到代理</h3><p><img data-src="https://cdn.jonty.top/img/image-20230203145814034.png" alt="image-20230203145814034"></p><p><img data-src="https://cdn.jonty.top/img/image-20230203150312909.png" alt="image-20230203150312909"></p>]]></content>
    
    
    <summary type="html">Docker Swarm部署Redis-Cluster+Proxy实现容灾</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Docker Swarm" scheme="https://jonty.top/tags/Docker-Swarm/"/>
    
    <category term="Redis" scheme="https://jonty.top/tags/Redis/"/>
    
    <category term="Redis Cluster" scheme="https://jonty.top/tags/Redis-Cluster/"/>
    
  </entry>
  
  <entry>
    <title>Redis高可用集群部署-Sentinel</title>
    <link href="https://jonty.top/2023/02/03/docker-swarm-redis-sentinel/"/>
    <id>https://jonty.top/2023/02/03/docker-swarm-redis-sentinel/</id>
    <published>2023-02-03T15:05:03.000Z</published>
    <updated>2023-02-03T15:08:43.556Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/redis-sentinel-haproxy.png" alt="redis-sentinel-haproxy"></p><p>Redis使用使用<strong>哨兵模式</strong>进行组网，哨兵负责主节点的故障转移。<br>HAProxy作为Redis集群的代理(HAProxy工作在TCP层)，屏蔽底层redis的组网细节，对上层应用来看就是单节点的redis。</p><blockquote><p>关于<a href="https://mp.weixin.qq.com/s?__biz=MzI3MjY1ODI2Ng==&mid=2247486094&idx=1&sn=f727b9fe6f53f4ebc5280dd09d6161ed&chksm=eb2e70bbdc59f9ad8157859f0c6eb5fa881c9e147d7e03ca9693633f7d2bff7215d0f813c847&scene=27">Redis集群方案介绍+优缺点对比</a></p></blockquote><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><p>搭建1主2从3哨兵，共三个节点，如下：</p><table><thead><tr><th>IP</th><th>hostname</th><th>部署实例</th></tr></thead><tbody><tr><td>192.168.2.213</td><td>manager</td><td>redis1、sentinel1、Haproxy(1实例)</td></tr><tr><td>192.168.2.214</td><td>worker1</td><td>redis2、sentinel2</td></tr><tr><td>192.168.2.215</td><td>worker2</td><td>redis3、sentinel3</td></tr></tbody></table><h3 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># uname -a</span></span><br><span class="line">Linux manager 3.10.0-957.el7.x86_64 <span class="comment">#1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line">[root@manager ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>查看Docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.23</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.18.10</span><br><span class="line"> Git commit:        7155243</span><br><span class="line"> Built:             Thu Jan 19 17:36:21 2023</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.23</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.18.10</span><br><span class="line">  Git commit:       6051f14</span><br><span class="line">  Built:            Thu Jan 19 17:34:26 2023</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.6.15</span><br><span class="line">  GitCommit:        5b842e528e99d4d4c1686467debf2bd4b88ecd86</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.1.4</span><br><span class="line">  GitCommit:        v1.1.4-0-g5fd4c4d</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>所有节点执行以下命令，打开集群初始化所需端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --zone=public --add-port=2377/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=7946/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4789/udp --permanent</span><br></pre></td></tr></table></figure><p>重启防火墙以及Docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有node</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><p>创建3个manager节点，如下：</p><p><img data-src="https://cdn.jonty.top/img/image-20230203101937613.png" alt="image-20230203101937613"></p><p>manager节点初始化集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.213</span><br></pre></td></tr></table></figure><p>manager节点获取加入manager token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure><p>worker节点以<code>manager</code>身份加入集群</p><pre><code>docker swarm join \--token SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2 \192.168.2.213:2377</code></pre><h2 id="系统部署"><a href="#系统部署" class="headerlink" title="系统部署"></a>系统部署</h2><h3 id="部署架构图"><a href="#部署架构图" class="headerlink" title="部署架构图"></a>部署架构图</h3><p><img data-src="https://cdn.jonty.top/img/image-20230203103602363.png" alt="redis-sentinel"></p><h3 id="部署准备"><a href="#部署准备" class="headerlink" title="部署准备"></a>部署准备</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir redis-sentinel</span><br><span class="line"><span class="built_in">cd</span> redis-sentinel</span><br><span class="line">mkdir haproxy</span><br></pre></td></tr></table></figure><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><p>编写<code>docker-compose.yml</code>文件，需要根据实际IP地址做调整</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="comment"># cpus: &#x27;0.001&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">5120M</span></span><br><span class="line">        <span class="attr">reservations:</span></span><br><span class="line">          <span class="comment"># cpus: &#x27;0.001&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">512M</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">manager</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/redis.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 6379&#x27; &gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;bind 0.0.0.0&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-ip 192.168.2.213&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-port 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;masterauth bb123456&#x27; &gt;&gt; /conf/redis.conf;</span></span><br><span class="line"><span class="string">      echo &#x27;requirepass bb123456&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;appendonly yes&#x27; &gt;&gt; /conf/redis.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/redis.conf&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/redis.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 6379&#x27; &gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;bind 0.0.0.0&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-ip 192.168.2.214&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-port 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;masterauth bb123456&#x27; &gt;&gt; /conf/redis.conf;</span></span><br><span class="line"><span class="string">      echo &#x27;requirepass bb123456&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;replicaof 192.168.2.213 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;appendonly yes&#x27; &gt;&gt; /conf/redis.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/redis.conf&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">redis3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker2</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/redis.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 6379&#x27; &gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;bind 0.0.0.0&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-ip 192.168.2.215&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;slave-announce-port 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;masterauth bb123456&#x27; &gt;&gt; /conf/redis.conf;</span></span><br><span class="line"><span class="string">      echo &#x27;requirepass bb123456&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;replicaof 192.168.2.213 6379&#x27; &gt;&gt; /conf/redis.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;appendonly yes&#x27; &gt;&gt; /conf/redis.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/redis.conf&quot;</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">manager</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/sentinel.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 26379&#x27; &gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel announce-ip 192.168.2.213&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel monitor mymaster 192.168.2.213 6379 2&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel auth-pass mymaster bb123456&#x27; &gt;&gt; /conf/sentinel.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/sentinel.conf --sentinel&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/sentinel.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 26379&#x27; &gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel announce-ip 192.168.2.214&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel monitor mymaster 192.168.2.213 6379 2&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel auth-pass mymaster bb123456&#x27; &gt;&gt; /conf/sentinel.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/sentinel.conf --sentinel&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.2.4</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">26379</span></span><br><span class="line">        <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">host</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-conf:/conf</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">node.hostname</span> <span class="string">==</span> <span class="string">worker2</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">      bash -c &quot;if [ ! -f /conf/sentinel.conf ];then</span></span><br><span class="line"><span class="string">      echo &#x27;port 26379&#x27; &gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel announce-ip 192.168.2.215&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel monitor mymaster 192.168.2.213 6379 2&#x27; &gt;&gt; /conf/sentinel.conf ;</span></span><br><span class="line"><span class="string">      echo &#x27;sentinel auth-pass mymaster bb123456&#x27; &gt;&gt; /conf/sentinel.conf ; fi &amp;&amp;</span></span><br><span class="line"><span class="string">      redis-server /conf/sentinel.conf --sentinel&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">  <span class="attr">haproxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">haproxytech/haproxy-alpine:2.4</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sentinel1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sentinel2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sentinel3</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">haproxy_conf</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/usr/local/etc/haproxy/haproxy.cfg</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis-sentinel</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;16379:16379&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">global</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis-sentinel:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">redis-data:</span></span><br><span class="line">  <span class="attr">redis-conf:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">configs:</span></span><br><span class="line">  <span class="attr">haproxy_conf:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">./haproxy/haproxy.cfg</span></span><br></pre></td></tr></table></figure><h4 id="haproxy-cfg"><a href="#haproxy-cfg" class="headerlink" title="haproxy.cfg"></a>haproxy.cfg</h4><p>创建<code>haproxy.cfg</code>配置文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Global settings</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="attribute">global</span></span><br><span class="line">    <span class="comment"># to have these messages end up in /var/log/haproxy.log you will</span></span><br><span class="line">    <span class="comment"># need to:</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 1) configure syslog to accept network log events.  This is done</span></span><br><span class="line">    <span class="comment">#    by adding the &#x27;-r&#x27; option to the SYSLOGD_OPTIONS in</span></span><br><span class="line">    <span class="comment">#    /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># 2) configure local2 events to go to the /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment">#   file. A line like the following can be added to</span></span><br><span class="line">    <span class="comment">#   /etc/sysconfig/syslog</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#    local2.*                       /var/log/haproxy.log</span></span><br><span class="line">    <span class="comment"># </span></span><br><span class="line">  log stdout format raw local0 <span class="literal">info</span>  </span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># common defaults that all the &#x27;listen&#x27; and &#x27;backend&#x27; sections will</span></span><br><span class="line"><span class="comment"># use if not designated in their block</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">defaults</span><br><span class="line">    log global</span><br><span class="line">    mode tcp</span><br><span class="line">    retries <span class="number">3</span></span><br><span class="line">    option redispatch</span><br><span class="line">    maxconn <span class="number">20000</span></span><br><span class="line">    timeout connect <span class="number">600s</span></span><br><span class="line">    timeout client <span class="number">600s</span></span><br><span class="line">    timeout server <span class="number">600s</span></span><br><span class="line">listen stats</span><br><span class="line">    bind <span class="number">0.0.0.0:8080</span> <span class="comment"># 面板代理</span></span><br><span class="line">    mode http </span><br><span class="line">    stats uri /haproxy-status <span class="comment"># 面板地址</span></span><br><span class="line">    stats auth admin:admin <span class="comment"># 面板user:pwd</span></span><br><span class="line">    stats hide-version</span><br><span class="line">    stats refresh <span class="number">30s</span></span><br><span class="line">frontend redis16379 </span><br><span class="line">    bind :<span class="number">16379</span> <span class="comment"># 代理端口</span></span><br><span class="line">    default_backend redis_16379_backend</span><br><span class="line">backend redis_16379_backend</span><br><span class="line">    option tcp-check</span><br><span class="line">    tcp-check connect</span><br><span class="line">    tcp-check send AUTH\ bb123456\r\n <span class="comment"># redis 密码 按需调整</span></span><br><span class="line">    tcp-check expect string +OK</span><br><span class="line">    tcp-check send PING\r\n</span><br><span class="line">    tcp-check expect string +PONG</span><br><span class="line">    tcp-check send <span class="literal">info</span>\ replication\r\n</span><br><span class="line">    tcp-check expect string role:master <span class="comment"># 轮询 master节点</span></span><br><span class="line">    tcp-check send QUIT\r\n</span><br><span class="line">    tcp-check expect string +OK</span><br><span class="line">    server redis1 <span class="number">192.168.2.213:6379</span> check inter <span class="number">1s</span></span><br><span class="line">    server redis2 <span class="number">192.168.2.214:6379</span> check inter <span class="number">1s</span></span><br><span class="line">    server redis3 <span class="number">192.168.2.215:6379</span> check inter <span class="number">1s</span></span><br></pre></td></tr></table></figure><p>文件目录如下：</p><p><img data-src="https://cdn.jonty.top/img/image-20230203105159275.png" alt="image-20230203105159275"></p><h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack deploy -c docker-compose.yml redis-sentinel</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230203105502431.png" alt="image-20230203105502431"></p><h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls | grep redis-sentinel</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230203105609286.png" alt="image-20230203105609286"></p><p><img data-src="https://cdn.jonty.top/img/image-20230203110439408.png" alt="image-20230203110439408"></p><h5 id="服务日志"><a href="#服务日志" class="headerlink" title="服务日志"></a>服务日志</h5><p>redis:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1:S 03 Feb 2023 09:07:22.284 * MASTER &lt;-&gt; REPLICA sync: receiving 214 bytes from master to disk</span><br><span class="line">1:S 03 Feb 2023 09:07:22.284 * MASTER &lt;-&gt; REPLICA sync: Flushing old data</span><br><span class="line">1:S 03 Feb 2023 09:07:22.284 * MASTER &lt;-&gt; REPLICA sync: Loading DB in memory</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * Loading RDB produced by version 6.2.4</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * RDB age 0 seconds</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * RDB memory usage when created 1.85 Mb</span><br><span class="line">1:S 03 Feb 2023 09:07:22.285 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">1:S 03 Feb 2023 09:07:22.286 * Background append only file rewriting started by pid 13</span><br><span class="line">1:S 03 Feb 2023 09:07:22.308 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">13:C 03 Feb 2023 09:07:22.308 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">13:C 03 Feb 2023 09:07:22.308 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">13:C 03 Feb 2023 09:07:22.309 * SYNC append only file rewrite performed</span><br><span class="line">13:C 03 Feb 2023 09:07:22.309 * AOF rewrite: 4 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 09:07:22.348 * Background AOF rewrite terminated with success</span><br><span class="line">1:S 03 Feb 2023 09:07:22.348 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">1:S 03 Feb 2023 09:07:22.348 * Background AOF rewrite finished successfully</span><br><span class="line">1:S 03 Feb 2023 10:07:14.007 * 1 changes in 3600 seconds. Saving...</span><br><span class="line">1:S 03 Feb 2023 10:07:14.009 * Background saving started by pid 15</span><br><span class="line">15:C 03 Feb 2023 10:07:14.012 * DB saved on disk</span><br><span class="line">15:C 03 Feb 2023 10:07:14.013 * RDB: 4 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 10:07:14.109 * Background saving terminated with success</span><br></pre></td></tr></table></figure><p>sentinel:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1:X 03 Feb 2023 09:07:24.787 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">1:X 03 Feb 2023 09:07:24.787 # Redis version=6.2.4, bits=64, commit=00000000, modified=0, pid=1, just started</span><br><span class="line">1:X 03 Feb 2023 09:07:24.787 # Configuration loaded</span><br><span class="line">1:X 03 Feb 2023 09:07:24.788 * monotonic clock: POSIX clock_gettime</span><br><span class="line">1:X 03 Feb 2023 09:07:24.788 * Running mode=sentinel, port=26379.</span><br><span class="line">1:X 03 Feb 2023 09:07:24.788 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">1:X 03 Feb 2023 09:07:24.789 # Sentinel ID is 49d6ef4a1346ec4a05bec6a6387e6fd66c2a177e</span><br><span class="line">1:X 03 Feb 2023 09:07:24.789 # +monitor master mymaster 192.168.2.12 6379 quorum 2</span><br><span class="line">1:X 03 Feb 2023 09:09:48.027 # +sdown sentinel 32c2d1980d2d054c811f474140f17bb60c1a6dde 192.168.2.214 26379 @ mymaster 192.168.2.215 6379</span><br><span class="line">1:X 03 Feb 2023 09:09:48.099 # +sdown slave 192.168.2.214:6379 192.168.2.11 6379 @ mymaster 192.168.2.12 6379</span><br><span class="line">1:X 03 Feb 2023 09:11:54.402 * +reboot slave 192.168.2.214:6379 192.168.2.11 6379 @ mymaster 192.168.2.12 6379</span><br><span class="line">1:X 03 Feb 2023 09:11:54.502 # -sdown slave 192.168.2.214:6379 192.168.2.11 6379 @ mymaster 192.168.2.12 6379</span><br><span class="line">1:X 03 Feb 2023 09:11:54.502 # -sdown sentinel 32c2d1980d2d054c811f474140f17bb60c1a6dde 192.168.2.11 26379 @ mymaster 192.168.2.215 6379</span><br></pre></td></tr></table></figure><p>haproxy:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[NOTICE]   (1) : New worker <span class="params">#1</span> (8) forked</span><br><span class="line">Connect from 10.0.0.2:3768 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3767 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3769 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis1 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 2 active and 0 backup servers left. 2 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">[WARNING]  (8) : Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis1 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 2 active and 0 backup servers left. 2 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">[WARNING]  (8) : Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis2 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 1 active and 0 backup servers left. 1 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">Server redis<span class="built_in">_</span>16379<span class="built_in">_</span>backend/redis2 is DOWN, reason: Layer7 timeout, info: &quot; at step 7 of tcp-check (expect string &#x27;role:master&#x27;)&quot;, check duration: 1001ms. 1 active and 0 backup servers left. 1 sessions active, 0 requeued, 0 remaining in queue.</span><br><span class="line">Connect from 10.0.0.2:3765 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3764 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3770 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3771 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3766 to 10.0.0.249:16379 (redis16379/TCP)</span><br><span class="line">Connect from 10.0.0.2:3772 to 10.0.0.249:16379 (redis16379/TCP)</span><br></pre></td></tr></table></figure><h5 id="代理面板"><a href="#代理面板" class="headerlink" title="代理面板"></a>代理面板</h5><p>访问<code>IP:8080/haproxy-status</code></p><p><img data-src="https://cdn.jonty.top/img/image-20230203112402342.png" alt="image-20230203112402342"></p><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stack rm redis-sentinel</span><br></pre></td></tr></table></figure><h2 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h2><p>使用redis连接工具测试连接</p><h3 id="连接到Redis单实例"><a href="#连接到Redis单实例" class="headerlink" title="连接到Redis单实例"></a>连接到Redis单实例</h3><p>正常连接<code>IP:6379</code>即可</p><p><img data-src="https://cdn.jonty.top/img/image-20230203110812313.png" alt="image-20230203110812313"></p><h3 id="连接到Redis哨兵"><a href="#连接到Redis哨兵" class="headerlink" title="连接到Redis哨兵"></a>连接到Redis哨兵</h3><p>连接到<code>IP:26379</code></p><p><img data-src="https://cdn.jonty.top/img/image-20230203110947077.png" alt="image-20230203110947077"></p><h3 id="连接到Haproxy代理"><a href="#连接到Haproxy代理" class="headerlink" title="连接到Haproxy代理"></a>连接到Haproxy代理</h3><p>连接到<code>haproxy:16379</code>端口</p><p><img data-src="https://cdn.jonty.top/img/image-20230203111030197.png" alt="image-20230203111030197"></p><h3 id="测试数据同步"><a href="#测试数据同步" class="headerlink" title="测试数据同步"></a>测试数据同步</h3><p>通过Haproxy添加新的键值：name:jonty</p><p><img data-src="https://cdn.jonty.top/img/image-20230203111202530.png" alt="image-20230203111202530"></p><p>新增成功</p><p><img data-src="https://cdn.jonty.top/img/image-20230203111313941.png" alt="image-20230203111313941"></p><p>查看哨兵连接：</p><p>可以看到已经同步成功</p><p><img data-src="https://cdn.jonty.top/img/image-20230203111344072.png" alt="image-20230203111344072"></p><p>查看同步日志</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1:S 03 Feb 2023 11:11:55.079 * 1 changes in 3600 seconds. Saving...</span><br><span class="line">1:S 03 Feb 2023 11:11:55.081 * Background saving started by pid 16</span><br><span class="line">16:C 03 Feb 2023 11:11:55.083 * DB saved on disk</span><br><span class="line">16:C 03 Feb 2023 11:11:55.084 * RDB: 4 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 11:11:55.181 * Background saving terminated with success</span><br></pre></td></tr></table></figure><h2 id="容灾测试"><a href="#容灾测试" class="headerlink" title="容灾测试"></a>容灾测试</h2><p>将214也就是<code>worker1</code>停止服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">systemctl stop docker.socket</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230203111954001.png" alt="image-20230203111954001"></p><p>可以看到<code>worker1</code>节点状态为<code>down</code></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager redis-swarm]<span class="params">#</span> docker node ls</span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">eyufo1vxn0m5xksslcns6gdau *   manager    Ready     Active         Reachable        20.10.23</span><br><span class="line">xki7hv7tw44394vqyhidco14w     worker1    Down      Active         Unreachable      20.10.23</span><br><span class="line">xv4fw7yzwg5iwypea65z9n9yn     worker2    Ready     Active         Leader           20.10.23</span><br></pre></td></tr></table></figure><p>214实例已无法访问</p><p><img data-src="https://cdn.jonty.top/img/image-20230203112527481.png" alt="image-20230203112527481"></p><p><img data-src="https://cdn.jonty.top/img/image-20230203112729076.png" alt="image-20230203112729076"></p><p>连接HaProxy，Redis服务正常</p><p><img data-src="https://cdn.jonty.top/img/image-20230203112443957.png" alt="image-20230203112443957"></p><p>添加新的键值</p><p><img data-src="https://cdn.jonty.top/img/image-20230203112635960.png" alt="image-20230203112635960"></p><p>并重新恢复worker1，查看数据是否同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@worker1 ~]<span class="comment"># systemctl start docker</span></span><br><span class="line">[root@worker1 ~]<span class="comment"># systemctl start docker.socket</span></span><br></pre></td></tr></table></figure><p>可以看到<code>redis2</code>服务已经恢复</p><p><img data-src="https://cdn.jonty.top/img/image-20230203112739424.png" alt="image-20230203112739424"></p><p>查看<code>redis2</code>日志，可以看到已经同步成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1:S 03 Feb 2023 11:26:55.825 * MASTER &lt;-&gt; REPLICA sync: Finished with success</span><br><span class="line">1:S 03 Feb 2023 11:26:55.825 * Background append only file rewriting started by pid 13</span><br><span class="line">1:S 03 Feb 2023 11:26:55.850 * AOF rewrite child asks to stop sending diffs.</span><br><span class="line">13:C 03 Feb 2023 11:26:55.850 * Parent agreed to stop sending diffs. Finalizing AOF...</span><br><span class="line">13:C 03 Feb 2023 11:26:55.850 * Concatenating 0.00 MB of AOF diff received from parent.</span><br><span class="line">13:C 03 Feb 2023 11:26:55.850 * SYNC append only file rewrite performed</span><br><span class="line">13:C 03 Feb 2023 11:26:55.851 * AOF rewrite: 6 MB of memory used by copy-on-write</span><br><span class="line">1:S 03 Feb 2023 11:26:55.927 * Background AOF rewrite terminated with success</span><br><span class="line">1:S 03 Feb 2023 11:26:55.927 * Residual parent diff successfully flushed to the rewritten AOF (0.00 MB)</span><br><span class="line">1:S 03 Feb 2023 11:26:55.927 * Background AOF rewrite finished successfully</span><br></pre></td></tr></table></figure><p>使用连接工具查看，没问题~</p><p><img data-src="https://cdn.jonty.top/img/image-20230203112848725.png" alt="image-20230203112848725"></p><p><img data-src="https://cdn.jonty.top/img/bar2.gif"></p>]]></content>
    
    
    <summary type="html">Docker Swarm部署Redis主从+哨兵Sentinel+HAProxy实现容灾</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Docker Swarm" scheme="https://jonty.top/tags/Docker-Swarm/"/>
    
    <category term="Redis" scheme="https://jonty.top/tags/Redis/"/>
    
    <category term="Redis Cluster" scheme="https://jonty.top/tags/Redis-Cluster/"/>
    
  </entry>
  
  <entry>
    <title>Docker Swarm 节点管理</title>
    <link href="https://jonty.top/2022/12/01/docker-swarm-manage-nodes/"/>
    <id>https://jonty.top/2022/12/01/docker-swarm-manage-nodes/</id>
    <published>2022-12-01T14:44:09.000Z</published>
    <updated>2022-12-01T14:55:52.816Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Swarm节点操作"><a href="#Docker-Swarm节点操作" class="headerlink" title="Docker Swarm节点操作"></a>Docker Swarm节点操作</h1><h2 id="列出节点"><a href="#列出节点" class="headerlink" title="列出节点"></a>列出节点</h2><p>从manager节点中运行<code>docker node ls</code>查看节点列表</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">ls</span></span><br><span class="line"></span><br><span class="line">ID                           HOSTNAME  STATUS  AVAILABILITY  MANAGER STATUS</span><br><span class="line"><span class="number">46</span>aqrk4e473hjbt745z53cr3t    <span class="keyword">node</span><span class="title">-5</span>    Ready   Active        Reachable</span><br><span class="line"><span class="number">61</span>pi3d91s0w3b90ijw3deeb2q    <span class="keyword">node</span><span class="title">-4</span>    Ready   Active        Reachable</span><br><span class="line">a5b2m3oghd48m8eu391pefq5u    <span class="keyword">node</span><span class="title">-3</span>    Ready   Active</span><br><span class="line">e7p8btxeu3ioshyuj6lxiv6g0    <span class="keyword">node</span><span class="title">-2</span>    Ready   Active</span><br><span class="line">ehkv3bcimagdese79dn78otj5 *  <span class="keyword">node</span><span class="title">-1</span>    Ready   Active        Leader</span><br></pre></td></tr></table></figure><p>AVAILABILITY：是否可以分配任务给节点</p><ul><li>Active：调度器可以将任务分配给节点。</li><li>Pause：调度器不给节点分配新任务，但现有的任务仍在运行。</li><li>Drain：调度器不给该节点分配新的任务。调度器会关闭现有的任务，并将它们安排在一个可用的节点上。</li></ul><p>MANAGER STATUS：显示节点参与Raft共识的情况</p><ul><li>worker&lt;小弟&gt;：无值表示一个不参与Swarm管理的工作节点。</li><li>Leader&lt;头目&gt;：表示该节点是主要的管理节点，为集群做出所有的管理和协调决定。</li><li>Reachable&lt;被选举者&gt;：表示该节点是参与Raft共识法定人数的管理节点。如果管理节点变得不可用，该节点有资格当选为新的领导者。</li><li>Unavailable&lt;不可用&gt;：意味着该节点是一个无法与其他管理器进行通信的管理器。如果一个管理器节点变得不可用，你应该加入一个新的管理器节点到集群中，或者提升一个工作节点为管理器。</li></ul><p>有关群管理的更多信息，请参阅<a href="https://docs.docker.com/engine/swarm/admin_guide/">管理和维护大量 Docker 引擎|码头工人文档</a></p><h2 id="查看单个节点"><a href="#查看单个节点" class="headerlink" title="查看单个节点"></a>查看单个节点</h2><p>你可以在管理器节点上运行，查看单个节点信息，输出格式默认为JSON，可以通过标志来打印可读格式的结果。</p><p>例如：<code>docker node inspect &lt;NODE-ID&gt; --pretty</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">node</span> <span class="string">inspect</span> <span class="string">self</span> <span class="string">--pretty</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ID:</span>                     <span class="string">ehkv3bcimagdese79dn78otj5</span></span><br><span class="line"><span class="attr">Hostname:</span>               <span class="string">node-1</span></span><br><span class="line"><span class="attr">Joined at:</span>              <span class="number">2016-06-16 22:52:44.9910662</span> <span class="string">+0000</span> <span class="string">utc</span></span><br><span class="line"><span class="attr">Status:</span></span><br><span class="line"> <span class="attr">State:</span>                 <span class="string">Ready</span></span><br><span class="line"> <span class="attr">Availability:</span>          <span class="string">Active</span></span><br><span class="line"><span class="attr">Manager Status:</span></span><br><span class="line"> <span class="attr">Address:</span>               <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span><span class="string">:2377</span></span><br><span class="line"> <span class="attr">Raft Status:</span>           <span class="string">Reachable</span></span><br><span class="line"> <span class="attr">Leader:</span>                <span class="literal">Yes</span></span><br><span class="line"><span class="attr">Platform:</span></span><br><span class="line"> <span class="attr">Operating System:</span>      <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span>          <span class="string">x86_64</span></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line"> <span class="attr">CPUs:</span>                  <span class="number">2</span></span><br><span class="line"> <span class="attr">Memory:</span>                <span class="number">1.954</span> <span class="string">GiB</span></span><br><span class="line"><span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Network:</span>              <span class="string">overlay,</span> <span class="string">host,</span> <span class="string">bridge,</span> <span class="string">overlay,</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">Volume:</span>               <span class="string">local</span></span><br><span class="line"><span class="attr">Engine Version:</span>         <span class="number">1.12</span><span class="number">.0</span><span class="string">-dev</span></span><br></pre></td></tr></table></figure><h2 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h2><h3 id="更改节点可用性"><a href="#更改节点可用性" class="headerlink" title="更改节点可用性"></a>更改节点可用性</h3><p>通过更改节点可用性，可以：</p><ul><li>清空管理节点，以便仅执行集群管理任务，并且不可用于任务分配</li><li>排空节点，以便将其脱机维护</li><li>暂停节点，使其无法接收新任务</li><li>恢复不可用或暂停的节点可用状态</li></ul><p>例如，要将一个管理节点改为可用性改为：Drain</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">update</span> --availability drain <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">node</span><span class="title">-1</span></span><br></pre></td></tr></table></figure><h3 id="删除或添加标签"><a href="#删除或添加标签" class="headerlink" title="删除或添加标签"></a>删除或添加标签</h3><p>节点标签提供了一种灵活的节点组织方法，可以在服务约束中使用节点标签。</p><p>当创建一个服务时，应用约束来限制调度器为服务分配任务的节点。</p><p>在管理器节点上运行，向节点添加标签元数据。标签支持单个或1对</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node <span class="meta">update</span> --<span class="meta">label</span>-<span class="meta">add</span>--<span class="meta">label</span>-<span class="meta">add</span>&lt;<span class="meta">key</span>&gt;&lt;<span class="meta">key</span>&gt;=&lt;value&gt;</span><br></pre></td></tr></table></figure><p>使用<code>--label-add</code>给节点添加标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">update</span> --label-add foo --label-add <span class="attr">bar=</span>baz <span class="keyword">node</span><span class="title">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">node</span><span class="title">-1</span></span><br></pre></td></tr></table></figure><p>使用docker节点更新为节点设置的标签仅适用于集群中的节点实体。不要将它们与<code>dockerd</code>的<code>docker</code>守护程序标签混淆。</p><p>因此，节点标签可用于将关键任务限制在满足某些要求的节点上。例如，只在应该运行特殊工作负载的机器上安排，如符合PCI-SS标准的机器。</p><p>受损的工作线程无法破坏这些特殊工作负载，因为它无法更改节点标签。</p><p>然而，引擎标签仍然是有用的，因为一些不影响容器安全协调的功能可能最好以分散的方式设置。例如，一个引擎可以有一个标签来表明它有某种类型的磁盘设备，这可能与安全没有直接关系。这些标签更容易被集群协调器 “信任”。</p><p>有关服务约束的详细信息，请参阅<a href="https://docs.docker.com/engine/reference/commandline/service_create/">CLI 参考</a>。<code>docker service create</code></p><h2 id="节点降级或升级"><a href="#节点降级或升级" class="headerlink" title="节点降级或升级"></a>节点降级或升级</h2><p>可以将一个工作节点提升为管理角色，当一个管理节点变得不可用，或者当一个管理脱机维护时，这很有用。</p><p>同样地，可以将一个管理节点降级为工作节点。</p><blockquote><p>注意：无论出于什么原因要提升或降级一个节点，都必须始终保持集群管理节点的法定数量</p></blockquote><p>要升级一个节点或一组节点：<code>docker node promote</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">promote</span> <span class="keyword">node</span><span class="title">-3</span> <span class="keyword">node</span><span class="title">-2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Node</span> <span class="title">node-3</span> promoted to a manager <span class="keyword">in</span> the swarm.</span><br><span class="line"><span class="keyword">Node</span> <span class="title">node-2</span> promoted to a manager <span class="keyword">in</span> the swarm.</span><br></pre></td></tr></table></figure><p>要降级一个节点或一组节点：<code>docker node demote</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">demote</span> <span class="keyword">node</span><span class="title">-3</span> <span class="keyword">node</span><span class="title">-2</span></span><br><span class="line"></span><br><span class="line">Manager <span class="keyword">node</span><span class="title">-3</span> demoted <span class="keyword">in</span> the swarm.</span><br><span class="line">Manager <span class="keyword">node</span><span class="title">-2</span> demoted <span class="keyword">in</span> the swarm.</span><br></pre></td></tr></table></figure><p>等同于以下命令的快捷指令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">promote</span>`：`docker <span class="keyword">node</span> <span class="title">update</span> --<span class="keyword">role</span> <span class="title">manager</span></span><br><span class="line">docker <span class="keyword">node</span> <span class="title">demote</span>`：`docker <span class="keyword">node</span> <span class="title">update</span> --<span class="keyword">role</span> <span class="title">worker</span></span><br></pre></td></tr></table></figure><h2 id="离开集群"><a href="#离开集群" class="headerlink" title="离开集群"></a>离开集群</h2><p>在节点上运行<code>docker swarm leave</code>以将其从集群中删除。</p><p>例如，要将集群留在工作节点上：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave</span><br><span class="line"></span><br><span class="line"><span class="keyword">Node</span> <span class="title">left</span> the swarm.</span><br></pre></td></tr></table></figure><p>当节点离开群集时，Docker引擎停止以群集模式运行，编排器不再将任务调度到节点。</p><p>如果该节点是管理器节点，则会收到有关维护仲裁的警告。要覆盖警告，请使用<code>--force</code>。如果最后一个管理器节点离开群，则群将变得不可用，需要采取灾难恢复措施。</p><p>有关维护法定人数和灾难恢复的信息，请参阅Swarm管理指南。 节点离开群集后，可以在管理器节点上运行<code>docker node rm</code>命令，从节点列表中删除该节点。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">node</span> <span class="title">rm</span> <span class="keyword">node</span><span class="title">-2</span></span><br></pre></td></tr></table></figure><h2 id="解散集群"><a href="#解散集群" class="headerlink" title="解散集群"></a>解散集群</h2><ol><li>排空节点上的集群容器</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> node update --availabiltity drain g<span class="number">36</span>lvv<span class="number">23</span>ypjd<span class="number">8</span>v<span class="number">7</span>ovlst<span class="number">2</span>n<span class="number">3</span>yt</span><br></pre></td></tr></table></figure><ol><li>主动离开集群，让节点处于<code>down</code>状态，才能删除</li></ol><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker swarm leave</span></span><br></pre></td></tr></table></figure><ol><li>删除指定节点（管理节点操作）</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> node rm g<span class="number">36</span>lvv<span class="number">23</span>ypjd<span class="number">8</span>v<span class="number">7</span>ovlst<span class="number">2</span>n<span class="number">3</span>yt</span><br></pre></td></tr></table></figure><ol><li>管理节点、解散集群</li></ol><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm <span class="literal">leave</span> --<span class="literal">force</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker Swarm 节点管理、解散集群 - 【翻译文档】</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Docker Swarm" scheme="https://jonty.top/tags/Docker-Swarm/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署SQL Server集群</title>
    <link href="https://jonty.top/2022/10/20/sql-server-2019-alwayson-availability-group-on-docker-containers/"/>
    <id>https://jonty.top/2022/10/20/sql-server-2019-alwayson-availability-group-on-docker-containers/</id>
    <published>2022-10-20T08:40:18.000Z</published>
    <updated>2022-12-01T14:48:57.033Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>SQL Server在2016年开始支持Linux。随着2017和2019版本的发布，它开始支持Linux和容器平台上的HA/DR、Kubernetes和大数据集群解决方案。</p><p>在本文中，我们将在3个节点的Docker容器上安装SQL Server 2019，并创建AlwaysOn可用性组。</p><p>我们的目标是使用单个配置文件快速准备好环境。</p><p>因此，开发人员或测试团队可以快速执行诸如兼容性、连通性、代码功能等测试。</p><p>重要提示：<strong>不建议在生产环境中执行操作</strong>。</p></div><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p><a href="../install-docker-on-centos/">快速安装Docker</a></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><table><thead><tr><th>主机名</th><th>IP</th><th>端口</th><th>角色</th></tr></thead><tbody><tr><td>sqlNode1</td><td>宿主机IP</td><td>1501:1433</td><td>主</td></tr><tr><td>sqlNode2</td><td>宿主机IP</td><td>1502:1433</td><td>副</td></tr><tr><td>sqlNode3</td><td>宿主机IP</td><td>1503:1433</td><td>副</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>环境准备完毕后，开始正式的配置安装。</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>通过<code>docker-compose</code>文件来创建、配置3个容器，具体内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>插入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  db1:</span><br><span class="line">    container_name: sqlNode1</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode1</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1501:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode2.labl.local: <span class="string">&quot;172.16.238.22&quot;</span></span><br><span class="line">      sqlNode3.labl.local: <span class="string">&quot;172.16.238.23&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.21</span><br><span class="line"> </span><br><span class="line">  db2:</span><br><span class="line">    container_name: sqlNode2</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode2</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1502:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode1.lab.local: <span class="string">&quot;172.16.238.21&quot;</span></span><br><span class="line">      sqlNode3.lab.local: <span class="string">&quot;172.16.238.23&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.22</span><br><span class="line"> </span><br><span class="line">  db3:</span><br><span class="line">    container_name: sqlNode3</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode3</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1503:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode1.lab.local: <span class="string">&quot;172.16.238.21&quot;</span></span><br><span class="line">      sqlNode2.lab.local: <span class="string">&quot;172.16.238.22&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.23</span><br><span class="line"> </span><br><span class="line">networks:</span><br><span class="line">    internal:</span><br><span class="line">      ipam:</span><br><span class="line">            driver: default</span><br><span class="line">            config:</span><br><span class="line">                - subnet: 172.16.238.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>然后通过<code>docker-compose up -d</code>命令启动三个容器，其中<code>-d</code>表示在后台运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20221020160443178.png" alt="image-20221020160443178"></p><p>查看容器状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@acme-1 ~]<span class="comment"># docker compose ps</span></span><br><span class="line">NAME                COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">sqlNode1            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db1                 running             0.0.0.0:1501-&gt;1433/tcp, :::1501-&gt;1433/tcp</span><br><span class="line">sqlNode2            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db2                 running             0.0.0.0:1502-&gt;1433/tcp, :::1502-&gt;1433/tcp</span><br><span class="line">sqlNode3            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db3                 running             0.0.0.0:1503-&gt;1433/tcp, :::1503-&gt;1433/tcp</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>通过宿主机的外网IP+端口连接相应的数据库，如下：</p><p><img data-src="https://cdn.jonty.top/img/image-20221020161204446.png" alt="image-20221020161204446"></p><p><img data-src="https://cdn.jonty.top/img/image-20221020161232090.png" alt="image-20221020161232090"></p><h3 id="配置互信"><a href="#配置互信" class="headerlink" title="配置互信"></a>配置互信</h3><h4 id="主库-生成密钥"><a href="#主库-生成密钥" class="headerlink" title="主库-生成密钥"></a>主库-生成密钥</h4><p>连接到主库，也就是节点1，端口是<code>1501</code></p><p>将证书和私钥提取到<code>/tmp/dbm_certificate.cer</code>和<code>/tmp/dbm_certificate.pvk</code>文件中</p><p>将文件复制到其他节点，并根据以下文件创建主密钥和证书：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">USE master</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> LOGIN dbm_login <span class="keyword">WITH</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbm_user <span class="keyword">FOR</span> LOGIN dbm_login;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line">go</span><br><span class="line"><span class="keyword">CREATE</span> CERTIFICATE dbm_certificate <span class="keyword">WITH</span> SUBJECT <span class="operator">=</span> <span class="string">&#x27;dbm&#x27;</span>;</span><br><span class="line">BACKUP CERTIFICATE dbm_certificate</span><br><span class="line"><span class="keyword">TO</span> FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.cer&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> PRIVATE KEY (</span><br><span class="line">        FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.pvk&#x27;</span>,</span><br><span class="line">        ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span></span><br><span class="line">    );</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>将文件拷贝到其他两个节点：</p><p>在服务器中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker cp sqlNode1:/tmp/dbm_certificate.cer .</span><br><span class="line">docker cp sqlNode1:/tmp/dbm_certificate.pvk .</span><br><span class="line">docker cp dbm_certificate.cer sqlNode2:/tmp/</span><br><span class="line">docker cp dbm_certificate.pvk sqlNode2:/tmp/</span><br><span class="line">docker cp dbm_certificate.cer sqlNode3:/tmp/</span><br><span class="line">docker cp dbm_certificate.pvk sqlNode3:/tmp/</span><br></pre></td></tr></table></figure><h4 id="从库-导入密钥"><a href="#从库-导入密钥" class="headerlink" title="从库-导入密钥"></a>从库-导入密钥</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> LOGIN dbm_login <span class="keyword">WITH</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbm_user <span class="keyword">FOR</span> LOGIN dbm_login;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> CERTIFICATE dbm_certificate   </span><br><span class="line">    <span class="keyword">AUTHORIZATION</span> dbm_user</span><br><span class="line">    <span class="keyword">FROM</span> FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.cer&#x27;</span></span><br><span class="line">    <span class="keyword">WITH</span> PRIVATE KEY (</span><br><span class="line">    FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.pvk&#x27;</span>,</span><br><span class="line">    DECRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span></span><br><span class="line">);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="监听和重启"><a href="#监听和重启" class="headerlink" title="监听和重启"></a>监听和重启</h3><p>最后在所有节点执行以下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ENDPOINT [Hadr_endpoint]</span><br><span class="line">    <span class="keyword">AS</span> TCP (LISTENER_IP <span class="operator">=</span> (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>), LISTENER_PORT <span class="operator">=</span> <span class="number">5022</span>)</span><br><span class="line">    <span class="keyword">FOR</span> DATA_MIRRORING (</span><br><span class="line">        ROLE <span class="operator">=</span> <span class="keyword">ALL</span>,</span><br><span class="line">        AUTHENTICATION <span class="operator">=</span> CERTIFICATE dbm_certificate,</span><br><span class="line">        ENCRYPTION <span class="operator">=</span> REQUIRED ALGORITHM AES</span><br><span class="line">        );</span><br><span class="line"><span class="keyword">ALTER</span> ENDPOINT [Hadr_endpoint] STATE <span class="operator">=</span> STARTED;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">ON</span> ENDPOINT::[Hadr_endpoint] <span class="keyword">TO</span> [dbm_login];</span><br></pre></td></tr></table></figure><p>启用开机自启动ALWAYON，在所有节点执行以下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> EVENT SESSION  AlwaysOn_health <span class="keyword">ON</span> SERVER <span class="keyword">WITH</span> (STARTUP_STATE<span class="operator">=</span><span class="keyword">ON</span>);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="创建高可用组"><a href="#创建高可用组" class="headerlink" title="创建高可用组"></a>创建高可用组</h3><p>行以下脚本在主节点中创建一个可用性组。 </p><blockquote><p>请注意，选择CLUSTER_TYPE = NONE选项是因为它是在没有诸如Pacemaker或Windows Server故障转移群集之类的群集管理平台的情况下安装的。</p><p>如果要在Linux上安装AlwaysOn AG，则应为Pacemaker选择CLUSTER_TYPE = EXTERNAL：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> AVAILABILITY <span class="keyword">GROUP</span> [AG1]</span><br><span class="line">        <span class="keyword">WITH</span> (CLUSTER_TYPE <span class="operator">=</span> <span class="keyword">NONE</span>)</span><br><span class="line">        <span class="keyword">FOR</span> REPLICA <span class="keyword">ON</span></span><br><span class="line">        N<span class="string">&#x27;sqlNode1&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode1:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                ),</span><br><span class="line">        N<span class="string">&#x27;sqlNode2&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode2:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                ),</span><br><span class="line">        N<span class="string">&#x27;sqlNode3&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode3:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                );</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>在从库中执行以下命令，将从库加入到AG组中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] <span class="keyword">JOIN</span> <span class="keyword">WITH</span> (CLUSTER_TYPE <span class="operator">=</span> <span class="keyword">NONE</span>);</span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> DATABASE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>至此在Docker容器中安装SQL Server Alwayson集群已经完成了</p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>注意：当指定<code>CLUSTER_TYPE = NONE</code>创建可用组时无法自动故障转移，在执行故障转移时需执行以下命令，并检查要执行故障转移的辅助节点的<strong>最后提交时间</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] FORCE_FAILOVER_ALLOW_DATA_LOSS</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在主库上创建一个数据库，并加入到可用组AG中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE agtestdb;</span><br><span class="line">GO</span><br><span class="line">ALTER DATABASE agtestdb SET RECOVERY FULL;</span><br><span class="line">GO</span><br><span class="line">BACKUP DATABASE agtestdb TO DISK = <span class="string">&#x27;/var/opt/mssql/data/agtestdb.bak&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line">ALTER AVAILABILITY GROUP [ag1] ADD DATABASE [agtestdb];</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://learn.microsoft.com/zh-cn/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15">为 Linux 上的 SQL Server 配置环境变量 - SQL Server | Microsoft Learn</a></p></blockquote>]]></content>
    
    
    <summary type="html">使用Docker快速部署SQL Server Always On集群测试环境</summary>
    
    
    
    <category term="DBA" scheme="https://jonty.top/categories/DBA/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="SQL Server" scheme="https://jonty.top/tags/SQL-Server/"/>
    
    <category term="HA高可用" scheme="https://jonty.top/tags/HA%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    <category term="AlwaysOn" scheme="https://jonty.top/tags/AlwaysOn/"/>
    
  </entry>
  
  <entry>
    <title>CentOS中快速安装Docker</title>
    <link href="https://jonty.top/2022/10/20/install-docker-on-centos/"/>
    <id>https://jonty.top/2022/10/20/install-docker-on-centos/</id>
    <published>2022-10-20T08:35:37.000Z</published>
    <updated>2022-10-20T08:38:49.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.daocloud.io/docker | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="设置yum仓库"><a href="#设置yum仓库" class="headerlink" title="设置yum仓库"></a>设置yum仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker引擎"><a href="#安装Docker引擎" class="headerlink" title="安装Docker引擎"></a>安装Docker引擎</h3><blockquote><p>注意：docker-compose-plugin即安装docker-compose，不需要再进行手动安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CentOS中快速搭建Docker环境</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Shell" scheme="https://jonty.top/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>二十行代码，搞懂 Observable</title>
    <link href="https://jonty.top/2022/09/15/implement-observable/"/>
    <id>https://jonty.top/2022/09/15/implement-observable/</id>
    <published>2022-09-15T03:37:05.000Z</published>
    <updated>2022-09-15T03:33:46.074Z</updated>
    
    <content type="html"><![CDATA[<p>上帝说，要有代码，于是沐浴焚香，大笔一挥，一个 Hello World</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可是上帝对此并不高兴，他只想在需要的时候，才展示结果，于是我们把它放进了一个名为  <code>callback</code> 的<strong>函数</strong>盒子里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放在盒子里的程序不会自己执行，只有我们调用它的时候，才会执行，满足了上帝的需求，我们也学到一个知识点：</p><blockquote><p>函数可以作为延迟代码执行的一种手段</p></blockquote><h3 id="演员就位"><a href="#演员就位" class="headerlink" title="演员就位"></a>演员就位</h3><p>想象一个场景，我们需要一个提醒器，提醒我们该喝水了，于是可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">reminder() <span class="comment">// Time to drink water!</span></span><br></pre></td></tr></table></figure><p>看起来可行，但是我们更希望它只负责提醒，至于提醒之后做什么（行 1），由自己来决定，为了实现这个目的，可以将具体逻辑作为函数参数，传入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">&#125;</span><br><span class="line">reminder(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>)) <span class="comment">// Time to drink water!</span></span><br></pre></td></tr></table></figure><p>代码效果相同，但是这里我们可以自由地改变提醒事件发生之后的行为，传入不同的函数参数即可。</p><p>下面来玩儿一下 <code>reminder</code> 吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">reminder(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>))</span><br></pre></td></tr></table></figure><p>上面的代码会先立即进行提醒，然后隔一秒钟再次提醒。</p><p>现实不总是那么尽如人意，我们的 <code>reminder</code> 可能会出错，我们也期望知道这一系列的提醒什么时候结束，但是现在 <code>reminder</code> 只有一个 <code>cb</code> 参数，已经满足不了我们了。最简单的方式是传入三个参数以供使用：</p><ul><li><p>一个在提醒事件发生时，参数命名为 next</p></li><li><p>一个是错误发生时，命名为 error</p></li><li><p>一个是提醒结束时，命名为 complete</p></li></ul><p>如果我们使用一个对象来包裹这三个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb.next(<span class="number">1</span>)</span><br><span class="line">  cb.complete()</span><br><span class="line">&#125;</span><br><span class="line">reminder(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Time to drink water! 1</span></span><br><span class="line"><span class="comment">// Done</span></span><br></pre></td></tr></table></figure><p>我们来把 <code>reminder</code> 放进一个 <code>Reminder</code> 类里面，并重命名为 <code>remind</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reminder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">remind</span>(<span class="params">cb</span>)</span> &#123;</span><br><span class="line">    cb.next(<span class="number">1</span>)</span><br><span class="line">    cb.complete()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reminder = <span class="keyword">new</span> Reminder()</span><br><span class="line"></span><br><span class="line">reminder.remind(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>问题又来了，我们期望 <code>reminder</code> 的逻辑是可以动态注入的，一个解决方法是将函数体的内容通过构造参数传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reminder</span> </span>&#123;</span><br><span class="line">  constructor(behavior) &#123;</span><br><span class="line">    <span class="keyword">this</span>.behavior = behavior</span><br><span class="line">  &#125;</span><br><span class="line">  remind(cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.behavior(cb)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reminder = <span class="keyword">new</span> Reminder(cb =&gt; &#123;</span><br><span class="line">  cb.next(<span class="number">1</span>)</span><br><span class="line">  cb.complete()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">reminder.remind(&#123;</span><br><span class="line">  next: v =&gt; console.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  error: e =&gt; console.log(e),</span><br><span class="line">  complete: () =&gt; console.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们来做一些重命名</p><ul><li><p><code>Reminder</code> → <code>Observable</code></p></li><li><p><code>remind</code> → <code>subscribe</code></p></li><li><p><code>cb</code> → <code>observer</code></p></li><li><p><code>reminder</code> → <code>obs$</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">behavior</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.behavior = behavior</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.behavior(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obs$ = <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="number">1</span>)</span><br><span class="line">  observer.complete()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line">obs$.subscribe(observer)</span><br></pre></td></tr></table></figure><p>至此，20 行代码，甚至还包含一个文件末尾空行，我们实现了一个 <code>Observable</code></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>通过一系列的需求变更和拥抱变化，我们将最原始的 Hello World 重构成了一个具有基本功能的 <code>Observable</code>。再次观察和思考上面的代码，除了 <code>Observable</code> 的定义之外，存在三个语句：</p><ul><li><p><code>obs$</code> 的定义，最重要的是定义了被观察者的行为</p></li><li><p><code>observer</code> 的定义，定义了在所观察的事件发生时候的行为</p></li><li><p><code>subscribe</code> 的调用，连接了 <code>Observable</code> 和 <code>observer</code>，如果没有这个连接，什么都不会发生</p></li></ul><p>这三个语句职责单一且分明，提供了一种非常好的代码组织方式。</p><h4 id="问题-1：Observable-是异步的吗？"><a href="#问题-1：Observable-是异步的吗？" class="headerlink" title="问题 1：Observable 是异步的吗？"></a>问题 1：<code>Observable</code> 是异步的吗？</h4><p>看一下其内部实现，这完全取决于它的实现是否是异步调用了 <code>next</code>、<code>error</code> 和 <code>complete</code>。</p><h4 id="问题-2-RxJS-和-Observable-的关系"><a href="#问题-2-RxJS-和-Observable-的关系" class="headerlink" title="问题 2: RxJS 和 Observable 的关系"></a>问题 2: RxJS 和 Observable 的关系</h4><p>RXJS 在 <code>Observable</code> 的基础上，提供了大量的操作符，来帮助实现复杂的 <code>Observable</code> 行为定义。</p>]]></content>
    
    
    <summary type="html">二十行代码，搞懂 Observable</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Observable" scheme="https://jonty.top/tags/Observable/"/>
    
  </entry>
  
  <entry>
    <title>让泛型的思维扎根在脑海</title>
    <link href="https://jonty.top/2022/09/14/csharp-generic-review-03/"/>
    <id>https://jonty.top/2022/09/14/csharp-generic-review-03/</id>
    <published>2022-09-14T05:54:36.000Z</published>
    <updated>2022-09-14T07:48:45.987Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>往往一些刚接触C#编程的初学者，对于泛型的认识就是直接跳到对泛型集合的使用上，虽然微软为我们提供了很多内置的泛型类型，但是如果我们只是片面的了解调用方式，这会导致我们对泛型盲目的使用。至于<strong>为什么要使用泛型，什么情况下定义属于自己的泛型，定义泛型又能为程序带来哪些好处。</strong>要理清这些问题，我们就必须深刻理解泛型的本质，形成泛型编程的思维方式。</p></div><h2 id="需求-开发"><a href="#需求-开发" class="headerlink" title="需求 - 开发"></a>需求 - 开发</h2><p>接下来将基于一个基础示例，然后通过需求不断的演化示例，从而让泛型在关键时刻脱颖而出，以便让我们能够深刻体会泛型的作用。</p><p>假设.NET没有为我们提供用于存储数据的集合，而我们需要一个能够用于存储string元素的集合，基于这个情况我们自定义了一个用于存储字符串的集合类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayStr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStr</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">100</span>]; <span class="comment">//初始化存储元素的容量，只是为了演示故将容量定义为固定值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] _items; <span class="comment">//存储元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;   <span class="comment">//元素总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">string</span> item</span>) <span class="comment">//新增元素</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] <span class="comment">//索引</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了验证自定义string集合的可行性，我们对其进行了如下的应用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArraryStr arraryStr = <span class="keyword">new</span> ArraryStr();</span><br><span class="line">arraryStr.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Console.WriteLine(arraryStr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h2 id="新的需求-重复"><a href="#新的需求-重复" class="headerlink" title="新的需求 - 重复"></a>新的需求 - 重复</h2><p>目前对于创建string类型的集合已经大功告成，而此刻我们又接到了一个新的需求，即我们需要一个集合存储int类型的元素。基于自定义string集合的经验来看，我们可以发现，string集合类型和我们即将要创建的int集合类型的结构和内容几乎是一样的。这就意味着我们可以使用江湖盛行的“复制大法”，将之前的代码复制一遍，然后轻微修改下即可。下面是两个集合类型代码的对比图。</p><p><img data-src="https://cdn.jonty.top/img/722260-20220909092205696-401431564.png" alt="对比"></p><p>在早年有款热门的游戏叫做“大家来找茬”，该游戏主要玩法就是在两个大致相同的图片中，查找两者之间的细微差异之处。我们使用的“复制大法”，促使我们编写的代码形成了可以用于这个游戏游玩的场景。“对于上面的两个代码截图，你能找出图中不同的地方吗？”</p><p>对于软件开发者而言，面对的最主要的敌人就是“变化”，假设后面还会出现N个类型的元素需要我们定义集合来存储，那我们是不是要将相同的代码无穷尽的复制下去？</p><p><strong>DRY（Don’t Repeat Yourself，不要重复自己）</strong>，请记住这是作为一名软件开发者编码的原则，“复制大法”很明显的违背了这个原则。</p><h2 id="新的问题-安全-amp-性能"><a href="#新的问题-安全-amp-性能" class="headerlink" title="新的问题 - 安全&amp;性能"></a>新的问题 - 安全&amp;性能</h2><p>通过“复制，粘贴”的手段可以很明显的感受到我们在做重复的事情，在重复中我们可以发现：集合存储的类型在增加，但是集合的结构和添加元素的方法都是相同的逻辑。</p><p>简单来说就是，<strong>不同类型的处理，其处理逻辑都是类似的。</strong></p><p>基于这个特点，为了满足自定义集合能够应对所有类型的存储，我们必须使用一个通用类型来作为代表，此时此刻我们脑海中就能浮现出一句话：</p><p><strong>object是一切类型的基类</strong>。</p><p>这就意味着我们添加的所有类型，都可以隐式的转换为object类型，从而使得自定义集合可以添加任何类型的元素。让我们来运用这个object类型来试试：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span> &#123; _items = <span class="keyword">new</span> <span class="built_in">object</span>[<span class="number">100</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span>[] _items;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">object</span> item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// END ArraryStr</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList arraryList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        arraryList.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        arraryList.Add(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> name = (<span class="built_in">string</span>)arraryList[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> age = (<span class="built_in">int</span>)arraryList[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// END Main（）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们结合了object是一切类型基类的特点，对集合类型进行改造，并成功的使用该方式的集合添加了不同类型的元素。</p><p>虽然在使用的角度来看已经完美无缺(可以添加任何类型)，但是获取集合元素进行赋值的时候，还使用了类型强制转换的手段。</p><p><strong>这种方式存在很严重的问题，主要包括以下两个方面：</strong></p><ol><li><strong>类型安全方面</strong>：如果集合的第一个元素是sting类型，但是你客观认为是int类型，于是你在获取时进行了int类型的强制转换，这个时候代码不会提示错误且可以正常编译，那么这就意味着程序在运行时会产生一个你无法预料的类型无效转换的异常。</li><li><strong>性能方面</strong>：值类型元素添加到集合时，必然会存在装箱操作；而在获取元素并赋值给一个值类型变量时，又会发生相应的拆箱操作。这种拆箱和装箱的操作，在操作大量元素时会大幅度的损失程序的性能。</li></ol><p>到目前位置，我们还是没有能创建一个能够存储任何类型的集合，但是我们可以对于上述的示例演变的过程进行一个总结：</p><p>对于不同类型有相同处理逻辑的情况，如果一味的复制会导致我们出现重复代码，如果使用object来作为解决重复的方案，会存在类型安全和性能的问题。</p><p>至于如何让彻底解决这些问题，这就要说到了本文讲解的主题——<strong>泛型</strong>。</p><h2 id="解决问题-代码模板"><a href="#解决问题-代码模板" class="headerlink" title="解决问题 - 代码模板"></a>解决问题 - 代码模板</h2><p>C#中有两种不同的机制来编写跨类型（一个类型代替多个类型）可复用的代码：继承和泛型。</p><p>继承的复用性来自于基类，而泛型的复用性是通过带有<code>占位符</code>的<strong>代码模板</strong>类型实现的。</p><p>继承实现复用是站在面向对象的角度思考的，而泛型的复用是站在实现特定功能上思考的。</p><p>相比于继承，泛型不用遵循里氏替换原则，并且能够<strong>提高类型的安全性，减少类型转换带来的拆箱和装箱</strong>。</p><h3 id="怎么样理解泛型？"><a href="#怎么样理解泛型？" class="headerlink" title="怎么样理解泛型？"></a>怎么样理解泛型？</h3><p><strong>泛型本质上相当于一种“代码模板”，可以用一套代码，为不同类型的同一逻辑使用统一的方式实现。</strong></p><p>其中“模板”一词的概念需要进行深刻的体会。例如，公司在招聘时会与用人方签订劳动合同，而这个劳动合同的主要内容对于所有人来说几乎都是一样的，只是在极个别的地方有所差异，如薪资、姓名等。所以公司不会为某个人（张三或李四）去特意的制定合同，而是会统一制定一份劳动合同作为模板，将其中针对个人存在差异的部分通过“下划线”进行占位预留，“下划线”的值将在签订合同时由具体的聘用者根据自身情况填写。</p><p><img data-src="https://cdn.jonty.top/img/722260-20220909094110950-1186053807.png" alt="合同模板"></p><p>对于这种模板方式的使用，公司在制定合同时则不用考虑签订合同的人具体是谁，因为劳动合同(模板)和使用者是分开的，所以公司只用专注于合同的主要内容即可。而我们在实际的编程运用中，使用泛型的目的，其实和公司制定通用的劳动合同模板是一个道理。假设你的公司需要雇佣100名员工时，你不希望为每一个人都制定一个专属的合同吧？假设你的代码中，如果遇到10个类型，它们的操作处理逻辑都一样时，你不希望为这个10个类型写10个处理方式吧？</p><p>通过上面的介绍和例子，接下来我们将泛型运用到我们的示例中来，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span> &#123; _items = <span class="keyword">new</span> T[<span class="number">100</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] _items;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// END ArraryStr</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;<span class="built_in">string</span>&gt; arraryStr = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        arraryStr.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Console.WriteLine(arraryStr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;<span class="built_in">int</span>&gt; arraryInt = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        arraryInt.Add(<span class="number">18</span>);</span><br><span class="line">        Console.WriteLine(arraryInt[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// END Main（）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型参数"><a href="#类型参数" class="headerlink" title="类型参数"></a>类型参数</h3><p>在上面的代码中，我们将集合类型定义为了泛型类，该类型中出现的T属于泛型中的**类型参数(Type Parameter)**。</p><p>泛型为了达到通用处理的目的，所以不能将某个具体类型作为处理的目标类型，故而将要处理的类型用<code>T</code>作为一个类型占位符。</p><p><code>T</code>并不是真正的数据类型，它更像是泛型使用的类型蓝图，所以在使用时，泛型类型的消费者必须将一个具体类型作为<code>类型参数</code>传递到尖括号内，以此构造一个有明确处理类型的泛型实例。</p><p>所以我们在外部使用泛型时不能以：<code>ArraryList&lt;T&gt;list =new ArraryList&lt;T&gt;()</code>、<code>T t=new T()</code>这种方式去实例化泛型类型。</p><p>另外，<code>T</code>本身仅仅是类型参数的名称，它只是代表了类型参数的标识而已，这意味着我们可以使用其他字符来为类型参数命名，例如<code>TModel</code>、<code>YModel</code>等</p><h3 id="类型替换"><a href="#类型替换" class="headerlink" title="类型替换"></a>类型替换</h3><p>通过类型参数的使用我们可以得知，泛型类型代码在静态阶段没有明确的类型。</p><p>那么在程序运行的时候，它又是如何和使用时指定的“类型参数”进行对接的呢？</p><p>为了搞清楚这个问题，下面我们来了解下泛型运行时的本质。</p><p>我们编写的C#程序在编译后生成的代码，并不是计算机可以直接执行的代码，而是会生成<code>CIL</code>（通用中间语言）代码并包含在程序集中，如果想要生成计算机可执行的代码，则还需要<code>JIT</code>（即时编译器）对<code>CIL</code>代码进行二次编译。</p><p>然而泛型类型确认其具体类型的时机，就在<code>JIT</code>进行二次编译时，<code>JIT</code>编译的代码如果包含了泛型的内容，那么<strong>它会根据泛型类型的消费者指定的类型参数，将CIL中泛型代码中的占位符T替换为一个具体的类型，</strong>从而明确当前执行的泛型代码是针对哪个类型来使用的，其中替换的过程是由<code>CLR</code>在运行时进行主导，<code>JIT</code>来实际操作完成的。这个在运行时确认了类型的泛型又被称之为<strong>封闭类型</strong>，反之在运行时确认之前的泛型称为<code>开放类型</code>。</p><p><img data-src="https://cdn.jonty.top/img/722260-20220909093118831-581937293.png" alt="运行步骤"></p><p>泛型使用占位符在运行时替换具体类型的机制，其实和本文中例举劳动合同模板使用<code>下划线</code>的方式有同样的思想。</p><p>在指定劳动合同模板时，对于聘用者的姓名并不能写一个具体的名字，因为模板的目的是为了通用化，所以对于名字采用了“下划线”的方式。</p><p>当公司与某个具体的人签订合同的时候，劳动合同模板中的下划线将由聘用者根据自身情况填写。</p><p>回到泛型中其使用思想也是如此，我们使用泛型的目的是为了让多个类型的处理通用化，所以在定义泛型代码的时候并不能指定一个具体类型，故使用类型参数<code>T</code>进行代替，这个类型参数T就相当于劳动合同模板中的<code>下划线</code></p><p>当泛型在实际运行的时候，<code>JIT</code>会根据泛型消费者指定的具体类型与占位符<code>T</code>进行替换。</p><h2 id="总结问题"><a href="#总结问题" class="headerlink" title="总结问题"></a>总结问题</h2><p>本文并不是专门适用于介绍泛型的使用细节的文章，而是通过一个实例根据需求不断演化的过程，对泛型一步步深入，从而更加深刻的理解泛型的使用初衷，相比了解泛型<code>只言片语</code>而言，形成泛型的编程概念和思维显得尤为重要。</p><p>在泛型的机制中，我们可以将不同类型存在相同处理逻辑的情况，形成一个通用的方案，从而不在为特定的类型进行编码，用一套通用的代码模板会服务于更多的类型，并且在使用上能保证类型安全和提供良好的性能。</p><blockquote><p>作　　者： <strong><a href="https://home.cnblogs.com/u/green-jcx/">姜承轩</a></strong><br>出　　处：<a href="https://www.cnblogs.com/green-jcx/p/16671687.html">https://www.cnblogs.com/green-jcx/p/16671687.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">让泛型的思维扎根在脑海 - 深刻理解泛型</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term=".NET" scheme="https://jonty.top/tags/NET/"/>
    
    <category term="Generic" scheme="https://jonty.top/tags/Generic/"/>
    
    <category term="CSharp" scheme="https://jonty.top/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>Grafana Loki搭建日志中心</title>
    <link href="https://jonty.top/2022/08/13/use-lpg-to-build-log-center/"/>
    <id>https://jonty.top/2022/08/13/use-lpg-to-build-log-center/</id>
    <published>2022-08-12T16:07:58.000Z</published>
    <updated>2022-08-12T16:14:52.970Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/logo_and_name.png" alt="Grafana loki"></p><p>Loki + Promtail + Grafana（简称LPG），LPG日志收集方案内存占用很少，它不像ELK日志系统那样为日志建立索引，而是为每个日志流设置一组标签。下面分别介绍下它的核心组件：</p><ul><li>Promtail：日志收集器，负责收集日志并将其发送给Loki，对标ELK中的Logstash。</li><li>Loki：聚合并存储日志数据和处理查询，可以作为Grafana的数据源，为Grafana提供可视化数据，对标ELK中的Elasticsearch</li><li>Grafana：从Loki中获取日志信息，进行可视化展示，对标ELK中的Kibana</li></ul><p><img data-src="https://cdn.jonty.top/img/lokiflow.png" alt="lokiflow"></p><p>LPG相较于ELK Stack有以下优势：</p><ul><li>Elasticsearch中的数据作为非结构化JSON对象存储在磁盘上，Loki以二进制的形式存储。</li><li>Elasticsearch采用全文索引，倒排索引的切分和共享的成本较高。Loki仅索引元数据，比如标签。</li><li>和Prometheus无缝集成。</li></ul><blockquote><p>官方文档：<a href="https://grafana.com/docs/loki/latest/">Grafana Loki docs</a></p><p>扩展阅读：</p><ul><li><a href="https://prometheus.io/docs/guides/dockerswarm/">Docker Swarm Prometheus</a></li><li><a href="https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/">比较|Grafana Loki</a></li></ul></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img data-src="https://cdn.jonty.top/img/640%20(1).png" alt="日志存储架构"></p><h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><p>日志数据的写主要依托的是 <strong>Distributor</strong> 和 Ingester 两个组件，整体的流程如下：</p><p><img data-src="https://cdn.jonty.top/img/111.png" alt="write"></p><h3 id="Distributor"><a href="#Distributor" class="headerlink" title="Distributor"></a>Distributor</h3><p>一旦 Promtail 收集日志并将其发送给 Loki，Distributor 就是第一个接收日志的组件。</p><p>由于日志的写入量可能很大，所以不能在它们传入时将它们写入数据库，这会毁掉数据库，需要批处理和压缩数据。</p><p>Loki 通过构建压缩数据块来实现这一点，方法是在日志进入时对其进行 Gzip 操作，组件 Ingester 是一个有状态的组件，负责构建和刷新 Chunck，当 Chunk 达到一定的数量或者时间后，刷新到存储中去。</p><p>每个流的日志对应一个 Ingester，当日志到达 Distributor 后，根据元数据和 Hash 算法计算出应该到哪个 Ingester 上面。</p><p>此外，为了冗余和弹性，会将其复制 n（默认情况下为 3）次。</p><p><img data-src="https://cdn.jonty.top/img/Distributor%20.png" alt="Distributor "></p><h3 id="Ingester"><a href="#Ingester" class="headerlink" title="Ingester"></a>Ingester</h3><p>Ingester 接收到日志并开始构建 Chunk：</p><p><img data-src="https://cdn.jonty.top/img/Ingester.png" alt="Ingester"></p><p>将日志进行压缩并附加到 Chunk 上面。一旦 Chunk“填满”（数据达到一定数量或者过了一定期限），Ingester 将其刷新到数据库。</p><p>Loki对块和索引使用单独的数据库，因为它们存储的数据类型不同。</p><p>刷新一个 Chunk 之后，Ingester 然后创建一个新的空 Chunk 并将新条目添加到该 Chunk 中。</p><p><img data-src="https://cdn.jonty.top/img/Ingester1.png" alt="Ingester1"></p><h3 id="Querier"><a href="#Querier" class="headerlink" title="Querier"></a>Querier</h3><p>由 Querier 负责给定一个时间范围和标签选择器，Querier 查看索引以确定哪些块匹配，并通过 greps 将结果显示出来。它还从 Ingester 获取尚未刷新的最新数据。</p><p>对于每个查询，一个查询器将显示所有相关日志。实现了查询并行化，提供分布式 grep，使即使是大型查询也是足够的</p><p><img data-src="https://cdn.jonty.top/img/Querier.png" alt="Querier"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote><p>使用docker compose 统一部署需Loki、Promtail、Grafana这些服务</p></blockquote><h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><p>创建工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p lpg/loki/data</span><br><span class="line">mkdir -p lpg/promtail/logs</span><br><span class="line">mkdir -p lpg/grafana/data/</span><br><span class="line">chmod -R 777 lpg</span><br><span class="line"><span class="built_in">cd</span> lpg</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>创建docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>将以下内容复制进去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-loki</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100:3100&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/loki/:/etc/loki/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/loki/data/:/tmp/loki/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/loki/loki.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">promtail:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-promtail</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/promtail:/etc/promtail/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/promtail/logs/:/var/log/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/promtail/promtail.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-grafana</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">promtail</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># - GF_SERVER_ROOT_URL=http://gct-china.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_SECURITY_ADMIN_PASSWORD=bb123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/grafana/grafana.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/grafana/data/:/var/lib/grafana</span></span><br></pre></td></tr></table></figure><p>把Loki、Promtail、Grafana的配置文件挂载到宿主机上，在运行之前，需要先准备好这3个配置文件；</p><h3 id="loki-yml"><a href="#loki-yml" class="headerlink" title="loki.yml"></a>loki.yml</h3><p>Loki的配置文件<code>$PWD/loki/loki.yml</code>内容如下，使用的是默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi loki/loki.yml</span><br></pre></td></tr></table></figure><p><code>loki.yml</code></p><p>这里使用文件存储，映射目录为<code>/tmp/loki</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingester:</span></span><br><span class="line">  <span class="attr">lifecycler:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment"># loki访问路径</span></span><br><span class="line">    <span class="attr">ring:</span></span><br><span class="line">      <span class="attr">kvstore:</span></span><br><span class="line">        <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">      <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">final_sleep:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">chunk_idle_period:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">chunk_retain_period:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">wal:</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">/tmp/wal</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-05-15</span></span><br><span class="line">    <span class="attr">store:</span> <span class="string">boltdb</span></span><br><span class="line">    <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">    <span class="attr">index:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">      <span class="attr">period:</span> <span class="string">168h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage_config:</span></span><br><span class="line">  <span class="attr">boltdb:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/index</span> <span class="comment">#自定义boltdb目录(在loki目录下新建data文件来存放</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/chunks</span> <span class="comment">#自定义filesystem目录(在loki目录下新建data文件来存放)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limits_config:</span></span><br><span class="line">  <span class="attr">enforce_metric_name:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">reject_old_samples:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">reject_old_samples_max_age:</span> <span class="string">168h</span></span><br></pre></td></tr></table></figure><p>官方默认配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">filesystem:</span></span><br><span class="line">      <span class="attr">chunks_directory:</span> <span class="string">/loki/chunks</span></span><br><span class="line">      <span class="attr">rules_directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">instance_addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-10-24</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br></pre></td></tr></table></figure><h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingester:</span></span><br><span class="line">  <span class="attr">lifecycler:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">ring:</span></span><br><span class="line">      <span class="attr">kvstore:</span></span><br><span class="line">        <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">      <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">final_sleep:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">chunk_idle_period:</span> <span class="string">1h</span>       <span class="comment"># 在这段时间内没有接收到新日志的任何块都将被刷新</span></span><br><span class="line">  <span class="attr">max_chunk_age:</span> <span class="string">1h</span>           <span class="comment"># 所有块刷新实践，默认为 1h</span></span><br><span class="line">  <span class="attr">chunk_target_size:</span> <span class="number">1048576</span>  <span class="comment"># Loki 将尝试构建最大 1.5MB 的块，如果首先达到 chunk_idle_period 或 max_chunk_age，则首先刷新</span></span><br><span class="line">  <span class="attr">chunk_retain_period:</span> <span class="string">30s</span>    <span class="comment"># 如果使用索引缓存，则必须大于索引读取缓存 TTL（默认索引读取缓存 TTL 为 5m）</span></span><br><span class="line">  <span class="attr">max_transfer_retries:</span> <span class="number">0</span>     <span class="comment"># 块传输已禁用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-10-24</span> <span class="comment"># 展示在此时间之后的数据</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span>  <span class="comment"># 对象存储类型 </span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage_config:</span></span><br><span class="line">  <span class="attr">boltdb_shipper:</span></span><br><span class="line">    <span class="attr">active_index_directory:</span> <span class="string">/loki/boltdb-shipper-active</span></span><br><span class="line">    <span class="attr">cache_location:</span> <span class="string">/loki/boltdb-shipper-cache</span></span><br><span class="line">    <span class="attr">cache_ttl:</span> <span class="string">24h</span>         <span class="comment"># Can be increased for faster performance over longer query periods, uses more disk space</span></span><br><span class="line">    <span class="attr">shared_store:</span> <span class="string">filesystem</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/loki/chunks</span> <span class="comment">#自定义filesystem目录(在loki目录下新建data文件来存放)</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">boltdb:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/index</span> <span class="comment">#自定义boltdb目录(在loki目录下新建data文件来存放</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compactor:</span></span><br><span class="line">  <span class="attr">working_directory:</span> <span class="string">/loki/boltdb-shipper-compactor</span></span><br><span class="line">  <span class="attr">shared_store:</span> <span class="string">filesystem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limits_config:</span></span><br><span class="line">  <span class="attr">reject_old_samples:</span> <span class="literal">true</span>  <span class="comment"># 是否拒绝旧样本</span></span><br><span class="line">  <span class="attr">reject_old_samples_max_age:</span> <span class="string">168h</span> <span class="comment"># 168小时之前的样本被拒绝</span></span><br><span class="line">  <span class="attr">max_entries_limit_per_query:</span> <span class="number">9999</span> <span class="comment"># 最大查询行数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chunk_store_config:</span></span><br><span class="line">  <span class="attr">max_look_back_period:</span> <span class="string">0s</span> <span class="comment"># 为避免查询超过保留期的数据，必须小于或等于下方的时间值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">table_manager:</span></span><br><span class="line">  <span class="attr">retention_deletes_enabled:</span> <span class="literal">false</span>  <span class="comment"># 保留删除是否删除</span></span><br><span class="line">  <span class="attr">retention_period:</span> <span class="string">0s</span> <span class="comment"># 72h 超过72h的块数据将被删除</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">local:</span></span><br><span class="line">      <span class="attr">directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">rule_path:</span> <span class="string">/loki/rules-temp</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">enable_api:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>官方配置示例：<a href="https://grafana.com/docs/loki/latest/configuration/examples/">https://grafana.com/docs/loki/latest/configuration/examples/</a></p><p>存储切换：<a href="https://juejin.cn/post/6870533848644616206">https://juejin.cn/post/6870533848644616206</a></p><p>集群部署：<a href="https://zhuanlan.zhihu.com/p/373178364">https://zhuanlan.zhihu.com/p/373178364</a></p></blockquote><h3 id="promtail-yml"><a href="#promtail-yml" class="headerlink" title="promtail.yml"></a>promtail.yml</h3><p>Promtail的配置文件<code>$PWD/promtail/promtail.yml</code>内容如下，使用的也是默认配置，这里的<code>clients.url</code>需要注意下，由于使用的是<code>docker-compose</code>部署，可以将服务名称<code>loki</code>作为域名来访问Loki服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi promtail/promtail.yml</span><br></pre></td></tr></table></figure><p><code>promtail.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">9080</span></span><br><span class="line">  <span class="attr">grpc_listen_port:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">positions:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">/tmp/positions.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clients:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://loki:3100/loki/api/v1/push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">job:</span> <span class="string">varlogs</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">promtail</span></span><br><span class="line">      <span class="attr">__path__:</span> <span class="string">/var/log/*log</span></span><br></pre></td></tr></table></figure><blockquote><p>配置示例：<a href="https://grafana.com/docs/loki/latest/clients/promtail/configuration/#example-static-config">https://grafana.com/docs/loki/latest/clients/promtail/configuration/#example-static-config</a></p></blockquote><h3 id="grafana-ini"><a href="#grafana-ini" class="headerlink" title="grafana.ini"></a>grafana.ini</h3><p>Grafana的配置文件<code>$PWD/grafana/grafana.ini</code>内容如下，使用的也是默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://cdn.jonty.top/img/grafana.ini -o ./grafana/grafana.ini</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220812143852426.png" alt="image-20220812143852426"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>运行<code>docker-compose.yml</code>脚本安装所有服务，使用如下命令即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line">docker compose ps</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220812132457250.png" alt="image-20220812132457250"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p>部署完成后登录<code>Grafana</code>，<a href="http://192.168.2.97:3000/">http://192.168.2.97:3000</a></p><p>初始账号密码：admin/admin  （根据配置参数：bb123456）</p><p><img data-src="https://cdn.jonty.top/img/image-20220812132735723.png" alt="image-20220812132735723"></p><p>修改新的密码后进入</p><p><img data-src="https://cdn.jonty.top/img/image-20220812132835834.png" alt="image-20220812132835834"></p><h4 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h4><p><img data-src="https://cdn.jonty.top/img/image-20220812132952221.png" alt="image-20220812132952221"></p><p>选择<code>Loki</code>，可以看到<code>Grafana</code>也支持<code>Elasticseach</code></p><p><img data-src="https://cdn.jonty.top/img/image-20220812133044599.png" alt="image-20220812133044599"></p><p>保存并测试</p><p><img data-src="https://cdn.jonty.top/img/image-20220812164333736.png" alt="image-20220812164333736"></p><h3 id="NuGet集成"><a href="#NuGet集成" class="headerlink" title="NuGet集成"></a>NuGet集成</h3><p>添加Serilog 的Loki扩展</p><ul><li>Serilog</li><li>Serilog.AspNetCore</li><li>Serilog.Sinks.Grafana.Loki</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Serilog.Sinks.Grafana.Loki</span><br></pre></td></tr></table></figure><p>仓库：<a href="https://github.com/serilog-contrib/serilog-sinks-grafana-loki">https://github.com/serilog-contrib/serilog-sinks-grafana-loki</a></p><p>案例：<a href="https://github.com/serilog-contrib/serilog-sinks-grafana-loki/tree/master/sample">https://github.com/serilog-contrib/serilog-sinks-grafana-loki/tree/master/sample</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Serilog.Debugging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Serilog.Sinks.Grafana.Loki.Sample</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> OutputTemplate =</span><br><span class="line">        <span class="string">&quot;&#123;Timestamp:dd-MM-yyyy HH:mm:ss&#125; [&#123;Level:u3&#125;] [&#123;ThreadId&#125;] &#123;Message&#125;&#123;NewLine&#125;&#123;Exception&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SelfLog.Enable(Console.Error);</span><br><span class="line"></span><br><span class="line">        Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">            .MinimumLevel.Debug()</span><br><span class="line">            .Enrich.WithThreadId()</span><br><span class="line">            .Enrich.WithProperty(<span class="string">&quot;meaning_of_life&quot;</span>, <span class="number">42</span>)</span><br><span class="line">            .WriteTo.Console(outputTemplate: OutputTemplate)</span><br><span class="line">            .WriteTo.GrafanaLoki(</span><br><span class="line">                <span class="string">&quot;http://192.168.2.97:3100&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> List&lt;LokiLabel&gt; &#123; <span class="keyword">new</span>() &#123; Key = <span class="string">&quot;app&quot;</span>, Value = <span class="string">&quot;console1&quot;</span> &#125; &#125;, <span class="comment">// label用户查询</span></span><br><span class="line">                credentials: <span class="literal">null</span>)</span><br><span class="line">            .CreateLogger();</span><br><span class="line"></span><br><span class="line">        Log.Debug(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;Billy&quot;</span>, <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        Log.Information(<span class="string">&quot;Person of the day: &#123;@Person&#125;&quot;</span>, person);</span><br><span class="line"></span><br><span class="line">        Log.Warning(<span class="string">&quot;道路千万条，安全第一条，行车不规范，亲人两行泪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccessViolationException(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.Error(ex, <span class="string">&quot;An error occured&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220812174006119.png" alt="image-20220812174006119"></p><h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><blockquote><p>官方文档：<a href="https://grafana.com/docs/loki/latest/logql/">https://grafana.com/docs/loki/latest/logql/</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220812174254586.png" alt="image-20220812174254586"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>把应用程序日志目录挂载到Promtail &gt; $PWD/promtail/logs/ <a href="#docker-compose.yml">目录</a>上，Promtail可以收集到日志</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  server_logs:</span><br><span class="line">  server_sysfiles:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  net:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  hostapi:</span><br><span class="line">    image: host_server:dev</span><br><span class="line">    networks:</span><br><span class="line">      - net</span><br><span class="line">    volumes:</span><br><span class="line"><span class="deletion">-     - &quot;server_logs:/app/App_Data/Logs&quot;</span></span><br><span class="line"><span class="addition">+     - $PWD/promtail/logs/:/app/App_Data/Logs</span></span><br><span class="line">      - &quot;server_sysfiles:/app/wwwroot/SysFiles&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://blog.csdn.net/wayne_primes/article/details/112467639">https://blog.csdn.net/wayne_primes/article/details/112467639</a></p></blockquote>]]></content>
    
    
    <summary type="html">Loki + Promtail + Grafana（简称LPG）, 提高更具成本效益的解决方案</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Grafana" scheme="https://jonty.top/tags/Grafana/"/>
    
    <category term="Loki" scheme="https://jonty.top/tags/Loki/"/>
    
    <category term="Promtail" scheme="https://jonty.top/tags/Promtail/"/>
    
    <category term="LPG" scheme="https://jonty.top/tags/LPG/"/>
    
  </entry>
  
  <entry>
    <title>【K8s】Kubernetes入门-02</title>
    <link href="https://jonty.top/2022/08/11/getting-started-with-kubernetes-02/"/>
    <id>https://jonty.top/2022/08/11/getting-started-with-kubernetes-02/</id>
    <published>2022-08-11T01:12:37.000Z</published>
    <updated>2022-08-11T03:00:24.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h2><h3 id="集群类型"><a href="#集群类型" class="headerlink" title="集群类型"></a>集群类型</h3><p>Kubernetes集群大体上分为两类：</p><ul><li><p>一主多从：一台Master节点和多台Node节点，搭建简单，但是有单机故障风险，适合用于测试环境</p></li><li><p>多主多从：多台Master节点和多台Node节点，搭建复杂，安全性高，适合用于生产环境</p></li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220807225935670.png" alt="image-20220807225935670"></p><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>Kubernetes有多种部署方式，目前主流的方式有kubeadm、minikube、二进制包</p><ul><li>minikube：一个用于快速搭建单节点kubernetes的工具</li><li>kubeadm：一个用于快速搭建kubernetes集群的工具</li><li>二进制包：从官网下载每个组件的二进制包，依次安装，有助于理解kubernetes组件</li></ul><blockquote><p>说明：演示选择使用kubeadm方式安装集群环境</p></blockquote><h3 id="主机规划"><a href="#主机规划" class="headerlink" title="主机规划"></a>主机规划</h3><table><thead><tr><th>主机</th><th>IP</th><th>操作体统</th><th>配置</th></tr></thead><tbody><tr><td>master</td><td>192.168.2.94</td><td>CentOS7.6</td><td>4U8G 50G</td></tr><tr><td>node1</td><td>192.168.2.95</td><td>CentOS7.6</td><td>4U8G 50G</td></tr><tr><td>node2</td><td>192.168.2.96</td><td>CentOS7.6</td><td>4U8G 50G</td></tr></tbody></table><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次环境需要安装三台CentOS服务器（一主二从），然后在每台服务器分别安装Docker、Kubeadm、Kubelet、Kubectl</p><h3 id="主机安装"><a href="#主机安装" class="headerlink" title="主机安装"></a>主机安装</h3><p>安装三台服务器</p><p><img data-src="https://cdn.jonty.top/img/image-20220807231215279.png" alt="image-20220807231215279"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="检查系统版本"><a href="#检查系统版本" class="headerlink" title="检查系统版本"></a>检查系统版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure><blockquote><p>此方式安装Kubernetes集群要求CentOS版本在7.5以上</p></blockquote><h4 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h4><p>配置主机名解析，有DNS也可以直接配置DNS，方便后面集群节点之间的调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt;/etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.94 master</span></span><br><span class="line"><span class="string">192.168.2.95 node1</span></span><br><span class="line"><span class="string">192.168.2.96 node2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p>集群中节点的时间必须精确一致</p><p>使用 <code>chronyd</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line">systemctl start chronyd</span><br><span class="line"><span class="comment">## 启用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment">## 停止</span></span><br><span class="line">systemctl stop chronyd</span><br><span class="line"><span class="comment">## 禁用</span></span><br><span class="line">systemctl <span class="built_in">disable</span> chronyd</span><br></pre></td></tr></table></figure><p>使用 <code>ntp</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt;/var/spool/cron/root</span></span><br><span class="line"><span class="string">00 12 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">##查看计划任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment">##手动执行</span></span><br><span class="line">/usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220807232320564.png" alt="image-20220807232320564"></p><h4 id="禁用iptable和firewalld服务"><a href="#禁用iptable和firewalld服务" class="headerlink" title="禁用iptable和firewalld服务"></a>禁用iptable和firewalld服务</h4><p>Kubernetes和Docker 在运行的中会产生大量的<code>iptables</code>规则，为了不让系统规则跟它们混淆，直接关闭系统的规则</p><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure><p>关闭iptables服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl stop iptables</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl disable iptables</span></span><br></pre></td></tr></table></figure><h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><p><code>selinux</code>是<code>linux</code>系统下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题</p><blockquote><p>需要重启生效</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">setenforce 0 </span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141956564.png" alt="image-20220808141956564"></p><h4 id="禁用swap分区"><a href="#禁用swap分区" class="headerlink" title="禁用swap分区"></a>禁用swap分区</h4><p>swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响</p><p>Kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑分区配置文件/etc/fstab，注释掉swap分区一行</span></span><br><span class="line"><span class="comment"># 注意修改完毕之后需要重启linux服务</span></span><br><span class="line">vi /etc/fstab</span><br><span class="line">注释掉 /dev/mapper/centos-swap swap</span><br><span class="line"><span class="comment"># /dev/mapper/centos-swap swap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i <span class="string">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141929110.png" alt="image-20220808141929110"></p><h4 id="修改linux的内核参数"><a href="#修改linux的内核参数" class="headerlink" title="修改linux的内核参数"></a>修改linux的内核参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改linux的内核采纳数，添加网桥过滤和地址转发功能</span></span><br><span class="line"><span class="comment"># 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置：</span></span><br><span class="line">vi /etc/sysctl.d/kubernetes.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">[root@master ~]<span class="comment"># sysctl -p</span></span><br><span class="line"><span class="comment"># 加载网桥过滤模块</span></span><br><span class="line">[root@master ~]<span class="comment"># modprobe br_netfilter</span></span><br><span class="line"><span class="comment"># 查看网桥过滤模块是否加载成功</span></span><br><span class="line">[root@master ~]<span class="comment"># lsmod | grep br_netfilter</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141603448.png" alt="image-20220808141603448"></p><h4 id="配置ipvs功能"><a href="#配置ipvs功能" class="headerlink" title="配置ipvs功能"></a>配置ipvs功能</h4><p>在Kubernetes中Service有两种带来模型，一种是基于iptables的，一种是基于ipvs</p><p>两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装ipset和ipvsadm</span></span><br><span class="line">[root@master ~]<span class="comment"># yum install ipset ipvsadm -y</span></span><br><span class="line"><span class="comment"># 2.添加需要加载的模块写入脚本文件</span></span><br><span class="line">[root@master ~]<span class="comment"># cat &lt;&lt;EOF&gt; /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 3.为脚本添加执行权限</span></span><br><span class="line">[root@master ~]<span class="comment"># chmod +x /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment"># 4.执行脚本文件</span></span><br><span class="line">[root@master ~]<span class="comment"># /bin/bash /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment"># 5.查看对应的模块是否加载成功</span></span><br><span class="line">[root@master ~]<span class="comment"># lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141545255.png" alt="image-20220808141545255"></p><h4 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># getenforce</span></span><br><span class="line">Disabled</span><br><span class="line">[root@master ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7821         149        7478           8         192        7422</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [&quot;https://evcbq79g.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808144501504.png" alt="image-20220808144501504"></p><blockquote><p><a href="https://blog.51cto.com/riverxyz/2537914">为什么要修改docker的cgroup driver</a></p><p><a href="https://www.simaek.com/archives/280/">修改Docker的Cgroup Driver为systemd，替换默认的cgroupfs</a></p></blockquote><h3 id="安装Kubernetes组件"><a href="#安装Kubernetes组件" class="headerlink" title="安装Kubernetes组件"></a>安装Kubernetes组件</h3><h4 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgchech=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><h4 id="安装kubeadm、kubelet和kubectl"><a href="#安装kubeadm、kubelet和kubectl" class="headerlink" title="安装kubeadm、kubelet和kubectl"></a>安装kubeadm、kubelet和kubectl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span></span><br><span class="line"></span><br><span class="line"> yum install -y kubeadm kubelet kubectl </span><br></pre></td></tr></table></figure><h4 id="配置kubelet的cgroup"><a href="#配置kubelet的cgroup" class="headerlink" title="配置kubelet的cgroup"></a>配置kubelet的cgroup</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/sysconfig/kubelet</span></span><br><span class="line"><span class="string">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">KUBE_PROXY_MODE=&quot;ipvs&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="设置kubelet开机自启"><a href="#设置kubelet开机自启" class="headerlink" title="设置kubelet开机自启"></a>设置kubelet开机自启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808145907841.png" alt="image-20220808145907841"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># systemctl enable kubelet</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br></pre></td></tr></table></figure><h3 id="准备集群镜像"><a href="#准备集群镜像" class="headerlink" title="准备集群镜像"></a>准备集群镜像</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><p>在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubeadm config images list</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808153955718.png" alt="image-20220808153955718"></p><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>国内无法拉取上述镜像，可以通过<code>aliyun</code>代理拉取，也可以直接执行下面语句</p><blockquote><p>我先在香港服务器上拉取然后推送的Docker Hub</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">images=(</span><br><span class="line"> kube-apiserver:v1.17.17</span><br><span class="line">     kube-controller-manager:v1.17.17</span><br><span class="line">     kube-scheduler:v1.17.17</span><br><span class="line">     kube-proxy:v1.17.17</span><br><span class="line">     pause:3.1</span><br><span class="line">     etcd:3.4.3-0</span><br><span class="line">     coredns:1.6.5</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">docker pull jontymax/<span class="variable">$imageName</span></span><br><span class="line">docker tag jontymax/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">docker rmi jontymax/<span class="variable">$imageName</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><p>对集群进行初始化，并将node节点加入到集群中</p><blockquote><p><code>master</code>节点执行</p></blockquote><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">   --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--apiserver-advertise-address=192.168.2.94 \</span><br><span class="line">--kubernetes-version=v1.17.4 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 </span><br></pre></td></tr></table></figure><h4 id="重置集群"><a href="#重置集群" class="headerlink" title="重置集群"></a>重置集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset -f</span><br></pre></td></tr></table></figure><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809102933345.png" alt="image-20220809102933345"></p><h4 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.2.94:6443 --token dl0jdc.tby7pc1yd2q37wws \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:0210b33b1b18e09cd32e0c6b3a1afa7f5a1e2f8c93f9fa5ccf156a9245fa51d6</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809103525615.png" alt="image-20220809103525615"></p><h4 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809103828566.png" alt="image-20220809103828566"></p><h3 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h3><p>Kubernetes支持多种网络插件，比如flannel、calico、canal等</p><blockquote><p>只需要在master节点执行即可，插件使用的是DaemonSet的控制器，会在每个节点运行</p></blockquote><h4 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h4><p>获取配置文件，根目录即可<code>/root/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jonty.top/img/kube-flannel.yml">kube-flannel.yml</a></p><h4 id="启动flannel"><a href="#启动flannel" class="headerlink" title="启动flannel"></a>启动flannel</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809134455940.png" alt="image-20220809134455940"></p><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><p>稍等片刻，集群node节点<code>Ready</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>至此，Kubernetes集群环境搭建完成</p><p><img data-src="https://cdn.jonty.top/img/image-20220809133903974.png" alt="image-20220809133903974"></p><h2 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h2><p>在K8s集群中部署Nginx服务，测试集群是否正常</p><blockquote><p>master节点执行</p></blockquote><h3 id="Nginx服务"><a href="#Nginx服务" class="headerlink" title="Nginx服务"></a>Nginx服务</h3><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx  --image=nginx:1.14-alpine</span><br></pre></td></tr></table></figure><h4 id="暴露端口"><a href="#暴露端口" class="headerlink" title="暴露端口"></a>暴露端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deploy nginx  --port=80 --target-port=80  --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></table></figure><h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br><span class="line">kubectl get service</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809135611076.png" alt="image-20220809135611076"></p><h4 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h4><p>使用任意node IP 加端口访问</p><p>192.168.2.94:32148</p><p><img data-src="https://cdn.jonty.top/img/image-20220809135533022.png" alt="image-20220809135533022"></p><p><strong>参考文档</strong>：</p><ul><li><p><a href="https://github.com/containerd/containerd/issues/4581">Kubeadm unknown service runtime.v1alpha2.RuntimeService ·第4581期 ·集装箱/集装箱式 (github.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/a167b80c89b8">初始化 init 报错</a></p></li><li><p><a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY</a></p></li></ul>]]></content>
    
    
    <summary type="html">Kubernetes入门 - Kubeadm搭建集群</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>【K8s】Kubernetes入门-01</title>
    <link href="https://jonty.top/2022/08/10/getting-started-with-kubernetes-01/"/>
    <id>https://jonty.top/2022/08/10/getting-started-with-kubernetes-01/</id>
    <published>2022-08-10T09:54:48.000Z</published>
    <updated>2022-08-12T15:41:10.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/">https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/</a></p></blockquote><h2 id="应用部署方式演变"><a href="#应用部署方式演变" class="headerlink" title="应用部署方式演变"></a>应用部署方式演变</h2><p><img data-src="https://cdn.jonty.top/img/image-20220807221451189.png" alt="image-20220807221451189"></p><p>在部署应用程序的方式上，主要经历了三个时代：</p><p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p><blockquote><p>优点：简单，不需要其它技术的参与</p><p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p></blockquote><p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p><blockquote><p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p><p>缺点：增加了操作系统，浪费了部分资源</p></blockquote><p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p><blockquote><p>优点：</p><p>可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p><p>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p><p>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p></blockquote><p>容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：</p><ul><li>一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器</li><li>当并发访问量变大的时候，怎么样做到横向扩展容器数量</li></ul><p>这些容器管理的问题统称为<strong>容器编排</strong>问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：</p><ul><li><strong>Swarm</strong>：Docker容器编排工具</li><li><strong>Mesos</strong>：Apache的一个资源统一管控的工具，需要和Marathon结合使用</li><li><strong>Kubernetes</strong>：Google开源的的容器编排工具</li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220807221546165.png" alt="image-20220807221546165"></p><h2 id="Kubernetes简介"><a href="#Kubernetes简介" class="headerlink" title="Kubernetes简介"></a>Kubernetes简介</h2><p><img data-src="https://cdn.jonty.top/img/image-20220807222351461.png" alt="kubbernetes"></p><div class="note info"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/">Kubernetes</a>，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p><p>Kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p><ul><li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li><li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li><li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li><li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li><li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li><li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li></ul></div><h2 id="Kubernetes概念"><a href="#Kubernetes概念" class="headerlink" title="Kubernetes概念"></a>Kubernetes概念</h2><p><img data-src="https://cdn.jonty.top/img/kwob90mh.png" alt="cluster"></p><p><strong>Master</strong></p><p>主节点，控制平台，不需要很高性能，不跑任务，通常一个就行了，也可以开多个主节点来提高集群可用度。</p><p><strong>Worker</strong></p><p>工作节点，可以是虚拟机或物理计算机，任务都在这里跑，机器性能需要好点；通常都有很多个，可以不断加机器扩大集群；每个工作节点由主节点管理</p><p><strong>Pod</strong></p><p>豆荚，K8S 调度、管理的最小单位，一个 Pod 可以包含一个或多个容器，每个 Pod 有自己的虚拟IP。一个工作节点可以有多个 pod，主节点会考量负载自动调度 pod 到哪个节点运行。</p><p><strong>Controller</strong></p><p>控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p><p><strong>Service</strong></p><p>pod对外服务的统一入口，下面可以维护者同一类的多个pod</p><p><strong>Label</strong></p><p>标签，用于对pod进行分类，同一类pod会拥有相同的标签</p><p><strong>NameSpace</strong></p><p>命名空间，用来隔离pod的运行环境</p><p><img data-src="https://cdn.jonty.top/img/kwoccq7d.png" alt="kwoccq7d"></p><h2 id="Kubernetes组件"><a href="#Kubernetes组件" class="headerlink" title="Kubernetes组件"></a>Kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p><p><strong>master：集群的控制平面，负责集群的决策 ( 管理 )</strong></p><blockquote><p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p><p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p><p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p><p><strong>Etcd</strong> ：负责存储集群中各种资源对象的信息</p></blockquote><p><strong>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</strong></p><blockquote><p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p><p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p><p><strong>Docker</strong> : 负责节点上容器的各种操作</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220807223447040.png" alt="image-20220807223447040"></p><p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：</p><ol><li><p>首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中</p></li><li><p>一个nginx服务的安装请求会首先被发送到master节点的apiServer组件</p></li><li><p>apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p><p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer</p></li><li><p>apiServer调用controller-manager去调度Node节点安装nginx服务</p></li><li><p>kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod</p><p>pod是kubernetes的最小操作单元，容器必须跑在pod中</p></li><li><p>至此一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理</p></li></ol><p>这样，外界用户就可以访问集群中的nginx服务了</p><p><img data-src="https://sjwx.easydoc.xyz/46901064/files/kwonmx7e.png" alt="img"></p><h2 id="什么时候需要-Kubernetes"><a href="#什么时候需要-Kubernetes" class="headerlink" title="什么时候需要 Kubernetes"></a>什么时候需要 Kubernetes</h2><ul><li>当你的应用只是跑在一台机器，直接一个 docker + docker compose 就够了，方便轻松；</li><li>当你的应用需要跑在 3、4 台机器上，依旧可以每台机器单独配置运行环境 + 负载均衡器；</li><li>当你应用访问数不断增加，机器逐渐增加到十几台、上百台、上千台时，每次加机器、软件更新、版本回滚，都会变得非常麻烦、痛不欲生，再也不能好好的摸鱼了，人生浪费在那些没技术含量的重复性工作上。</li></ul><p>这时候，Kubernetes 就可以一展身手了，让你轻松管理百万千万台机器的集群。“谈笑间，樯橹灰飞烟灭”，享受着一手掌控所有，年薪百万指日可待。</p><p>Kubernetes 可以为你提供集中式的管理集群机器和应用，加机器、版本升级、版本回滚，那都是一个命令就搞定的事，不停机的灰度更新，确保高可用、高性能、高扩展。</p><p><strong>参考文档</strong>：</p><blockquote><p><a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY</a></p></blockquote>]]></content>
    
    
    <summary type="html">Kubernetes入门 - K8s介绍</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="K8s" scheme="https://jonty.top/tags/K8s/"/>
    
    <category term="Kubernetes" scheme="https://jonty.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>【随笔】那就做吧~</title>
    <link href="https://jonty.top/2022/07/24/220724-share-essays/"/>
    <id>https://jonty.top/2022/07/24/220724-share-essays/</id>
    <published>2022-07-24T13:57:15.000Z</published>
    <updated>2022-09-14T03:05:26.710Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/1663124663138.jpg" alt="20220724"></p><p>人们总是愿意期望未来，而不是回顾过去，所以总是在一个地方摔倒，再爬起来，拍拍尘土，咒骂一句，头也不回的继续走下去。</p><p>至于为什么摔倒了，才不会去深究，毕竟谁会承认自己的无能，和自己过意不去呢。他们这样走下去，走的人多了，同行的也就多了，群体性的行为会给他们力量，让他们在前行的路上彼此温暖和给予勇气。</p><p>以上，是一个遵从内心选择，走了一条僻静小路的人，看到一群人的时候，说那是酸葡萄的样子。</p><p>小站开通马上一年了，也分享了一些工作记录。在海滩边捡贝壳，觉得每一片都非常漂亮，想要分享给世界，然后久了发现，世界上的这些东西，没有什么是独一无二的。而那些灿烂的星河，在那里早有人总结和分享好了。</p><p>如果想的太透彻，大概就没什么意思了，所以还是要像个孩子一样，为一点小发现惊奇激动，欢呼雀跃。</p><p>2022年大概是心智启蒙的一年，开始真正意义上的思考这一切。有可能是阅历稍微多了一些，看问题和思考的角度都更多了一些。</p><p>我们期望未来，期望改变，而做出的努力太少，所以每年都是一样的满怀憧憬，每年都一样的重蹈覆辙。我不愿如此。</p><p>那就做吧。 </p>]]></content>
    
    
    <summary type="html">间歇性踌躇满志，持续性混吃等死</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core DI最佳实践</title>
    <link href="https://jonty.top/2022/07/24/asp-net-core-dependency-injection/"/>
    <id>https://jonty.top/2022/07/24/asp-net-core-dependency-injection/</id>
    <published>2022-07-24T07:52:44.000Z</published>
    <updated>2022-07-24T08:01:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/v2-3c666abe2c87ada09002ceaf0557ea62_1440w.jpg" alt="Dependency Injection"></p><div class="note info"><p>本文主要分享在ASP.NETCore中使用<strong>依赖注入</strong>的经验和建议，主要有以下作用：</p><ul><li>有效设计服务及其依赖项</li><li>防止多线程问题</li><li>防止内存泄漏</li><li>防止潜在的错误</li></ul><blockquote><p>官方文档<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0">Dependency injection in ASP.NET Core | Microsoft Docs</a></p></blockquote></div><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="构造函数注入-Constructor-injection"><a href="#构造函数注入-Constructor-injection" class="headerlink" title="构造函数注入(Constructor injection)"></a>构造函数注入(Constructor injection)</h3><p>构造函数注入用于声明和获取服务对<strong>服务构造</strong>的依赖关系。例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IProductRepository productRepository</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository = productRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository.Delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductService</code> 将 <code>IProductRepository</code> 作为其构造函数中的依赖项注入，然后在<code>Delete</code>方法中使用它。</p><p><strong>最佳实践：</strong></p><ul><li>在服务构造函数中<strong>显示定义</strong>所需的依赖项，如果没有其依赖项，就无法构造服务</li><li>将注入的依赖项分配给只读字段/属性（防止在使用过程中意外赋值）</li></ul><h3 id="属性注入（Property-Injection）"><a href="#属性注入（Property-Injection）" class="headerlink" title="属性注入（Property Injection）"></a>属性注入（Property Injection）</h3><p>ASP.NETCore自带的容器（Microsoft.Extensions.DependencyInjection）<strong>不支持属性注入</strong>，可以使用其他支持属性注入的容器。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging.Abstractions;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ILogger&lt;ProductService&gt; Logger &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IProductRepository productRepository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _productRepository = productRepository;</span><br><span class="line">            Logger = NullLogger&lt;ProductService&gt;.Instance;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _productRepository.Delete(id);</span><br><span class="line">            Logger.LogInformation(</span><br><span class="line">                <span class="string">$&quot;Deleted a product with id = <span class="subst">&#123;id&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductService</code> 使用<strong>公共 setter</strong> 声明一个 <code>Logger</code> 属性。依赖注入容器可以设置Logger，如果它是可用的（之前注册给DI容器）。</p><p><strong>最佳实践：</strong></p><ul><li>仅对<strong>可选依赖项</strong>使用属性注入，服务可以在不提供这些依赖项<strong>的情况下</strong>正常工作。</li><li>使用Null对象模式，或者在使用时检查<code>null</code></li></ul><h3 id="服务定位器-Service-Locator"><a href="#服务定位器-Service-Locator" class="headerlink" title="服务定位器(Service Locator)"></a>服务定位器(Service Locator)</h3><p>服务定位器模式是获取依赖项的另一种方法。</p><blockquote><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.iserviceprovider?view=net-6.0">IServiceProvider 接口 (System) | Microsoft Docs</a></p></blockquote><p>例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ProductService&gt; _logger;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository = serviceProvider</span><br><span class="line">          .GetRequiredService&lt;IProductRepository&gt;();</span><br><span class="line">        _logger = serviceProvider</span><br><span class="line">          .GetService&lt;ILogger&lt;ProductService&gt;&gt;() ??</span><br><span class="line">            NullLogger&lt;ProductService&gt;.Instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository.Delete(id);</span><br><span class="line">        _logger.LogInformation(<span class="string">$&quot;Deleted a product with id = <span class="subst">&#123;id&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductService</code> 注入 <strong>IServiceProvider</strong> 并使用它来解析依赖关系。</p><p>如果之前未注册所请求的依赖项，<strong>GetRequiredService</strong> 将引发异常。另一方面，在这种情况下，<strong>GetService</strong> 只返回 <code>null</code>。</p><p>在<strong>构造函数</strong>中解析服务时，它们会在服务被释放时被释放。因此，不需要关心释放/处置在构造函数中解析的服务（就像构造函数和属性注入一样）</p><p><strong>最佳实践</strong>：</p><ul><li><strong>尽可能不要使用</strong>服务定位器模式,因为它使依赖关系隐含起来。在创建服务实例时不能看到依赖关系，影响单元测试。</li><li>在服务<strong>构造函数</strong>中解决依赖关系，在服务方法中解决会使你的应用程序更加复杂和容易出错</li></ul><h3 id="服务生命周期"><a href="#服务生命周期" class="headerlink" title="服务生命周期"></a>服务生命周期</h3><p><img data-src="https://cdn.jonty.top/img/1_lT0wIkqAgpbxpyY6fw0lOA.png" alt="生命周期"></p><p>ASP.NET Core依赖注入中有三种服务生命周期：</p><ul><li><h3 id="Transient"><a href="#Transient" class="headerlink" title="Transient"></a>Transient</h3><p><strong>瞬时服务</strong>在每次注入或请求服务时都会创建服务</p></li><li><h3 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h3><p><strong>作用域服务</strong>是按作用域创建的。在 Web 应用程序中，每个 Web 请求都会创建一个新的分隔服务作用域，根据 Web 请求创建作用域服务。</p></li><li><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p><strong>单例</strong>服务是按 DI 容器创建的。这通常意味着每个应用程序<strong>只创建一次</strong>，然后在整个应用程序生命周期内使用.</p></li></ul><blockquote><p> <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes">.NET | 中的依赖关系注入微软文档 (microsoft.com)</a></p></blockquote><p>DI容器保持对所有已解决的服务的跟踪。服务在其生命周期结束时被释放和处置。</p><ul><li>如果服务具有依赖项，则还会自动释放和释放这些<strong>依赖项</strong>。</li><li>如果服务实现了<strong>IDisposable</strong>接口，<code>Dispose</code>方法会在服务释放时被自动调用。</li></ul><p><strong>最佳实践</strong>：</p><ul><li><strong>尽可能地</strong>将服务注册为<strong>瞬时服务</strong>。因为设计瞬时服务很简单。一般不关心<strong>多线程</strong>和<strong>内存泄漏</strong>，服务的生命周期很短。</li><li><strong>谨慎</strong>使用作用域服务生命周期，因为如果创建子服务作用域或从非 Web 应用程序使用这些服务可能存在问题。</li><li><strong>谨慎</strong>使用<strong>单例生命周期</strong>，需要处理多线程和潜在的内存泄漏问题。</li><li><strong>不要依赖单例服务中</strong>的<strong>瞬时</strong>或<strong>范围服务</strong>。 因为当单例服务注入<strong>瞬时服务</strong>时，瞬态服务会变成<strong>单例</strong>实例，如果瞬时服务不是为支持这种情况而设计的，则可能会导致问题。 在这种情况下，ASP.NET Core 的默认 DI 容器已经抛出异常。</li></ul><h3 id="在方法中解析服务"><a href="#在方法中解析服务" class="headerlink" title="在方法中解析服务"></a>在方法中解析服务</h3><p>在某些情况下，可能需要在服务的方法中解析另一个服务。 </p><p>在这种情况下，请确保在使用后释放服务。 </p><p>最佳方法是<strong>创建服务范围（Scope）</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PriceCalculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _serviceProvider;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriceCalculator</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _serviceProvider = serviceProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">Calculate</span>(<span class="params">Product product, <span class="built_in">int</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">      Type taxStrategyServiceType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = _serviceProvider.CreateScope())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> taxStrategy = (ITaxStrategy)scope.ServiceProvider</span><br><span class="line">              .GetRequiredService(taxStrategyServiceType);</span><br><span class="line">            <span class="keyword">var</span> price = product.Price * count;</span><br><span class="line">            <span class="keyword">return</span> price + taxStrategy.CalculateTax(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PriceCalculator</code> 在其构造函数中注入<code>IServiceProvider</code>并将其分配给一个字段。 <code>PriceCalculator</code> 然后在<code>Calculate</code> 方法中使用它来创建子服务范围。 它使用 <code>scope.ServiceProvider</code> 来解析服务，而不是注入的 <code>_serviceProvider</code> 实例。 因此，从范围解析的所有服务都会在 <code>using</code> 语句的末尾<strong>自动释放</strong>。</p><p><strong>最佳实践</strong>：</p><ul><li>如果要解析方法体中的服务，请始终创建<strong>子服务作用域</strong>，以确保正确释放已解析的服务</li><li>如果一个方法获取 <strong>IServiceProvider</strong> 作为参数，那么可以直接从中解析服务，而无需关心释放。 创建/管理服务范围是调用方法的代码的责任。 遵循这个原则可以让代码更干净。</li><li><strong>不要保留对已解析服务的引用</strong>！否则，它可能会导致内存泄漏，并且稍后使用对象引用时将访问<strong>已释放的服务</strong>（除非已解析的服务是单例）。</li></ul><h3 id="单例服务-Singleton-Services"><a href="#单例服务-Singleton-Services" class="headerlink" title="单例服务(Singleton Services)"></a>单例服务(Singleton Services)</h3><p>单例服务通常旨在保持应用程序状态。 缓存是应用程序状态的一个很好的例子。</p><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt; _cache;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">GetFileContent</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _cache.GetOrAdd(filePath, _ =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> File.ReadAllBytes(filePath);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件服务只是缓存文件内容以减少磁盘读取。此服务应注册为单例，否则，缓存将无法按预期工作。</p><p><strong>最佳实践：</strong></p><ul><li><p>如果服务保持状态，则应以<strong>线程安全</strong>的方式访问该状态。因为所有请求同时使用同一服务<strong>实例</strong>。使用 <strong>ConcurrentDictionary</strong> 而不是 <strong>Dictionary</strong> 来确保线程安全。</p></li><li><p>不要使用来自<strong>单例服务的作用域或瞬态</strong>服务。因为，<strong>瞬时服务</strong>可能未设计为线程安全。如果必须使用它们，在使用这些服务时注意多线程（例如使用锁）。</p></li><li><p><strong>内存泄漏</strong>通常是由<strong>单例服务引起</strong>的。在<strong>应用程序结束</strong>之前，它们不会释放。因此，如果它们实例化（或注入）类但不释放放它们，它们将保留在内存中，直到应用程序结束。确保在正确的时间<strong>释放</strong>它们。</p></li><li><p>如果缓存数据（示例中为文件内容），则应创建一种机制，以便在原始数据源更改时（当磁盘上的缓存文件发生更改时）更新/使缓存数据失效。</p></li></ul><h3 id="作用域服务（Scoped-Services）"><a href="#作用域服务（Scoped-Services）" class="headerlink" title="作用域服务（Scoped Services）"></a>作用域服务（Scoped Services）</h3><p>作用域生存期首先似乎是存储每个 Web 请求数据的良好候选者。</p><p>因为 ASP.NET Core<strong>为每个 Web 请求</strong>创建一个服务范围。因此，如果将服务注册为作用域，则可以在 Web 请求期间共享该服务。</p><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequestItemsService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; _items;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestItemsService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[name] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _items[name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将<code> RequestItemsService</code> 注册为作用域，并将其注入到两个不同的服务中，则可以获取从另一个服务添加的项，因为它们将共享同一个<code>RequestItemsService</code>实例。这是我们对作用域服务的猜想。</p><p>但并不是这样，如果创建<strong>子服务作用域</strong>并从子作用域解析 <code>RequestItemsService</code>，将获得 <code>RequestItemsService</code> 的新实例，并且它不会按预期工作。</p><p>因此，作用域服务并不意味着每个 Web 请求的实例。</p><p>你可能认为你没有犯这么明显的错误（在一个子的作用域内解决一个作用域）。 但是，这不是一个错误（一种非常常见的用法），而且情况可能并不那么简单。 如果服务之间存在很大的依赖关系图，无法知道是否有人创建了子作用域并解析了注入另一个服务的服务……最终注入了作用域服务。</p><p><strong>最佳实践</strong>：</p><ul><li><p>可以将<strong>作用域服务</strong>视为一种<strong>优化</strong>，它在 Web 请求中被太多服务注入。 因此，所有这些服务将在同一个 Web 请求期间使用该服务的单个实例。</p></li><li><p>作用域内服务不需要设计为线程安全。因为它们通常应由单个Web请求/线程使用。但在这种情况下，不应在<strong>不同线程之间共享服务作用域</strong>。</p></li><li><p>如果设计一个范围服务以在 <strong>Web 请求中</strong>的其他服务之间共享数据（如上所述），可以将每个 Web 请求数据存储在 <strong>HttpContext</strong> 中（注入 <code>IHttpContextAccessor</code> 以访问它），这是更安全的方法。 <strong>HttpContext</strong> 的生命周期<strong>没有作用域</strong>。 实际上，它根本没有注册到 DI（这就是为什么不注入它，而是注入 IHttpContextAccessor 的原因）。 <strong>HttpContextAccessor 实现使用 AsyncLocal 在 Web 请求期间共享相同的 HttpContext</strong>。</p></li></ul><blockquote><p><a href="https://github.com/aspnet/HttpAbstractions/blob/master/src/Microsoft.AspNetCore.Http/HttpContextAccessor.cs">HttpAbstractions/HttpContextAccessor.cs at master · aspnet/HttpAbstractions (github.com)</a></p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>依赖关系注入似乎很容易使用，但是如果不遵循一些严格的原则，则存在潜在的多线程和内存泄漏问题。</p><blockquote><p>作者：<a href="https://github.com/hikalkan">hikalkan (Halil İbrahim Kalkan) (github.com)</a></p><p>出处：<a href="https://medium.com/volosoft/asp-net-core-dependency-injection-best-practices-tips-tricks-c6e9c67f9d96">ASP.NET Core Dependency Injection Best Practices, Tips &amp; Tricks | by Halil İbrahim Kalkan | Volosoft | Medium</a></p></blockquote>]]></content>
    
    
    <summary type="html">ASP.NET Core 依赖注入最佳实践、技巧</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="DI" scheme="https://jonty.top/tags/DI/"/>
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>Sonatype Nexus3 搭建私有仓库</title>
    <link href="https://jonty.top/2022/07/12/docker-nexus3-build-private-repository/"/>
    <id>https://jonty.top/2022/07/12/docker-nexus3-build-private-repository/</id>
    <published>2022-07-12T15:02:05.000Z</published>
    <updated>2022-08-05T09:22:55.097Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/NexusRepo_Icon.png" alt="Sonatype-Nexus3"></p><div class="note info"><p>Nexus是Sonatype提供的仓库管理平台，Nuexus Repository OSS3能够支持Maven、npm、Docker、YUM、Helm等格式数据的存储和发布；并且能够与Jekins、SonaQube和Eclipse等工具进行集成。<br>Nexus支持作为宿主和代理存储库的本地Maven/Docker存储库，可以直接将这些存储库暴露给客户端工具；也可以以存储库组的方式暴露给客户端工具，存储库组是合并了多个存储库的内容的存储库，能够通过一个URL将多个存储库暴露给客户端工具，从而便于用户的使用。通过nexus自建能够有效减少访问获取镜像的时间和对带宽使用，并能够通过自有的镜像仓库共享企业自己的镜像。</p></div><h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><p>需要 <strong>2</strong> 个域名，一个用来代理 <code>Nexus </code>管理面板，另一个用做 <code>docker </code>仓库，<code>docker </code>需要单独的端口</p><p><strong>Nexus</strong> 前台：<code>registry.jonty.top</code></p><p><strong>Docker</strong> 仓库：<code>hub.jonty.top</code></p><h3 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h3><p>我们通过<code>Nginx</code>代理<code>Nexus</code>服务，需要先生成<strong>自签名</strong>的SSL证书，通过内部DNS域名访问（无需在<code>docker pull</code>的时候还要带一个端口）</p><p>使用一键生成工具：<a href="https://github.com/Fishdrowned/ssl">ssl</a>，两个域名都要<strong>签发证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Fishdrowned/ssl.git</span><br><span class="line"><span class="built_in">cd</span> ssl</span><br><span class="line"><span class="comment"># 根据你的域名更改</span></span><br><span class="line">/bin/bash ./gen.cert.sh hub.jonty.top </span><br></pre></td></tr></table></figure><blockquote><p>PS：如果是打算做外网仓库服务，可以直接申请一个免费的SSL证书（云厂商都提供），本文使用内网域名，使用自签名证书</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ssl-master]<span class="comment"># ls</span></span><br><span class="line">ca.cnf  docs  flush.sh  gen.cert.sh  gen.root.sh  LICENSE  out  README.md</span><br><span class="line">[root@nexus3 ssl-master]<span class="comment"># cd out/</span></span><br><span class="line">[root@nexus3 out]<span class="comment"># ls</span></span><br><span class="line">cert.key.pem  index.txt  index.txt.attr  index.txt.attr.old  index.txt.old  newcerts  root.crt  root.key.pem  serial  serial.old</span><br><span class="line">[root@nexus3 out]<span class="comment"># cd ..</span></span><br><span class="line">[root@nexus3 ssl-master]<span class="comment"># /bin/bash gen.cert.sh hub.jonty.top # 换成你的域名</span></span><br><span class="line">Using configuration from ./ca.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject<span class="string">&#x27;s Distinguished Name is as follows</span></span><br><span class="line"><span class="string">countryName           :PRINTABLE:&#x27;</span>CN<span class="string">&#x27;</span></span><br><span class="line"><span class="string">stateOrProvinceName   :ASN.1 12:&#x27;</span>Guangdong<span class="string">&#x27;</span></span><br><span class="line"><span class="string">localityName          :ASN.1 12:&#x27;</span>Guangzhou<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationName      :ASN.1 12:&#x27;</span>Fishdrowned<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationalUnitName:ASN.1 12:&#x27;</span>hub.jonty.top<span class="string">&#x27;</span></span><br><span class="line"><span class="string">commonName            :ASN.1 12:&#x27;</span>*.hub.jonty.top<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Certificate is to be certified until Jul 11 08:06:41 2024 GMT (730 days)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Write out database with 1 new entries</span></span><br><span class="line"><span class="string">Data Base Updated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Certificates are located in:</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 44 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.bundle.crt -&gt; ./20220712-1606/hub.jonty.top.bundle.crt</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 37 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.crt -&gt; ./20220712-1606/hub.jonty.top.crt</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 15 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.key.pem -&gt; ../cert.key.pem</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 11 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/root.crt -&gt; ../root.crt</span></span><br><span class="line"><span class="string">[root@nexus3 ssl-master]# cd out/hub.jonty.top/</span></span><br><span class="line"><span class="string">[root@nexus3 hub.jonty.top]# ls</span></span><br><span class="line"><span class="string">20220712-1606  hub.jonty.top.bundle.crt  hub.jonty.top.crt  hub.jonty.top.key.pem  root.crt</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="阿里云签发"><a href="#阿里云签发" class="headerlink" title="阿里云签发"></a>阿里云签发</h3><p>如果有域名，可以购买<code>Aliyun</code>免费ssl证书，<strong>一年有效期</strong>，可以有效避免自签名证书不适用的问题</p><p><img data-src="https://cdn.jonty.top/img/image-20220801155820025.png" alt="image-20220801155820025"></p><p>申请完成后，下载<code>Nginx</code>证书并上传到服务器</p><p><img data-src="https://cdn.jonty.top/img/image-20220801160226471.png" alt="image-20220801160226471"></p><h3 id="本地域名解析"><a href="#本地域名解析" class="headerlink" title="本地域名解析"></a>本地域名解析</h3><p>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></p><p>Linux：<code>vi /etc/hosts</code></p><p>将以下解析加入，测试是否可以<code>ping</code>通</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.xx hub.jonty.top</span><br><span class="line">192.168.2.xx registry.jonty.top</span><br></pre></td></tr></table></figure><blockquote><p>服务端和客户端都需要配置</p></blockquote><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>安装<code>Docker-Engine</code></p><blockquote><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 20.10.17, build 100c701</span><br><span class="line">[root@nexus3 ~]<span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.6.0</span><br></pre></td></tr></table></figure><h3 id="创建数据路径并设置权限"><a href="#创建数据路径并设置权限" class="headerlink" title="创建数据路径并设置权限"></a>创建数据路径并设置权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$PWD</span>/nexus3/data </span><br><span class="line">chmod 777 <span class="variable">$PWD</span>/nexus3/data </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PWD</span>/nexus3</span><br></pre></td></tr></table></figure><p>将生成的证书<strong>复制</strong>到<code>$PWD/nexus3/certs</code>目录下(2个域名的证书都需要）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cp hub.jonty.top.crt ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cp hub.jonty.top.key.pem ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cd ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 certs]<span class="comment"># ls</span></span><br><span class="line">hub.jonty.top.crt hub.jonty.top.key.pem</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>在<code>~/nexus3</code>目录下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3:3.33.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/data:/nexus-data</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.1-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/nginx.conf:/etc/nginx/nginx.conf:ro</span>     <span class="comment"># nginx配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/certs:/etc/nginx/certs</span>                    <span class="comment"># SSL证书</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/log:/var/log/nginx</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&quot;5g&quot;</span>  <span class="comment"># 限制日志大小</span></span><br></pre></td></tr></table></figure><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><p>在同目录下创建<code>nginx.conf</code>，<code>nginx</code>配置文件</p><p>请参考<a href="#SSL%E8%AF%81%E4%B9%A6">ssl</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">worker_rlimit_nofile 40000;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 8192;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    upstream nexus3_http &#123;</span><br><span class="line">        server nexus3:8081;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name registry.jonty.top;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name registry.jonty.top; </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># SSL</span></span><br><span class="line">        ssl_certificate /certs/registry.jonty.top/registry.jonty.top.pem;</span><br><span class="line">    ssl_certificate_key /certs/registry.jonty.top/registry.jonty.top.key;</span><br><span class="line"></span><br><span class="line">        client_max_body_size 5000m;  <span class="comment"># 上传大文件</span></span><br><span class="line">fastcgi_connect_timeout 300s;</span><br><span class="line">        fastcgi_send_timeout 300s;</span><br><span class="line">        fastcgi_read_timeout 300s;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://nexus3_http;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream nexus_docker_get &#123;</span><br><span class="line">        server nexus3:8082;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    upstream nexus_docker_put &#123;</span><br><span class="line">        server nexus3:8083;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name hub.jonty.top;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name hub.jonty.top;</span><br><span class="line">        <span class="comment"># 证书</span></span><br><span class="line">        ssl_certificate /certs/hub.jonty.top/hub.jonty.top.pem;</span><br><span class="line">        ssl_certificate_key /certs/hub.jonty.top/hub.jonty.top.key;</span><br><span class="line">        ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers <span class="string">&#x27;!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:&#x27;</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_cache shared:SSL:10m;</span><br><span class="line">        client_max_body_size 5000m;</span><br><span class="line">        chunked_transfer_encoding on;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$upstream</span> <span class="string">&quot;nexus_docker_put&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$request_method</span> ~* <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$upstream</span> <span class="string">&quot;nexus_docker_get&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://<span class="variable">$upstream</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_connect_timeout 3600;</span><br><span class="line">                proxy_send_timeout 3600;</span><br><span class="line">                proxy_read_timeout 3600;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_buffering off;</span><br><span class="line">                proxy_request_buffering off;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto http;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tree</span><br><span class="line"><span class="built_in">cd</span> nexus3</span><br><span class="line">tree -C -L 2</span><br><span class="line">tree -C</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220805163921371.png" alt="image-20220805163921371"></p><p><img data-src="https://cdn.jonty.top/img/image-20220805164026553.png" alt="image-20220805164026553"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712162731428.png" alt="image-20220712162731428"></p><p>访问：<a href="https://registry.jonty.top/">https://registry.jonty.top</a></p><blockquote><p>Nexus初始化需要3~5min，初始化完成后可访问</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220712163303455.png" alt="image-20220712163303455"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="密码配置"><a href="#密码配置" class="headerlink" title="密码配置"></a>密码配置</h3><p>查看<code>admin</code>默认密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># cat data/admin.password</span></span><br><span class="line">098fb8d9-e07b-4f7f-b498-806cdce1291d</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712164027694.png" alt="image-20220712164027694"></p><h3 id="Docker存储库"><a href="#Docker存储库" class="headerlink" title="Docker存储库"></a>Docker存储库</h3><h4 id="创建Blob存储"><a href="#创建Blob存储" class="headerlink" title="创建Blob存储"></a>创建Blob存储</h4><p>创建用于存放<code>docker</code>镜像文件的存储区域</p><p><img data-src="https://cdn.jonty.top/img/image-20220712164443301.png" alt="image-20220712164443301"></p><h4 id="创建存储库"><a href="#创建存储库" class="headerlink" title="创建存储库"></a>创建存储库</h4><p>存储库有以下三种类型：</p><ul><li><p><strong>proxy</strong>：表示代理仓库，请求包(package)的时候，如果本地有，它就从本地提供，如果本地没有，则从代理地址下载到本地，然后提供这个包。</p></li><li><p><strong>hosted</strong>：表示托管仓库，一般用于推送开发的包到该仓库。</p></li><li><p><strong>group</strong>：表示仓库组，它结合了proxy和hosted，能对外提供上述两者中的包，<strong>对外的出口</strong></p></li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220712164651836.png" alt="image-20220712164651836"></p><h5 id="hosted：本地仓库"><a href="#hosted：本地仓库" class="headerlink" title="hosted：本地仓库"></a>hosted：本地仓库</h5><p>创建<code>hosted</code>类型，用于存储<strong>本地</strong>推送的镜像</p><p><img data-src="https://cdn.jonty.top/img/image-20220801170444372.png" alt="image-20220801170444372"></p><p>端口设置为<code>8083</code>，对应<code>nginx.conf</code>配置<code>nexus_docker_put</code></p><img data-src="https://cdn.jonty.top/img/image-20220801170157413.png" alt="image-20220801170157413" style="zoom:67%;" /><h5 id="proxy-：代理仓库"><a href="#proxy-：代理仓库" class="headerlink" title="proxy ：代理仓库"></a>proxy ：代理仓库</h5><p>代理官方源：<code>https://registry-1.docker.io</code></p><p><img data-src="https://cdn.jonty.top/img/image-20220805164336262.png" alt="image-20220805164336262"></p><p>代理阿里云私有仓库（可公开拉取）：</p><p><img data-src="https://cdn.jonty.top/img/image-20220805164414466.png" alt="image-20220805164414466"></p><p>如果代理的私有库需要<strong>授权</strong>：</p><img data-src="https://cdn.jonty.top/img/image-20220801170854550.png" alt="image-20220801170854550" style="zoom:67%;" /><h5 id="group-仓库组"><a href="#group-仓库组" class="headerlink" title="group : 仓库组"></a>group : 仓库组</h5><p>端口设置为<code>8082</code>，对应<code>nginx.conf</code>配置<code>nexus_docker_get</code></p><p>编辑组成员，根据顺序可排<strong>优先级</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220805164454963.png" alt="image-20220805164454963"></p><h3 id="上传docker镜像"><a href="#上传docker镜像" class="headerlink" title="上传docker镜像"></a>上传docker镜像</h3><h4 id="配置授信"><a href="#配置授信" class="headerlink" title="配置授信"></a>配置授信</h4><blockquote><p>使用自签名证书需要配置此步骤</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>加入以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;https://hub.jonty.top&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<code>docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>docker登录私库时提示 <code>x509: certificate signed by unknown authority</code></p></blockquote><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># docker login hub.jonty.top -u admin</span></span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG             IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx             1.21.1-alpine   1318bf5f63b4   10 months ago   22.8MB</span><br><span class="line">sonatype/nexus3   3.33.1          a0d390a200d2   10 months ago   655MB</span><br><span class="line">[root@nexus3 nexus3]<span class="comment"># docker tag nginx:1.21.1-alpine hub.jonty.top/nginx:1.21.1-alpine</span></span><br><span class="line">[root@nexus3 nexus3]<span class="comment"># docker push hub.jonty.top/nginx:1.21.1-alpine</span></span><br><span class="line">The push refers to repository [hub.jonty.top/nginx]</span><br><span class="line">45d993692050: Pushed</span><br><span class="line">1ea998b95474: Pushed</span><br><span class="line">95b99a5c3767: Pushed</span><br><span class="line">fc03e3cb8568: Pushed</span><br><span class="line">24934e5e6c61: Pushed</span><br><span class="line">e2eb06d8af82: Pushed</span><br><span class="line">1.21.1-alpine: digest: sha256:bd0aa91fe6a182db22032463c17644cd2ff3bbe415e7b84964283bba687acaa6 size: 1568</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712170930285.png" alt="image-20220712170930285"></p><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><blockquote><p>注意，客户端需要<a href="#%E9%85%8D%E7%BD%AE%E6%8E%88%E4%BF%A1">配置授信</a>和<a href="#%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">域名解析</a>，如果开启<strong>允许匿名拉取</strong>则不需授信，配置了路由器DNS则不需要配置<strong>hosts</strong>文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.2.xx hub.jonty.top</span><br><span class="line">192.168.2.xx registry.jonty.top</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://hub.jonty.top&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># docker pull hub.jonty.top/mssql:2019-latest</span></span><br><span class="line">2019-latest: Pulling from mssql</span><br><span class="line">d5fd17ec1767: Already exists </span><br><span class="line">cf291b38357f: Pull complete </span><br><span class="line">af7e8d6f1719: Pull complete </span><br><span class="line">Digest: sha256:584a7fc7e2a378bdd4e8fe3bad36dae18e85527308193cb5c43d90863d7a7d4a</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hub.jonty.top/mssql:2019-latest</span><br><span class="line">hub.jonty.top/mssql:2019-latest</span><br></pre></td></tr></table></figure><h4 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab-CI"></a>Gitlab-CI</h4><blockquote><p> <a href="https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#access-an-image-from-a-private-container-registry">在 Docker 容器中运行 CI/CD 作业|GitLab</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ~]# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;auths&quot;: &#123;</span><br><span class="line">&quot;https://index.docker.io/v1/&quot;: &#123;</span><br><span class="line">&quot;auth&quot;: &quot;am9udHltYXg6Sm9udHlNYXgzMjE=&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hub.jonty.top&quot;: &#123;</span><br><span class="line">&quot;auth&quot;: &quot;YWRtaW46Z2N0bmV4dXMz&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;[root@nexus3 ~]# </span><br><span class="line">[root@nexus3 ~]# echo -n &quot;admin:nexus3&quot; | base64</span><br><span class="line">YWRtaW46Z2N0bmV4dXMz</span><br></pre></td></tr></table></figure><p>CI配置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">variables:</span><br><span class="line">  DOCKER_AUTH_CONFIG: <span class="string">&#x27;&#123;&quot;auths&quot;: &#123;&quot;hub.jonty.top&quot;: &#123;&quot;auth&quot;: &quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="设置匿名拉取"><a href="#设置匿名拉取" class="headerlink" title="设置匿名拉取"></a>设置匿名拉取</h4><p>按需开启，开启则不需要配置以上授信部分</p><img data-src="https://cdn.jonty.top/img/image-20220727093218720.png" alt="image-20220727093218720" style="zoom:67%;" /><h3 id="NuGet存储库"><a href="#NuGet存储库" class="headerlink" title="NuGet存储库"></a>NuGet存储库</h3><h4 id="上传nuget包"><a href="#上传nuget包" class="headerlink" title="上传nuget包"></a>上传nuget包</h4><p>Nexus默认已经创建好了Nuget的仓库，并且是创建了3个不同类型的仓库：nuget-group，nuget-hosted，nuget.org-proxy</p><p><img data-src="https://cdn.jonty.top/img/image-20220712172140135.png" alt="image-20220712172140135"></p><h4 id="添加Nuget-Realms"><a href="#添加Nuget-Realms" class="headerlink" title="添加Nuget Realms"></a>添加Nuget Realms</h4><p>Nexus认证Nuget是通过Realms来认证</p><p><img data-src="https://cdn.jonty.top/img/image-20220712172321065.png" alt="image-20220712172321065"></p><h4 id="获取仓库地址以及Nuget-API-Key"><a href="#获取仓库地址以及Nuget-API-Key" class="headerlink" title="获取仓库地址以及Nuget API Key"></a>获取仓库地址以及Nuget API Key</h4><p>仓库列表&gt;复制地址</p><p><img data-src="https://cdn.jonty.top/img/image-20220712172440616.png" alt="image-20220712172440616"></p><p>获取<code>NuGet API Key</code></p><p><img data-src="https://cdn.jonty.top/img/image-20220712172607085.png" alt="image-20220712172607085"></p><h4 id="推送本地NuGet包"><a href="#推送本地NuGet包" class="headerlink" title="推送本地NuGet包"></a>推送本地NuGet包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push .\abp.7.2.1.nupkg -k 238d37fc-9fae-335d-a812-29c2799d8f0e --source https://registry.jonty.top/repository/nuget-hosted/</span><br><span class="line">正在将 abp.7.2.1.nupkg 推送到 &#x27;https://registry.jonty.top/repository/nuget-hosted/&#x27;...</span><br><span class="line">  PUT https://registry.jonty.top/repository/nuget-hosted/</span><br><span class="line">  Created https://registry.jonty.top/repository/nuget-hosted/ 288 毫秒</span><br><span class="line">已推送包。</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712172736234.png" alt="image-20220712172736234"></p><h4 id="配置本地NuGet包源"><a href="#配置本地NuGet包源" class="headerlink" title="配置本地NuGet包源"></a>配置本地NuGet包源</h4><p>在VS中添加了<strong>本地源</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220712172917172.png" alt="image-20220712172917172"></p><p><img data-src="https://cdn.jonty.top/img/image-20220712173030239.png" alt="image-20220712173030239"></p><h3 id="新增Nuget代理"><a href="#新增Nuget代理" class="headerlink" title="新增Nuget代理"></a>新增Nuget代理</h3><blockquote><p>代理公网的私有源，如Nuget、Gitlab</p></blockquote><p>启用NuGet V3版本</p><p><img data-src="https://cdn.jonty.top/img/image-20220805165042203.png" alt="image-20220805165042203"></p><p>私有源授权<img data-src="https://cdn.jonty.top/img/image-20220801173138755.png" alt="image-20220801173138755"></p><h4 id="添加仓库组"><a href="#添加仓库组" class="headerlink" title="添加仓库组"></a>添加仓库组</h4><p><img data-src="https://cdn.jonty.top/img/image-20220805165114055.png" alt="image-20220805165114055"></p><h4 id="NuGet-V3"><a href="#NuGet-V3" class="headerlink" title="NuGet V3"></a>NuGet V3</h4><p>正常访问nuget-group:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.jonty.top/repository/nuget-group/</span><br></pre></td></tr></table></figure><p>使用V3版本需要添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.jonty.top/repository/nuget-group/index.json</span><br></pre></td></tr></table></figure><h4 id="使用私有NuGet源"><a href="#使用私有NuGet源" class="headerlink" title="使用私有NuGet源"></a>使用私有NuGet源</h4><p>如果是代理私有库，先删除本地源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget list <span class="built_in">source</span></span><br><span class="line">dotnet nuget remove <span class="built_in">source</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p>添加私有源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget add <span class="built_in">source</span> https://registry.jonty.top/repository/nuget-group/index.json -n nexus3 -u admin -p nexus3 --store-password-in-clear-text</span><br></pre></td></tr></table></figure><p>清空本地nuget缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget locals http-cache --clear</span><br><span class="line">dotnet nuget locals global-packages --clear</span><br></pre></td></tr></table></figure><blockquote><p>当代理的源更新后，Nexus本地缓存会导致无法找到最新包，可手动清理</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220801164922446.png" alt="image-20220801164922446"></p><h3 id="NPM存储库"><a href="#NPM存储库" class="headerlink" title="NPM存储库"></a>NPM存储库</h3><h4 id="NPM代理"><a href="#NPM代理" class="headerlink" title="NPM代理"></a>NPM代理</h4><p><strong>官方源</strong>：</p><p><a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p><p><img data-src="https://cdn.jonty.top/img/image-20220801175628966.png" alt="image-20220801175628966"></p><p>私有库授权：</p><p><img data-src="https://cdn.jonty.top/img/image-20220801175743567.png" alt="image-20220801175743567"></p><h4 id="NPM仓库组"><a href="#NPM仓库组" class="headerlink" title="NPM仓库组"></a>NPM仓库组</h4><p><img data-src="https://cdn.jonty.top/img/image-20220805165359080.png" alt="image-20220805165359080"></p><h3 id="使用NPM代理"><a href="#使用NPM代理" class="headerlink" title="使用NPM代理"></a>使用NPM代理</h3><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm i --legacy-peer-deps  -verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看npm源</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册私有源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.jonty.top/repository/npm-group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录私服</span></span><br><span class="line">npm login registry=<span class="string">&quot;https://registry.jonty.top/repository/npm-group/&quot;</span>  </span><br><span class="line"></span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><blockquote><p>npm 新版本 <code>-g</code>需要替换为<code>--location=global</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看yarn配置</span></span><br><span class="line">yarn config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置私有源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.jonty.top/repository/npm-group/</span><br><span class="line"></span><br><span class="line">yarn cache clean</span><br></pre></td></tr></table></figure><h4 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h4><p>查看私服密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ~]# cat ~/.npmrc</span><br><span class="line">registry=http://registry.jonty.top/repository/npm-group/</span><br><span class="line">//registry.jonty.top/repository/npm-group/:_authToken=NpmToken.72b83be3-4b24-3dd1-850f-056cd78bb513</span><br></pre></td></tr></table></figure><h4 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@delivery:registry=https:<span class="comment">//registry.jonty.top/repository/npm-group/</span></span><br><span class="line"><span class="comment">//registry.jonty.top/repository/npm-group/:_authToken=NpmToken.612e0fd9-1526-3acd-9165-4e604d49a73d</span></span><br><span class="line">always-auth=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><img data-src="https://cdn.jonty.top/img/gitlab_workflow_example_extended_v12_3.png" alt="Deeper look into the basic CI/CD workflow"></p><p>主要是配合<code>Gitlab Runner CI/CD</code>编译打包</p><blockquote><p><a href="https://docs.gitlab.com/runner/">Runner执行流程</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220805171720344.png" alt="Runner执行流程"></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>后端项目从平均<code>12min</code>提升到<code>3min</code>以内，包括拉取代码、执行还原、编译打包、推送等操作</p><p>前端项目从平均大于10min（30min也很常见）提升到7min以内，<code>restore</code>速度很快，主要是<code>build</code>操作缓慢，并且随着依赖增多变得更慢</p><p><strong>使用前</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220805165923326.png" alt="ci-before"></p><p><strong>使用后</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220805170835741.png" alt="ci-after"></p><blockquote><p>搞定~</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220712171653152.png" alt="挠屁股"></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h3><p>配置 nexus3 时使用 http 而非 https</p><h3 id="no-basic-auth-credentials"><a href="#no-basic-auth-credentials" class="headerlink" title="no basic auth credentials"></a>no basic auth credentials</h3><p>需要先 docker login 登录</p><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>docker login -u admin -p Harbor12345 hub.haifengat.com 登录时报错</p><p><img data-src="https://cdn.jonty.top/img/1631446538601-5b8a97b1-ebb0-4cbb-82d1-d7353c683fb3.png" alt="img"></p><p>参考文档：</p><p><a href="https://blog.csdn.net/yangkuo024/article/details/121135602">解决Error response from daemon: Get https://: http: server gave HTTP response to HTTPS client_SerryYang的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/liusf1993/article/details/102508663">docker登录私库时提示 x509: certificate signed by unknown authority_舟行于无涯之海的博客-CSDN博客_docker login x509</a></p>]]></content>
    
    
    <summary type="html">Nexus3最佳实践 - 配合Nginx+SSL搭建私有仓库</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Nexus" scheme="https://jonty.top/tags/Nexus/"/>
    
    <category term="SSL" scheme="https://jonty.top/tags/SSL/"/>
    
    <category term="Nginx" scheme="https://jonty.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker 三剑客之 Docker Swarm</title>
    <link href="https://jonty.top/2022/07/06/getting-started-with-docker-swarm/"/>
    <id>https://jonty.top/2022/07/06/getting-started-with-docker-swarm/</id>
    <published>2022-07-06T13:57:20.000Z</published>
    <updated>2022-07-12T15:12:08.847Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/Moby-run-900x551.png.jpg" alt="docker"></p><div class="note info"><p>Docker Swarm是管理跨节点容器的编排工具，相较于Docker Compose而言，Compose只能编排单节点上的容器，Swarm将一群Docker节点虚拟化为一个主机，使得用户只要在单一主机上操作就能完成对整个容器集群的管理工作。</p></div><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>准备三个节点，要求实现奇数个节点</p><blockquote><p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/">How nodes work | Docker Documentation</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1 ————作为manager</span><br><span class="line">192.168.2.2 ————作为node1</span><br><span class="line">192.168.2.3 ————作为node2</span><br></pre></td></tr></table></figure><p>三个节点在同一个网段，确保相互之间可以ping通</p><p>安装<code>Docker-Engine</code></p><blockquote><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></blockquote><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker --version</span><br><span class="line">Docker version 20.10.17, build 100c701</span><br><span class="line">[root@manager ~]# docker compose version</span><br><span class="line">Docker Compose version v2.6.0</span><br></pre></td></tr></table></figure><h2 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h2><blockquote><p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/">节点的工作原理|Docker 文档</a></p></blockquote><p>如下图所示，swarm 集群由管理节点（manager）和工作节点（work node）构成。</p><ul><li><strong>swarm mananger</strong>：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。</li><li><strong>work node</strong>：即图中的 available node，主要负责运行相应的服务来执行任务（task）</li></ul><p><img data-src="https://docs.docker.com/engine/swarm/images/swarm-diagram.png" alt="群模式集群"></p><p>在创建集群之前，使用<code>docker node ls</code>想查看下集群中节点的信息，反馈目前没有节点信息，并且当前节点并不是<code>manager</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure><h3 id="创建一个Swarm"><a href="#创建一个Swarm" class="headerlink" title="创建一个Swarm"></a>创建一个Swarm</h3><p>在创建集群之前，使用<code>docker node ls</code>想查看下集群中节点的信息，反馈目前没有节点信息，并且当前节点并不是<code>manager</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure><p>创建新的集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.1 </span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker swarm init --advertise-addr 192.168.2.81</span><br><span class="line">Swarm initialized: current node (44qw5hbq836fryftoc51pnlbn) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-xxxxxxxxxxx-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.</span><br></pre></td></tr></table></figure><p><code>docker swarm join-token manager</code>  命令用于获取添加新的 Manager Node 的命令参数</p><p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p><h3 id="加入Swarm"><a href="#加入Swarm" class="headerlink" title="加入Swarm"></a>加入Swarm</h3><p>可以在其它节点上执行<code>docker swarm join --token......</code>来将该节点设置为工作node，并加入到这个swarm集群中</p><p>目前演示的是一个<code>manager</code>，两个工作node的模式，所以在<code>node1</code>和<code>node2</code>上执行第一个命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-xxxxxxxx-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th align="left">命令</th><th>说明</th></tr></thead><tbody><tr><td align="left">docker swarm init</td><td>初始化集群</td></tr><tr><td align="left">docker swarm join-token worker</td><td>查看工作节点的 token</td></tr><tr><td align="left">docker swarm join-token manager</td><td>查看管理节点的 token</td></tr><tr><td align="left">docker swarm join</td><td>加入集群</td></tr></tbody></table><blockquote><p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/swarm/">docker swarm | Docker Documentation</a></p></blockquote><h3 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/image-20220704145815755.png" alt="image-20220704145815755" style="zoom:67%;" /><h3 id="查看节点列表"><a href="#查看节点列表" class="headerlink" title="查看节点列表"></a>查看节点列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>节点 ID 旁边的<code>*</code>表示当前已在此节点上连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">44qw5hbq836fryftoc51pnlbn *   manager    Ready     Active         Leader           20.10.17</span><br><span class="line">q3yd5vno8t4c9hgi47mqztzbr     node1      Ready     Active                          20.10.17</span><br><span class="line">svwqj9t6g4izhsbnh0oneq4lw     node2      Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure><p>注意，<code>manager</code>是管理集群的入口，<code>docke</code>r命令都是在<code>manager</code>上执行，<code>node</code>节点上是不能执行<code>docker</code>命令的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Worker nodes can&#x27;t be used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.</span><br></pre></td></tr></table></figure><h3 id="查看节点详细信息"><a href="#查看节点详细信息" class="headerlink" title="查看节点详细信息"></a>查看节点详细信息</h3><p>使用以下命令查看节点的详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node inspect --pretty 节点名称</span><br></pre></td></tr></table></figure><h3 id="添加新的-Manager-Node-到集群"><a href="#添加新的-Manager-Node-到集群" class="headerlink" title="添加新的 Manager Node 到集群"></a>添加新的 Manager Node 到集群</h3><p>在另一台机器运行 <code>docker swarm join</code> 命令加入已存在的集群中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-5d47eim8blk5jh37ww2eua7ve0r3u4w106j7oaoxuf4ilva0tw-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br></pre></td></tr></table></figure><p>Manager Node 必须是单数（Raft），生产环境推荐3台或5台作为 <code>Manager Node</code></p><p><img data-src="https://cdn.jonty.top/img/4-1Z41Q25622D1.gif" alt="多数管理节点的分区继续对集群进行管理"></p><blockquote><p><code>docker swarm join-token manager</code>  命令用于获取添加新的 Manager Node 的命令参数</p></blockquote><p><img data-src="https://docs.docker.com/engine/swarm/images/replicated-vs-global.png" alt="global vs replicated services"></p><h3 id="添加新的-Worker-Node-到集群"><a href="#添加新的-Worker-Node-到集群" class="headerlink" title="添加新的 Worker Node 到集群"></a>添加新的 Worker Node 到集群</h3><p>在另一台机器运行 </p><p><code>docker swarm join</code> 命令加入已存在的集群中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-5qv7t73fvawvh795ckh3nxl9vnyo2hwwsqnnjwqyav3spj7ufu-1i7wir7oc3g9fh7yidg19i8p5 192.168.1.80:2377</span><br></pre></td></tr></table></figure><blockquote><p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p></blockquote><h3 id="禁用节点"><a href="#禁用节点" class="headerlink" title="禁用节点"></a>禁用节点</h3><blockquote><p>在生产环境 Manager Node 不推荐运行任何容器实例，但是 Swarm 调度器会分配给Manager Node，</p><p>可以通过 <strong>禁用节点</strong> 告诉 Swarm 调度器不要分配给 Manager Node 任何容器实例。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability drain 节点名称</span><br></pre></td></tr></table></figure><h3 id="启用节点"><a href="#启用节点" class="headerlink" title="启用节点"></a>启用节点</h3><p>禁用节点后使用以下命令即可启用节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability active 节点名称</span><br></pre></td></tr></table></figure><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --label-add foo --label-add bar=baz 节点名称</span><br></pre></td></tr></table></figure><blockquote><p>–label-add：给节点添加标签，可以用来控制服务放置</p></blockquote><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker node ls</td><td>查看所有集群节点</td></tr><tr><td>docker node rm</td><td>删除某个节点（<code>-f</code>强制删除）</td></tr><tr><td>docker node inspect</td><td>查看节点详情</td></tr><tr><td>docker node demote</td><td>节点降级，由管理节点降级为工作节点</td></tr><tr><td>docker node promote</td><td>节点升级，由工作节点升级为管理节点</td></tr><tr><td>docker node update</td><td>节点升级，由工作节点升级为管理节点</td></tr><tr><td>docker node ps</td><td>查看节点中的 Task 任务</td></tr></tbody></table><blockquote><p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/node/">docker node | Docker Documentation</a></p></blockquote><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><blockquote><p>参考文档：<a href="https://docs.docker.com/engine/swarm/services/">将服务部署到群|Docker 文档</a></p><p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/">How services work | Docker Documentation</a></p></blockquote><p>将服务部署到 swarm 时，swarm 管理器接收服务定义作为服务的所需状态。然后，它将群中的节点上的服务调度为一个或多个副本任务。这些任务在群中的节点上彼此独立运行。</p><p>例如，假设在 HTTP 侦听器的三个实例之间进行负载平衡。下图显示了具有三个副本的 HTTP 侦听器服务。侦听器的三个实例中的每一个都是群中的一个任务。</p><p><img data-src="https://cdn.jonty.top/img/services-diagram.png" alt="服务图"></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><p>连接到  Manager Node，使用 </p><p><code>docker service create</code> 命令创建服务.</p><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br></pre></td></tr></table></figure><ul><li><p><code>--name</code> 指定服务名称为 <code>helloworld</code></p></li><li><p><code>--replicas</code> 指定服务运行实例数量为 <code>1</code></p></li><li><p>参数 <code>alpine</code> 表示运行的镜像为 <code>Alpine Linux</code></p></li><li><p>参数 <code>ping docker.com</code> 表示在容器中执行的命令</p></li></ul><h3 id="查看运行的服务"><a href="#查看运行的服务" class="headerlink" title="查看运行的服务"></a>查看运行的服务</h3><p>在 Manager Node 运行此命令查看正在运行的服务列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service ls</span><br><span class="line">ID             NAME                    MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">82bpay4gdvd0   deploy-demo_nginx       replicated   3/3        nginx:latest                 *:8088-&gt;80/tcp</span><br><span class="line">7cad5hto20ql   deploy-demo_portainer   replicated   1/1        portainer/portainer:latest   *:9000-&gt;9000/tcp</span><br><span class="line">520x2l3lcwyp   redis                   replicated   2/2        redis:3.0.6                  *:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure><h3 id="查看服务的详细信息"><a href="#查看服务的详细信息" class="headerlink" title="查看服务的详细信息"></a>查看服务的详细信息</h3><p>在 Manager Node  运行此命令查看服务的运行详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --pretty 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>参数 <code>--pretty</code> 表示返回格式化后的详细信息，不加这个参数则打印 <code>JSON</code> 格式的信息</p></blockquote><h3 id="查看服务运行在哪些节点"><a href="#查看服务运行在哪些节点" class="headerlink" title="查看服务运行在哪些节点"></a>查看服务运行在哪些节点</h3><p>在 Manager Node 使用此命令查看服务都在那些节点运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>docker-swarm 中的服务实例由 swarm 调度。因此有部分服务的实例运行在 Manager Node 是正常表现。</p></blockquote><h3 id="伸缩服务"><a href="#伸缩服务" class="headerlink" title="伸缩服务"></a>伸缩服务</h3><p>docker-swarm 支持对服务实例进行动态伸缩，使用以下命令即可实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale 服务名称=实例数量(最少为1)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service scale redis=2</span><br><span class="line">redis scaled to 2</span><br><span class="line">overall progress: 2 out of 2 tasks </span><br><span class="line">1/2: running   [==================================================&gt;] </span><br><span class="line">2/2: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><h3 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h3><p>在 Manager Node 使用以下命令删除服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>注意，因为是集群的原因，集群中的Node将会存在延迟的情况，想确认服务是否被删除成功请使用 <code>docker service ls</code> 查看</p></blockquote><h3 id="滚动更新服务"><a href="#滚动更新服务" class="headerlink" title="滚动更新服务"></a>滚动更新服务</h3><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>进入 Manager Node 创建一个redis服务用于演示滚动更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 3 \</span><br><span class="line">  --name redis \</span><br><span class="line">  --update-delay 10s \</span><br><span class="line">  redis:3.0.6</span><br></pre></td></tr></table></figure><blockquote><p><code>--update-dely</code> 表示更新服务或服务集之间的时间延迟：<code>1h10m3s</code>，表示延迟1小时10分钟3秒。</p></blockquote><blockquote><p>调度器默认一次更新一个任务，可以通过 <code>--update-parallelism</code> 参数配置调度器同时更新服务数量。</p></blockquote><blockquote><p>默认情况下，当单个服务更新返回状态为 <code>RUNNING</code>，调度器会让另一个服务更新，直到所有服务都更新完成。</p></blockquote><blockquote><p>如果在更新期间某个服务返回 <code>FAILED</code> ，调度器会暂停更新，可以通过 <code>--update-failure-action</code> 参数配置控制当服务更新发生错误时的行为。</p></blockquote><h4 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a>检查服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --pretty redis</span><br></pre></td></tr></table></figure><h4 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update --image redis:3.0.7 redis</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，调度器将按以下方式更新服务：</p></blockquote><ul><li><blockquote><p>停止一个服务</p></blockquote></li><li><blockquote><p>更新已停止的服务</p></blockquote></li><li><blockquote><p>启动已更新的服务</p></blockquote></li></ul><blockquote><p>如果更新的服务返回 <code>RUNNING</code> ，等待指定的延迟时间后开始更新下一个服务</p></blockquote><blockquote><p>如果更新期间某个服务返回 <code>FAILED</code> ，则暂停服务更新</p></blockquote><h4 id="重新启动暂停的服务更新"><a href="#重新启动暂停的服务更新" class="headerlink" title="重新启动暂停的服务更新"></a>重新启动暂停的服务更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update redis</span><br></pre></td></tr></table></figure><blockquote><p>为了避免重复某些失败的更新，可以重新指定更新参数</p></blockquote><h4 id="查看服务的滚动更新"><a href="#查看服务的滚动更新" class="headerlink" title="查看服务的滚动更新"></a>查看服务的滚动更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps redis</span><br></pre></td></tr></table></figure><blockquote><p>在swarm更新完成所有服务之前，可以看到一些服务的镜像为 <code>redis:3.0.6</code>，另一些为 <code>redis:3.0.7</code></p></blockquote><h3 id="指定服务约束"><a href="#指定服务约束" class="headerlink" title="指定服务约束"></a>指定服务约束</h3><blockquote><p><a href="https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-constraints---constraint">泊坞窗服务创建|Docker 文档</a></p><p><a href="https://docs.docker.com/engine/swarm/services/#control-service-placement">将服务部署到群|Docker 文档</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/placement_prefs.png" alt="placement_prefs"></p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker service create</td><td>部署服务</td></tr><tr><td>docker service inspect</td><td>查看服务详情</td></tr><tr><td>docker service logs</td><td>查看某个服务日志</td></tr><tr><td>docker service ls</td><td>查看所有服务详情</td></tr><tr><td>docker service rm</td><td>删除某个服务（<code>-f</code>强制删除）</td></tr><tr><td>docker service scale</td><td>设置某个服务个数</td></tr><tr><td>docker service update</td><td>更新某个服务</td></tr></tbody></table><blockquote><p>命令参考：<a href="https://docs.docker.com/engine/reference/commandline/service/">docker service | Docker Documentation</a></p></blockquote><h2 id="路由网格"><a href="#路由网格" class="headerlink" title="路由网格"></a>路由网格</h2><p>docker swarm支持路由网格。路由网格让处于swarm集群中的任意一个节点都可以作为被访问的入口，即使此节点没有运行任何服务。</p><p>要在 swarm 集群中使用使用路由网格，首先需要开启加入swarm集群的节点的以下端口：</p><ul><li><p><code>7946</code> ：容器网络发现</p></li><li><p><code>4789</code> ：容器网络入口</p></li></ul><p>其次需要将节点服务实例的端口公开，使服务可以被外部访问（例如使用nginx做负载均衡）</p><h3 id="服务原理"><a href="#服务原理" class="headerlink" title="服务原理"></a>服务原理</h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/ingress/">使用群模式路由网格|Docker 文档</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/ingress-routing-mesh.png" alt="服务入口映像"></p><h3 id="创建服务时公开端口"><a href="#创建服务时公开端口" class="headerlink" title="创建服务时公开端口"></a>创建服务时公开端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  --publish published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>--publish</code> 与 <code>-p</code> 效果相同，其中 <code>--published</code> 值为公布的端口，<code>target</code> 值为容器内部监听的端口。<code>--publish</code> 的写法</p></blockquote><h3 id="更新现有服务的公开端口"><a href="#更新现有服务的公开端口" class="headerlink" title="更新现有服务的公开端口"></a>更新现有服务的公开端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">  --publish-add published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;SERVICE&gt;</span><br></pre></td></tr></table></figure><h3 id="查看服务发布的端口"><a href="#查看服务发布的端口" class="headerlink" title="查看服务发布的端口"></a>查看服务发布的端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --format=&quot;&#123;&#123;json .Endpoint.Spec.Ports&#125;&#125;&quot; 服务名称</span><br></pre></td></tr></table></figure><h3 id="只公开TCP或UDP端口"><a href="#只公开TCP或UDP端口" class="headerlink" title="只公开TCP或UDP端口"></a>只公开TCP或UDP端口</h3><p>默认情况下公开端口都是 TCP 端口，你可以通过参数配置公开端口的类型：</p><h4 id="仅TCP"><a href="#仅TCP" class="headerlink" title="仅TCP"></a>仅TCP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h4 id="仅UDP"><a href="#仅UDP" class="headerlink" title="仅UDP"></a>仅UDP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h4 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP+UDP"></a>TCP+UDP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h3 id="绕过路由网格"><a href="#绕过路由网格" class="headerlink" title="绕过路由网格"></a>绕过路由网格</h3><p>要绕过 swarm 集群的路由网格，需要使用 </p><p><code>--publish</code> 参数设置 <code>mode</code> 值为<code>host</code>。</p><p>下面的命令使用 </p><p><code>host</code> 模式创建全局服务并绕过路由网格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp,mode=host \</span><br><span class="line">  --mode global \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><blockquote><p>绕过路由网格后的注意事项：</p><p>如果你访问未运行服务的节点，则无法访问此服务</p><p>如果你希望在每个节点运行多个服务，就不能指定静态的端口。要么就允许docker随机分配一个公开端口（通过置空 <code>published</code> 参数的值实现）</p></blockquote><h2 id="Stack-Deploy"><a href="#Stack-Deploy" class="headerlink" title="Stack-Deploy"></a>Stack-Deploy</h2><blockquote><p><a href="https://docs.docker.com/engine/swarm/stack-deploy/">Deploy a stack to a swarm | Docker Documentation</a></p></blockquote><p>正式部署集群服务，使用<code>nginx</code>镜像做为示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service create --replicas 3 -p 8088:80 --name nginx nginx:latest</span><br><span class="line">ap8h8srb8yh3mni0h2nz61njz</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   [==================================================&gt;] </span><br><span class="line">2/3: running   [==================================================&gt;] </span><br><span class="line">3/3: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br></pre></td></tr></table></figure><p><code>--replicas 3</code>表示创建服务的实例个数（默认1个），在个Docker节点上，分别创建一个<code>nginx</code>服务，<code>REPLICAS</code>会有进度显示，并且执行是异步的</p><p>查看服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service ls</span><br><span class="line">ID             NAME                    MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">82bpay4gdvd0   deploy-demo_nginx       replicated   3/3        nginx:latest                 *:8088-&gt;80/tcp</span><br><span class="line">520x2l3lcwyp   redis                   replicated   2/2        redis:3.0.6                  *:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure><p>访问任一节点8088端口：</p><p><img data-src="https://cdn.jonty.top/img/image-20220706214254711.png" alt="image-20220706214254711"></p><p><code>docker service</code>部署的是单体服务，我使用<code>docker stack</code>进行多服务编排部署，使用的同样是<code>docker-compose.yml</code>配置文件，示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8088</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>] <span class="comment">## 约束服务 仅在manager node 分配</span></span><br></pre></td></tr></table></figure><p>部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker stack deploy -c docker-compose.yml deploy-demo</span><br><span class="line">Creating service deploy-demo_nginx</span><br><span class="line">Creating service deploy-demo_portainer</span><br></pre></td></tr></table></figure><p>查看部署详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker stack ls</span><br><span class="line">NAME          SERVICES   ORCHESTRATOR</span><br><span class="line">deploy-demo   2          Swarm</span><br></pre></td></tr></table></figure><p>访问<code>portainer</code>，可以方便的查看和管理所有的服务和堆栈</p><p><img data-src="https://cdn.jonty.top/img/swarm-portainer.gif" alt="swarm-portainer"></p><p>编写支持<code>docker stack</code>的<code>docker-compose.yml</code></p><blockquote><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Documentation</a></p></blockquote><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.0.5</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span> <span class="comment"># 启动实例数量</span></span><br><span class="line">      <span class="attr">placement:</span> <span class="comment"># 配置容器实例位置------------</span></span><br><span class="line">        <span class="attr">max_replicas_per_node:</span> <span class="number">2</span> <span class="comment"># 每个节点最多运行容器实例数量</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="comment"># 将容器分配到匹配标签的节点运行</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;engine.labels.operatingsystem==ubuntu 18.04&quot;</span></span><br><span class="line">        <span class="attr">preferences:</span> <span class="comment"># 将任务平均分配到不同类别的节点上</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">spread:</span> <span class="string">node.labels.zone</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment"># 资源限制------------</span></span><br><span class="line">        <span class="attr">limits:</span> <span class="comment"># 占用上限</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.50&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span> <span class="comment"># 启动占用</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.25&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">    <span class="attr">restart_policy:</span> <span class="comment"># 重启策略------------</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span> <span class="comment"># 发生失败时</span></span><br><span class="line">                <span class="attr">delay:</span> <span class="string">5s</span> <span class="comment"># 重启时间间隔</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span> <span class="comment">#最大尝试次数        </span></span><br><span class="line">                <span class="attr">window:</span> <span class="string">120s</span> <span class="comment"># 判断是否重启成功的等待时长                </span></span><br><span class="line">    <span class="attr">update_config:</span> <span class="comment"># 滚动更新的配置------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 同时更新的数量</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次更新间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 滚动更新出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的更新失败率</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 更新顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)</span></span><br><span class="line">    <span class="attr">rollback_config:</span> <span class="comment"># 更新失败如何回滚------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 每次回滚的数量，如果为0则全部回滚</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次回滚间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 回滚出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的回滚失败率，默认为0</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 回滚顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)       </span></span><br></pre></td></tr></table></figure><p><code>docker-stack </code>不支持的<code>docker-compose</code>配置</p><ul><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">build</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#cgroup_parent">cgroup_parent</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#container_name">container_name</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#devices">devices</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#tmpfs">tmpfs</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external_links">external_links</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#links">links</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode">network_mode</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#restart">restart</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#security_opt">security_opt</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#userns_mode">userns_mode</a></p></li></ul><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker stack deploy</td><td>部署新的堆栈或更新现有堆栈</td></tr><tr><td>docker stack ls</td><td>列出现有堆栈</td></tr><tr><td>docker stack ps</td><td>列出堆栈中的任务</td></tr><tr><td>docker stack rm</td><td>删除堆栈</td></tr><tr><td>docker stack services</td><td>列出堆栈中的服务</td></tr><tr><td>docker stack down</td><td>移除某个堆栈（不会删除数据）</td></tr></tbody></table><blockquote><p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/stack/">docker stack | Docker Documentation</a></p></blockquote><h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><h4 id="普通配置"><a href="#普通配置" class="headerlink" title="普通配置"></a>普通配置</h4><blockquote><p><a href="https://docs.docker.com/engine/swarm/configs/">使用 Docker 配置|存储配置数据Docker 文档</a></p></blockquote><h4 id="加密配置"><a href="#加密配置" class="headerlink" title="加密配置"></a>加密配置</h4><blockquote><p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">锁定您的集群以保护其加密密钥|Docker 文档</a></p></blockquote><h3 id="锁定集群"><a href="#锁定集群" class="headerlink" title="锁定集群"></a>锁定集群</h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">锁定您的集群以保护其加密密钥|Docker 文档</a></p></blockquote><h3 id="管理指南"><a href="#管理指南" class="headerlink" title="管理指南"></a>管理指南</h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/admin_guide/">管理和维护一组 Docker 引擎|Docker 文档</a></p></blockquote><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用swarm搭建集群时出现如下错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error </span>response from daemon: rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = &quot;transport: Error while dialing dial tcp 192.168.0.108:2377: connect: no route to host&quot;</span><br></pre></td></tr></table></figure><p>这个错误是因为将node节点加入swarm中导致的，原因就是<code>manager</code>节点这台机器上的<strong>防火墙</strong>没有关闭。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>把manager这台机器上的防火墙关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看防火墙状态</span></span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 停止防火墙</span></span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 禁用防火墙</span></span></span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>Docker Swarm 错误 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error creating external connectivity network: Failed to Setup IP tables: Unable to enable SKIP DNAT rule: (iptables failed: iptables --wait -t nat -I DOCKER -i docker_gwbridge -j RETURN: iptables: No chain/target/match by that name. (exit status 1))</span><br></pre></td></tr></table></figure><p>关闭防火墙后需要重启Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker-Swarm:Docker 的集群管理工具</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Swarm" scheme="https://jonty.top/tags/Swarm/"/>
    
  </entry>
  
</feed>
