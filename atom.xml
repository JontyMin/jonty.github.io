<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonty Blog</title>
  
  <subtitle>记录搬砖生活</subtitle>
  <link href="https://jonty.top/atom.xml" rel="self"/>
  
  <link href="https://jonty.top/"/>
  <updated>2022-10-20T08:45:57.199Z</updated>
  <id>https://jonty.top/</id>
  
  <author>
    <name>JontyWang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker部署SQL Server 2019 Always On集群</title>
    <link href="https://jonty.top/2022/10/20/sql-server-2019-alwayson-availability-group-on-docker-containers/"/>
    <id>https://jonty.top/2022/10/20/sql-server-2019-alwayson-availability-group-on-docker-containers/</id>
    <published>2022-10-20T08:40:18.000Z</published>
    <updated>2022-10-20T08:45:57.199Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>SQL Server在2016年开始支持Linux。随着2017和2019版本的发布，它开始支持Linux和容器平台上的HA/DR、Kubernetes和大数据集群解决方案。</p><p>在本文中，我们将在3个节点的Docker容器上安装SQL Server 2019，并创建AlwaysOn可用性组。</p><p>我们的目标是使用单个配置文件快速准备好环境。</p><p>因此，开发人员或测试团队可以快速执行诸如兼容性、连通性、代码功能等测试。</p><p>重要提示：<strong>不建议在生产环境中执行操作</strong>。</p></div><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p><a href="../install-docker-on-centos/">快速安装Docker</a></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><table><thead><tr><th>主机名</th><th>IP</th><th>端口</th><th>角色</th></tr></thead><tbody><tr><td>sqlNode1</td><td>宿主机IP</td><td>1501:1433</td><td>主</td></tr><tr><td>sqlNode2</td><td>宿主机IP</td><td>1502:1433</td><td>副</td></tr><tr><td>sqlNode3</td><td>宿主机IP</td><td>1503:1433</td><td>副</td></tr></tbody></table><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>环境准备完毕后，开始正式的配置安装。</p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>通过<code>docker-compose</code>文件来创建、配置3个容器，具体内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>插入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"> </span><br><span class="line">services:</span><br><span class="line">  db1:</span><br><span class="line">    container_name: sqlNode1</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode1</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1501:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode2.labl.local: <span class="string">&quot;172.16.238.22&quot;</span></span><br><span class="line">      sqlNode3.labl.local: <span class="string">&quot;172.16.238.23&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.21</span><br><span class="line"> </span><br><span class="line">  db2:</span><br><span class="line">    container_name: sqlNode2</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode2</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1502:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode1.lab.local: <span class="string">&quot;172.16.238.21&quot;</span></span><br><span class="line">      sqlNode3.lab.local: <span class="string">&quot;172.16.238.23&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.22</span><br><span class="line"> </span><br><span class="line">  db3:</span><br><span class="line">    container_name: sqlNode3</span><br><span class="line">    image: mcr.microsoft.com/mssql/server:2019-latest</span><br><span class="line">    hostname: sqlNode3</span><br><span class="line">    domainname: lab.local</span><br><span class="line">    environment:</span><br><span class="line">      MSSQL_SA_PASSWORD: <span class="string">&quot;bb123456??&quot;</span></span><br><span class="line">      ACCEPT_EULA: <span class="string">&quot;Y&quot;</span></span><br><span class="line">      MSSQL_ENABLE_HADR: 1</span><br><span class="line">      MSSQL_AGENT_ENABLED: <span class="string">&quot;true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">    - <span class="string">&quot;1503:1433&quot;</span></span><br><span class="line">    extra_hosts:</span><br><span class="line">      sqlNode1.lab.local: <span class="string">&quot;172.16.238.21&quot;</span></span><br><span class="line">      sqlNode2.lab.local: <span class="string">&quot;172.16.238.22&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">        internal:</span><br><span class="line">                ipv4_address: 172.16.238.23</span><br><span class="line"> </span><br><span class="line">networks:</span><br><span class="line">    internal:</span><br><span class="line">      ipam:</span><br><span class="line">            driver: default</span><br><span class="line">            config:</span><br><span class="line">                - subnet: 172.16.238.0/24</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p>然后通过<code>docker-compose up -d</code>命令启动三个容器，其中<code>-d</code>表示在后台运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20221020160443178.png" alt="image-20221020160443178"></p><p>查看容器状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@acme-1 ~]<span class="comment"># docker compose ps</span></span><br><span class="line">NAME                COMMAND                  SERVICE             STATUS              PORTS</span><br><span class="line">sqlNode1            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db1                 running             0.0.0.0:1501-&gt;1433/tcp, :::1501-&gt;1433/tcp</span><br><span class="line">sqlNode2            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db2                 running             0.0.0.0:1502-&gt;1433/tcp, :::1502-&gt;1433/tcp</span><br><span class="line">sqlNode3            <span class="string">&quot;/opt/mssql/bin/perm…&quot;</span>   db3                 running             0.0.0.0:1503-&gt;1433/tcp, :::1503-&gt;1433/tcp</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>通过宿主机的外网IP+端口连接相应的数据库，如下：</p><p><img data-src="https://cdn.jonty.top/img/image-20221020161204446.png" alt="image-20221020161204446"></p><p><img data-src="https://cdn.jonty.top/img/image-20221020161232090.png" alt="image-20221020161232090"></p><h3 id="配置互信"><a href="#配置互信" class="headerlink" title="配置互信"></a>配置互信</h3><h4 id="主库-生成密钥"><a href="#主库-生成密钥" class="headerlink" title="主库-生成密钥"></a>主库-生成密钥</h4><p>连接到主库，也就是节点1，端口是<code>1501</code></p><p>将证书和私钥提取到<code>/tmp/dbm_certificate.cer</code>和<code>/tmp/dbm_certificate.pvk</code>文件中</p><p>将文件复制到其他节点，并根据以下文件创建主密钥和证书：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">USE master</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> LOGIN dbm_login <span class="keyword">WITH</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbm_user <span class="keyword">FOR</span> LOGIN dbm_login;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line">go</span><br><span class="line"><span class="keyword">CREATE</span> CERTIFICATE dbm_certificate <span class="keyword">WITH</span> SUBJECT <span class="operator">=</span> <span class="string">&#x27;dbm&#x27;</span>;</span><br><span class="line">BACKUP CERTIFICATE dbm_certificate</span><br><span class="line"><span class="keyword">TO</span> FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.cer&#x27;</span></span><br><span class="line"><span class="keyword">WITH</span> PRIVATE KEY (</span><br><span class="line">        FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.pvk&#x27;</span>,</span><br><span class="line">        ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span></span><br><span class="line">    );</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>将文件拷贝到其他两个节点：</p><p>在服务器中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker cp sqlNode1:/tmp/dbm_certificate.cer .</span><br><span class="line">docker cp sqlNode1:/tmp/dbm_certificate.pvk .</span><br><span class="line">docker cp dbm_certificate.cer sqlNode2:/tmp/</span><br><span class="line">docker cp dbm_certificate.pvk sqlNode2:/tmp/</span><br><span class="line">docker cp dbm_certificate.cer sqlNode3:/tmp/</span><br><span class="line">docker cp dbm_certificate.pvk sqlNode3:/tmp/</span><br></pre></td></tr></table></figure><h4 id="从库-导入密钥"><a href="#从库-导入密钥" class="headerlink" title="从库-导入密钥"></a>从库-导入密钥</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> LOGIN dbm_login <span class="keyword">WITH</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> dbm_user <span class="keyword">FOR</span> LOGIN dbm_login;</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line"><span class="keyword">CREATE</span> MASTER KEY ENCRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> CERTIFICATE dbm_certificate   </span><br><span class="line">    <span class="keyword">AUTHORIZATION</span> dbm_user</span><br><span class="line">    <span class="keyword">FROM</span> FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.cer&#x27;</span></span><br><span class="line">    <span class="keyword">WITH</span> PRIVATE KEY (</span><br><span class="line">    FILE <span class="operator">=</span> <span class="string">&#x27;/tmp/dbm_certificate.pvk&#x27;</span>,</span><br><span class="line">    DECRYPTION <span class="keyword">BY</span> PASSWORD <span class="operator">=</span> <span class="string">&#x27;bb123456??&#x27;</span></span><br><span class="line">);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="监听和重启"><a href="#监听和重启" class="headerlink" title="监听和重启"></a>监听和重启</h3><p>最后在所有节点执行以下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ENDPOINT [Hadr_endpoint]</span><br><span class="line">    <span class="keyword">AS</span> TCP (LISTENER_IP <span class="operator">=</span> (<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>), LISTENER_PORT <span class="operator">=</span> <span class="number">5022</span>)</span><br><span class="line">    <span class="keyword">FOR</span> DATA_MIRRORING (</span><br><span class="line">        ROLE <span class="operator">=</span> <span class="keyword">ALL</span>,</span><br><span class="line">        AUTHENTICATION <span class="operator">=</span> CERTIFICATE dbm_certificate,</span><br><span class="line">        ENCRYPTION <span class="operator">=</span> REQUIRED ALGORITHM AES</span><br><span class="line">        );</span><br><span class="line"><span class="keyword">ALTER</span> ENDPOINT [Hadr_endpoint] STATE <span class="operator">=</span> STARTED;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span> <span class="keyword">ON</span> ENDPOINT::[Hadr_endpoint] <span class="keyword">TO</span> [dbm_login];</span><br></pre></td></tr></table></figure><p>启用开机自启动ALWAYON，在所有节点执行以下命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> EVENT SESSION  AlwaysOn_health <span class="keyword">ON</span> SERVER <span class="keyword">WITH</span> (STARTUP_STATE<span class="operator">=</span><span class="keyword">ON</span>);</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h3 id="创建高可用组"><a href="#创建高可用组" class="headerlink" title="创建高可用组"></a>创建高可用组</h3><p>行以下脚本在主节点中创建一个可用性组。 </p><blockquote><p>请注意，选择CLUSTER_TYPE = NONE选项是因为它是在没有诸如Pacemaker或Windows Server故障转移群集之类的群集管理平台的情况下安装的。</p><p>如果要在Linux上安装AlwaysOn AG，则应为Pacemaker选择CLUSTER_TYPE = EXTERNAL：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> AVAILABILITY <span class="keyword">GROUP</span> [AG1]</span><br><span class="line">        <span class="keyword">WITH</span> (CLUSTER_TYPE <span class="operator">=</span> <span class="keyword">NONE</span>)</span><br><span class="line">        <span class="keyword">FOR</span> REPLICA <span class="keyword">ON</span></span><br><span class="line">        N<span class="string">&#x27;sqlNode1&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode1:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                ),</span><br><span class="line">        N<span class="string">&#x27;sqlNode2&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode2:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                ),</span><br><span class="line">        N<span class="string">&#x27;sqlNode3&#x27;</span></span><br><span class="line">            <span class="keyword">WITH</span> (</span><br><span class="line">            ENDPOINT_URL <span class="operator">=</span> N<span class="string">&#x27;tcp://sqlNode3:5022&#x27;</span>,</span><br><span class="line">            AVAILABILITY_MODE <span class="operator">=</span> ASYNCHRONOUS_COMMIT,</span><br><span class="line">                SEEDING_MODE <span class="operator">=</span> AUTOMATIC,</span><br><span class="line">                FAILOVER_MODE <span class="operator">=</span> MANUAL,</span><br><span class="line">            SECONDARY_ROLE (ALLOW_CONNECTIONS <span class="operator">=</span> <span class="keyword">ALL</span>)</span><br><span class="line">                );</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>在从库中执行以下命令，将从库加入到AG组中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] <span class="keyword">JOIN</span> <span class="keyword">WITH</span> (CLUSTER_TYPE <span class="operator">=</span> <span class="keyword">NONE</span>);</span><br><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">ANY</span> DATABASE;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>至此在Docker容器中安装SQL Server Alwayson集群已经完成了</p><h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>注意：当指定<code>CLUSTER_TYPE = NONE</code>创建可用组时无法自动故障转移，在执行故障转移时需执行以下命令，并检查要执行故障转移的辅助节点的<strong>最后提交时间</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> AVAILABILITY <span class="keyword">GROUP</span> [ag1] FORCE_FAILOVER_ALLOW_DATA_LOSS</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在主库上创建一个数据库，并加入到可用组AG中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE agtestdb;</span><br><span class="line">GO</span><br><span class="line">ALTER DATABASE agtestdb SET RECOVERY FULL;</span><br><span class="line">GO</span><br><span class="line">BACKUP DATABASE agtestdb TO DISK = <span class="string">&#x27;/var/opt/mssql/data/agtestdb.bak&#x27;</span>;</span><br><span class="line">GO</span><br><span class="line">ALTER AVAILABILITY GROUP [ag1] ADD DATABASE [agtestdb];</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://learn.microsoft.com/zh-cn/sql/linux/sql-server-linux-configure-environment-variables?view=sql-server-ver15">为 Linux 上的 SQL Server 配置环境变量 - SQL Server | Microsoft Learn</a></p></blockquote>]]></content>
    
    
    <summary type="html">使用Docker快速部署SQL Server 2019 Always On集群测试环境</summary>
    
    
    
    <category term="DBA" scheme="https://jonty.top/categories/DBA/"/>
    
    <category term="DevOps" scheme="https://jonty.top/categories/DBA/DevOps/"/>
    
    
    <category term="DBA" scheme="https://jonty.top/tags/DBA/"/>
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="SQL Server" scheme="https://jonty.top/tags/SQL-Server/"/>
    
    <category term="AlwaysOn" scheme="https://jonty.top/tags/AlwaysOn/"/>
    
    <category term="HA高可用" scheme="https://jonty.top/tags/HA%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>CentOS中快速安装Docker</title>
    <link href="https://jonty.top/2022/10/20/install-docker-on-centos/"/>
    <id>https://jonty.top/2022/10/20/install-docker-on-centos/</id>
    <published>2022-10-20T08:35:37.000Z</published>
    <updated>2022-10-20T08:38:49.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.daocloud.io/docker | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -</span><br></pre></td></tr></table></figure><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h3 id="设置yum仓库"><a href="#设置yum仓库" class="headerlink" title="设置yum仓库"></a>设置yum仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker引擎"><a href="#安装Docker引擎" class="headerlink" title="安装Docker引擎"></a>安装Docker引擎</h3><blockquote><p>注意：docker-compose-plugin即安装docker-compose，不需要再进行手动安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">CentOS中快速搭建Docker环境</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Shell" scheme="https://jonty.top/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>二十行代码，搞懂 Observable</title>
    <link href="https://jonty.top/2022/09/15/implement-observable/"/>
    <id>https://jonty.top/2022/09/15/implement-observable/</id>
    <published>2022-09-15T03:37:05.000Z</published>
    <updated>2022-09-15T03:33:46.074Z</updated>
    
    <content type="html"><![CDATA[<p>上帝说，要有代码，于是沐浴焚香，大笔一挥，一个 Hello World</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可是上帝对此并不高兴，他只想在需要的时候，才展示结果，于是我们把它放进了一个名为  <code>callback</code> 的<strong>函数</strong>盒子里：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello world&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>放在盒子里的程序不会自己执行，只有我们调用它的时候，才会执行，满足了上帝的需求，我们也学到一个知识点：</p><blockquote><p>函数可以作为延迟代码执行的一种手段</p></blockquote><h3 id="演员就位"><a href="#演员就位" class="headerlink" title="演员就位"></a>演员就位</h3><p>想象一个场景，我们需要一个提醒器，提醒我们该喝水了，于是可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">reminder() <span class="comment">// Time to drink water!</span></span><br></pre></td></tr></table></figure><p>看起来可行，但是我们更希望它只负责提醒，至于提醒之后做什么（行 1），由自己来决定，为了实现这个目的，可以将具体逻辑作为函数参数，传入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">&#125;</span><br><span class="line">reminder(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>)) <span class="comment">// Time to drink water!</span></span><br></pre></td></tr></table></figure><p>代码效果相同，但是这里我们可以自由地改变提醒事件发生之后的行为，传入不同的函数参数即可。</p><p>下面来玩儿一下 <code>reminder</code> 吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb()</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">reminder(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>))</span><br></pre></td></tr></table></figure><p>上面的代码会先立即进行提醒，然后隔一秒钟再次提醒。</p><p>现实不总是那么尽如人意，我们的 <code>reminder</code> 可能会出错，我们也期望知道这一系列的提醒什么时候结束，但是现在 <code>reminder</code> 只有一个 <code>cb</code> 参数，已经满足不了我们了。最简单的方式是传入三个参数以供使用：</p><ul><li><p>一个在提醒事件发生时，参数命名为 next</p></li><li><p>一个是错误发生时，命名为 error</p></li><li><p>一个是提醒结束时，命名为 complete</p></li></ul><p>如果我们使用一个对象来包裹这三个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reminder</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb.next(<span class="number">1</span>)</span><br><span class="line">  cb.complete()</span><br><span class="line">&#125;</span><br><span class="line">reminder(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Time to drink water! 1</span></span><br><span class="line"><span class="comment">// Done</span></span><br></pre></td></tr></table></figure><p>我们来把 <code>reminder</code> 放进一个 <code>Reminder</code> 类里面，并重命名为 <code>remind</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reminder</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">remind</span>(<span class="params">cb</span>)</span> &#123;</span><br><span class="line">    cb.next(<span class="number">1</span>)</span><br><span class="line">    cb.complete()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reminder = <span class="keyword">new</span> Reminder()</span><br><span class="line"></span><br><span class="line">reminder.remind(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>问题又来了，我们期望 <code>reminder</code> 的逻辑是可以动态注入的，一个解决方法是将函数体的内容通过构造参数传入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reminder</span> </span>&#123;</span><br><span class="line">  constructor(behavior) &#123;</span><br><span class="line">    <span class="keyword">this</span>.behavior = behavior</span><br><span class="line">  &#125;</span><br><span class="line">  remind(cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.behavior(cb)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reminder = <span class="keyword">new</span> Reminder(cb =&gt; &#123;</span><br><span class="line">  cb.next(<span class="number">1</span>)</span><br><span class="line">  cb.complete()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">reminder.remind(&#123;</span><br><span class="line">  next: v =&gt; console.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  error: e =&gt; console.log(e),</span><br><span class="line">  complete: () =&gt; console.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们来做一些重命名</p><ul><li><p><code>Reminder</code> → <code>Observable</code></p></li><li><p><code>remind</code> → <code>subscribe</code></p></li><li><p><code>cb</code> → <code>observer</code></p></li><li><p><code>reminder</code> → <code>obs$</code></p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">behavior</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.behavior = behavior</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">subscribe</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.behavior(observer)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obs$ = <span class="keyword">new</span> Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.next(<span class="number">1</span>)</span><br><span class="line">  observer.complete()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Time to drink water!&#x27;</span>, v),</span><br><span class="line">  <span class="attr">error</span>: <span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>),</span><br><span class="line">&#125;</span><br><span class="line">obs$.subscribe(observer)</span><br></pre></td></tr></table></figure><p>至此，20 行代码，甚至还包含一个文件末尾空行，我们实现了一个 <code>Observable</code></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>通过一系列的需求变更和拥抱变化，我们将最原始的 Hello World 重构成了一个具有基本功能的 <code>Observable</code>。再次观察和思考上面的代码，除了 <code>Observable</code> 的定义之外，存在三个语句：</p><ul><li><p><code>obs$</code> 的定义，最重要的是定义了被观察者的行为</p></li><li><p><code>observer</code> 的定义，定义了在所观察的事件发生时候的行为</p></li><li><p><code>subscribe</code> 的调用，连接了 <code>Observable</code> 和 <code>observer</code>，如果没有这个连接，什么都不会发生</p></li></ul><p>这三个语句职责单一且分明，提供了一种非常好的代码组织方式。</p><h4 id="问题-1：Observable-是异步的吗？"><a href="#问题-1：Observable-是异步的吗？" class="headerlink" title="问题 1：Observable 是异步的吗？"></a>问题 1：<code>Observable</code> 是异步的吗？</h4><p>看一下其内部实现，这完全取决于它的实现是否是异步调用了 <code>next</code>、<code>error</code> 和 <code>complete</code>。</p><h4 id="问题-2-RxJS-和-Observable-的关系"><a href="#问题-2-RxJS-和-Observable-的关系" class="headerlink" title="问题 2: RxJS 和 Observable 的关系"></a>问题 2: RxJS 和 Observable 的关系</h4><p>RXJS 在 <code>Observable</code> 的基础上，提供了大量的操作符，来帮助实现复杂的 <code>Observable</code> 行为定义。</p>]]></content>
    
    
    <summary type="html">二十行代码，搞懂 Observable</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Observable" scheme="https://jonty.top/tags/Observable/"/>
    
  </entry>
  
  <entry>
    <title>让泛型的思维扎根在脑海</title>
    <link href="https://jonty.top/2022/09/14/csharp-generic-review-03/"/>
    <id>https://jonty.top/2022/09/14/csharp-generic-review-03/</id>
    <published>2022-09-14T05:54:36.000Z</published>
    <updated>2022-09-14T07:48:45.987Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>往往一些刚接触C#编程的初学者，对于泛型的认识就是直接跳到对泛型集合的使用上，虽然微软为我们提供了很多内置的泛型类型，但是如果我们只是片面的了解调用方式，这会导致我们对泛型盲目的使用。至于<strong>为什么要使用泛型，什么情况下定义属于自己的泛型，定义泛型又能为程序带来哪些好处。</strong>要理清这些问题，我们就必须深刻理解泛型的本质，形成泛型编程的思维方式。</p></div><h2 id="需求-开发"><a href="#需求-开发" class="headerlink" title="需求 - 开发"></a>需求 - 开发</h2><p>接下来将基于一个基础示例，然后通过需求不断的演化示例，从而让泛型在关键时刻脱颖而出，以便让我们能够深刻体会泛型的作用。</p><p>假设.NET没有为我们提供用于存储数据的集合，而我们需要一个能够用于存储string元素的集合，基于这个情况我们自定义了一个用于存储字符串的集合类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayStr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStr</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items = <span class="keyword">new</span> <span class="built_in">string</span>[<span class="number">100</span>]; <span class="comment">//初始化存储元素的容量，只是为了演示故将容量定义为固定值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] _items; <span class="comment">//存储元素的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;   <span class="comment">//元素总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">string</span> item</span>) <span class="comment">//新增元素</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> <span class="keyword">this</span>[<span class="built_in">int</span> index] <span class="comment">//索引</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了验证自定义string集合的可行性，我们对其进行了如下的应用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArraryStr arraryStr = <span class="keyword">new</span> ArraryStr();</span><br><span class="line">arraryStr.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Console.WriteLine(arraryStr[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h2 id="新的需求-重复"><a href="#新的需求-重复" class="headerlink" title="新的需求 - 重复"></a>新的需求 - 重复</h2><p>目前对于创建string类型的集合已经大功告成，而此刻我们又接到了一个新的需求，即我们需要一个集合存储int类型的元素。基于自定义string集合的经验来看，我们可以发现，string集合类型和我们即将要创建的int集合类型的结构和内容几乎是一样的。这就意味着我们可以使用江湖盛行的“复制大法”，将之前的代码复制一遍，然后轻微修改下即可。下面是两个集合类型代码的对比图。</p><p><img data-src="https://cdn.jonty.top/img/722260-20220909092205696-401431564.png" alt="对比"></p><p>在早年有款热门的游戏叫做“大家来找茬”，该游戏主要玩法就是在两个大致相同的图片中，查找两者之间的细微差异之处。我们使用的“复制大法”，促使我们编写的代码形成了可以用于这个游戏游玩的场景。“对于上面的两个代码截图，你能找出图中不同的地方吗？”</p><p>对于软件开发者而言，面对的最主要的敌人就是“变化”，假设后面还会出现N个类型的元素需要我们定义集合来存储，那我们是不是要将相同的代码无穷尽的复制下去？</p><p><strong>DRY（Don’t Repeat Yourself，不要重复自己）</strong>，请记住这是作为一名软件开发者编码的原则，“复制大法”很明显的违背了这个原则。</p><h2 id="新的问题-安全-amp-性能"><a href="#新的问题-安全-amp-性能" class="headerlink" title="新的问题 - 安全&amp;性能"></a>新的问题 - 安全&amp;性能</h2><p>通过“复制，粘贴”的手段可以很明显的感受到我们在做重复的事情，在重复中我们可以发现：集合存储的类型在增加，但是集合的结构和添加元素的方法都是相同的逻辑。</p><p>简单来说就是，<strong>不同类型的处理，其处理逻辑都是类似的。</strong></p><p>基于这个特点，为了满足自定义集合能够应对所有类型的存储，我们必须使用一个通用类型来作为代表，此时此刻我们脑海中就能浮现出一句话：</p><p><strong>object是一切类型的基类</strong>。</p><p>这就意味着我们添加的所有类型，都可以隐式的转换为object类型，从而使得自定义集合可以添加任何类型的元素。让我们来运用这个object类型来试试：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayList</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span> &#123; _items = <span class="keyword">new</span> <span class="built_in">object</span>[<span class="number">100</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span>[] _items;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">object</span> item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">object</span> <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// END ArraryStr</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList arraryList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        arraryList.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        arraryList.Add(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> name = (<span class="built_in">string</span>)arraryList[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">int</span> age = (<span class="built_in">int</span>)arraryList[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// END Main（）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们结合了object是一切类型基类的特点，对集合类型进行改造，并成功的使用该方式的集合添加了不同类型的元素。</p><p>虽然在使用的角度来看已经完美无缺(可以添加任何类型)，但是获取集合元素进行赋值的时候，还使用了类型强制转换的手段。</p><p><strong>这种方式存在很严重的问题，主要包括以下两个方面：</strong></p><ol><li><strong>类型安全方面</strong>：如果集合的第一个元素是sting类型，但是你客观认为是int类型，于是你在获取时进行了int类型的强制转换，这个时候代码不会提示错误且可以正常编译，那么这就意味着程序在运行时会产生一个你无法预料的类型无效转换的异常。</li><li><strong>性能方面</strong>：值类型元素添加到集合时，必然会存在装箱操作；而在获取元素并赋值给一个值类型变量时，又会发生相应的拆箱操作。这种拆箱和装箱的操作，在操作大量元素时会大幅度的损失程序的性能。</li></ol><p>到目前位置，我们还是没有能创建一个能够存储任何类型的集合，但是我们可以对于上述的示例演变的过程进行一个总结：</p><p>对于不同类型有相同处理逻辑的情况，如果一味的复制会导致我们出现重复代码，如果使用object来作为解决重复的方案，会存在类型安全和性能的问题。</p><p>至于如何让彻底解决这些问题，这就要说到了本文讲解的主题——<strong>泛型</strong>。</p><h2 id="解决问题-代码模板"><a href="#解决问题-代码模板" class="headerlink" title="解决问题 - 代码模板"></a>解决问题 - 代码模板</h2><p>C#中有两种不同的机制来编写跨类型（一个类型代替多个类型）可复用的代码：继承和泛型。</p><p>继承的复用性来自于基类，而泛型的复用性是通过带有<code>占位符</code>的<strong>代码模板</strong>类型实现的。</p><p>继承实现复用是站在面向对象的角度思考的，而泛型的复用是站在实现特定功能上思考的。</p><p>相比于继承，泛型不用遵循里氏替换原则，并且能够<strong>提高类型的安全性，减少类型转换带来的拆箱和装箱</strong>。</p><h3 id="怎么样理解泛型？"><a href="#怎么样理解泛型？" class="headerlink" title="怎么样理解泛型？"></a>怎么样理解泛型？</h3><p><strong>泛型本质上相当于一种“代码模板”，可以用一套代码，为不同类型的同一逻辑使用统一的方式实现。</strong></p><p>其中“模板”一词的概念需要进行深刻的体会。例如，公司在招聘时会与用人方签订劳动合同，而这个劳动合同的主要内容对于所有人来说几乎都是一样的，只是在极个别的地方有所差异，如薪资、姓名等。所以公司不会为某个人（张三或李四）去特意的制定合同，而是会统一制定一份劳动合同作为模板，将其中针对个人存在差异的部分通过“下划线”进行占位预留，“下划线”的值将在签订合同时由具体的聘用者根据自身情况填写。</p><p><img data-src="https://cdn.jonty.top/img/722260-20220909094110950-1186053807.png" alt="合同模板"></p><p>对于这种模板方式的使用，公司在制定合同时则不用考虑签订合同的人具体是谁，因为劳动合同(模板)和使用者是分开的，所以公司只用专注于合同的主要内容即可。而我们在实际的编程运用中，使用泛型的目的，其实和公司制定通用的劳动合同模板是一个道理。假设你的公司需要雇佣100名员工时，你不希望为每一个人都制定一个专属的合同吧？假设你的代码中，如果遇到10个类型，它们的操作处理逻辑都一样时，你不希望为这个10个类型写10个处理方式吧？</p><p>通过上面的介绍和例子，接下来我们将泛型运用到我们的示例中来，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span>(<span class="params"></span>)</span> &#123; _items = <span class="keyword">new</span> T[<span class="number">100</span>]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] _items;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> _count;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Count</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _count; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">T item</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[_count] = item;</span><br><span class="line">        _count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> _items[index]; &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123; _items[index] = <span class="keyword">value</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// END ArraryStr</span></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ArrayList&lt;<span class="built_in">string</span>&gt; arraryStr = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        arraryStr.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        Console.WriteLine(arraryStr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;<span class="built_in">int</span>&gt; arraryInt = <span class="keyword">new</span> ArrayList&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">        arraryInt.Add(<span class="number">18</span>);</span><br><span class="line">        Console.WriteLine(arraryInt[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="comment">// END Main（）</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型参数"><a href="#类型参数" class="headerlink" title="类型参数"></a>类型参数</h3><p>在上面的代码中，我们将集合类型定义为了泛型类，该类型中出现的T属于泛型中的**类型参数(Type Parameter)**。</p><p>泛型为了达到通用处理的目的，所以不能将某个具体类型作为处理的目标类型，故而将要处理的类型用<code>T</code>作为一个类型占位符。</p><p><code>T</code>并不是真正的数据类型，它更像是泛型使用的类型蓝图，所以在使用时，泛型类型的消费者必须将一个具体类型作为<code>类型参数</code>传递到尖括号内，以此构造一个有明确处理类型的泛型实例。</p><p>所以我们在外部使用泛型时不能以：<code>ArraryList&lt;T&gt;list =new ArraryList&lt;T&gt;()</code>、<code>T t=new T()</code>这种方式去实例化泛型类型。</p><p>另外，<code>T</code>本身仅仅是类型参数的名称，它只是代表了类型参数的标识而已，这意味着我们可以使用其他字符来为类型参数命名，例如<code>TModel</code>、<code>YModel</code>等</p><h3 id="类型替换"><a href="#类型替换" class="headerlink" title="类型替换"></a>类型替换</h3><p>通过类型参数的使用我们可以得知，泛型类型代码在静态阶段没有明确的类型。</p><p>那么在程序运行的时候，它又是如何和使用时指定的“类型参数”进行对接的呢？</p><p>为了搞清楚这个问题，下面我们来了解下泛型运行时的本质。</p><p>我们编写的C#程序在编译后生成的代码，并不是计算机可以直接执行的代码，而是会生成<code>CIL</code>（通用中间语言）代码并包含在程序集中，如果想要生成计算机可执行的代码，则还需要<code>JIT</code>（即时编译器）对<code>CIL</code>代码进行二次编译。</p><p>然而泛型类型确认其具体类型的时机，就在<code>JIT</code>进行二次编译时，<code>JIT</code>编译的代码如果包含了泛型的内容，那么<strong>它会根据泛型类型的消费者指定的类型参数，将CIL中泛型代码中的占位符T替换为一个具体的类型，</strong>从而明确当前执行的泛型代码是针对哪个类型来使用的，其中替换的过程是由<code>CLR</code>在运行时进行主导，<code>JIT</code>来实际操作完成的。这个在运行时确认了类型的泛型又被称之为<strong>封闭类型</strong>，反之在运行时确认之前的泛型称为<code>开放类型</code>。</p><p><img data-src="https://cdn.jonty.top/img/722260-20220909093118831-581937293.png" alt="运行步骤"></p><p>泛型使用占位符在运行时替换具体类型的机制，其实和本文中例举劳动合同模板使用<code>下划线</code>的方式有同样的思想。</p><p>在指定劳动合同模板时，对于聘用者的姓名并不能写一个具体的名字，因为模板的目的是为了通用化，所以对于名字采用了“下划线”的方式。</p><p>当公司与某个具体的人签订合同的时候，劳动合同模板中的下划线将由聘用者根据自身情况填写。</p><p>回到泛型中其使用思想也是如此，我们使用泛型的目的是为了让多个类型的处理通用化，所以在定义泛型代码的时候并不能指定一个具体类型，故使用类型参数<code>T</code>进行代替，这个类型参数T就相当于劳动合同模板中的<code>下划线</code></p><p>当泛型在实际运行的时候，<code>JIT</code>会根据泛型消费者指定的具体类型与占位符<code>T</code>进行替换。</p><h2 id="总结问题"><a href="#总结问题" class="headerlink" title="总结问题"></a>总结问题</h2><p>本文并不是专门适用于介绍泛型的使用细节的文章，而是通过一个实例根据需求不断演化的过程，对泛型一步步深入，从而更加深刻的理解泛型的使用初衷，相比了解泛型<code>只言片语</code>而言，形成泛型的编程概念和思维显得尤为重要。</p><p>在泛型的机制中，我们可以将不同类型存在相同处理逻辑的情况，形成一个通用的方案，从而不在为特定的类型进行编码，用一套通用的代码模板会服务于更多的类型，并且在使用上能保证类型安全和提供良好的性能。</p><blockquote><p>作　　者： <strong><a href="https://home.cnblogs.com/u/green-jcx/">姜承轩</a></strong><br>出　　处：<a href="https://www.cnblogs.com/green-jcx/p/16671687.html">https://www.cnblogs.com/green-jcx/p/16671687.html</a></p></blockquote>]]></content>
    
    
    <summary type="html">让泛型的思维扎根在脑海 - 深刻理解泛型</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term=".NET" scheme="https://jonty.top/tags/NET/"/>
    
    <category term="Generic" scheme="https://jonty.top/tags/Generic/"/>
    
    <category term="CSharp" scheme="https://jonty.top/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>Grafana Loki搭建日志中心</title>
    <link href="https://jonty.top/2022/08/13/use-lpg-to-build-log-center/"/>
    <id>https://jonty.top/2022/08/13/use-lpg-to-build-log-center/</id>
    <published>2022-08-12T16:07:58.000Z</published>
    <updated>2022-08-12T16:14:52.970Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/logo_and_name.png" alt="Grafana loki"></p><p>Loki + Promtail + Grafana（简称LPG），LPG日志收集方案内存占用很少，它不像ELK日志系统那样为日志建立索引，而是为每个日志流设置一组标签。下面分别介绍下它的核心组件：</p><ul><li>Promtail：日志收集器，负责收集日志并将其发送给Loki，对标ELK中的Logstash。</li><li>Loki：聚合并存储日志数据和处理查询，可以作为Grafana的数据源，为Grafana提供可视化数据，对标ELK中的Elasticsearch</li><li>Grafana：从Loki中获取日志信息，进行可视化展示，对标ELK中的Kibana</li></ul><p><img data-src="https://cdn.jonty.top/img/lokiflow.png" alt="lokiflow"></p><p>LPG相较于ELK Stack有以下优势：</p><ul><li>Elasticsearch中的数据作为非结构化JSON对象存储在磁盘上，Loki以二进制的形式存储。</li><li>Elasticsearch采用全文索引，倒排索引的切分和共享的成本较高。Loki仅索引元数据，比如标签。</li><li>和Prometheus无缝集成。</li></ul><blockquote><p>官方文档：<a href="https://grafana.com/docs/loki/latest/">Grafana Loki docs</a></p><p>扩展阅读：</p><ul><li><a href="https://prometheus.io/docs/guides/dockerswarm/">Docker Swarm Prometheus</a></li><li><a href="https://grafana.com/docs/loki/latest/fundamentals/overview/comparisons/">比较|Grafana Loki</a></li></ul></blockquote><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img data-src="https://cdn.jonty.top/img/640%20(1).png" alt="日志存储架构"></p><h3 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h3><p>日志数据的写主要依托的是 <strong>Distributor</strong> 和 Ingester 两个组件，整体的流程如下：</p><p><img data-src="https://cdn.jonty.top/img/111.png" alt="write"></p><h3 id="Distributor"><a href="#Distributor" class="headerlink" title="Distributor"></a>Distributor</h3><p>一旦 Promtail 收集日志并将其发送给 Loki，Distributor 就是第一个接收日志的组件。</p><p>由于日志的写入量可能很大，所以不能在它们传入时将它们写入数据库，这会毁掉数据库，需要批处理和压缩数据。</p><p>Loki 通过构建压缩数据块来实现这一点，方法是在日志进入时对其进行 Gzip 操作，组件 Ingester 是一个有状态的组件，负责构建和刷新 Chunck，当 Chunk 达到一定的数量或者时间后，刷新到存储中去。</p><p>每个流的日志对应一个 Ingester，当日志到达 Distributor 后，根据元数据和 Hash 算法计算出应该到哪个 Ingester 上面。</p><p>此外，为了冗余和弹性，会将其复制 n（默认情况下为 3）次。</p><p><img data-src="https://cdn.jonty.top/img/Distributor%20.png" alt="Distributor "></p><h3 id="Ingester"><a href="#Ingester" class="headerlink" title="Ingester"></a>Ingester</h3><p>Ingester 接收到日志并开始构建 Chunk：</p><p><img data-src="https://cdn.jonty.top/img/Ingester.png" alt="Ingester"></p><p>将日志进行压缩并附加到 Chunk 上面。一旦 Chunk“填满”（数据达到一定数量或者过了一定期限），Ingester 将其刷新到数据库。</p><p>Loki对块和索引使用单独的数据库，因为它们存储的数据类型不同。</p><p>刷新一个 Chunk 之后，Ingester 然后创建一个新的空 Chunk 并将新条目添加到该 Chunk 中。</p><p><img data-src="https://cdn.jonty.top/img/Ingester1.png" alt="Ingester1"></p><h3 id="Querier"><a href="#Querier" class="headerlink" title="Querier"></a>Querier</h3><p>由 Querier 负责给定一个时间范围和标签选择器，Querier 查看索引以确定哪些块匹配，并通过 greps 将结果显示出来。它还从 Ingester 获取尚未刷新的最新数据。</p><p>对于每个查询，一个查询器将显示所有相关日志。实现了查询并行化，提供分布式 grep，使即使是大型查询也是足够的</p><p><img data-src="https://cdn.jonty.top/img/Querier.png" alt="Querier"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><blockquote><p>使用docker compose 统一部署需Loki、Promtail、Grafana这些服务</p></blockquote><h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><p>创建工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p lpg/loki/data</span><br><span class="line">mkdir -p lpg/promtail/logs</span><br><span class="line">mkdir -p lpg/grafana/data/</span><br><span class="line">chmod -R 777 lpg</span><br><span class="line"><span class="built_in">cd</span> lpg</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>创建docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi docker-compose.yml</span><br></pre></td></tr></table></figure><p>将以下内容复制进去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">loki:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-loki</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/loki:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3100:3100&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/loki/:/etc/loki/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/loki/data/:/tmp/loki/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/loki/loki.yaml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">promtail:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-promtail</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/promtail:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/promtail:/etc/promtail/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/promtail/logs/:/var/log/</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">-config.file=/etc/promtail/promtail.yml</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lpg-grafana</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3000:3000&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">promtail</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">loki</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># - GF_SERVER_ROOT_URL=http://gct-china.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GF_SECURITY_ADMIN_PASSWORD=bb123456</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/grafana/grafana.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/grafana/data/:/var/lib/grafana</span></span><br></pre></td></tr></table></figure><p>把Loki、Promtail、Grafana的配置文件挂载到宿主机上，在运行之前，需要先准备好这3个配置文件；</p><h3 id="loki-yml"><a href="#loki-yml" class="headerlink" title="loki.yml"></a>loki.yml</h3><p>Loki的配置文件<code>$PWD/loki/loki.yml</code>内容如下，使用的是默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi loki/loki.yml</span><br></pre></td></tr></table></figure><p><code>loki.yml</code></p><p>这里使用文件存储，映射目录为<code>/tmp/loki</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingester:</span></span><br><span class="line">  <span class="attr">lifecycler:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  <span class="comment"># loki访问路径</span></span><br><span class="line">    <span class="attr">ring:</span></span><br><span class="line">      <span class="attr">kvstore:</span></span><br><span class="line">        <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">      <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">final_sleep:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">chunk_idle_period:</span> <span class="string">5m</span></span><br><span class="line">  <span class="attr">chunk_retain_period:</span> <span class="string">30s</span></span><br><span class="line">  <span class="attr">wal:</span></span><br><span class="line">    <span class="attr">dir:</span> <span class="string">/tmp/wal</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-05-15</span></span><br><span class="line">    <span class="attr">store:</span> <span class="string">boltdb</span></span><br><span class="line">    <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">    <span class="attr">index:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">      <span class="attr">period:</span> <span class="string">168h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage_config:</span></span><br><span class="line">  <span class="attr">boltdb:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/index</span> <span class="comment">#自定义boltdb目录(在loki目录下新建data文件来存放</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/chunks</span> <span class="comment">#自定义filesystem目录(在loki目录下新建data文件来存放)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limits_config:</span></span><br><span class="line">  <span class="attr">enforce_metric_name:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">reject_old_samples:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">reject_old_samples_max_age:</span> <span class="string">168h</span></span><br></pre></td></tr></table></figure><p>官方默认配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">common:</span></span><br><span class="line">  <span class="attr">path_prefix:</span> <span class="string">/loki</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">filesystem:</span></span><br><span class="line">      <span class="attr">chunks_directory:</span> <span class="string">/loki/chunks</span></span><br><span class="line">      <span class="attr">rules_directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">instance_addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-10-24</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br></pre></td></tr></table></figure><h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auth_enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">3100</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ingester:</span></span><br><span class="line">  <span class="attr">lifecycler:</span></span><br><span class="line">    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">ring:</span></span><br><span class="line">      <span class="attr">kvstore:</span></span><br><span class="line">        <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">      <span class="attr">replication_factor:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">final_sleep:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">chunk_idle_period:</span> <span class="string">1h</span>       <span class="comment"># 在这段时间内没有接收到新日志的任何块都将被刷新</span></span><br><span class="line">  <span class="attr">max_chunk_age:</span> <span class="string">1h</span>           <span class="comment"># 所有块刷新实践，默认为 1h</span></span><br><span class="line">  <span class="attr">chunk_target_size:</span> <span class="number">1048576</span>  <span class="comment"># Loki 将尝试构建最大 1.5MB 的块，如果首先达到 chunk_idle_period 或 max_chunk_age，则首先刷新</span></span><br><span class="line">  <span class="attr">chunk_retain_period:</span> <span class="string">30s</span>    <span class="comment"># 如果使用索引缓存，则必须大于索引读取缓存 TTL（默认索引读取缓存 TTL 为 5m）</span></span><br><span class="line">  <span class="attr">max_transfer_retries:</span> <span class="number">0</span>     <span class="comment"># 块传输已禁用</span></span><br><span class="line"></span><br><span class="line"><span class="attr">schema_config:</span></span><br><span class="line">  <span class="attr">configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">from:</span> <span class="number">2020-10-24</span> <span class="comment"># 展示在此时间之后的数据</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">boltdb-shipper</span></span><br><span class="line">      <span class="attr">object_store:</span> <span class="string">filesystem</span>  <span class="comment"># 对象存储类型 </span></span><br><span class="line">      <span class="attr">schema:</span> <span class="string">v11</span></span><br><span class="line">      <span class="attr">index:</span></span><br><span class="line">        <span class="attr">prefix:</span> <span class="string">index_</span></span><br><span class="line">        <span class="attr">period:</span> <span class="string">24h</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage_config:</span></span><br><span class="line">  <span class="attr">boltdb_shipper:</span></span><br><span class="line">    <span class="attr">active_index_directory:</span> <span class="string">/loki/boltdb-shipper-active</span></span><br><span class="line">    <span class="attr">cache_location:</span> <span class="string">/loki/boltdb-shipper-cache</span></span><br><span class="line">    <span class="attr">cache_ttl:</span> <span class="string">24h</span>         <span class="comment"># Can be increased for faster performance over longer query periods, uses more disk space</span></span><br><span class="line">    <span class="attr">shared_store:</span> <span class="string">filesystem</span></span><br><span class="line">  <span class="attr">filesystem:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/loki/chunks</span> <span class="comment">#自定义filesystem目录(在loki目录下新建data文件来存放)</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">boltdb:</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">/tmp/loki/index</span> <span class="comment">#自定义boltdb目录(在loki目录下新建data文件来存放</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compactor:</span></span><br><span class="line">  <span class="attr">working_directory:</span> <span class="string">/loki/boltdb-shipper-compactor</span></span><br><span class="line">  <span class="attr">shared_store:</span> <span class="string">filesystem</span></span><br><span class="line"></span><br><span class="line"><span class="attr">limits_config:</span></span><br><span class="line">  <span class="attr">reject_old_samples:</span> <span class="literal">true</span>  <span class="comment"># 是否拒绝旧样本</span></span><br><span class="line">  <span class="attr">reject_old_samples_max_age:</span> <span class="string">168h</span> <span class="comment"># 168小时之前的样本被拒绝</span></span><br><span class="line">  <span class="attr">max_entries_limit_per_query:</span> <span class="number">9999</span> <span class="comment"># 最大查询行数</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chunk_store_config:</span></span><br><span class="line">  <span class="attr">max_look_back_period:</span> <span class="string">0s</span> <span class="comment"># 为避免查询超过保留期的数据，必须小于或等于下方的时间值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">table_manager:</span></span><br><span class="line">  <span class="attr">retention_deletes_enabled:</span> <span class="literal">false</span>  <span class="comment"># 保留删除是否删除</span></span><br><span class="line">  <span class="attr">retention_period:</span> <span class="string">0s</span> <span class="comment"># 72h 超过72h的块数据将被删除</span></span><br><span class="line"></span><br><span class="line"><span class="attr">ruler:</span></span><br><span class="line">  <span class="attr">storage:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">local:</span></span><br><span class="line">      <span class="attr">directory:</span> <span class="string">/loki/rules</span></span><br><span class="line">  <span class="attr">rule_path:</span> <span class="string">/loki/rules-temp</span></span><br><span class="line">  <span class="attr">alertmanager_url:</span> <span class="string">http://localhost:9093</span></span><br><span class="line">  <span class="attr">ring:</span></span><br><span class="line">    <span class="attr">kvstore:</span></span><br><span class="line">      <span class="attr">store:</span> <span class="string">inmemory</span></span><br><span class="line">  <span class="attr">enable_api:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>官方配置示例：<a href="https://grafana.com/docs/loki/latest/configuration/examples/">https://grafana.com/docs/loki/latest/configuration/examples/</a></p><p>存储切换：<a href="https://juejin.cn/post/6870533848644616206">https://juejin.cn/post/6870533848644616206</a></p><p>集群部署：<a href="https://zhuanlan.zhihu.com/p/373178364">https://zhuanlan.zhihu.com/p/373178364</a></p></blockquote><h3 id="promtail-yml"><a href="#promtail-yml" class="headerlink" title="promtail.yml"></a>promtail.yml</h3><p>Promtail的配置文件<code>$PWD/promtail/promtail.yml</code>内容如下，使用的也是默认配置，这里的<code>clients.url</code>需要注意下，由于使用的是<code>docker-compose</code>部署，可以将服务名称<code>loki</code>作为域名来访问Loki服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi promtail/promtail.yml</span><br></pre></td></tr></table></figure><p><code>promtail.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">http_listen_port:</span> <span class="number">9080</span></span><br><span class="line">  <span class="attr">grpc_listen_port:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">positions:</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">/tmp/positions.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">clients:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">http://loki:3100/loki/api/v1/push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">job:</span> <span class="string">varlogs</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">promtail</span></span><br><span class="line">      <span class="attr">__path__:</span> <span class="string">/var/log/*log</span></span><br></pre></td></tr></table></figure><blockquote><p>配置示例：<a href="https://grafana.com/docs/loki/latest/clients/promtail/configuration/#example-static-config">https://grafana.com/docs/loki/latest/clients/promtail/configuration/#example-static-config</a></p></blockquote><h3 id="grafana-ini"><a href="#grafana-ini" class="headerlink" title="grafana.ini"></a>grafana.ini</h3><p>Grafana的配置文件<code>$PWD/grafana/grafana.ini</code>内容如下，使用的也是默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://cdn.jonty.top/img/grafana.ini -o ./grafana/grafana.ini</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220812143852426.png" alt="image-20220812143852426"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>运行<code>docker-compose.yml</code>脚本安装所有服务，使用如下命令即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line">docker compose ps</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220812132457250.png" alt="image-20220812132457250"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h3><p>部署完成后登录<code>Grafana</code>，<a href="http://192.168.2.97:3000/">http://192.168.2.97:3000</a></p><p>初始账号密码：admin/admin  （根据配置参数：bb123456）</p><p><img data-src="https://cdn.jonty.top/img/image-20220812132735723.png" alt="image-20220812132735723"></p><p>修改新的密码后进入</p><p><img data-src="https://cdn.jonty.top/img/image-20220812132835834.png" alt="image-20220812132835834"></p><h4 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h4><p><img data-src="https://cdn.jonty.top/img/image-20220812132952221.png" alt="image-20220812132952221"></p><p>选择<code>Loki</code>，可以看到<code>Grafana</code>也支持<code>Elasticseach</code></p><p><img data-src="https://cdn.jonty.top/img/image-20220812133044599.png" alt="image-20220812133044599"></p><p>保存并测试</p><p><img data-src="https://cdn.jonty.top/img/image-20220812164333736.png" alt="image-20220812164333736"></p><h3 id="NuGet集成"><a href="#NuGet集成" class="headerlink" title="NuGet集成"></a>NuGet集成</h3><p>添加Serilog 的Loki扩展</p><ul><li>Serilog</li><li>Serilog.AspNetCore</li><li>Serilog.Sinks.Grafana.Loki</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Serilog.Sinks.Grafana.Loki</span><br></pre></td></tr></table></figure><p>仓库：<a href="https://github.com/serilog-contrib/serilog-sinks-grafana-loki">https://github.com/serilog-contrib/serilog-sinks-grafana-loki</a></p><p>案例：<a href="https://github.com/serilog-contrib/serilog-sinks-grafana-loki/tree/master/sample">https://github.com/serilog-contrib/serilog-sinks-grafana-loki/tree/master/sample</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Serilog.Debugging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Serilog.Sinks.Grafana.Loki.Sample</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> OutputTemplate =</span><br><span class="line">        <span class="string">&quot;&#123;Timestamp:dd-MM-yyyy HH:mm:ss&#125; [&#123;Level:u3&#125;] [&#123;ThreadId&#125;] &#123;Message&#125;&#123;NewLine&#125;&#123;Exception&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SelfLog.Enable(Console.Error);</span><br><span class="line"></span><br><span class="line">        Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">            .MinimumLevel.Debug()</span><br><span class="line">            .Enrich.WithThreadId()</span><br><span class="line">            .Enrich.WithProperty(<span class="string">&quot;meaning_of_life&quot;</span>, <span class="number">42</span>)</span><br><span class="line">            .WriteTo.Console(outputTemplate: OutputTemplate)</span><br><span class="line">            .WriteTo.GrafanaLoki(</span><br><span class="line">                <span class="string">&quot;http://192.168.2.97:3100&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> List&lt;LokiLabel&gt; &#123; <span class="keyword">new</span>() &#123; Key = <span class="string">&quot;app&quot;</span>, Value = <span class="string">&quot;console1&quot;</span> &#125; &#125;, <span class="comment">// label用户查询</span></span><br><span class="line">                credentials: <span class="literal">null</span>)</span><br><span class="line">            .CreateLogger();</span><br><span class="line"></span><br><span class="line">        Log.Debug(<span class="string">&quot;This is a debug message&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;Billy&quot;</span>, <span class="number">42</span>);</span><br><span class="line"></span><br><span class="line">        Log.Information(<span class="string">&quot;Person of the day: &#123;@Person&#125;&quot;</span>, person);</span><br><span class="line"></span><br><span class="line">        Log.Warning(<span class="string">&quot;道路千万条，安全第一条，行车不规范，亲人两行泪&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AccessViolationException(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.Error(ex, <span class="string">&quot;An error occured&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Log.CloseAndFlush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220812174006119.png" alt="image-20220812174006119"></p><h3 id="查询日志"><a href="#查询日志" class="headerlink" title="查询日志"></a>查询日志</h3><blockquote><p>官方文档：<a href="https://grafana.com/docs/loki/latest/logql/">https://grafana.com/docs/loki/latest/logql/</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220812174254586.png" alt="image-20220812174254586"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>把应用程序日志目录挂载到Promtail &gt; $PWD/promtail/logs/ <a href="#docker-compose.yml">目录</a>上，Promtail可以收集到日志</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  server_logs:</span><br><span class="line">  server_sysfiles:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  net:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  hostapi:</span><br><span class="line">    image: host_server:dev</span><br><span class="line">    networks:</span><br><span class="line">      - net</span><br><span class="line">    volumes:</span><br><span class="line"><span class="deletion">-     - &quot;server_logs:/app/App_Data/Logs&quot;</span></span><br><span class="line"><span class="addition">+     - $PWD/promtail/logs/:/app/App_Data/Logs</span></span><br><span class="line">      - &quot;server_sysfiles:/app/wwwroot/SysFiles&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://blog.csdn.net/wayne_primes/article/details/112467639">https://blog.csdn.net/wayne_primes/article/details/112467639</a></p></blockquote>]]></content>
    
    
    <summary type="html">Loki + Promtail + Grafana（简称LPG）, 提高更具成本效益的解决方案</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Grafana" scheme="https://jonty.top/tags/Grafana/"/>
    
    <category term="Loki" scheme="https://jonty.top/tags/Loki/"/>
    
    <category term="Promtail" scheme="https://jonty.top/tags/Promtail/"/>
    
    <category term="LPG" scheme="https://jonty.top/tags/LPG/"/>
    
  </entry>
  
  <entry>
    <title>【K8s】Kubernetes入门-02</title>
    <link href="https://jonty.top/2022/08/11/getting-started-with-kubernetes-02/"/>
    <id>https://jonty.top/2022/08/11/getting-started-with-kubernetes-02/</id>
    <published>2022-08-11T01:12:37.000Z</published>
    <updated>2022-08-11T03:00:24.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境规划"><a href="#环境规划" class="headerlink" title="环境规划"></a>环境规划</h2><h3 id="集群类型"><a href="#集群类型" class="headerlink" title="集群类型"></a>集群类型</h3><p>Kubernetes集群大体上分为两类：</p><ul><li><p>一主多从：一台Master节点和多台Node节点，搭建简单，但是有单机故障风险，适合用于测试环境</p></li><li><p>多主多从：多台Master节点和多台Node节点，搭建复杂，安全性高，适合用于生产环境</p></li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220807225935670.png" alt="image-20220807225935670"></p><h3 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h3><p>Kubernetes有多种部署方式，目前主流的方式有kubeadm、minikube、二进制包</p><ul><li>minikube：一个用于快速搭建单节点kubernetes的工具</li><li>kubeadm：一个用于快速搭建kubernetes集群的工具</li><li>二进制包：从官网下载每个组件的二进制包，依次安装，有助于理解kubernetes组件</li></ul><blockquote><p>说明：演示选择使用kubeadm方式安装集群环境</p></blockquote><h3 id="主机规划"><a href="#主机规划" class="headerlink" title="主机规划"></a>主机规划</h3><table><thead><tr><th>主机</th><th>IP</th><th>操作体统</th><th>配置</th></tr></thead><tbody><tr><td>master</td><td>192.168.2.94</td><td>CentOS7.6</td><td>4U8G 50G</td></tr><tr><td>node1</td><td>192.168.2.95</td><td>CentOS7.6</td><td>4U8G 50G</td></tr><tr><td>node2</td><td>192.168.2.96</td><td>CentOS7.6</td><td>4U8G 50G</td></tr></tbody></table><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次环境需要安装三台CentOS服务器（一主二从），然后在每台服务器分别安装Docker、Kubeadm、Kubelet、Kubectl</p><h3 id="主机安装"><a href="#主机安装" class="headerlink" title="主机安装"></a>主机安装</h3><p>安装三台服务器</p><p><img data-src="https://cdn.jonty.top/img/image-20220807231215279.png" alt="image-20220807231215279"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="检查系统版本"><a href="#检查系统版本" class="headerlink" title="检查系统版本"></a>检查系统版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 7.6.1810 (Core) </span><br></pre></td></tr></table></figure><blockquote><p>此方式安装Kubernetes集群要求CentOS版本在7.5以上</p></blockquote><h4 id="hosts配置"><a href="#hosts配置" class="headerlink" title="hosts配置"></a>hosts配置</h4><p>配置主机名解析，有DNS也可以直接配置DNS，方便后面集群节点之间的调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt;/etc/hosts</span></span><br><span class="line"><span class="string">192.168.2.94 master</span></span><br><span class="line"><span class="string">192.168.2.95 node1</span></span><br><span class="line"><span class="string">192.168.2.96 node2</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="时间同步配置"><a href="#时间同步配置" class="headerlink" title="时间同步配置"></a>时间同步配置</h4><p>集群中节点的时间必须精确一致</p><p>使用 <code>chronyd</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install -y chrony</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line">systemctl start chronyd</span><br><span class="line"><span class="comment">## 启用</span></span><br><span class="line">systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"><span class="comment">## 停止</span></span><br><span class="line">systemctl stop chronyd</span><br><span class="line"><span class="comment">## 禁用</span></span><br><span class="line">systemctl <span class="built_in">disable</span> chronyd</span><br></pre></td></tr></table></figure><p>使用 <code>ntp</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum install -y ntp</span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt;&gt;/var/spool/cron/root</span></span><br><span class="line"><span class="string">00 12 * * * /usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment">##查看计划任务</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="comment">##手动执行</span></span><br><span class="line">/usr/sbin/ntpdate -u ntp1.aliyun.com &amp;&amp; /usr/sbin/hwclock -w</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220807232320564.png" alt="image-20220807232320564"></p><h4 id="禁用iptable和firewalld服务"><a href="#禁用iptable和firewalld服务" class="headerlink" title="禁用iptable和firewalld服务"></a>禁用iptable和firewalld服务</h4><p>Kubernetes和Docker 在运行的中会产生大量的<code>iptables</code>规则，为了不让系统规则跟它们混淆，直接关闭系统的规则</p><p>关闭防火墙</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl stop firewalld</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl disable firewalld</span></span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br></pre></td></tr></table></figure><p>关闭iptables服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># systemctl stop iptables</span></span><br><span class="line">[root@master ~]<span class="comment"># systemctl disable iptables</span></span><br></pre></td></tr></table></figure><h4 id="selinux-配置"><a href="#selinux-配置" class="headerlink" title="selinux 配置"></a>selinux 配置</h4><p><code>selinux</code>是<code>linux</code>系统下的一个安全服务，如果不关闭它，在安装集群中会产生各种各样的奇葩问题</p><blockquote><p>需要重启生效</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"><span class="comment"># 临时关闭</span></span><br><span class="line">setenforce 0 </span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141956564.png" alt="image-20220808141956564"></p><h4 id="禁用swap分区"><a href="#禁用swap分区" class="headerlink" title="禁用swap分区"></a>禁用swap分区</h4><p>swap分区指的是虚拟内存分区，它的作用是物理内存使用完，之后将磁盘空间虚拟成内存来使用，启用swap设备会对系统的性能产生非常负面的影响</p><p>Kubernetes要求每个节点都要禁用swap设备，但是如果因为某些原因确实不能关闭swap分区，就需要在集群安装过程中通过明确的参数进行配置说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑分区配置文件/etc/fstab，注释掉swap分区一行</span></span><br><span class="line"><span class="comment"># 注意修改完毕之后需要重启linux服务</span></span><br><span class="line">vi /etc/fstab</span><br><span class="line">注释掉 /dev/mapper/centos-swap swap</span><br><span class="line"><span class="comment"># /dev/mapper/centos-swap swap</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -i <span class="string">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141929110.png" alt="image-20220808141929110"></p><h4 id="修改linux的内核参数"><a href="#修改linux的内核参数" class="headerlink" title="修改linux的内核参数"></a>修改linux的内核参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改linux的内核采纳数，添加网桥过滤和地址转发功能</span></span><br><span class="line"><span class="comment"># 编辑/etc/sysctl.d/kubernetes.conf文件，添加如下配置：</span></span><br><span class="line">vi /etc/sysctl.d/kubernetes.conf</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">[root@master ~]<span class="comment"># sysctl -p</span></span><br><span class="line"><span class="comment"># 加载网桥过滤模块</span></span><br><span class="line">[root@master ~]<span class="comment"># modprobe br_netfilter</span></span><br><span class="line"><span class="comment"># 查看网桥过滤模块是否加载成功</span></span><br><span class="line">[root@master ~]<span class="comment"># lsmod | grep br_netfilter</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141603448.png" alt="image-20220808141603448"></p><h4 id="配置ipvs功能"><a href="#配置ipvs功能" class="headerlink" title="配置ipvs功能"></a>配置ipvs功能</h4><p>在Kubernetes中Service有两种带来模型，一种是基于iptables的，一种是基于ipvs</p><p>两者比较的话，ipvs的性能明显要高一些，但是如果要使用它，需要手动载入ipvs模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.安装ipset和ipvsadm</span></span><br><span class="line">[root@master ~]<span class="comment"># yum install ipset ipvsadm -y</span></span><br><span class="line"><span class="comment"># 2.添加需要加载的模块写入脚本文件</span></span><br><span class="line">[root@master ~]<span class="comment"># cat &lt;&lt;EOF&gt; /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># 3.为脚本添加执行权限</span></span><br><span class="line">[root@master ~]<span class="comment"># chmod +x /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment"># 4.执行脚本文件</span></span><br><span class="line">[root@master ~]<span class="comment"># /bin/bash /etc/sysconfig/modules/ipvs.modules</span></span><br><span class="line"><span class="comment"># 5.查看对应的模块是否加载成功</span></span><br><span class="line">[root@master ~]<span class="comment"># lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808141545255.png" alt="image-20220808141545255"></p><h4 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># getenforce</span></span><br><span class="line">Disabled</span><br><span class="line">[root@master ~]<span class="comment"># free -m</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           7821         149        7478           8         192        7422</span><br><span class="line">Swap:             0           0           0</span><br></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br><span class="line"></span><br><span class="line">mkdir /etc/docker</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/docker/daemon.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">&quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;: [&quot;https://evcbq79g.mirror.aliyuncs.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用docker</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808144501504.png" alt="image-20220808144501504"></p><blockquote><p><a href="https://blog.51cto.com/riverxyz/2537914">为什么要修改docker的cgroup driver</a></p><p><a href="https://www.simaek.com/archives/280/">修改Docker的Cgroup Driver为systemd，替换默认的cgroupfs</a></p></blockquote><h3 id="安装Kubernetes组件"><a href="#安装Kubernetes组件" class="headerlink" title="安装Kubernetes组件"></a>安装Kubernetes组件</h3><h4 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgchech=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br></pre></td></tr></table></figure><h4 id="安装kubeadm、kubelet和kubectl"><a href="#安装kubeadm、kubelet和kubectl" class="headerlink" title="安装kubeadm、kubelet和kubectl"></a>安装kubeadm、kubelet和kubectl</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># yum install --setopt=obsoletes=0 kubeadm-1.17.4-0 kubelet-1.17.4-0 kubectl-1.17.4-0 -y</span></span><br><span class="line"></span><br><span class="line"> yum install -y kubeadm kubelet kubectl </span><br></pre></td></tr></table></figure><h4 id="配置kubelet的cgroup"><a href="#配置kubelet的cgroup" class="headerlink" title="配置kubelet的cgroup"></a>配置kubelet的cgroup</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;<span class="string">EOF&gt; /etc/sysconfig/kubelet</span></span><br><span class="line"><span class="string">KUBELET_CGROUP_ARGS=&quot;--cgroup-driver=systemd&quot;</span></span><br><span class="line"><span class="string">KUBE_PROXY_MODE=&quot;ipvs&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="设置kubelet开机自启"><a href="#设置kubelet开机自启" class="headerlink" title="设置kubelet开机自启"></a>设置kubelet开机自启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start kubelet</span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808145907841.png" alt="image-20220808145907841"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># systemctl enable kubelet</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /usr/lib/systemd/system/kubelet.service.</span><br></pre></td></tr></table></figure><h3 id="准备集群镜像"><a href="#准备集群镜像" class="headerlink" title="准备集群镜像"></a>准备集群镜像</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><p>在安装kubernetes集群之前，必须要提前准备好集群需要的镜像，所需镜像可以通过下面命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># kubeadm config images list</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220808153955718.png" alt="image-20220808153955718"></p><h4 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h4><p>国内无法拉取上述镜像，可以通过<code>aliyun</code>代理拉取，也可以直接执行下面语句</p><blockquote><p>我先在香港服务器上拉取然后推送的Docker Hub</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">images=(</span><br><span class="line"> kube-apiserver:v1.17.17</span><br><span class="line">     kube-controller-manager:v1.17.17</span><br><span class="line">     kube-scheduler:v1.17.17</span><br><span class="line">     kube-proxy:v1.17.17</span><br><span class="line">     pause:3.1</span><br><span class="line">     etcd:3.4.3-0</span><br><span class="line">     coredns:1.6.5</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span>;<span class="keyword">do</span></span><br><span class="line">docker pull jontymax/<span class="variable">$imageName</span></span><br><span class="line">docker tag jontymax/<span class="variable">$imageName</span> k8s.gcr.io/<span class="variable">$imageName</span></span><br><span class="line">docker rmi jontymax/<span class="variable">$imageName</span> </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><p>对集群进行初始化，并将node节点加入到集群中</p><blockquote><p><code>master</code>节点执行</p></blockquote><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">   --image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--apiserver-advertise-address=192.168.2.94 \</span><br><span class="line">--kubernetes-version=v1.17.4 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 </span><br></pre></td></tr></table></figure><h4 id="重置集群"><a href="#重置集群" class="headerlink" title="重置集群"></a>重置集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm reset -f</span><br></pre></td></tr></table></figure><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809102933345.png" alt="image-20220809102933345"></p><h4 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.2.94:6443 --token dl0jdc.tby7pc1yd2q37wws \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:0210b33b1b18e09cd32e0c6b3a1afa7f5a1e2f8c93f9fa5ccf156a9245fa51d6</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809103525615.png" alt="image-20220809103525615"></p><h4 id="查看节点"><a href="#查看节点" class="headerlink" title="查看节点"></a>查看节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809103828566.png" alt="image-20220809103828566"></p><h3 id="安装网络插件"><a href="#安装网络插件" class="headerlink" title="安装网络插件"></a>安装网络插件</h3><p>Kubernetes支持多种网络插件，比如flannel、calico、canal等</p><blockquote><p>只需要在master节点执行即可，插件使用的是DaemonSet的控制器，会在每个节点运行</p></blockquote><h4 id="下载配置文件"><a href="#下载配置文件" class="headerlink" title="下载配置文件"></a>下载配置文件</h4><p>获取配置文件，根目录即可<code>/root/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jonty.top/img/kube-flannel.yml">kube-flannel.yml</a></p><h4 id="启动flannel"><a href="#启动flannel" class="headerlink" title="启动flannel"></a>启动flannel</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809134455940.png" alt="image-20220809134455940"></p><h4 id="查看节点状态"><a href="#查看节点状态" class="headerlink" title="查看节点状态"></a>查看节点状态</h4><p>稍等片刻，集群node节点<code>Ready</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure><p>至此，Kubernetes集群环境搭建完成</p><p><img data-src="https://cdn.jonty.top/img/image-20220809133903974.png" alt="image-20220809133903974"></p><h2 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h2><p>在K8s集群中部署Nginx服务，测试集群是否正常</p><blockquote><p>master节点执行</p></blockquote><h3 id="Nginx服务"><a href="#Nginx服务" class="headerlink" title="Nginx服务"></a>Nginx服务</h3><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment nginx  --image=nginx:1.14-alpine</span><br></pre></td></tr></table></figure><h4 id="暴露端口"><a href="#暴露端口" class="headerlink" title="暴露端口"></a>暴露端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deploy nginx  --port=80 --target-port=80  --<span class="built_in">type</span>=NodePort</span><br></pre></td></tr></table></figure><h4 id="查看服务"><a href="#查看服务" class="headerlink" title="查看服务"></a>查看服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br><span class="line">kubectl get service</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220809135611076.png" alt="image-20220809135611076"></p><h4 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h4><p>使用任意node IP 加端口访问</p><p>192.168.2.94:32148</p><p><img data-src="https://cdn.jonty.top/img/image-20220809135533022.png" alt="image-20220809135533022"></p><p><strong>参考文档</strong>：</p><ul><li><p><a href="https://github.com/containerd/containerd/issues/4581">Kubeadm unknown service runtime.v1alpha2.RuntimeService ·第4581期 ·集装箱/集装箱式 (github.com)</a></p></li><li><p><a href="https://www.jianshu.com/p/a167b80c89b8">初始化 init 报错</a></p></li><li><p><a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY</a></p></li></ul>]]></content>
    
    
    <summary type="html">Kubernetes入门 - Kubeadm搭建集群</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
  </entry>
  
  <entry>
    <title>【K8s】Kubernetes入门-01</title>
    <link href="https://jonty.top/2022/08/10/getting-started-with-kubernetes-01/"/>
    <id>https://jonty.top/2022/08/10/getting-started-with-kubernetes-01/</id>
    <published>2022-08-10T09:54:48.000Z</published>
    <updated>2022-08-12T15:41:10.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方文档：<a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/">https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/</a></p></blockquote><h2 id="应用部署方式演变"><a href="#应用部署方式演变" class="headerlink" title="应用部署方式演变"></a>应用部署方式演变</h2><p><img data-src="https://cdn.jonty.top/img/image-20220807221451189.png" alt="image-20220807221451189"></p><p>在部署应用程序的方式上，主要经历了三个时代：</p><p><strong>传统部署</strong>：互联网早期，会直接将应用程序部署在物理机上</p><blockquote><p>优点：简单，不需要其它技术的参与</p><p>缺点：不能为应用程序定义资源使用边界，很难合理地分配计算资源，而且程序之间容易产生影响</p></blockquote><p><strong>虚拟化部署</strong>：可以在一台物理机上运行多个虚拟机，每个虚拟机都是独立的一个环境</p><blockquote><p>优点：程序环境不会相互产生影响，提供了一定程度的安全性</p><p>缺点：增加了操作系统，浪费了部分资源</p></blockquote><p><strong>容器化部署</strong>：与虚拟化类似，但是共享了操作系统</p><blockquote><p>优点：</p><p>可以保证每个容器拥有自己的文件系统、CPU、内存、进程空间等</p><p>运行应用程序所需要的资源都被容器包装，并和底层基础架构解耦</p><p>容器化的应用程序可以跨云服务商、跨Linux操作系统发行版进行部署</p></blockquote><p>容器化部署方式给带来很多的便利，但是也会出现一些问题，比如说：</p><ul><li>一个容器故障停机了，怎么样让另外一个容器立刻启动去替补停机的容器</li><li>当并发访问量变大的时候，怎么样做到横向扩展容器数量</li></ul><p>这些容器管理的问题统称为<strong>容器编排</strong>问题，为了解决这些容器编排问题，就产生了一些容器编排的软件：</p><ul><li><strong>Swarm</strong>：Docker容器编排工具</li><li><strong>Mesos</strong>：Apache的一个资源统一管控的工具，需要和Marathon结合使用</li><li><strong>Kubernetes</strong>：Google开源的的容器编排工具</li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220807221546165.png" alt="image-20220807221546165"></p><h2 id="Kubernetes简介"><a href="#Kubernetes简介" class="headerlink" title="Kubernetes简介"></a>Kubernetes简介</h2><p><img data-src="https://cdn.jonty.top/img/image-20220807222351461.png" alt="kubbernetes"></p><div class="note info"><p><a href="https://kubernetes.io/zh-cn/docs/concepts/overview/what-is-kubernetes/">Kubernetes</a>，是一个全新的基于容器技术的分布式架构领先方案，是谷歌严格保密十几年的秘密武器—-Borg系统的一个开源版本，于2014年9月发布第一个版本，2015年7月发布第一个正式版本。</p><p>Kubernetes的本质是<strong>一组服务器集群</strong>，它可以在集群的每个节点上运行特定的程序，来对节点中的容器进行管理。目的是实现资源管理的自动化，主要提供了如下的主要功能：</p><ul><li><strong>自我修复</strong>：一旦某一个容器崩溃，能够在1秒中左右迅速启动新的容器</li><li><strong>弹性伸缩</strong>：可以根据需要，自动对集群中正在运行的容器数量进行调整</li><li><strong>服务发现</strong>：服务可以通过自动发现的形式找到它所依赖的服务</li><li><strong>负载均衡</strong>：如果一个服务起动了多个容器，能够自动实现请求的负载均衡</li><li><strong>版本回退</strong>：如果发现新发布的程序版本有问题，可以立即回退到原来的版本</li><li><strong>存储编排</strong>：可以根据容器自身的需求自动创建存储卷</li></ul></div><h2 id="Kubernetes概念"><a href="#Kubernetes概念" class="headerlink" title="Kubernetes概念"></a>Kubernetes概念</h2><p><img data-src="https://cdn.jonty.top/img/kwob90mh.png" alt="cluster"></p><p><strong>Master</strong></p><p>主节点，控制平台，不需要很高性能，不跑任务，通常一个就行了，也可以开多个主节点来提高集群可用度。</p><p><strong>Worker</strong></p><p>工作节点，可以是虚拟机或物理计算机，任务都在这里跑，机器性能需要好点；通常都有很多个，可以不断加机器扩大集群；每个工作节点由主节点管理</p><p><strong>Pod</strong></p><p>豆荚，K8S 调度、管理的最小单位，一个 Pod 可以包含一个或多个容器，每个 Pod 有自己的虚拟IP。一个工作节点可以有多个 pod，主节点会考量负载自动调度 pod 到哪个节点运行。</p><p><strong>Controller</strong></p><p>控制器，通过它来实现对pod的管理，比如启动pod、停止pod、伸缩pod的数量等等</p><p><strong>Service</strong></p><p>pod对外服务的统一入口，下面可以维护者同一类的多个pod</p><p><strong>Label</strong></p><p>标签，用于对pod进行分类，同一类pod会拥有相同的标签</p><p><strong>NameSpace</strong></p><p>命名空间，用来隔离pod的运行环境</p><p><img data-src="https://cdn.jonty.top/img/kwoccq7d.png" alt="kwoccq7d"></p><h2 id="Kubernetes组件"><a href="#Kubernetes组件" class="headerlink" title="Kubernetes组件"></a>Kubernetes组件</h2><p>一个kubernetes集群主要是由**控制节点(master)<strong>、</strong>工作节点(node)**构成，每个节点上都会安装不同的组件。</p><p><strong>master：集群的控制平面，负责集群的决策 ( 管理 )</strong></p><blockquote><p><strong>ApiServer</strong> : 资源操作的唯一入口，接收用户输入的命令，提供认证、授权、API注册和发现等机制</p><p><strong>Scheduler</strong> : 负责集群资源调度，按照预定的调度策略将Pod调度到相应的node节点上</p><p><strong>ControllerManager</strong> : 负责维护集群的状态，比如程序部署安排、故障检测、自动扩展、滚动更新等</p><p><strong>Etcd</strong> ：负责存储集群中各种资源对象的信息</p></blockquote><p><strong>node：集群的数据平面，负责为容器提供运行环境 ( 干活 )</strong></p><blockquote><p><strong>Kubelet</strong> : 负责维护容器的生命周期，即通过控制docker，来创建、更新、销毁容器</p><p><strong>KubeProxy</strong> : 负责提供集群内部的服务发现和负载均衡</p><p><strong>Docker</strong> : 负责节点上容器的各种操作</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220807223447040.png" alt="image-20220807223447040"></p><p>下面，以部署一个nginx服务来说明kubernetes系统各个组件调用关系：</p><ol><li><p>首先要明确，一旦kubernetes环境启动之后，master和node都会将自身的信息存储到etcd数据库中</p></li><li><p>一个nginx服务的安装请求会首先被发送到master节点的apiServer组件</p></li><li><p>apiServer组件会调用scheduler组件来决定到底应该把这个服务安装到哪个node节点上</p><p>在此时，它会从etcd中读取各个node节点的信息，然后按照一定的算法进行选择，并将结果告知apiServer</p></li><li><p>apiServer调用controller-manager去调度Node节点安装nginx服务</p></li><li><p>kubelet接收到指令后，会通知docker，然后由docker来启动一个nginx的pod</p><p>pod是kubernetes的最小操作单元，容器必须跑在pod中</p></li><li><p>至此一个nginx服务就运行了，如果需要访问nginx，就需要通过kube-proxy来对pod产生访问的代理</p></li></ol><p>这样，外界用户就可以访问集群中的nginx服务了</p><p><img data-src="https://sjwx.easydoc.xyz/46901064/files/kwonmx7e.png" alt="img"></p><h2 id="什么时候需要-Kubernetes"><a href="#什么时候需要-Kubernetes" class="headerlink" title="什么时候需要 Kubernetes"></a>什么时候需要 Kubernetes</h2><ul><li>当你的应用只是跑在一台机器，直接一个 docker + docker compose 就够了，方便轻松；</li><li>当你的应用需要跑在 3、4 台机器上，依旧可以每台机器单独配置运行环境 + 负载均衡器；</li><li>当你应用访问数不断增加，机器逐渐增加到十几台、上百台、上千台时，每次加机器、软件更新、版本回滚，都会变得非常麻烦、痛不欲生，再也不能好好的摸鱼了，人生浪费在那些没技术含量的重复性工作上。</li></ul><p>这时候，Kubernetes 就可以一展身手了，让你轻松管理百万千万台机器的集群。“谈笑间，樯橹灰飞烟灭”，享受着一手掌控所有，年薪百万指日可待。</p><p>Kubernetes 可以为你提供集中式的管理集群机器和应用，加机器、版本升级、版本回滚，那都是一个命令就搞定的事，不停机的灰度更新，确保高可用、高性能、高扩展。</p><p><strong>参考文档</strong>：</p><blockquote><p><a href="https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY">https://k8s.easydoc.net/docs/dRiQjyTY/28366845/6GiNOzyZ/nd7yOvdY</a></p></blockquote>]]></content>
    
    
    <summary type="html">Kubernetes入门 - K8s介绍</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="K8s" scheme="https://jonty.top/tags/K8s/"/>
    
    <category term="Kubernetes" scheme="https://jonty.top/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>【随笔】那就做吧~</title>
    <link href="https://jonty.top/2022/07/24/220724-share-essays/"/>
    <id>https://jonty.top/2022/07/24/220724-share-essays/</id>
    <published>2022-07-24T13:57:15.000Z</published>
    <updated>2022-09-14T03:05:26.710Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/1663124663138.jpg" alt="20220724"></p><p>人们总是愿意期望未来，而不是回顾过去，所以总是在一个地方摔倒，再爬起来，拍拍尘土，咒骂一句，头也不回的继续走下去。</p><p>至于为什么摔倒了，才不会去深究，毕竟谁会承认自己的无能，和自己过意不去呢。他们这样走下去，走的人多了，同行的也就多了，群体性的行为会给他们力量，让他们在前行的路上彼此温暖和给予勇气。</p><p>以上，是一个遵从内心选择，走了一条僻静小路的人，看到一群人的时候，说那是酸葡萄的样子。</p><p>小站开通马上一年了，也分享了一些工作记录。在海滩边捡贝壳，觉得每一片都非常漂亮，想要分享给世界，然后久了发现，世界上的这些东西，没有什么是独一无二的。而那些灿烂的星河，在那里早有人总结和分享好了。</p><p>如果想的太透彻，大概就没什么意思了，所以还是要像个孩子一样，为一点小发现惊奇激动，欢呼雀跃。</p><p>2022年大概是心智启蒙的一年，开始真正意义上的思考这一切。有可能是阅历稍微多了一些，看问题和思考的角度都更多了一些。</p><p>我们期望未来，期望改变，而做出的努力太少，所以每年都是一样的满怀憧憬，每年都一样的重蹈覆辙。我不愿如此。</p><p>那就做吧。 </p>]]></content>
    
    
    <summary type="html">间歇性踌躇满志，持续性混吃等死</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core DI最佳实践</title>
    <link href="https://jonty.top/2022/07/24/asp-net-core-dependency-injection/"/>
    <id>https://jonty.top/2022/07/24/asp-net-core-dependency-injection/</id>
    <published>2022-07-24T07:52:44.000Z</published>
    <updated>2022-07-24T08:01:06.811Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/v2-3c666abe2c87ada09002ceaf0557ea62_1440w.jpg" alt="Dependency Injection"></p><div class="note info"><p>本文主要分享在ASP.NETCore中使用<strong>依赖注入</strong>的经验和建议，主要有以下作用：</p><ul><li>有效设计服务及其依赖项</li><li>防止多线程问题</li><li>防止内存泄漏</li><li>防止潜在的错误</li></ul><blockquote><p>官方文档<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-6.0">Dependency injection in ASP.NET Core | Microsoft Docs</a></p></blockquote></div><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="构造函数注入-Constructor-injection"><a href="#构造函数注入-Constructor-injection" class="headerlink" title="构造函数注入(Constructor injection)"></a>构造函数注入(Constructor injection)</h3><p>构造函数注入用于声明和获取服务对<strong>服务构造</strong>的依赖关系。例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IProductRepository productRepository</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository = productRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository.Delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductService</code> 将 <code>IProductRepository</code> 作为其构造函数中的依赖项注入，然后在<code>Delete</code>方法中使用它。</p><p><strong>最佳实践：</strong></p><ul><li>在服务构造函数中<strong>显示定义</strong>所需的依赖项，如果没有其依赖项，就无法构造服务</li><li>将注入的依赖项分配给只读字段/属性（防止在使用过程中意外赋值）</li></ul><h3 id="属性注入（Property-Injection）"><a href="#属性注入（Property-Injection）" class="headerlink" title="属性注入（Property Injection）"></a>属性注入（Property Injection）</h3><p>ASP.NETCore自带的容器（Microsoft.Extensions.DependencyInjection）<strong>不支持属性注入</strong>，可以使用其他支持属性注入的容器。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging.Abstractions;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MyApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> ILogger&lt;ProductService&gt; Logger &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IProductRepository productRepository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _productRepository = productRepository;</span><br><span class="line">            Logger = NullLogger&lt;ProductService&gt;.Instance;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _productRepository.Delete(id);</span><br><span class="line">            Logger.LogInformation(</span><br><span class="line">                <span class="string">$&quot;Deleted a product with id = <span class="subst">&#123;id&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductService</code> 使用<strong>公共 setter</strong> 声明一个 <code>Logger</code> 属性。依赖注入容器可以设置Logger，如果它是可用的（之前注册给DI容器）。</p><p><strong>最佳实践：</strong></p><ul><li>仅对<strong>可选依赖项</strong>使用属性注入，服务可以在不提供这些依赖项<strong>的情况下</strong>正常工作。</li><li>使用Null对象模式，或者在使用时检查<code>null</code></li></ul><h3 id="服务定位器-Service-Locator"><a href="#服务定位器-Service-Locator" class="headerlink" title="服务定位器(Service Locator)"></a>服务定位器(Service Locator)</h3><p>服务定位器模式是获取依赖项的另一种方法。</p><blockquote><p><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.iserviceprovider?view=net-6.0">IServiceProvider 接口 (System) | Microsoft Docs</a></p></blockquote><p>例：</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IProductRepository _productRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ProductService&gt; _logger;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProductService</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository = serviceProvider</span><br><span class="line">          .GetRequiredService&lt;IProductRepository&gt;();</span><br><span class="line">        _logger = serviceProvider</span><br><span class="line">          .GetService&lt;ILogger&lt;ProductService&gt;&gt;() ??</span><br><span class="line">            NullLogger&lt;ProductService&gt;.Instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _productRepository.Delete(id);</span><br><span class="line">        _logger.LogInformation(<span class="string">$&quot;Deleted a product with id = <span class="subst">&#123;id&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProductService</code> 注入 <strong>IServiceProvider</strong> 并使用它来解析依赖关系。</p><p>如果之前未注册所请求的依赖项，<strong>GetRequiredService</strong> 将引发异常。另一方面，在这种情况下，<strong>GetService</strong> 只返回 <code>null</code>。</p><p>在<strong>构造函数</strong>中解析服务时，它们会在服务被释放时被释放。因此，不需要关心释放/处置在构造函数中解析的服务（就像构造函数和属性注入一样）</p><p><strong>最佳实践</strong>：</p><ul><li><strong>尽可能不要使用</strong>服务定位器模式,因为它使依赖关系隐含起来。在创建服务实例时不能看到依赖关系，影响单元测试。</li><li>在服务<strong>构造函数</strong>中解决依赖关系，在服务方法中解决会使你的应用程序更加复杂和容易出错</li></ul><h3 id="服务生命周期"><a href="#服务生命周期" class="headerlink" title="服务生命周期"></a>服务生命周期</h3><p><img data-src="https://cdn.jonty.top/img/1_lT0wIkqAgpbxpyY6fw0lOA.png" alt="生命周期"></p><p>ASP.NET Core依赖注入中有三种服务生命周期：</p><ul><li><h3 id="Transient"><a href="#Transient" class="headerlink" title="Transient"></a>Transient</h3><p><strong>瞬时服务</strong>在每次注入或请求服务时都会创建服务</p></li><li><h3 id="Scoped"><a href="#Scoped" class="headerlink" title="Scoped"></a>Scoped</h3><p><strong>作用域服务</strong>是按作用域创建的。在 Web 应用程序中，每个 Web 请求都会创建一个新的分隔服务作用域，根据 Web 请求创建作用域服务。</p></li><li><h3 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h3><p><strong>单例</strong>服务是按 DI 容器创建的。这通常意味着每个应用程序<strong>只创建一次</strong>，然后在整个应用程序生命周期内使用.</p></li></ul><blockquote><p> <a href="https://docs.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes">.NET | 中的依赖关系注入微软文档 (microsoft.com)</a></p></blockquote><p>DI容器保持对所有已解决的服务的跟踪。服务在其生命周期结束时被释放和处置。</p><ul><li>如果服务具有依赖项，则还会自动释放和释放这些<strong>依赖项</strong>。</li><li>如果服务实现了<strong>IDisposable</strong>接口，<code>Dispose</code>方法会在服务释放时被自动调用。</li></ul><p><strong>最佳实践</strong>：</p><ul><li><strong>尽可能地</strong>将服务注册为<strong>瞬时服务</strong>。因为设计瞬时服务很简单。一般不关心<strong>多线程</strong>和<strong>内存泄漏</strong>，服务的生命周期很短。</li><li><strong>谨慎</strong>使用作用域服务生命周期，因为如果创建子服务作用域或从非 Web 应用程序使用这些服务可能存在问题。</li><li><strong>谨慎</strong>使用<strong>单例生命周期</strong>，需要处理多线程和潜在的内存泄漏问题。</li><li><strong>不要依赖单例服务中</strong>的<strong>瞬时</strong>或<strong>范围服务</strong>。 因为当单例服务注入<strong>瞬时服务</strong>时，瞬态服务会变成<strong>单例</strong>实例，如果瞬时服务不是为支持这种情况而设计的，则可能会导致问题。 在这种情况下，ASP.NET Core 的默认 DI 容器已经抛出异常。</li></ul><h3 id="在方法中解析服务"><a href="#在方法中解析服务" class="headerlink" title="在方法中解析服务"></a>在方法中解析服务</h3><p>在某些情况下，可能需要在服务的方法中解析另一个服务。 </p><p>在这种情况下，请确保在使用后释放服务。 </p><p>最佳方法是<strong>创建服务范围（Scope）</strong>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PriceCalculator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _serviceProvider;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriceCalculator</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _serviceProvider = serviceProvider;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">Calculate</span>(<span class="params">Product product, <span class="built_in">int</span> count,</span></span></span><br><span class="line"><span class="params"><span class="function">      Type taxStrategyServiceType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = _serviceProvider.CreateScope())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> taxStrategy = (ITaxStrategy)scope.ServiceProvider</span><br><span class="line">              .GetRequiredService(taxStrategyServiceType);</span><br><span class="line">            <span class="keyword">var</span> price = product.Price * count;</span><br><span class="line">            <span class="keyword">return</span> price + taxStrategy.CalculateTax(price);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PriceCalculator</code> 在其构造函数中注入<code>IServiceProvider</code>并将其分配给一个字段。 <code>PriceCalculator</code> 然后在<code>Calculate</code> 方法中使用它来创建子服务范围。 它使用 <code>scope.ServiceProvider</code> 来解析服务，而不是注入的 <code>_serviceProvider</code> 实例。 因此，从范围解析的所有服务都会在 <code>using</code> 语句的末尾<strong>自动释放</strong>。</p><p><strong>最佳实践</strong>：</p><ul><li>如果要解析方法体中的服务，请始终创建<strong>子服务作用域</strong>，以确保正确释放已解析的服务</li><li>如果一个方法获取 <strong>IServiceProvider</strong> 作为参数，那么可以直接从中解析服务，而无需关心释放。 创建/管理服务范围是调用方法的代码的责任。 遵循这个原则可以让代码更干净。</li><li><strong>不要保留对已解析服务的引用</strong>！否则，它可能会导致内存泄漏，并且稍后使用对象引用时将访问<strong>已释放的服务</strong>（除非已解析的服务是单例）。</li></ul><h3 id="单例服务-Singleton-Services"><a href="#单例服务-Singleton-Services" class="headerlink" title="单例服务(Singleton Services)"></a>单例服务(Singleton Services)</h3><p>单例服务通常旨在保持应用程序状态。 缓存是应用程序状态的一个很好的例子。</p><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FileService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt; _cache;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _cache = <span class="keyword">new</span> ConcurrentDictionary&lt;<span class="built_in">string</span>, <span class="built_in">byte</span>[]&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">byte</span>[] <span class="title">GetFileContent</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _cache.GetOrAdd(filePath, _ =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> File.ReadAllBytes(filePath);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件服务只是缓存文件内容以减少磁盘读取。此服务应注册为单例，否则，缓存将无法按预期工作。</p><p><strong>最佳实践：</strong></p><ul><li><p>如果服务保持状态，则应以<strong>线程安全</strong>的方式访问该状态。因为所有请求同时使用同一服务<strong>实例</strong>。使用 <strong>ConcurrentDictionary</strong> 而不是 <strong>Dictionary</strong> 来确保线程安全。</p></li><li><p>不要使用来自<strong>单例服务的作用域或瞬态</strong>服务。因为，<strong>瞬时服务</strong>可能未设计为线程安全。如果必须使用它们，在使用这些服务时注意多线程（例如使用锁）。</p></li><li><p><strong>内存泄漏</strong>通常是由<strong>单例服务引起</strong>的。在<strong>应用程序结束</strong>之前，它们不会释放。因此，如果它们实例化（或注入）类但不释放放它们，它们将保留在内存中，直到应用程序结束。确保在正确的时间<strong>释放</strong>它们。</p></li><li><p>如果缓存数据（示例中为文件内容），则应创建一种机制，以便在原始数据源更改时（当磁盘上的缓存文件发生更改时）更新/使缓存数据失效。</p></li></ul><h3 id="作用域服务（Scoped-Services）"><a href="#作用域服务（Scoped-Services）" class="headerlink" title="作用域服务（Scoped Services）"></a>作用域服务（Scoped Services）</h3><p>作用域生存期首先似乎是存储每个 Web 请求数据的良好候选者。</p><p>因为 ASP.NET Core<strong>为每个 Web 请求</strong>创建一个服务范围。因此，如果将服务注册为作用域，则可以在 Web 请求期间共享该服务。</p><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RequestItemsService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; _items;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestItemsService</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Set</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _items[name] = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Get</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _items[name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将<code> RequestItemsService</code> 注册为作用域，并将其注入到两个不同的服务中，则可以获取从另一个服务添加的项，因为它们将共享同一个<code>RequestItemsService</code>实例。这是我们对作用域服务的猜想。</p><p>但并不是这样，如果创建<strong>子服务作用域</strong>并从子作用域解析 <code>RequestItemsService</code>，将获得 <code>RequestItemsService</code> 的新实例，并且它不会按预期工作。</p><p>因此，作用域服务并不意味着每个 Web 请求的实例。</p><p>你可能认为你没有犯这么明显的错误（在一个子的作用域内解决一个作用域）。 但是，这不是一个错误（一种非常常见的用法），而且情况可能并不那么简单。 如果服务之间存在很大的依赖关系图，无法知道是否有人创建了子作用域并解析了注入另一个服务的服务……最终注入了作用域服务。</p><p><strong>最佳实践</strong>：</p><ul><li><p>可以将<strong>作用域服务</strong>视为一种<strong>优化</strong>，它在 Web 请求中被太多服务注入。 因此，所有这些服务将在同一个 Web 请求期间使用该服务的单个实例。</p></li><li><p>作用域内服务不需要设计为线程安全。因为它们通常应由单个Web请求/线程使用。但在这种情况下，不应在<strong>不同线程之间共享服务作用域</strong>。</p></li><li><p>如果设计一个范围服务以在 <strong>Web 请求中</strong>的其他服务之间共享数据（如上所述），可以将每个 Web 请求数据存储在 <strong>HttpContext</strong> 中（注入 <code>IHttpContextAccessor</code> 以访问它），这是更安全的方法。 <strong>HttpContext</strong> 的生命周期<strong>没有作用域</strong>。 实际上，它根本没有注册到 DI（这就是为什么不注入它，而是注入 IHttpContextAccessor 的原因）。 <strong>HttpContextAccessor 实现使用 AsyncLocal 在 Web 请求期间共享相同的 HttpContext</strong>。</p></li></ul><blockquote><p><a href="https://github.com/aspnet/HttpAbstractions/blob/master/src/Microsoft.AspNetCore.Http/HttpContextAccessor.cs">HttpAbstractions/HttpContextAccessor.cs at master · aspnet/HttpAbstractions (github.com)</a></p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>依赖关系注入似乎很容易使用，但是如果不遵循一些严格的原则，则存在潜在的多线程和内存泄漏问题。</p><blockquote><p>作者：<a href="https://github.com/hikalkan">hikalkan (Halil İbrahim Kalkan) (github.com)</a></p><p>出处：<a href="https://medium.com/volosoft/asp-net-core-dependency-injection-best-practices-tips-tricks-c6e9c67f9d96">ASP.NET Core Dependency Injection Best Practices, Tips &amp; Tricks | by Halil İbrahim Kalkan | Volosoft | Medium</a></p></blockquote>]]></content>
    
    
    <summary type="html">ASP.NET Core 依赖注入最佳实践、技巧</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="DI" scheme="https://jonty.top/tags/DI/"/>
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
  </entry>
  
  <entry>
    <title>Sonatype Nexus3 搭建私有仓库</title>
    <link href="https://jonty.top/2022/07/12/docker-nexus3-build-private-repository/"/>
    <id>https://jonty.top/2022/07/12/docker-nexus3-build-private-repository/</id>
    <published>2022-07-12T15:02:05.000Z</published>
    <updated>2022-08-05T09:22:55.097Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/NexusRepo_Icon.png" alt="Sonatype-Nexus3"></p><div class="note info"><p>Nexus是Sonatype提供的仓库管理平台，Nuexus Repository OSS3能够支持Maven、npm、Docker、YUM、Helm等格式数据的存储和发布；并且能够与Jekins、SonaQube和Eclipse等工具进行集成。<br>Nexus支持作为宿主和代理存储库的本地Maven/Docker存储库，可以直接将这些存储库暴露给客户端工具；也可以以存储库组的方式暴露给客户端工具，存储库组是合并了多个存储库的内容的存储库，能够通过一个URL将多个存储库暴露给客户端工具，从而便于用户的使用。通过nexus自建能够有效减少访问获取镜像的时间和对带宽使用，并能够通过自有的镜像仓库共享企业自己的镜像。</p></div><h2 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h2><p>需要 <strong>2</strong> 个域名，一个用来代理 <code>Nexus </code>管理面板，另一个用做 <code>docker </code>仓库，<code>docker </code>需要单独的端口</p><p><strong>Nexus</strong> 前台：<code>registry.jonty.top</code></p><p><strong>Docker</strong> 仓库：<code>hub.jonty.top</code></p><h3 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h3><p>我们通过<code>Nginx</code>代理<code>Nexus</code>服务，需要先生成<strong>自签名</strong>的SSL证书，通过内部DNS域名访问（无需在<code>docker pull</code>的时候还要带一个端口）</p><p>使用一键生成工具：<a href="https://github.com/Fishdrowned/ssl">ssl</a>，两个域名都要<strong>签发证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Fishdrowned/ssl.git</span><br><span class="line"><span class="built_in">cd</span> ssl</span><br><span class="line"><span class="comment"># 根据你的域名更改</span></span><br><span class="line">/bin/bash ./gen.cert.sh hub.jonty.top </span><br></pre></td></tr></table></figure><blockquote><p>PS：如果是打算做外网仓库服务，可以直接申请一个免费的SSL证书（云厂商都提供），本文使用内网域名，使用自签名证书</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ssl-master]<span class="comment"># ls</span></span><br><span class="line">ca.cnf  docs  flush.sh  gen.cert.sh  gen.root.sh  LICENSE  out  README.md</span><br><span class="line">[root@nexus3 ssl-master]<span class="comment"># cd out/</span></span><br><span class="line">[root@nexus3 out]<span class="comment"># ls</span></span><br><span class="line">cert.key.pem  index.txt  index.txt.attr  index.txt.attr.old  index.txt.old  newcerts  root.crt  root.key.pem  serial  serial.old</span><br><span class="line">[root@nexus3 out]<span class="comment"># cd ..</span></span><br><span class="line">[root@nexus3 ssl-master]<span class="comment"># /bin/bash gen.cert.sh hub.jonty.top # 换成你的域名</span></span><br><span class="line">Using configuration from ./ca.cnf</span><br><span class="line">Check that the request matches the signature</span><br><span class="line">Signature ok</span><br><span class="line">The Subject<span class="string">&#x27;s Distinguished Name is as follows</span></span><br><span class="line"><span class="string">countryName           :PRINTABLE:&#x27;</span>CN<span class="string">&#x27;</span></span><br><span class="line"><span class="string">stateOrProvinceName   :ASN.1 12:&#x27;</span>Guangdong<span class="string">&#x27;</span></span><br><span class="line"><span class="string">localityName          :ASN.1 12:&#x27;</span>Guangzhou<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationName      :ASN.1 12:&#x27;</span>Fishdrowned<span class="string">&#x27;</span></span><br><span class="line"><span class="string">organizationalUnitName:ASN.1 12:&#x27;</span>hub.jonty.top<span class="string">&#x27;</span></span><br><span class="line"><span class="string">commonName            :ASN.1 12:&#x27;</span>*.hub.jonty.top<span class="string">&#x27;</span></span><br><span class="line"><span class="string">Certificate is to be certified until Jul 11 08:06:41 2024 GMT (730 days)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Write out database with 1 new entries</span></span><br><span class="line"><span class="string">Data Base Updated</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Certificates are located in:</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 44 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.bundle.crt -&gt; ./20220712-1606/hub.jonty.top.bundle.crt</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 37 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.crt -&gt; ./20220712-1606/hub.jonty.top.crt</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 15 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/hub.xxx.key.pem -&gt; ../cert.key.pem</span></span><br><span class="line"><span class="string">lrwxrwxrwx. 1 root root 11 Jul 12 16:06 /root/docker/ssl-master/out/hub.jonty.top/root.crt -&gt; ../root.crt</span></span><br><span class="line"><span class="string">[root@nexus3 ssl-master]# cd out/hub.jonty.top/</span></span><br><span class="line"><span class="string">[root@nexus3 hub.jonty.top]# ls</span></span><br><span class="line"><span class="string">20220712-1606  hub.jonty.top.bundle.crt  hub.jonty.top.crt  hub.jonty.top.key.pem  root.crt</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="阿里云签发"><a href="#阿里云签发" class="headerlink" title="阿里云签发"></a>阿里云签发</h3><p>如果有域名，可以购买<code>Aliyun</code>免费ssl证书，<strong>一年有效期</strong>，可以有效避免自签名证书不适用的问题</p><p><img data-src="https://cdn.jonty.top/img/image-20220801155820025.png" alt="image-20220801155820025"></p><p>申请完成后，下载<code>Nginx</code>证书并上传到服务器</p><p><img data-src="https://cdn.jonty.top/img/image-20220801160226471.png" alt="image-20220801160226471"></p><h3 id="本地域名解析"><a href="#本地域名解析" class="headerlink" title="本地域名解析"></a>本地域名解析</h3><p>Windows：<code>C:\Windows\System32\drivers\etc\hosts</code></p><p>Linux：<code>vi /etc/hosts</code></p><p>将以下解析加入，测试是否可以<code>ping</code>通</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.xx hub.jonty.top</span><br><span class="line">192.168.2.xx registry.jonty.top</span><br></pre></td></tr></table></figure><blockquote><p>服务端和客户端都需要配置</p></blockquote><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>安装<code>Docker-Engine</code></p><blockquote><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ~]<span class="comment"># docker -v</span></span><br><span class="line">Docker version 20.10.17, build 100c701</span><br><span class="line">[root@nexus3 ~]<span class="comment"># docker compose version</span></span><br><span class="line">Docker Compose version v2.6.0</span><br></pre></td></tr></table></figure><h3 id="创建数据路径并设置权限"><a href="#创建数据路径并设置权限" class="headerlink" title="创建数据路径并设置权限"></a>创建数据路径并设置权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$PWD</span>/nexus3/data </span><br><span class="line">chmod 777 <span class="variable">$PWD</span>/nexus3/data </span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$PWD</span>/nexus3</span><br></pre></td></tr></table></figure><p>将生成的证书<strong>复制</strong>到<code>$PWD/nexus3/certs</code>目录下(2个域名的证书都需要）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cp hub.jonty.top.crt ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cp hub.jonty.top.key.pem ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 hub.jonty.top]<span class="comment"># cd ~/nexus3/certs/</span></span><br><span class="line">[root@nexus3 certs]<span class="comment"># ls</span></span><br><span class="line">hub.jonty.top.crt hub.jonty.top.key.pem</span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><p>在<code>~/nexus3</code>目录下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nexus3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">sonatype/nexus3:3.33.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/data:/nexus-data</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:1.21.1-alpine</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/nginx.conf:/etc/nginx/nginx.conf:ro</span>     <span class="comment"># nginx配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/certs:/etc/nginx/certs</span>                    <span class="comment"># SSL证书</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/log:/var/log/nginx</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nexus3</span></span><br><span class="line">    <span class="attr">logging:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">&quot;json-file&quot;</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">max-size:</span> <span class="string">&quot;5g&quot;</span>  <span class="comment"># 限制日志大小</span></span><br></pre></td></tr></table></figure><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><p>在同目录下创建<code>nginx.conf</code>，<code>nginx</code>配置文件</p><p>请参考<a href="#SSL%E8%AF%81%E4%B9%A6">ssl</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">worker_processes 4;</span><br><span class="line">worker_rlimit_nofile 40000;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 8192;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    upstream nexus3_http &#123;</span><br><span class="line">        server nexus3:8081;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name registry.jonty.top;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name registry.jonty.top; </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># SSL</span></span><br><span class="line">        ssl_certificate /certs/registry.jonty.top/registry.jonty.top.pem;</span><br><span class="line">    ssl_certificate_key /certs/registry.jonty.top/registry.jonty.top.key;</span><br><span class="line"></span><br><span class="line">        client_max_body_size 5000m;  <span class="comment"># 上传大文件</span></span><br><span class="line">fastcgi_connect_timeout 300s;</span><br><span class="line">        fastcgi_send_timeout 300s;</span><br><span class="line">        fastcgi_read_timeout 300s;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://nexus3_http;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">            proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            proxy_set_header Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream nexus_docker_get &#123;</span><br><span class="line">        server nexus3:8082;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    upstream nexus_docker_put &#123;</span><br><span class="line">        server nexus3:8083;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name hub.jonty.top;</span><br><span class="line">        <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 ssl;</span><br><span class="line">        server_name hub.jonty.top;</span><br><span class="line">        <span class="comment"># 证书</span></span><br><span class="line">        ssl_certificate /certs/hub.jonty.top/hub.jonty.top.pem;</span><br><span class="line">        ssl_certificate_key /certs/hub.jonty.top/hub.jonty.top.key;</span><br><span class="line">        ssl_protocols TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers <span class="string">&#x27;!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:&#x27;</span>;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_cache shared:SSL:10m;</span><br><span class="line">        client_max_body_size 5000m;</span><br><span class="line">        chunked_transfer_encoding on;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$upstream</span> <span class="string">&quot;nexus_docker_put&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$request_method</span> ~* <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">set</span> <span class="variable">$upstream</span> <span class="string">&quot;nexus_docker_get&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass http://<span class="variable">$upstream</span>;</span><br><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">                proxy_connect_timeout 3600;</span><br><span class="line">                proxy_send_timeout 3600;</span><br><span class="line">                proxy_read_timeout 3600;</span><br><span class="line">                proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">                proxy_buffering off;</span><br><span class="line">                proxy_request_buffering off;</span><br><span class="line">                proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">                proxy_set_header X-Forwarded-Proto http;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查看目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y tree</span><br><span class="line"><span class="built_in">cd</span> nexus3</span><br><span class="line">tree -C -L 2</span><br><span class="line">tree -C</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220805163921371.png" alt="image-20220805163921371"></p><p><img data-src="https://cdn.jonty.top/img/image-20220805164026553.png" alt="image-20220805164026553"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712162731428.png" alt="image-20220712162731428"></p><p>访问：<a href="https://registry.jonty.top/">https://registry.jonty.top</a></p><blockquote><p>Nexus初始化需要3~5min，初始化完成后可访问</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220712163303455.png" alt="image-20220712163303455"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="密码配置"><a href="#密码配置" class="headerlink" title="密码配置"></a>密码配置</h3><p>查看<code>admin</code>默认密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># cat data/admin.password</span></span><br><span class="line">098fb8d9-e07b-4f7f-b498-806cdce1291d</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712164027694.png" alt="image-20220712164027694"></p><h3 id="Docker存储库"><a href="#Docker存储库" class="headerlink" title="Docker存储库"></a>Docker存储库</h3><h4 id="创建Blob存储"><a href="#创建Blob存储" class="headerlink" title="创建Blob存储"></a>创建Blob存储</h4><p>创建用于存放<code>docker</code>镜像文件的存储区域</p><p><img data-src="https://cdn.jonty.top/img/image-20220712164443301.png" alt="image-20220712164443301"></p><h4 id="创建存储库"><a href="#创建存储库" class="headerlink" title="创建存储库"></a>创建存储库</h4><p>存储库有以下三种类型：</p><ul><li><p><strong>proxy</strong>：表示代理仓库，请求包(package)的时候，如果本地有，它就从本地提供，如果本地没有，则从代理地址下载到本地，然后提供这个包。</p></li><li><p><strong>hosted</strong>：表示托管仓库，一般用于推送开发的包到该仓库。</p></li><li><p><strong>group</strong>：表示仓库组，它结合了proxy和hosted，能对外提供上述两者中的包，<strong>对外的出口</strong></p></li></ul><p><img data-src="https://cdn.jonty.top/img/image-20220712164651836.png" alt="image-20220712164651836"></p><h5 id="hosted：本地仓库"><a href="#hosted：本地仓库" class="headerlink" title="hosted：本地仓库"></a>hosted：本地仓库</h5><p>创建<code>hosted</code>类型，用于存储<strong>本地</strong>推送的镜像</p><p><img data-src="https://cdn.jonty.top/img/image-20220801170444372.png" alt="image-20220801170444372"></p><p>端口设置为<code>8083</code>，对应<code>nginx.conf</code>配置<code>nexus_docker_put</code></p><img data-src="https://cdn.jonty.top/img/image-20220801170157413.png" alt="image-20220801170157413" style="zoom:67%;" /><h5 id="proxy-：代理仓库"><a href="#proxy-：代理仓库" class="headerlink" title="proxy ：代理仓库"></a>proxy ：代理仓库</h5><p>代理官方源：<code>https://registry-1.docker.io</code></p><p><img data-src="https://cdn.jonty.top/img/image-20220805164336262.png" alt="image-20220805164336262"></p><p>代理阿里云私有仓库（可公开拉取）：</p><p><img data-src="https://cdn.jonty.top/img/image-20220805164414466.png" alt="image-20220805164414466"></p><p>如果代理的私有库需要<strong>授权</strong>：</p><img data-src="https://cdn.jonty.top/img/image-20220801170854550.png" alt="image-20220801170854550" style="zoom:67%;" /><h5 id="group-仓库组"><a href="#group-仓库组" class="headerlink" title="group : 仓库组"></a>group : 仓库组</h5><p>端口设置为<code>8082</code>，对应<code>nginx.conf</code>配置<code>nexus_docker_get</code></p><p>编辑组成员，根据顺序可排<strong>优先级</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220805164454963.png" alt="image-20220805164454963"></p><h3 id="上传docker镜像"><a href="#上传docker镜像" class="headerlink" title="上传docker镜像"></a>上传docker镜像</h3><h4 id="配置授信"><a href="#配置授信" class="headerlink" title="配置授信"></a>配置授信</h4><blockquote><p>使用自签名证书需要配置此步骤</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>加入以下配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;https://hub.jonty.top&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启<code>docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><blockquote><p>docker登录私库时提示 <code>x509: certificate signed by unknown authority</code></p></blockquote><h4 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># docker login hub.jonty.top -u admin</span></span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted <span class="keyword">in</span> /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 nexus3]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY        TAG             IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx             1.21.1-alpine   1318bf5f63b4   10 months ago   22.8MB</span><br><span class="line">sonatype/nexus3   3.33.1          a0d390a200d2   10 months ago   655MB</span><br><span class="line">[root@nexus3 nexus3]<span class="comment"># docker tag nginx:1.21.1-alpine hub.jonty.top/nginx:1.21.1-alpine</span></span><br><span class="line">[root@nexus3 nexus3]<span class="comment"># docker push hub.jonty.top/nginx:1.21.1-alpine</span></span><br><span class="line">The push refers to repository [hub.jonty.top/nginx]</span><br><span class="line">45d993692050: Pushed</span><br><span class="line">1ea998b95474: Pushed</span><br><span class="line">95b99a5c3767: Pushed</span><br><span class="line">fc03e3cb8568: Pushed</span><br><span class="line">24934e5e6c61: Pushed</span><br><span class="line">e2eb06d8af82: Pushed</span><br><span class="line">1.21.1-alpine: digest: sha256:bd0aa91fe6a182db22032463c17644cd2ff3bbe415e7b84964283bba687acaa6 size: 1568</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712170930285.png" alt="image-20220712170930285"></p><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><blockquote><p>注意，客户端需要<a href="#%E9%85%8D%E7%BD%AE%E6%8E%88%E4%BF%A1">配置授信</a>和<a href="#%E6%9C%AC%E5%9C%B0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90">域名解析</a>，如果开启<strong>允许匿名拉取</strong>则不需授信，配置了路由器DNS则不需要配置<strong>hosts</strong>文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/hosts</span></span><br><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.2.xx hub.jonty.top</span><br><span class="line">192.168.2.xx registry.jonty.top</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://hub.jonty.top&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># docker pull hub.jonty.top/mssql:2019-latest</span></span><br><span class="line">2019-latest: Pulling from mssql</span><br><span class="line">d5fd17ec1767: Already exists </span><br><span class="line">cf291b38357f: Pull complete </span><br><span class="line">af7e8d6f1719: Pull complete </span><br><span class="line">Digest: sha256:584a7fc7e2a378bdd4e8fe3bad36dae18e85527308193cb5c43d90863d7a7d4a</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hub.jonty.top/mssql:2019-latest</span><br><span class="line">hub.jonty.top/mssql:2019-latest</span><br></pre></td></tr></table></figure><h4 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab-CI"></a>Gitlab-CI</h4><blockquote><p> <a href="https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#access-an-image-from-a-private-container-registry">在 Docker 容器中运行 CI/CD 作业|GitLab</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ~]# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;auths&quot;: &#123;</span><br><span class="line">&quot;https://index.docker.io/v1/&quot;: &#123;</span><br><span class="line">&quot;auth&quot;: &quot;am9udHltYXg6Sm9udHlNYXgzMjE=&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hub.jonty.top&quot;: &#123;</span><br><span class="line">&quot;auth&quot;: &quot;YWRtaW46Z2N0bmV4dXMz&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;[root@nexus3 ~]# </span><br><span class="line">[root@nexus3 ~]# echo -n &quot;admin:nexus3&quot; | base64</span><br><span class="line">YWRtaW46Z2N0bmV4dXMz</span><br></pre></td></tr></table></figure><p>CI配置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">variables:</span><br><span class="line">  DOCKER_AUTH_CONFIG: <span class="string">&#x27;&#123;&quot;auths&quot;: &#123;&quot;hub.jonty.top&quot;: &#123;&quot;auth&quot;: &quot;YWRtaW46SGFyYm9yMTIzNDU=&quot;&#125;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="设置匿名拉取"><a href="#设置匿名拉取" class="headerlink" title="设置匿名拉取"></a>设置匿名拉取</h4><p>按需开启，开启则不需要配置以上授信部分</p><img data-src="https://cdn.jonty.top/img/image-20220727093218720.png" alt="image-20220727093218720" style="zoom:67%;" /><h3 id="NuGet存储库"><a href="#NuGet存储库" class="headerlink" title="NuGet存储库"></a>NuGet存储库</h3><h4 id="上传nuget包"><a href="#上传nuget包" class="headerlink" title="上传nuget包"></a>上传nuget包</h4><p>Nexus默认已经创建好了Nuget的仓库，并且是创建了3个不同类型的仓库：nuget-group，nuget-hosted，nuget.org-proxy</p><p><img data-src="https://cdn.jonty.top/img/image-20220712172140135.png" alt="image-20220712172140135"></p><h4 id="添加Nuget-Realms"><a href="#添加Nuget-Realms" class="headerlink" title="添加Nuget Realms"></a>添加Nuget Realms</h4><p>Nexus认证Nuget是通过Realms来认证</p><p><img data-src="https://cdn.jonty.top/img/image-20220712172321065.png" alt="image-20220712172321065"></p><h4 id="获取仓库地址以及Nuget-API-Key"><a href="#获取仓库地址以及Nuget-API-Key" class="headerlink" title="获取仓库地址以及Nuget API Key"></a>获取仓库地址以及Nuget API Key</h4><p>仓库列表&gt;复制地址</p><p><img data-src="https://cdn.jonty.top/img/image-20220712172440616.png" alt="image-20220712172440616"></p><p>获取<code>NuGet API Key</code></p><p><img data-src="https://cdn.jonty.top/img/image-20220712172607085.png" alt="image-20220712172607085"></p><h4 id="推送本地NuGet包"><a href="#推送本地NuGet包" class="headerlink" title="推送本地NuGet包"></a>推送本地NuGet包</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget push .\abp.7.2.1.nupkg -k 238d37fc-9fae-335d-a812-29c2799d8f0e --source https://registry.jonty.top/repository/nuget-hosted/</span><br><span class="line">正在将 abp.7.2.1.nupkg 推送到 &#x27;https://registry.jonty.top/repository/nuget-hosted/&#x27;...</span><br><span class="line">  PUT https://registry.jonty.top/repository/nuget-hosted/</span><br><span class="line">  Created https://registry.jonty.top/repository/nuget-hosted/ 288 毫秒</span><br><span class="line">已推送包。</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220712172736234.png" alt="image-20220712172736234"></p><h4 id="配置本地NuGet包源"><a href="#配置本地NuGet包源" class="headerlink" title="配置本地NuGet包源"></a>配置本地NuGet包源</h4><p>在VS中添加了<strong>本地源</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220712172917172.png" alt="image-20220712172917172"></p><p><img data-src="https://cdn.jonty.top/img/image-20220712173030239.png" alt="image-20220712173030239"></p><h3 id="新增Nuget代理"><a href="#新增Nuget代理" class="headerlink" title="新增Nuget代理"></a>新增Nuget代理</h3><blockquote><p>代理公网的私有源，如Nuget、Gitlab</p></blockquote><p>启用NuGet V3版本</p><p><img data-src="https://cdn.jonty.top/img/image-20220805165042203.png" alt="image-20220805165042203"></p><p>私有源授权<img data-src="https://cdn.jonty.top/img/image-20220801173138755.png" alt="image-20220801173138755"></p><h4 id="添加仓库组"><a href="#添加仓库组" class="headerlink" title="添加仓库组"></a>添加仓库组</h4><p><img data-src="https://cdn.jonty.top/img/image-20220805165114055.png" alt="image-20220805165114055"></p><h4 id="NuGet-V3"><a href="#NuGet-V3" class="headerlink" title="NuGet V3"></a>NuGet V3</h4><p>正常访问nuget-group:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.jonty.top/repository/nuget-group/</span><br></pre></td></tr></table></figure><p>使用V3版本需要添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://registry.jonty.top/repository/nuget-group/index.json</span><br></pre></td></tr></table></figure><h4 id="使用私有NuGet源"><a href="#使用私有NuGet源" class="headerlink" title="使用私有NuGet源"></a>使用私有NuGet源</h4><p>如果是代理私有库，先删除本地源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget list <span class="built_in">source</span></span><br><span class="line">dotnet nuget remove <span class="built_in">source</span> &lt;NAME&gt;</span><br></pre></td></tr></table></figure><p>添加私有源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget add <span class="built_in">source</span> https://registry.jonty.top/repository/nuget-group/index.json -n nexus3 -u admin -p nexus3 --store-password-in-clear-text</span><br></pre></td></tr></table></figure><p>清空本地nuget缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet nuget locals http-cache --clear</span><br><span class="line">dotnet nuget locals global-packages --clear</span><br></pre></td></tr></table></figure><blockquote><p>当代理的源更新后，Nexus本地缓存会导致无法找到最新包，可手动清理</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220801164922446.png" alt="image-20220801164922446"></p><h3 id="NPM存储库"><a href="#NPM存储库" class="headerlink" title="NPM存储库"></a>NPM存储库</h3><h4 id="NPM代理"><a href="#NPM代理" class="headerlink" title="NPM代理"></a>NPM代理</h4><p><strong>官方源</strong>：</p><p><a href="https://registry.npmjs.org/">https://registry.npmjs.org</a></p><p><img data-src="https://cdn.jonty.top/img/image-20220801175628966.png" alt="image-20220801175628966"></p><p>私有库授权：</p><p><img data-src="https://cdn.jonty.top/img/image-20220801175743567.png" alt="image-20220801175743567"></p><h4 id="NPM仓库组"><a href="#NPM仓库组" class="headerlink" title="NPM仓库组"></a>NPM仓库组</h4><p><img data-src="https://cdn.jonty.top/img/image-20220805165359080.png" alt="image-20220805165359080"></p><h3 id="使用NPM代理"><a href="#使用NPM代理" class="headerlink" title="使用NPM代理"></a>使用NPM代理</h3><h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm i --legacy-peer-deps  -verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看npm源</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册私有源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.jonty.top/repository/npm-group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录私服</span></span><br><span class="line">npm login registry=<span class="string">&quot;https://registry.jonty.top/repository/npm-group/&quot;</span>  </span><br><span class="line"></span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><blockquote><p>npm 新版本 <code>-g</code>需要替换为<code>--location=global</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看yarn配置</span></span><br><span class="line">yarn config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置私有源</span></span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.jonty.top/repository/npm-group/</span><br><span class="line"></span><br><span class="line">yarn cache clean</span><br></pre></td></tr></table></figure><h4 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h4><p>查看私服密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nexus3 ~]# cat ~/.npmrc</span><br><span class="line">registry=http://registry.jonty.top/repository/npm-group/</span><br><span class="line">//registry.jonty.top/repository/npm-group/:_authToken=NpmToken.72b83be3-4b24-3dd1-850f-056cd78bb513</span><br></pre></td></tr></table></figure><h4 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@delivery:registry=https:<span class="comment">//registry.jonty.top/repository/npm-group/</span></span><br><span class="line"><span class="comment">//registry.jonty.top/repository/npm-group/:_authToken=NpmToken.612e0fd9-1526-3acd-9165-4e604d49a73d</span></span><br><span class="line">always-auth=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p><img data-src="https://cdn.jonty.top/img/gitlab_workflow_example_extended_v12_3.png" alt="Deeper look into the basic CI/CD workflow"></p><p>主要是配合<code>Gitlab Runner CI/CD</code>编译打包</p><blockquote><p><a href="https://docs.gitlab.com/runner/">Runner执行流程</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220805171720344.png" alt="Runner执行流程"></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>后端项目从平均<code>12min</code>提升到<code>3min</code>以内，包括拉取代码、执行还原、编译打包、推送等操作</p><p>前端项目从平均大于10min（30min也很常见）提升到7min以内，<code>restore</code>速度很快，主要是<code>build</code>操作缓慢，并且随着依赖增多变得更慢</p><p><strong>使用前</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220805165923326.png" alt="ci-before"></p><p><strong>使用后</strong></p><p><img data-src="https://cdn.jonty.top/img/image-20220805170835741.png" alt="ci-after"></p><blockquote><p>搞定~</p></blockquote><p><img data-src="https://cdn.jonty.top/img/image-20220712171653152.png" alt="挠屁股"></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 Bad Gateway"></a>502 Bad Gateway</h3><p>配置 nexus3 时使用 http 而非 https</p><h3 id="no-basic-auth-credentials"><a href="#no-basic-auth-credentials" class="headerlink" title="no basic auth credentials"></a>no basic auth credentials</h3><p>需要先 docker login 登录</p><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h3><p>docker login -u admin -p Harbor12345 hub.haifengat.com 登录时报错</p><p><img data-src="https://cdn.jonty.top/img/1631446538601-5b8a97b1-ebb0-4cbb-82d1-d7353c683fb3.png" alt="img"></p><p>参考文档：</p><p><a href="https://blog.csdn.net/yangkuo024/article/details/121135602">解决Error response from daemon: Get https://: http: server gave HTTP response to HTTPS client_SerryYang的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/liusf1993/article/details/102508663">docker登录私库时提示 x509: certificate signed by unknown authority_舟行于无涯之海的博客-CSDN博客_docker login x509</a></p>]]></content>
    
    
    <summary type="html">Nexus3最佳实践 - 配合Nginx+SSL搭建私有仓库</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Nexus" scheme="https://jonty.top/tags/Nexus/"/>
    
    <category term="SSL" scheme="https://jonty.top/tags/SSL/"/>
    
    <category term="Nginx" scheme="https://jonty.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker 三剑客之 Docker Swarm</title>
    <link href="https://jonty.top/2022/07/06/getting-started-with-docker-swarm/"/>
    <id>https://jonty.top/2022/07/06/getting-started-with-docker-swarm/</id>
    <published>2022-07-06T13:57:20.000Z</published>
    <updated>2022-07-12T15:12:08.847Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/Moby-run-900x551.png.jpg" alt="docker"></p><div class="note info"><p>Docker Swarm是管理跨节点容器的编排工具，相较于Docker Compose而言，Compose只能编排单节点上的容器，Swarm将一群Docker节点虚拟化为一个主机，使得用户只要在单一主机上操作就能完成对整个容器集群的管理工作。</p></div><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>准备三个节点，要求实现奇数个节点</p><blockquote><p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/">How nodes work | Docker Documentation</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.1 ————作为manager</span><br><span class="line">192.168.2.2 ————作为node1</span><br><span class="line">192.168.2.3 ————作为node2</span><br></pre></td></tr></table></figure><p>三个节点在同一个网段，确保相互之间可以ping通</p><p>安装<code>Docker-Engine</code></p><blockquote><p><a href="https://docs.docker.com/engine/install/centos/">Install Docker Engine on CentOS | Docker Documentation</a></p></blockquote><p>查看是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker --version</span><br><span class="line">Docker version 20.10.17, build 100c701</span><br><span class="line">[root@manager ~]# docker compose version</span><br><span class="line">Docker Compose version v2.6.0</span><br></pre></td></tr></table></figure><h2 id="节点管理"><a href="#节点管理" class="headerlink" title="节点管理"></a>节点管理</h2><blockquote><p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/">节点的工作原理|Docker 文档</a></p></blockquote><p>如下图所示，swarm 集群由管理节点（manager）和工作节点（work node）构成。</p><ul><li><strong>swarm mananger</strong>：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。</li><li><strong>work node</strong>：即图中的 available node，主要负责运行相应的服务来执行任务（task）</li></ul><p><img data-src="https://docs.docker.com/engine/swarm/images/swarm-diagram.png" alt="群模式集群"></p><p>在创建集群之前，使用<code>docker node ls</code>想查看下集群中节点的信息，反馈目前没有节点信息，并且当前节点并不是<code>manager</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure><h3 id="创建一个Swarm"><a href="#创建一个Swarm" class="headerlink" title="创建一个Swarm"></a>创建一个Swarm</h3><p>在创建集群之前，使用<code>docker node ls</code>想查看下集群中节点的信息，反馈目前没有节点信息，并且当前节点并不是<code>manager</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Use &quot;docker swarm init&quot; or &quot;docker swarm join&quot; to connect this node to swarm and try again.</span><br></pre></td></tr></table></figure><p>创建新的集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init --advertise-addr 192.168.2.1 </span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker swarm init --advertise-addr 192.168.2.81</span><br><span class="line">Swarm initialized: current node (44qw5hbq836fryftoc51pnlbn) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-xxxxxxxxxxx-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &#x27;docker swarm join-token manager&#x27; and follow the instructions.</span><br></pre></td></tr></table></figure><p><code>docker swarm join-token manager</code>  命令用于获取添加新的 Manager Node 的命令参数</p><p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p><h3 id="加入Swarm"><a href="#加入Swarm" class="headerlink" title="加入Swarm"></a>加入Swarm</h3><p>可以在其它节点上执行<code>docker swarm join --token......</code>来将该节点设置为工作node，并加入到这个swarm集群中</p><p>目前演示的是一个<code>manager</code>，两个工作node的模式，所以在<code>node1</code>和<code>node2</code>上执行第一个命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-xxxxxxxx-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th align="left">命令</th><th>说明</th></tr></thead><tbody><tr><td align="left">docker swarm init</td><td>初始化集群</td></tr><tr><td align="left">docker swarm join-token worker</td><td>查看工作节点的 token</td></tr><tr><td align="left">docker swarm join-token manager</td><td>查看管理节点的 token</td></tr><tr><td align="left">docker swarm join</td><td>加入集群</td></tr></tbody></table><blockquote><p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/swarm/">docker swarm | Docker Documentation</a></p></blockquote><h3 id="查看节点信息"><a href="#查看节点信息" class="headerlink" title="查看节点信息"></a>查看节点信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/image-20220704145815755.png" alt="image-20220704145815755" style="zoom:67%;" /><h3 id="查看节点列表"><a href="#查看节点列表" class="headerlink" title="查看节点列表"></a>查看节点列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure><p>节点 ID 旁边的<code>*</code>表示当前已在此节点上连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker node ls</span><br><span class="line">ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span><br><span class="line">44qw5hbq836fryftoc51pnlbn *   manager    Ready     Active         Leader           20.10.17</span><br><span class="line">q3yd5vno8t4c9hgi47mqztzbr     node1      Ready     Active                          20.10.17</span><br><span class="line">svwqj9t6g4izhsbnh0oneq4lw     node2      Ready     Active                          20.10.17</span><br></pre></td></tr></table></figure><p>注意，<code>manager</code>是管理集群的入口，<code>docke</code>r命令都是在<code>manager</code>上执行，<code>node</code>节点上是不能执行<code>docker</code>命令的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# docker node ls</span><br><span class="line">Error response from daemon: This node is not a swarm manager. Worker nodes can&#x27;t be used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.</span><br></pre></td></tr></table></figure><h3 id="查看节点详细信息"><a href="#查看节点详细信息" class="headerlink" title="查看节点详细信息"></a>查看节点详细信息</h3><p>使用以下命令查看节点的详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node inspect --pretty 节点名称</span><br></pre></td></tr></table></figure><h3 id="添加新的-Manager-Node-到集群"><a href="#添加新的-Manager-Node-到集群" class="headerlink" title="添加新的 Manager Node 到集群"></a>添加新的 Manager Node 到集群</h3><p>在另一台机器运行 <code>docker swarm join</code> 命令加入已存在的集群中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-5d47eim8blk5jh37ww2eua7ve0r3u4w106j7oaoxuf4ilva0tw-cyl00cwc71rp0jfp59eyfhp4x 192.168.2.81:2377</span><br></pre></td></tr></table></figure><p>Manager Node 必须是单数（Raft），生产环境推荐3台或5台作为 <code>Manager Node</code></p><p><img data-src="https://cdn.jonty.top/img/4-1Z41Q25622D1.gif" alt="多数管理节点的分区继续对集群进行管理"></p><blockquote><p><code>docker swarm join-token manager</code>  命令用于获取添加新的 Manager Node 的命令参数</p></blockquote><p><img data-src="https://docs.docker.com/engine/swarm/images/replicated-vs-global.png" alt="global vs replicated services"></p><h3 id="添加新的-Worker-Node-到集群"><a href="#添加新的-Worker-Node-到集群" class="headerlink" title="添加新的 Worker Node 到集群"></a>添加新的 Worker Node 到集群</h3><p>在另一台机器运行 </p><p><code>docker swarm join</code> 命令加入已存在的集群中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-5qv7t73fvawvh795ckh3nxl9vnyo2hwwsqnnjwqyav3spj7ufu-1i7wir7oc3g9fh7yidg19i8p5 192.168.1.80:2377</span><br></pre></td></tr></table></figure><blockquote><p><code>docker swarm join-token worker</code> 命令用于获取添加新的 Worker Node 的命令参数</p></blockquote><h3 id="禁用节点"><a href="#禁用节点" class="headerlink" title="禁用节点"></a>禁用节点</h3><blockquote><p>在生产环境 Manager Node 不推荐运行任何容器实例，但是 Swarm 调度器会分配给Manager Node，</p><p>可以通过 <strong>禁用节点</strong> 告诉 Swarm 调度器不要分配给 Manager Node 任何容器实例。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability drain 节点名称</span><br></pre></td></tr></table></figure><h3 id="启用节点"><a href="#启用节点" class="headerlink" title="启用节点"></a>启用节点</h3><p>禁用节点后使用以下命令即可启用节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --availability active 节点名称</span><br></pre></td></tr></table></figure><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node update --label-add foo --label-add bar=baz 节点名称</span><br></pre></td></tr></table></figure><blockquote><p>–label-add：给节点添加标签，可以用来控制服务放置</p></blockquote><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker node ls</td><td>查看所有集群节点</td></tr><tr><td>docker node rm</td><td>删除某个节点（<code>-f</code>强制删除）</td></tr><tr><td>docker node inspect</td><td>查看节点详情</td></tr><tr><td>docker node demote</td><td>节点降级，由管理节点降级为工作节点</td></tr><tr><td>docker node promote</td><td>节点升级，由工作节点升级为管理节点</td></tr><tr><td>docker node update</td><td>节点升级，由工作节点升级为管理节点</td></tr><tr><td>docker node ps</td><td>查看节点中的 Task 任务</td></tr></tbody></table><blockquote><p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/node/">docker node | Docker Documentation</a></p></blockquote><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><blockquote><p>参考文档：<a href="https://docs.docker.com/engine/swarm/services/">将服务部署到群|Docker 文档</a></p><p><a href="https://docs.docker.com/engine/swarm/how-swarm-mode-works/services/">How services work | Docker Documentation</a></p></blockquote><p>将服务部署到 swarm 时，swarm 管理器接收服务定义作为服务的所需状态。然后，它将群中的节点上的服务调度为一个或多个副本任务。这些任务在群中的节点上彼此独立运行。</p><p>例如，假设在 HTTP 侦听器的三个实例之间进行负载平衡。下图显示了具有三个副本的 HTTP 侦听器服务。侦听器的三个实例中的每一个都是群中的一个任务。</p><p><img data-src="https://cdn.jonty.top/img/services-diagram.png" alt="服务图"></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><p>连接到  Manager Node，使用 </p><p><code>docker service create</code> 命令创建服务.</p><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br></pre></td></tr></table></figure><ul><li><p><code>--name</code> 指定服务名称为 <code>helloworld</code></p></li><li><p><code>--replicas</code> 指定服务运行实例数量为 <code>1</code></p></li><li><p>参数 <code>alpine</code> 表示运行的镜像为 <code>Alpine Linux</code></p></li><li><p>参数 <code>ping docker.com</code> 表示在容器中执行的命令</p></li></ul><h3 id="查看运行的服务"><a href="#查看运行的服务" class="headerlink" title="查看运行的服务"></a>查看运行的服务</h3><p>在 Manager Node 运行此命令查看正在运行的服务列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service ls</span><br><span class="line">ID             NAME                    MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">82bpay4gdvd0   deploy-demo_nginx       replicated   3/3        nginx:latest                 *:8088-&gt;80/tcp</span><br><span class="line">7cad5hto20ql   deploy-demo_portainer   replicated   1/1        portainer/portainer:latest   *:9000-&gt;9000/tcp</span><br><span class="line">520x2l3lcwyp   redis                   replicated   2/2        redis:3.0.6                  *:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure><h3 id="查看服务的详细信息"><a href="#查看服务的详细信息" class="headerlink" title="查看服务的详细信息"></a>查看服务的详细信息</h3><p>在 Manager Node  运行此命令查看服务的运行详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --pretty 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>参数 <code>--pretty</code> 表示返回格式化后的详细信息，不加这个参数则打印 <code>JSON</code> 格式的信息</p></blockquote><h3 id="查看服务运行在哪些节点"><a href="#查看服务运行在哪些节点" class="headerlink" title="查看服务运行在哪些节点"></a>查看服务运行在哪些节点</h3><p>在 Manager Node 使用此命令查看服务都在那些节点运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>docker-swarm 中的服务实例由 swarm 调度。因此有部分服务的实例运行在 Manager Node 是正常表现。</p></blockquote><h3 id="伸缩服务"><a href="#伸缩服务" class="headerlink" title="伸缩服务"></a>伸缩服务</h3><p>docker-swarm 支持对服务实例进行动态伸缩，使用以下命令即可实现：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service scale 服务名称=实例数量(最少为1)</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service scale redis=2</span><br><span class="line">redis scaled to 2</span><br><span class="line">overall progress: 2 out of 2 tasks </span><br><span class="line">1/2: running   [==================================================&gt;] </span><br><span class="line">2/2: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><h3 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h3><p>在 Manager Node 使用以下命令删除服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service rm 服务名称</span><br></pre></td></tr></table></figure><blockquote><p>注意，因为是集群的原因，集群中的Node将会存在延迟的情况，想确认服务是否被删除成功请使用 <code>docker service ls</code> 查看</p></blockquote><h3 id="滚动更新服务"><a href="#滚动更新服务" class="headerlink" title="滚动更新服务"></a>滚动更新服务</h3><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>进入 Manager Node 创建一个redis服务用于演示滚动更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --replicas 3 \</span><br><span class="line">  --name redis \</span><br><span class="line">  --update-delay 10s \</span><br><span class="line">  redis:3.0.6</span><br></pre></td></tr></table></figure><blockquote><p><code>--update-dely</code> 表示更新服务或服务集之间的时间延迟：<code>1h10m3s</code>，表示延迟1小时10分钟3秒。</p></blockquote><blockquote><p>调度器默认一次更新一个任务，可以通过 <code>--update-parallelism</code> 参数配置调度器同时更新服务数量。</p></blockquote><blockquote><p>默认情况下，当单个服务更新返回状态为 <code>RUNNING</code>，调度器会让另一个服务更新，直到所有服务都更新完成。</p></blockquote><blockquote><p>如果在更新期间某个服务返回 <code>FAILED</code> ，调度器会暂停更新，可以通过 <code>--update-failure-action</code> 参数配置控制当服务更新发生错误时的行为。</p></blockquote><h4 id="检查服务状态"><a href="#检查服务状态" class="headerlink" title="检查服务状态"></a>检查服务状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --pretty redis</span><br></pre></td></tr></table></figure><h4 id="更新服务"><a href="#更新服务" class="headerlink" title="更新服务"></a>更新服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update --image redis:3.0.7 redis</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，调度器将按以下方式更新服务：</p></blockquote><ul><li><blockquote><p>停止一个服务</p></blockquote></li><li><blockquote><p>更新已停止的服务</p></blockquote></li><li><blockquote><p>启动已更新的服务</p></blockquote></li></ul><blockquote><p>如果更新的服务返回 <code>RUNNING</code> ，等待指定的延迟时间后开始更新下一个服务</p></blockquote><blockquote><p>如果更新期间某个服务返回 <code>FAILED</code> ，则暂停服务更新</p></blockquote><h4 id="重新启动暂停的服务更新"><a href="#重新启动暂停的服务更新" class="headerlink" title="重新启动暂停的服务更新"></a>重新启动暂停的服务更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service update redis</span><br></pre></td></tr></table></figure><blockquote><p>为了避免重复某些失败的更新，可以重新指定更新参数</p></blockquote><h4 id="查看服务的滚动更新"><a href="#查看服务的滚动更新" class="headerlink" title="查看服务的滚动更新"></a>查看服务的滚动更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service ps redis</span><br></pre></td></tr></table></figure><blockquote><p>在swarm更新完成所有服务之前，可以看到一些服务的镜像为 <code>redis:3.0.6</code>，另一些为 <code>redis:3.0.7</code></p></blockquote><h3 id="指定服务约束"><a href="#指定服务约束" class="headerlink" title="指定服务约束"></a>指定服务约束</h3><blockquote><p><a href="https://docs.docker.com/engine/reference/commandline/service_create/#specify-service-constraints---constraint">泊坞窗服务创建|Docker 文档</a></p><p><a href="https://docs.docker.com/engine/swarm/services/#control-service-placement">将服务部署到群|Docker 文档</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/placement_prefs.png" alt="placement_prefs"></p><h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker service create</td><td>部署服务</td></tr><tr><td>docker service inspect</td><td>查看服务详情</td></tr><tr><td>docker service logs</td><td>查看某个服务日志</td></tr><tr><td>docker service ls</td><td>查看所有服务详情</td></tr><tr><td>docker service rm</td><td>删除某个服务（<code>-f</code>强制删除）</td></tr><tr><td>docker service scale</td><td>设置某个服务个数</td></tr><tr><td>docker service update</td><td>更新某个服务</td></tr></tbody></table><blockquote><p>命令参考：<a href="https://docs.docker.com/engine/reference/commandline/service/">docker service | Docker Documentation</a></p></blockquote><h2 id="路由网格"><a href="#路由网格" class="headerlink" title="路由网格"></a>路由网格</h2><p>docker swarm支持路由网格。路由网格让处于swarm集群中的任意一个节点都可以作为被访问的入口，即使此节点没有运行任何服务。</p><p>要在 swarm 集群中使用使用路由网格，首先需要开启加入swarm集群的节点的以下端口：</p><ul><li><p><code>7946</code> ：容器网络发现</p></li><li><p><code>4789</code> ：容器网络入口</p></li></ul><p>其次需要将节点服务实例的端口公开，使服务可以被外部访问（例如使用nginx做负载均衡）</p><h3 id="服务原理"><a href="#服务原理" class="headerlink" title="服务原理"></a>服务原理</h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/ingress/">使用群模式路由网格|Docker 文档</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/ingress-routing-mesh.png" alt="服务入口映像"></p><h3 id="创建服务时公开端口"><a href="#创建服务时公开端口" class="headerlink" title="创建服务时公开端口"></a>创建服务时公开端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">  --name &lt;SERVICE-NAME&gt; \</span><br><span class="line">  --publish published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;IMAGE&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>--publish</code> 与 <code>-p</code> 效果相同，其中 <code>--published</code> 值为公布的端口，<code>target</code> 值为容器内部监听的端口。<code>--publish</code> 的写法</p></blockquote><h3 id="更新现有服务的公开端口"><a href="#更新现有服务的公开端口" class="headerlink" title="更新现有服务的公开端口"></a>更新现有服务的公开端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">  --publish-add published=&lt;PUBLISHED-PORT&gt;,target=&lt;CONTAINER-PORT&gt; \</span><br><span class="line">  &lt;SERVICE&gt;</span><br></pre></td></tr></table></figure><h3 id="查看服务发布的端口"><a href="#查看服务发布的端口" class="headerlink" title="查看服务发布的端口"></a>查看服务发布的端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker service inspect --format=&quot;&#123;&#123;json .Endpoint.Spec.Ports&#125;&#125;&quot; 服务名称</span><br></pre></td></tr></table></figure><h3 id="只公开TCP或UDP端口"><a href="#只公开TCP或UDP端口" class="headerlink" title="只公开TCP或UDP端口"></a>只公开TCP或UDP端口</h3><p>默认情况下公开端口都是 TCP 端口，你可以通过参数配置公开端口的类型：</p><h4 id="仅TCP"><a href="#仅TCP" class="headerlink" title="仅TCP"></a>仅TCP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h4 id="仅UDP"><a href="#仅UDP" class="headerlink" title="仅UDP"></a>仅UDP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h4 id="TCP-UDP"><a href="#TCP-UDP" class="headerlink" title="TCP+UDP"></a>TCP+UDP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53 \</span><br><span class="line">  --publish published=53,target=53,protocol=udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  -p 53:53 \</span><br><span class="line">  -p 53:53/udp \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><h3 id="绕过路由网格"><a href="#绕过路由网格" class="headerlink" title="绕过路由网格"></a>绕过路由网格</h3><p>要绕过 swarm 集群的路由网格，需要使用 </p><p><code>--publish</code> 参数设置 <code>mode</code> 值为<code>host</code>。</p><p>下面的命令使用 </p><p><code>host</code> 模式创建全局服务并绕过路由网格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker service create --name dns-cache \</span><br><span class="line">  --publish published=53,target=53,protocol=udp,mode=host \</span><br><span class="line">  --mode global \</span><br><span class="line">  dns-cache</span><br></pre></td></tr></table></figure><blockquote><p>绕过路由网格后的注意事项：</p><p>如果你访问未运行服务的节点，则无法访问此服务</p><p>如果你希望在每个节点运行多个服务，就不能指定静态的端口。要么就允许docker随机分配一个公开端口（通过置空 <code>published</code> 参数的值实现）</p></blockquote><h2 id="Stack-Deploy"><a href="#Stack-Deploy" class="headerlink" title="Stack-Deploy"></a>Stack-Deploy</h2><blockquote><p><a href="https://docs.docker.com/engine/swarm/stack-deploy/">Deploy a stack to a swarm | Docker Documentation</a></p></blockquote><p>正式部署集群服务，使用<code>nginx</code>镜像做为示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service create --replicas 3 -p 8088:80 --name nginx nginx:latest</span><br><span class="line">ap8h8srb8yh3mni0h2nz61njz</span><br><span class="line">overall progress: 3 out of 3 tasks </span><br><span class="line">1/3: running   [==================================================&gt;] </span><br><span class="line">2/3: running   [==================================================&gt;] </span><br><span class="line">3/3: running   [==================================================&gt;] </span><br><span class="line">verify: Service converged </span><br></pre></td></tr></table></figure><p><code>--replicas 3</code>表示创建服务的实例个数（默认1个），在个Docker节点上，分别创建一个<code>nginx</code>服务，<code>REPLICAS</code>会有进度显示，并且执行是异步的</p><p>查看服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker service ls</span><br><span class="line">ID             NAME                    MODE         REPLICAS   IMAGE                        PORTS</span><br><span class="line">82bpay4gdvd0   deploy-demo_nginx       replicated   3/3        nginx:latest                 *:8088-&gt;80/tcp</span><br><span class="line">520x2l3lcwyp   redis                   replicated   2/2        redis:3.0.6                  *:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure><p>访问任一节点8088端口：</p><p><img data-src="https://cdn.jonty.top/img/image-20220706214254711.png" alt="image-20220706214254711"></p><p><code>docker service</code>部署的是单体服务，我使用<code>docker stack</code>进行多服务编排部署，使用的同样是<code>docker-compose.yml</code>配置文件，示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8088</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">portainer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">portainer/portainer:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>] <span class="comment">## 约束服务 仅在manager node 分配</span></span><br></pre></td></tr></table></figure><p>部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker stack deploy -c docker-compose.yml deploy-demo</span><br><span class="line">Creating service deploy-demo_nginx</span><br><span class="line">Creating service deploy-demo_portainer</span><br></pre></td></tr></table></figure><p>查看部署详情：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@manager ~]# docker stack ls</span><br><span class="line">NAME          SERVICES   ORCHESTRATOR</span><br><span class="line">deploy-demo   2          Swarm</span><br></pre></td></tr></table></figure><p>访问<code>portainer</code>，可以方便的查看和管理所有的服务和堆栈</p><p><img data-src="https://cdn.jonty.top/img/swarm-portainer.gif" alt="swarm-portainer"></p><p>编写支持<code>docker stack</code>的<code>docker-compose.yml</code></p><blockquote><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">Compose file version 3 reference | Docker Documentation</a></p></blockquote><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.0.5</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">6</span> <span class="comment"># 启动实例数量</span></span><br><span class="line">      <span class="attr">placement:</span> <span class="comment"># 配置容器实例位置------------</span></span><br><span class="line">        <span class="attr">max_replicas_per_node:</span> <span class="number">2</span> <span class="comment"># 每个节点最多运行容器实例数量</span></span><br><span class="line">        <span class="attr">constraints:</span> <span class="comment"># 将容器分配到匹配标签的节点运行</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;node.role==manager&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;engine.labels.operatingsystem==ubuntu 18.04&quot;</span></span><br><span class="line">        <span class="attr">preferences:</span> <span class="comment"># 将任务平均分配到不同类别的节点上</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">spread:</span> <span class="string">node.labels.zone</span></span><br><span class="line">    <span class="attr">resources:</span> <span class="comment"># 资源限制------------</span></span><br><span class="line">        <span class="attr">limits:</span> <span class="comment"># 占用上限</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.50&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">        <span class="attr">reservations:</span> <span class="comment"># 启动占用</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.25&#x27;</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">20M</span></span><br><span class="line">    <span class="attr">restart_policy:</span> <span class="comment"># 重启策略------------</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span> <span class="comment"># 发生失败时</span></span><br><span class="line">                <span class="attr">delay:</span> <span class="string">5s</span> <span class="comment"># 重启时间间隔</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span> <span class="comment">#最大尝试次数        </span></span><br><span class="line">                <span class="attr">window:</span> <span class="string">120s</span> <span class="comment"># 判断是否重启成功的等待时长                </span></span><br><span class="line">    <span class="attr">update_config:</span> <span class="comment"># 滚动更新的配置------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 同时更新的数量</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次更新间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 滚动更新出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的更新失败率</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 更新顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)</span></span><br><span class="line">    <span class="attr">rollback_config:</span> <span class="comment"># 更新失败如何回滚------------</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span> <span class="comment"># 每次回滚的数量，如果为0则全部回滚</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span> <span class="comment"># 每次回滚间隔时间</span></span><br><span class="line">        <span class="attr">monitor:</span> <span class="string">5s</span> <span class="comment"># 每次更新监控失败持续的时长</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">&#x27;pause&#x27;</span> <span class="comment"># 回滚出现错误时执行的操作: continue/rollback/pause</span></span><br><span class="line">        <span class="attr">max_failure_ratio:</span> <span class="comment"># 允许的回滚失败率，默认为0</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">stop-first</span> <span class="comment"># 回滚顺序 stop-first(旧任务在启动新任务之前停止)或start-first(新任务首先启动，运行中的任务会出现短暂重叠)       </span></span><br></pre></td></tr></table></figure><p><code>docker-stack </code>不支持的<code>docker-compose</code>配置</p><ul><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#build">build</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#cgroup_parent">cgroup_parent</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#container_name">container_name</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#devices">devices</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#tmpfs">tmpfs</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#external_links">external_links</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#links">links</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode">network_mode</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#restart">restart</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#security_opt">security_opt</a></p></li><li><p><a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#userns_mode">userns_mode</a></p></li></ul><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker stack deploy</td><td>部署新的堆栈或更新现有堆栈</td></tr><tr><td>docker stack ls</td><td>列出现有堆栈</td></tr><tr><td>docker stack ps</td><td>列出堆栈中的任务</td></tr><tr><td>docker stack rm</td><td>删除堆栈</td></tr><tr><td>docker stack services</td><td>列出堆栈中的服务</td></tr><tr><td>docker stack down</td><td>移除某个堆栈（不会删除数据）</td></tr></tbody></table><blockquote><p>参考命令：<a href="https://docs.docker.com/engine/reference/commandline/stack/">docker stack | Docker Documentation</a></p></blockquote><h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><h3 id="配置管理"><a href="#配置管理" class="headerlink" title="配置管理"></a>配置管理</h3><h4 id="普通配置"><a href="#普通配置" class="headerlink" title="普通配置"></a>普通配置</h4><blockquote><p><a href="https://docs.docker.com/engine/swarm/configs/">使用 Docker 配置|存储配置数据Docker 文档</a></p></blockquote><h4 id="加密配置"><a href="#加密配置" class="headerlink" title="加密配置"></a>加密配置</h4><blockquote><p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">锁定您的集群以保护其加密密钥|Docker 文档</a></p></blockquote><h3 id="锁定集群"><a href="#锁定集群" class="headerlink" title="锁定集群"></a>锁定集群</h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/swarm_manager_locking/">锁定您的集群以保护其加密密钥|Docker 文档</a></p></blockquote><h3 id="管理指南"><a href="#管理指南" class="headerlink" title="管理指南"></a>管理指南</h3><blockquote><p><a href="https://docs.docker.com/engine/swarm/admin_guide/">管理和维护一组 Docker 引擎|Docker 文档</a></p></blockquote><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>使用swarm搭建集群时出现如下错误：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error </span>response from daemon: rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = &quot;transport: Error while dialing dial tcp 192.168.0.108:2377: connect: no route to host&quot;</span><br></pre></td></tr></table></figure><p>这个错误是因为将node节点加入swarm中导致的，原因就是<code>manager</code>节点这台机器上的<strong>防火墙</strong>没有关闭。</p><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>把manager这台机器上的防火墙关闭</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 查看防火墙状态</span></span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 停止防火墙</span></span></span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 禁用防火墙</span></span></span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>Docker Swarm 错误 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error creating external connectivity network: Failed to Setup IP tables: Unable to enable SKIP DNAT rule: (iptables failed: iptables --wait -t nat -I DOCKER -i docker_gwbridge -j RETURN: iptables: No chain/target/match by that name. (exit status 1))</span><br></pre></td></tr></table></figure><p>关闭防火墙后需要重启Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker-Swarm:Docker 的集群管理工具</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Swarm" scheme="https://jonty.top/tags/Swarm/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab迁移服务器无法发送邮件</title>
    <link href="https://jonty.top/2022/06/30/docker-gitlab-can-not-send-email-after-migration/"/>
    <id>https://jonty.top/2022/06/30/docker-gitlab-can-not-send-email-after-migration/</id>
    <published>2022-06-30T11:32:36.000Z</published>
    <updated>2022-07-12T15:12:44.260Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/R-C.ecb6c01c3a955a63337b4c624a15276f.png" alt="gitlab"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>gitlab</code>迁移服务器后邮箱无法发送</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><blockquote><p>官方文档：<a href="https://docs.gitlab.cn/omnibus/settings/smtp.html#%E6%B5%8B%E8%AF%95-smtp-%E9%85%8D%E7%BD%AE">SMTP 配置 | GitLab</a></p></blockquote><p>进入容器内部测试邮件发送</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it gitlab /bin/bash</span><br><span class="line"></span><br><span class="line">gitlab-rails console</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 测试邮件发送</span></span></span><br><span class="line">Notify.test_email(&#x27;xxx@email.com&#x27;,&#x27;test Gitlab Email&#x27;,&#x27;Test&#x27;).deliver_now  </span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/202204281123533.png" alt="image-20220428112334490"></p><p>可以看到无法发送，经过排查发现是安全组未放开<code>465</code>端口</p><p><img data-src="https://cdn.jonty.top/img/202204281123146.png" alt="image-20220428112300050"></p><p>重新测试，发送成功</p><p><img data-src="https://cdn.jonty.top/img/202204281124914.png" alt="image-20220428112433863"></p><blockquote><p>还有可能是邮箱配置的<strong>密钥过期</strong>导致(也碰到过)，仅供参考</p></blockquote>]]></content>
    
    
    <summary type="html">Docker：GitLab迁移服务器后无法发送邮件</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Gitlab" scheme="https://jonty.top/tags/Gitlab/"/>
    
    <category term="Smtp" scheme="https://jonty.top/tags/Smtp/"/>
    
  </entry>
  
  <entry>
    <title>Frp + OpenVpn搭建内网VPN</title>
    <link href="https://jonty.top/2022/06/20/frp-and-openvpn-to-build-intranet-VPN/"/>
    <id>https://jonty.top/2022/06/20/frp-and-openvpn-to-build-intranet-VPN/</id>
    <published>2022-06-20T13:54:03.000Z</published>
    <updated>2022-07-12T15:36:15.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>没有公网IP的前提下，公司内网的服务器资源需要能访问和使用，当然直接使用<code>frp</code>代理出去也行，但是搭配<code>OpenVpn</code>提供内网访问更加合适，下面是我在公司实操的步骤，记录以供借鉴。</p><h2 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h2><p>前提，需要有一台有<strong>公网IP</strong>的云服务器，配置不用很高，我这里使用的是腾讯云<strong>竞价实例</strong></p><img data-src="https://cdn.jonty.top/img/image-20220620220324477.png" alt="image-20220620220324477" style="zoom: 50%;" /><p>选择<strong>按流量计费</strong>比较划算，带宽需要根据实际需求设置，后续可以升级带宽</p><p><img data-src="https://cdn.jonty.top/img/image-20220620220550695.png" alt="image-20220620220550695"></p><h2 id="安装frp"><a href="#安装frp" class="headerlink" title="安装frp"></a>安装frp</h2><blockquote><p>需要先安装<a href="https://docs.docker.com/engine/install/centos/">Docker</a>和<a href="https://docs.docker.com/compose/install/compose-plugin/">Docker-Compose</a></p></blockquote><h3 id="frps-服务端"><a href="#frps-服务端" class="headerlink" title="frps - 服务端"></a>frps - 服务端</h3><p><a href="https://github.com/fatedier/frp">frp</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">--network host \</span><br><span class="line">-v /home/ubuntu/Docker/Volumes/frps/frps.ini:/etc/frp/frps.ini \</span><br><span class="line">--name frps snowdreamtech/frps:0.34.3</span><br></pre></td></tr></table></figure><p><code>frps.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务端监听 ip/端口</span></span><br><span class="line"><span class="attr">bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搭建http web服务，监听的端口（例如：80，但由于80端口留给nginx，此处改为其它端口）</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">7080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">7081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置服务器管理看板</span></span><br><span class="line"><span class="comment"># 限定访问ip，如果不限制访问请设置为：0.0.0.0。</span></span><br><span class="line"><span class="comment"># 监听端口，管理员的登录名和密码</span></span><br><span class="line"><span class="attr">dashboard_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">7082</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置记录日志的文件</span></span><br><span class="line"><span class="comment"># 日志级别：trace, debug, info, warn, error，从低到高</span></span><br><span class="line"><span class="comment"># 日志最多保留的天数</span></span><br><span class="line"><span class="attr">log_file</span> = logs/stdout.log</span><br><span class="line"><span class="attr">log_level</span> = info</span><br><span class="line"><span class="attr">log_max_days</span> = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 认证token</span></span><br><span class="line"><span class="attr">token</span> = mytoken</span><br></pre></td></tr></table></figure><blockquote><p>记得配置云服务器安全组，打开对应的端口</p></blockquote><h3 id="frpc-客户端"><a href="#frpc-客户端" class="headerlink" title="frpc - 客户端"></a>frpc - 客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">--network host \</span><br><span class="line">-v /home/ubuntu/Docker/Volumes/frpc/frpc.ini:/etc/frp/frpc.ini \</span><br><span class="line">--name frpc snowdreamtech/frpc:0.34.3</span><br></pre></td></tr></table></figure><p><code>frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = 云服务器公网ip</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="attr">token</span> = 服务端配置的token</span><br><span class="line"><span class="attr">tls_enable</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ovpn]</span></span><br><span class="line"><span class="attr">type</span> = udp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">2.11</span> <span class="comment">#内网的ip</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">1194</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1194</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ovpn-tcp]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">2.11</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">1194</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">1194</span></span><br></pre></td></tr></table></figure><h2 id="安装oepnvpn"><a href="#安装oepnvpn" class="headerlink" title="安装oepnvpn"></a>安装oepnvpn</h2><p><code>docker-compose.yml</code></p><p><code>udp</code>协议，远程桌面会丢包</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">openvpn:</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kylemanna/openvpn</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openvpn-udp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;1194:1194/udp&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./openvpn-data/conf:/etc/openvpn</span></span><br></pre></td></tr></table></figure><p><code>tcp</code>协议</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">openvpn:</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kylemanna/openvpn</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">openvpn-tcp</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;1194:1194/tcp&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">./openvpn-data/conf:/etc/openvpn</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">&#x27;ovpn_run --proto tcp&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>TCP/UDP协议都可以，公网</p><p>云服务器安全组需要打开对应端口  frp也要配置对应的端口</p></blockquote><h3 id="初始化配置文件和证书"><a href="#初始化配置文件和证书" class="headerlink" title="初始化配置文件和证书"></a>初始化配置文件和证书</h3><p><code>udp</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm openvpn-udp ovpn_genconfig -u udp://公网ip地址</span><br><span class="line">docker-compose run --rm openvpn-udp ovpn_initpki</span><br></pre></td></tr></table></figure><p><code>tcp</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm openvpn-tcp ovpn_genconfig -u tcp://公网ip地址</span><br><span class="line">docker-compose run --rm openvpn-tcp ovpn_initpki</span><br></pre></td></tr></table></figure><p>记住配置的<strong>私钥密码</strong></p><h3 id="配置文件授权-可选"><a href="#配置文件授权-可选" class="headerlink" title="配置文件授权 (可选)"></a>配置文件授权 (可选)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami): ./openvpn-data</span><br></pre></td></tr></table></figure><h3 id="启动-OpenVPN"><a href="#启动-OpenVPN" class="headerlink" title="启动 OpenVPN"></a>启动 OpenVPN</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d openvpn</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220620224559902.png" alt="image-20220620224559902"></p><h3 id="生成连接密钥"><a href="#生成连接密钥" class="headerlink" title="生成连接密钥"></a>生成连接密钥</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export CLIENTNAME=&quot;jontywang&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 有密码校验</span></span><br><span class="line">docker-compose run --rm openvpn easyrsa build-client-full $CLIENTNAME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 无密码校验</span></span><br><span class="line">docker-compose run --rm openvpn easyrsa build-client-full $CLIENTNAME nopass </span><br></pre></td></tr></table></figure><h3 id="生成证书文件"><a href="#生成证书文件" class="headerlink" title="生成证书文件"></a>生成证书文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose run --rm openvpn ovpn_getclient $CLIENTNAME &gt; $CLIENTNAME.ovpn</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20220620224912885.png" alt="image-20220620224912885"></p><p>这个配置文件就是<strong>连接密钥</strong></p><h3 id="撤销证书"><a href="#撤销证书" class="headerlink" title="撤销证书"></a>撤销证书</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保留配置文件</span></span><br><span class="line">docker-compose run --rm openvpn ovpn_revokeclient $CLIENTNAME</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除配置文件</span></span><br><span class="line">docker-compose run --rm openvpn ovpn_revokeclient $CLIENTNAME remove</span><br></pre></td></tr></table></figure><h2 id="连接VPN"><a href="#连接VPN" class="headerlink" title="连接VPN"></a>连接VPN</h2><p><a href="https://openvpn.net/client-connect-vpn-for-windows/">下载连接工具</a> </p><p>安装完成后运行VPN连接工具，运行后右键点击菜单栏图标</p><p>选择<code>import</code> =&gt; 导入配置文件，也就是上述生成的连接密钥， <code>用户名.ovpn</code> </p><p><img data-src="https://cdn.jonty.top/img/image-20220620225612512.png" alt="image-20220620225612512"></p><p><img data-src="https://cdn.jonty.top/img/image-20220620225528393.png" alt="image-20220620225528393"></p>]]></content>
    
    
    <summary type="html">Docker：使用Frp代理配合OpenVpn搭建企业内网</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Frp" scheme="https://jonty.top/tags/Frp/"/>
    
    <category term="OpenVpn" scheme="https://jonty.top/tags/OpenVpn/"/>
    
  </entry>
  
  <entry>
    <title>Docker删除本地所有镜像</title>
    <link href="https://jonty.top/2022/06/01/docker-how-to-delete-all-local-docker-images/"/>
    <id>https://jonty.top/2022/06/01/docker-how-to-delete-all-local-docker-images/</id>
    <published>2022-05-31T23:53:28.000Z</published>
    <updated>2022-07-12T15:36:44.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="删除所有容器和镜像"><a href="#删除所有容器和镜像" class="headerlink" title="删除所有容器和镜像"></a>删除所有容器和镜像</h2><h3 id="对于-Unix"><a href="#对于-Unix" class="headerlink" title="对于 Unix"></a>对于 Unix</h3><p>删除包括其卷在内的所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -vf $(docker ps -aq)</span><br></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><blockquote><p>请先删除所有容器，再删除创建这些容器的所有镜像。</p></blockquote><h3 id="对于-Windows（pwsh）"><a href="#对于-Windows（pwsh）" class="headerlink" title="对于 Windows（pwsh）"></a>对于 Windows（pwsh）</h3><p>如果在 Windows (Powershell) 上操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">images = docker images -a -q</span></span><br><span class="line">foreach ($image in $images) &#123; docker image rm $image -f &#125;</span><br></pre></td></tr></table></figure><p>也可以按如下写法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images -a -q | % &#123; docker image rm $_ -f &#125;</span><br></pre></td></tr></table></figure><p>对于使用命令行的 Windows，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /F %i in (&#x27;docker images -a -q&#x27;) do docker rmi -f %i</span><br></pre></td></tr></table></figure><h2 id="删除所有未使用的-Docker-对象"><a href="#删除所有未使用的-Docker-对象" class="headerlink" title="删除所有未使用的 Docker 对象"></a>删除所有未使用的 Docker 对象</h2><p>删除所有停止的容器、悬空的图像和未使用的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune</span><br></pre></td></tr></table></figure><p>使用<code>-f</code>( <code>--force</code>) 选项绕过提示。</p><p>如果要删除所有未使用的镜像而不仅仅是玄虚镜像，请在命令中添加<code>-a</code>参数（<code>--all</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><p>默认情况下，该命令不会删除未使用的卷以防止丢失重要数据。</p><p>要删除所有未使用的卷，使用<code>--volumes</code>参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune --volumes</span><br></pre></td></tr></table></figure><h2 id="删除-Docker-容器"><a href="#删除-Docker-容器" class="headerlink" title="删除 Docker 容器"></a>删除 Docker 容器</h2><h3 id="移除一个或多个容器"><a href="#移除一个或多个容器" class="headerlink" title="移除一个或多个容器"></a>移除一个或多个容器</h3><p>要删除一个或多个 Docker 容器，使用<code>docker container rm</code>命令，后面跟要删除的容器的 ID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm xxxxxx xxxxxx</span><br></pre></td></tr></table></figure><p>查看所有容器列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><h3 id="删除所有停止的容器"><a href="#删除所有停止的容器" class="headerlink" title="删除所有停止的容器"></a>删除所有停止的容器</h3><p>删除所有停止的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><p>列出所有停止容器的列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -a --filter status=exited --filter status=created</span><br></pre></td></tr></table></figure><h3 id="使用过滤器移除容器"><a href="#使用过滤器移除容器" class="headerlink" title="使用过滤器移除容器"></a>使用过滤器移除容器</h3><p>例如，要删除 12 小时前创建的所有图像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune --filter &quot;until=12h&quot;</span><br></pre></td></tr></table></figure><h3 id="停止并移除所有容器"><a href="#停止并移除所有容器" class="headerlink" title="停止并移除所有容器"></a>停止并移除所有容器</h3><p>停止所有正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop $(docker container ls -aq)</span><br></pre></td></tr></table></figure><p>停止所有容器后，删除所有容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm $(docker container ls -aq)</span><br></pre></td></tr></table></figure><h2 id="删除-Docker-镜像"><a href="#删除-Docker-镜像" class="headerlink" title="删除 Docker 镜像"></a>删除 Docker 镜像</h2><p>下载Docker镜像后，会一直保留在服务器上，需要手动删除</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>要删除一个或多个 Docker 镜像，首先需要找到镜像的 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm xxxxxx xxxxxx</span><br></pre></td></tr></table></figure><blockquote><p>Error response from daemon: conflict: unable to remove repository reference “centos” (must force) - container cd20b396a061 is using its referenced image 75835a67d134</p><p>需要先删除使用此镜像的容器</p></blockquote><h3 id="删除玄虚镜像"><a href="#删除玄虚镜像" class="headerlink" title="删除玄虚镜像"></a>删除玄虚镜像</h3><p>玄虚镜像是未标记且未被任何容器使用的镜像。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure><blockquote><p>运行此命令时要小心。如果你构建的图像没有标签，它将被删除。</p></blockquote><h3 id="删除所有未使用的镜像"><a href="#删除所有未使用的镜像" class="headerlink" title="删除所有未使用的镜像"></a>删除所有未使用的镜像</h3><p>要删除任何现有容器未引用的所有图像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune -a</span><br></pre></td></tr></table></figure><h3 id="使用过滤器删除图像"><a href="#使用过滤器删除图像" class="headerlink" title="使用过滤器删除图像"></a>使用过滤器删除图像</h3><p>例如，要删除超过 7 天（168 小时）前创建的所有图像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image prune -a --filter &quot;until=168h&quot;</span><br></pre></td></tr></table></figure><h2 id="删除-Docker-Volume"><a href="#删除-Docker-Volume" class="headerlink" title="删除 Docker Volume"></a>删除 Docker Volume</h2><h3 id="删除一个或多个卷"><a href="#删除一个或多个卷" class="headerlink" title="删除一个或多个卷"></a>删除一个或多个卷</h3><p>删除一个或多个 Docker 卷，列出所有卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p>根据卷ID删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm xxxxx</span><br></pre></td></tr></table></figure><h3 id="删除所有未使用的卷"><a href="#删除所有未使用的卷" class="headerlink" title="删除所有未使用的卷"></a>删除所有未使用的卷</h3><p>删除所有未使用的卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume prune -f</span><br></pre></td></tr></table></figure><h2 id="删除-Docker-网络"><a href="#删除-Docker-网络" class="headerlink" title="删除 Docker 网络"></a>删除 Docker 网络</h2><h3 id="删除一个或多个-Docker-网络"><a href="#删除一个或多个-Docker-网络" class="headerlink" title="删除一个或多个 Docker 网络"></a>删除一个或多个 Docker 网络</h3><p>查找要删除的网络ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p>根据ID删除网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network rm c520032c3d31</span><br></pre></td></tr></table></figure><h3 id="删除所有未使用的网络"><a href="#删除所有未使用的网络" class="headerlink" title="删除所有未使用的网络"></a>删除所有未使用的网络</h3><p>删除所有未使用的网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network prune</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Docker：如何删除本地所有Docker镜像</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Shell" scheme="https://jonty.top/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>程序员必备Code Review</title>
    <link href="https://jonty.top/2022/05/31/code-review/"/>
    <id>https://jonty.top/2022/05/31/code-review/</id>
    <published>2022-05-31T15:24:35.000Z</published>
    <updated>2022-07-12T15:39:22.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序员必备的代码审查（Code-Review）清单"><a href="#程序员必备的代码审查（Code-Review）清单" class="headerlink" title="程序员必备的代码审查（Code Review）清单"></a>程序员必备的代码审查（Code Review）清单</h1><p>在我们关于高效代码审查的博文中，我们建议使用一个检查清单。</p><p>在代码审查中，检查清单是一个非常好的工具——它们保证了审查可以在团队中始终如一的进行。</p><p>它们也是一种保证常见问题能够被发现并被解决的便利方式。</p><p>软件工程学院的研究表明，程序员们会犯15-20种常见的错误。</p><p>所以，把这些错误加入到检查清单当中，可以确保不论什么时候，都能发现这些错误，并且杜绝这些错误。</p><p>这里列出了一些重要的内容：代码审查清单。</p><h2 id="常规项"><a href="#常规项" class="headerlink" title="常规项"></a>常规项</h2><ul><li>代码能够工作么？它有没有实现预期的功能，逻辑是否正确等。</li><li>所有的代码是否简单易懂？</li><li>代码符合编程规范么？包括大括号的位置，变量名和函数名，行的长度，缩进，格式和注释。</li><li>是否存在冗余或是重复的代码？</li><li>代码是否尽可能的模块化了？</li><li>是否有可以被替换的全局变量？</li><li>是否有被注释掉的代码？</li><li>循环是否会造成死循环？</li><li>是否有可以被库函数替代的代码？</li><li>是否有可以删除的日志或调试代码？</li></ul><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><ul><li>所有的数据输入是否都进行了检查（检测正确的类型，长度，格式和范围）并且进行了编码？</li><li>在哪里使用了第三方工具，返回的错误是否被捕获？</li><li>输出的值是否进行了检查并且编码？</li><li>无效的参数值是否能够处理？</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li>是否有注释，并且描述了代码的意图？</li><li>所有的函数都有注释吗？</li><li>对非常规行为和边界情况处理是否有描述？</li><li>第三方库的使用和函数是否有文档？</li><li>数据结构和计量单位是否进行了解释？</li><li>是否有未完成的代码？如果是的话，是不是应该移除，或者用合适的标记进行标记比如<code>TODO</code>？</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>代码是否可以测试？比如，不要添加太多的或是隐藏的依赖关系，不能够初始化对象，测试框架可以使用方法等。</li><li>是否存在测试，它们是否可以被理解？比如，至少达到令人满意的代码覆盖(code coverage)。</li><li>单元测试是否真正的测试了代码是否可以完成预期的功能？</li><li>是否检查了数组的“<strong>越界</strong>“错误？</li><li>是否有可以被已经存在的API所替代的测试代码？</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>同样的，需要把特定语言中有可能引起错误的问题添加到清单中。</p><p>这个清单特地没有详细的列出所有可能会发生的错误。内容太多了以至于从来没人会去用它，仅仅包含常见的问题会比较好。</p><h2 id="优化你的清单"><a href="#优化你的清单" class="headerlink" title="优化你的清单"></a>优化你的清单</h2><p>把使用清单作为你的起点，针对特定的使用案例，你需要对其进行优化。</p><p>一个比较棒的方式就是让你的团队记录下那些在代码审查过程中临时发现的问题，有了这些数据，你就能够确定你的团队常犯的错误，然后你就可以量身定制一个审查清单。确保你删除了那些没有出现过的错误。（你也可以保留那些出现概率很小，但是非常关键的项目，比如安全相关的问题）。</p><h2 id="得到认可并且保持更新"><a href="#得到认可并且保持更新" class="headerlink" title="得到认可并且保持更新"></a>得到认可并且保持更新</h2><p>基本规则是，清单上的任何条目都必须明确，而且，如果可能的话，对于一些条目你可以对其进行二元判定。这样可以防止判断的不一致。和你的团队分享这份清单并且让他们认同你清单的内容是个好主意。同样的，要定期检查你的清单，以确保各条目仍然是有意义的。</p><p>有了一个好的清单，可以提高你在代码审查过程中发现的缺陷个数。这可以帮助你提高代码标准，避免质量参差不齐的代码审查。</p>]]></content>
    
    
    <summary type="html">程序员必备的代码审查（Code Review）清单</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
    <category term="Code Review" scheme="https://jonty.top/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】SQL Server优化-索引</title>
    <link href="https://jonty.top/2022/05/22/sql-optimization-index/"/>
    <id>https://jonty.top/2022/05/22/sql-optimization-index/</id>
    <published>2022-05-22T12:46:50.000Z</published>
    <updated>2022-07-24T13:48:34.777Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据如何存储在SQL数据库中"><a href="#数据如何存储在SQL数据库中" class="headerlink" title="数据如何存储在SQL数据库中"></a>数据如何存储在SQL数据库中</h1><img data-src="https://cdn.jonty.top/img/database-index-structure.jpg" alt="数据库索引结构" style="zoom: 33%;" /><h2 id="数据如何物理存储在-SQL-Server-中"><a href="#数据如何物理存储在-SQL-Server-中" class="headerlink" title="数据如何物理存储在 SQL Server 中"></a>数据如何物理存储在 SQL Server 中</h2><p>你有没有想过SQL Server 如何在内部物理存储表数据？表中的数据在逻辑上以<strong>行和列</strong>格式存储，但在物理上它将数据存储在称为<strong>数据页</strong>的东西中，数据页是 SQL Server 中数据存储的<strong>基本单位</strong>，大小为 <strong>8KB</strong>。当我们将任何数据插入到 SQL Server 数据库表中时，它会将这些数据保存到一系列 8 KB 数据页中。</p><img data-src="https://cdn.jonty.top/img/how-is-data-stored-physically-in-sql-server.png" alt="数据是如何物理存储在 sql server 中的" style="zoom:50%;" /><h2 id="SQL-Server-中的数据存储在树状结构中"><a href="#SQL-Server-中的数据存储在树状结构中" class="headerlink" title="SQL Server 中的数据存储在树状结构中"></a>SQL Server 中的数据存储在树状结构中</h2><p>SQL Server 中的表数据实际上存储在树状结构中。我们通过一个简单的例子来理解这一点。</p><img data-src="https://cdn.jonty.top/img/how-is-data-stored-in-sql-database.jpg" alt="数据是如何物理存储在 sql server 中的" style="zoom: 33%;" /><ul><li><code>EmployeeId</code> 是主键列，所以默认情况下，会在这个<code>EmployeeId </code>列上创建一个<strong>聚集索引</strong></li><li>物理存储在数据库中的数据按 <code>EmployeeId</code> 列排序</li></ul><h2 id="数据实际存储在哪里"><a href="#数据实际存储在哪里" class="headerlink" title="数据实际存储在哪里"></a>数据实际存储在哪里</h2><p>它存储在树状结构中的一系列数据页中。如下所示。</p><p>这种树状结构称为 B-Tree、索引 B-Tree 或聚集索引结构（含义相同）。</p><img data-src="https://www.pragimtech.com/blog/contribute/article_images/1220210328005839/how-sql-server-stores-data-internally.png" alt="sql server 如何在内部存储数据" style="zoom:33%;" /><ul><li><p>在树底部看到的节点称为<strong>数据页</strong>或树的叶节点，这些叶节点包含我们的表数据。</p></li><li><p>每个数据页的大小为 8 KB，每个数据页中存储的行数实际上取决于每行的大小。</p></li></ul><p>对于上述示例，假设在<code> Employees</code> 表中有 1200 行数据，在每个数据页中有 200 行数据，但实际上根据行数据的大小，数量可能会有上下浮动。我们假设每个数据页有 200 行。这些数据页中的行按 <code>EmployeeId</code> 列排序，因为<code>EmployeeId</code>是表的主键(聚集索引)。</p><p>在第一个数据页中有 1 到 200 行，在第二个数据页中有 201 到 400 行，在第三个 401 到 600 行，依此类推…</p><p>树顶部的节点称为<strong>根节点</strong>。根节点和叶节点之间的节点称为<strong>中间层</strong>，可以有多个中间层，中间层的数量取决于基础数据库表中的行数。</p><p>根节点和中间层节点包含索引行，叶节点（即树底部的节点）包含实际数据行。每个索引行包含一个键值（在我们的例子中是员工 ID）和一个指向 B Tree中的中间层或叶节点中的数据行的指针。 这种树状结构有一系列指针，可以帮助数据库引擎快速找到数据。</p><h2 id="SQL-Server-如何通过-ID-查找行"><a href="#SQL-Server-如何通过-ID-查找行" class="headerlink" title="SQL Server 如何通过 ID 查找行"></a>SQL Server 如何通过 ID 查找行</h2><p>假设我们要查找 <code>EmployeeId = 1120</code> 的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> EmployeeId <span class="operator">=</span> <span class="number">1120</span>;</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/how-data-is-stored-in-sql-database.jpg" alt="数据如何存储在sql数据库中" style="zoom:33%;" /><p>第一步：数据库引擎从根节点开始，它选择右边的索引节点，因为数据库引擎知道这个节点包含从 801 到 1200 的员工 ID。</p><p>第二步：选择最右边的叶节点，因为从 1001 到 1200 的员工数据行存在于该叶节点中。</p><p>第三步：叶节点中的数据行按员工 ID 排序，因此数据库引擎很容易找到 ID = 1120 的数据行。</p><p>只需 3 次操作，SQL Server 就能找到我们要查找的数据。如果有上百甚至上千万条记录，SQL Server 也可以方便快捷地找到我们要查找的数据，前提是有一个<strong>索引</strong>可以帮助查询查找数据。</p><h1 id="索引是如何工作的"><a href="#索引是如何工作的" class="headerlink" title="索引是如何工作的"></a>索引是如何工作的</h1><h2 id="创建员工表"><a href="#创建员工表" class="headerlink" title="创建员工表"></a>创建员工表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Employees</span><br><span class="line">(</span><br><span class="line">Id <span class="type">int</span> <span class="keyword">primary</span> key <span class="keyword">identity</span>,</span><br><span class="line">[Name] nvarchar(<span class="number">50</span>),</span><br><span class="line">Email nvarchar(<span class="number">50</span>),</span><br><span class="line">Department nvarchar(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line">Go</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">Declare</span> <span class="variable">@counter</span> <span class="type">int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">While(<span class="variable">@counter</span> <span class="operator">&lt;=</span> <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line"><span class="keyword">Declare</span> <span class="variable">@Name</span> nvarchar(<span class="number">50</span>) <span class="operator">=</span> <span class="string">&#x27;ABC &#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>)</span><br><span class="line"><span class="keyword">Declare</span> <span class="variable">@Email</span> nvarchar(<span class="number">50</span>) <span class="operator">=</span> <span class="string">&#x27;abc&#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>) <span class="operator">+</span> <span class="string">&#x27;@jonty.top&#x27;</span></span><br><span class="line"><span class="keyword">Declare</span> <span class="variable">@Dept</span> nvarchar(<span class="number">10</span>) <span class="operator">=</span> <span class="string">&#x27;Dept &#x27;</span> <span class="operator">+</span> RTRIM(<span class="variable">@counter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Insert</span> <span class="keyword">into</span> Employees <span class="keyword">values</span> (<span class="variable">@Name</span>, <span class="variable">@Email</span>, <span class="variable">@Dept</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span> <span class="variable">@counter</span> <span class="operator">=</span> <span class="variable">@counter</span> <span class="operator">+</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line">If(<span class="variable">@Counter</span><span class="operator">%</span><span class="number">100000</span> <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">Print RTRIM(<span class="variable">@Counter</span>) <span class="operator">+</span> <span class="string">&#x27; rows inserted&#x27;</span></span><br><span class="line"><span class="keyword">End</span></span><br></pre></td></tr></table></figure><h2 id="聚集索引搜索"><a href="#聚集索引搜索" class="headerlink" title="聚集索引搜索"></a>聚集索引搜索</h2><img data-src="https://cdn.jonty.top/img/include-actual-execution-plan-in-sql-server.png" alt="在 sql server 中包含实际的执行计划" style="zoom:33%;" /><p>在 SSMS 中单击<code>Include Actual Execution Plan</code>图标，然后执行以下查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> Id <span class="operator">=</span> <span class="number">932000</span>;</span><br></pre></td></tr></table></figure><p>实际执行计划如下:</p><img data-src="https://cdn.jonty.top/img/clustered-index-seek.png" alt="聚集索引查找" style="zoom:33%;" /><p>这里操作是 Clustered Index Seek，数据库引擎使用员工 Id 列上的<strong>聚集索引</strong>来查找 <code>Id = 932000 </code>的员工行</p><ul><li>Number of Rows Read (读取的行数) = 1</li><li>Actual Number of Rows for All Executions (所有执行的实际行数 )= 1</li></ul><p>读取的行数，是指SQL 服务器为产生查询结果而必须读取的行数。</p><p>在我们的例子中，员工 ID 是唯一的，结果集为 1 行，这由所有执行的实际行数表示。</p><p>在索引的帮助下，SQL Server 能够直接读取我们需要的 1 个特定员工行。所以，读取的行数和所有执行的实际行数都是 1。</p><p>如果有上百甚至上千万条记录，SQL Server 都可以方便快捷地找到我们要查找的数据，前提是有一个<strong>索引</strong>可以帮助查询数据。</p><h2 id="聚集索引扫描"><a href="#聚集索引扫描" class="headerlink" title="聚集索引扫描"></a>聚集索引扫描</h2><p>在这个例子中，<code>EmployeeId </code>列上有一个<strong>聚集索引</strong>，当我们通过员工 id 搜索时，SQL Server 可以快速地找到我们要查找的数据。</p><p>那如果我们按员工姓名搜索怎么办？<code>Name</code> 列上没有创建索引，因此 SQL Server 没有简单的方法找到我们要查找的数据，必须读取表中的每条记录，从性能的角度来看，效率是非常低的。</p><p><code>Include Actual Execution Plan</code>在打开的情况下执行以下查询:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">Where</span> Name <span class="operator">=</span> <span class="string">&#x27;ABC 932000&#x27;</span>;</span><br></pre></td></tr></table></figure><p>实际执行计划如下:</p><img data-src="https://cdn.jonty.top/img/clustered-index-scan.png" alt="聚集索引扫描" style="zoom:33%;" /><p>注意，这里操作的操作是<code>Clustered Index Scan</code>。由于没有合适的索引，数据库引擎只能读取表中的每条记录。</p><ul><li>Number of Rows Read (读取的行数) = 1000000</li><li>Actual Number of Rows for All Executions (所有执行的实际行数 )= 1</li></ul><p>我们需要的结果只有1行，只有一名员工的姓名 = ‘ABC 932000’。而要查询这一条数据，SQL Server 必须从表中读取所有的数据行。</p><p>这被称为索引扫描，索引扫描对性能有影响。</p><h2 id="SQL-Server-中的非聚集索引"><a href="#SQL-Server-中的非聚集索引" class="headerlink" title="SQL Server 中的非聚集索引"></a>SQL Server 中的非聚集索引</h2><p>在<code>Name</code>字段上创建非聚集索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> NONCLUSTERED INDEX IX_Employees_Name</span><br><span class="line"><span class="keyword">ON</span> [dbo].[Employees] ([Name])</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/non-clustered-index-structure-in-sql-server.png" alt="non clustered index structure in sql server" style="zoom:33%;" /><p>在非集群索引中，我们没有表的数据。我们有键值和行定位器。我们在 Name 列上创建了一个<strong>非聚集索引</strong>，键值（在本例中为 Employee Name）按字母顺序排序和存储。树底部的行定位器包含员工姓名和行主键，也就是<code>Employee Id</code>。</p><p>打开<code>包括实际执行计划</code>执行以下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">Where</span> Name <span class="operator">=</span> <span class="string">&#x27;ABC 932000&#x27;</span>;</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/sql-server-execution-plan-example.png" alt="sql server 执行计划示例" style="zoom: 50%;" /><h2 id="非聚集索引的运行情况"><a href="#非聚集索引的运行情况" class="headerlink" title="非聚集索引的运行情况"></a>非聚集索引的运行情况</h2><p>当我们执行查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Employees <span class="keyword">where</span> Name<span class="operator">=</span><span class="string">&#x27;David&#x27;</span></span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/how-does-a-non-clustered-index-point-to-the-data.png" alt="非聚集索引如何指向数据" style="zoom: 33%;" /><ul><li>SQL Server 使用 <code>Name</code> 列上的非聚集索引在索引中快速找到该员工条目。</li><li>在非聚集索引以及员工姓名中，我们还有集群键（在我们的例子中是 <code>Employee Id</code>）。</li><li>数据库引擎知道<code> Employee Id</code>上有<strong>聚集索引</strong>，使用<code>Employee Id</code>查找相应的员工记录。</li></ul><blockquote><p>注意：在名称列上有和没有非聚集索引的估计查询成本。</p></blockquote><img data-src="https://cdn.jonty.top/img/how-nonclustered-index-works.png" alt="how nonclustered index works" style="zoom: 50%;" />]]></content>
    
    
    <summary type="html">SQL Server优化之数据存储和索引</summary>
    
    
    
    <category term="DBA" scheme="https://jonty.top/categories/DBA/"/>
    
    
    <category term="SQL Server" scheme="https://jonty.top/tags/SQL-Server/"/>
    
    <category term="索引" scheme="https://jonty.top/tags/%E7%B4%A2%E5%BC%95/"/>
    
    <category term="翻译" scheme="https://jonty.top/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>SQL Server 批量处理表</title>
    <link href="https://jonty.top/2022/05/08/sqlserver-batch-processing-tables/"/>
    <id>https://jonty.top/2022/05/08/sqlserver-batch-processing-tables/</id>
    <published>2022-05-08T14:39:23.000Z</published>
    <updated>2022-07-24T13:48:40.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><div class="note info"><p>由于平台架构的调整，我所负责的项目也迁移到新的框架中了，加上由于历史遗留问题，对表结构有很大影响，为了不影响生产库的数据，需要对测试库和正式库进行结构同步，于是有了这篇文章。</p></div><h2 id="转换表名"><a href="#转换表名" class="headerlink" title="转换表名"></a>转换表名</h2><p>如果需要批量转换数据库表名，可以使用以下<code>sql</code>生成的<strong>可执行语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;EXEC sp_rename &#x27;</span></span><br><span class="line"><span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;, &#x27;</span></span><br><span class="line"><span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="operator">+</span> <span class="built_in">Lower</span>(TABLE_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;&#x27;</span> <span class="keyword">as</span> sqlstr</span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES</span><br><span class="line"><span class="keyword">WHERE</span> OBJECTPROPERTY(OBJECT_ID(QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">QUOTENAME(TABLE_NAME)), <span class="string">&#x27;IsMSShipped&#x27;</span>) <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_TYPE <span class="operator">=</span> <span class="string">&#x27;BASE TABLE&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> QUOTENAME(TABLE_SCHEMA) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> QUOTENAME(TABLE_NAME)</span><br></pre></td></tr></table></figure><ul><li>Lower(TABLE_NAME) ：将表名转换为小写，如果需要转换成大写可以使用<code>Upper()</code></li></ul><p>如图是生成的可执行SQL语句：</p><p><img data-src="https://cdn.jonty.top/img/202205082319209.png" alt="image-20220508231946150"></p><p>操作的对象是<code>INFORMATION_SCHEMA.TABLES</code>，可以根据需求进行筛选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA.TABLES</span><br></pre></td></tr></table></figure><h2 id="转换字段"><a href="#转换字段" class="headerlink" title="转换字段"></a>转换字段</h2><p>由于生产库以前使用的是<code>pgsql</code>，生成的字段全部为小写，所以下面是生成转换字段的<code>sql</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;EXEC sp_rename &#x27;&#x27;&#x27;</span> <span class="operator">+</span> TABLE_SCHEMA <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> TABLE_NAME <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span> </span><br><span class="line">COLUMN_NAME <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;, &#x27;&#x27;&#x27;</span> <span class="operator">+</span></span><br><span class="line"><span class="built_in">LOWER</span>(COLUMN_NAME) <span class="operator">+</span> <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;COLUMN&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.COLUMNS</span><br><span class="line"><span class="keyword">WHERE</span> OBJECTPROPERTY(OBJECT_ID(<span class="string">&#x27;[&#x27;</span> <span class="operator">+</span> TABLE_SCHEMA <span class="operator">+</span> <span class="string">&#x27;].[&#x27;</span> <span class="operator">+</span> TABLE_NAME <span class="operator">+</span> <span class="string">&#x27;]&#x27;</span>),</span><br><span class="line"><span class="string">&#x27;isMSShipped&#x27;</span>) <span class="operator">=</span> <span class="number">0</span> <span class="keyword">AND</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;dbo&#x27;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/202205082331972.png" alt="image-20220508233159927"></p><p>这里操作的对象是<code>INFORMATION_SCHEMA.COLUMNS</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> INFORMATION_SCHEMA.COLUMNS</span><br></pre></td></tr></table></figure><h2 id="批量删除字段"><a href="#批量删除字段" class="headerlink" title="批量删除字段"></a>批量删除字段</h2><p>由于之前迁移<code>pgsql</code>的原因，生成了很多<code>trialxxx</code>的字段，对于这些无用的、历史遗留的也一并解决。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 批量操作所有表中的相同字段</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;ALTER TABLE [dbo].[&#x27;</span><span class="operator">+</span>tab.name<span class="operator">+</span><span class="string">&#x27;] DROP COLUMN &#x27;</span><span class="operator">+</span> col.name <span class="operator">+</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">as</span> sqlstr <span class="keyword">from</span> </span><br><span class="line">sys.tables tab <span class="keyword">join</span> sys.columns col <span class="keyword">on</span> tab.object_id <span class="operator">=</span> col.object_id <span class="keyword">and</span> col.name <span class="keyword">like</span> <span class="string">&#x27;trial%&#x27;</span> </span><br></pre></td></tr></table></figure><blockquote><p>这里筛选条件需要根据实际需求调整</p></blockquote><p><img data-src="https://cdn.jonty.top/img/202205082344690.png" alt="image-20220508234429639"></p><h2 id="批量删除索引"><a href="#批量删除索引" class="headerlink" title="批量删除索引"></a>批量删除索引</h2><p>进行结构同步时，由于字段名变化，需要把所有的索引删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除所有索引</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;drop index &#x27;</span><span class="operator">+</span>o.name<span class="operator">+</span><span class="string">&#x27;.&#x27;</span><span class="operator">+</span>i.name<span class="operator">+</span><span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> sys.indexes i <span class="keyword">join</span> sys.objects o <span class="keyword">on</span>  i.object_id<span class="operator">=</span>o.object_id</span><br><span class="line">  <span class="keyword">where</span> o.type<span class="operator">&lt;&gt;</span><span class="string">&#x27;S&#x27;</span> </span><br></pre></td></tr></table></figure><p>这里操作的是<code>sys.indexes</code>，可以根据需求筛选要删除的<strong>索引类型</strong>等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.indexes</span><br></pre></td></tr></table></figure><h2 id="批量删除主外键"><a href="#批量删除主外键" class="headerlink" title="批量删除主外键"></a>批量删除主外键</h2><p>当数据库表中存在主外键关系时，会阻止我们进行更改操作，所以需要删除主外键关系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">        <span class="string">&#x27;alter table &#x27;</span> <span class="operator">+</span> quotename(schema_name(schema_id)) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">        quotename(object_name(parent_object_id)) <span class="operator">+</span></span><br><span class="line">        <span class="string">&#x27; drop constraint &#x27;</span><span class="operator">+</span>quotename(name) <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> sys.foreign_keys</span><br></pre></td></tr></table></figure><p>这里操作的是<code>sys.foreign_keys</code>，可以判断是<strong>主键</strong>或是<strong>外键引用</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sys.foreign_keys</span><br></pre></td></tr></table></figure><h2 id="删除所有表描述"><a href="#删除所有表描述" class="headerlink" title="删除所有表描述"></a>删除所有表描述</h2><p>清空表的描述字段信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;EXEC sp_dropextendedproperty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@name = &#x27;&#x27;MS_Description&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0type = &#x27;&#x27;schema&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0name = &#x27;</span> <span class="operator">+</span> object_schema_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1type = &#x27;&#x27;table&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1name = &#x27;</span> <span class="operator">+</span> object_name(extended_properties.major_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys.extended_properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> extended_properties.class_desc <span class="operator">=</span> <span class="string">&#x27;OBJECT_OR_COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.minor_id <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.name <span class="operator">=</span> <span class="string">&#x27;MS_Description&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="删除所有字段描述"><a href="#删除所有字段描述" class="headerlink" title="删除所有字段描述"></a>删除所有字段描述</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="string">&#x27;EXEC sp_dropextendedproperty</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@name = &#x27;&#x27;MS_Description&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0type = &#x27;&#x27;schema&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level0name = &#x27;</span> <span class="operator">+</span> object_schema_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1type = &#x27;&#x27;table&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level1name = &#x27;</span> <span class="operator">+</span> object_name(extended_properties.major_id) <span class="operator">+</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level2type = &#x27;&#x27;column&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">,@level2name = &#x27;</span> <span class="operator">+</span> columns.name  <span class="keyword">as</span> sqlstr</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys.extended_properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">join</span> sys.columns</span><br><span class="line"></span><br><span class="line"><span class="keyword">on</span> columns.object_id <span class="operator">=</span> extended_properties.major_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> columns.column_id <span class="operator">=</span> extended_properties.minor_id</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> extended_properties.class_desc <span class="operator">=</span> <span class="string">&#x27;OBJECT_OR_COLUMN&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.minor_id <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> extended_properties.name <span class="operator">=</span> <span class="string">&#x27;MS_Description&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="执行语句"><a href="#执行语句" class="headerlink" title="执行语句"></a>执行语句</h2><p>上面的操作都是按条件生成可执行的SQL语句，并没有执行相关操作。</p><p>我们使用<code>sys.sp_executesql</code>执行SQL语句。</p><p>对于我们查询的结果集，这里提供以下两种方式执行，大家有更好的方法欢迎提出，这里仅供参考，</p><h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><p>使用游标<strong>逐行</strong>执行SQL语句</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-- 使用游标处理</span><br><span class="line">declare OneCursor cursor----创建游标</span><br><span class="line"><span class="keyword">for</span></span><br><span class="line"></span><br><span class="line">-- 放要执行的sql集合</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;drop index &#x27;</span>+o.name+<span class="string">&#x27;.&#x27;</span>+i.name+<span class="string">&#x27;;&#x27;</span></span><br><span class="line">  <span class="keyword">from</span> sys.indexes i <span class="keyword">join</span> sys.objects o <span class="keyword">on</span>  i.object_id=o.object_id</span><br><span class="line">  <span class="keyword">where</span> o.type&lt;&gt;<span class="string">&#x27;S&#x27;</span> <span class="keyword">and</span> is_primary_key&lt;&gt;<span class="number">1</span>  </span><br><span class="line"></span><br><span class="line">open OneCursor ---打开游标</span><br><span class="line">declare @ItemName nvarchar(max);---声明<span class="number">2</span>个变量用于填充</span><br><span class="line">fetch next <span class="keyword">from</span> OneCursor <span class="keyword">into</span> @ItemName ---移动到游标的第一行用于填充</span><br><span class="line"><span class="keyword">while</span> @@FETCH_STATUS=<span class="number">0</span> ---若为<span class="number">0</span>，则代表成功执行</span><br><span class="line">begin</span><br><span class="line">print @ItemName</span><br><span class="line">EXECUTE sys.sp_executesql @ItemName</span><br><span class="line">fetch next <span class="keyword">from</span> OneCursor <span class="keyword">into</span> @ItemName ----移动到游标的下一行并填充到变量中</span><br><span class="line">end</span><br><span class="line">close OneCursor ---关闭游标</span><br><span class="line">deallocate OneCursor --删除游标</span><br></pre></td></tr></table></figure><h3 id="批量执行"><a href="#批量执行" class="headerlink" title="批量执行"></a>批量执行</h3><p>执行全部SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@sql</span> nvarchar(max) <span class="operator">=</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="string">&#x27;alter table &#x27;</span> <span class="operator">+</span> quotename(schema_name(schema_id)) <span class="operator">+</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">+</span></span><br><span class="line">        quotename(object_name(parent_object_id)) <span class="operator">+</span></span><br><span class="line">        <span class="string">&#x27; drop constraint &#x27;</span><span class="operator">+</span>quotename(name) <span class="operator">+</span> <span class="string">&#x27;;&#x27;</span></span><br><span class="line">    <span class="keyword">from</span> sys.foreign_keys</span><br><span class="line">    <span class="keyword">for</span> xml path(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">exec</span> sp_executesql <span class="variable">@sql</span>;</span><br></pre></td></tr></table></figure><h2 id="扩展查询"><a href="#扩展查询" class="headerlink" title="扩展查询"></a>扩展查询</h2><p><strong>查询数据库表中的所有字段信息以及描述。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   </span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> ddd.value <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> &quot;表名（中文）&quot;,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> d.name <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 表名,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.colorder<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> ddd.value <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 表说明,<span class="comment">--如果表名相同就返回空  </span></span><br><span class="line">     a.colorder <span class="keyword">as</span> 字段序号,  </span><br><span class="line">     a.name <span class="keyword">as</span> 字段名,  </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> COLUMNPROPERTY( a.id,a.name,<span class="string">&#x27;IsIdentity&#x27;</span>)<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span><span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 是否自增标识,  </span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> (<span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> sysobjects<span class="comment">--查询主键  </span></span><br><span class="line">                     <span class="keyword">WHERE</span> (name <span class="keyword">in</span>  </span><br><span class="line">                             (<span class="keyword">SELECT</span> name <span class="keyword">FROM</span> sysindexes   </span><br><span class="line">                               <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id)  <span class="keyword">AND</span> (indid <span class="keyword">in</span>  </span><br><span class="line">                                     (<span class="keyword">SELECT</span> indid <span class="keyword">FROM</span> sysindexkeys  </span><br><span class="line">                                       <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id) <span class="keyword">AND</span> (colid <span class="keyword">in</span>  </span><br><span class="line">                                         (<span class="keyword">SELECT</span> colid <span class="keyword">FROM</span> syscolumns  </span><br><span class="line">                                          <span class="keyword">WHERE</span> (id <span class="operator">=</span> a.id) <span class="keyword">AND</span> (name <span class="operator">=</span> a.name)</span><br><span class="line">           )  </span><br><span class="line">                                      )</span><br><span class="line">                    )</span><br><span class="line">        )</span><br><span class="line">           )</span><br><span class="line">      )</span><br><span class="line">         <span class="keyword">AND</span> (xtype <span class="operator">=</span> <span class="string">&#x27;PK&#x27;</span>))<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 主键,<span class="comment">--查询主键END  </span></span><br><span class="line"> b.name <span class="keyword">as</span> 类型,  </span><br><span class="line"> a.length <span class="keyword">as</span> 占用字节数,  </span><br><span class="line"> COLUMNPROPERTY(a.id,a.name,<span class="string">&#x27;PRECISION&#x27;</span>) <span class="keyword">as</span>  长度,  </span><br><span class="line"> isnull(COLUMNPROPERTY(a.id,a.name,<span class="string">&#x27;Scale&#x27;</span>),<span class="number">0</span>) <span class="keyword">as</span> 小数位数,  </span><br><span class="line"> (<span class="keyword">case</span> <span class="keyword">when</span> a.isnullable<span class="operator">=</span><span class="number">1</span> <span class="keyword">then</span> <span class="string">&#x27;√&#x27;</span><span class="keyword">else</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> 允许空,  </span><br><span class="line"> isnull(e.text,<span class="string">&#x27;&#x27;</span>) <span class="keyword">as</span> 默认值, </span><br><span class="line"> isnull(g.[<span class="keyword">value</span>],<span class="string">&#x27;&#x27;</span>) <span class="keyword">AS</span> 字段说明   </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">FROM</span> syscolumns a </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> systypes b</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">on</span> a.xtype<span class="operator">=</span>b.xusertype  </span><br><span class="line"> <span class="keyword">inner</span> <span class="keyword">join</span> sysobjects d   </span><br><span class="line"> <span class="keyword">on</span> a.id<span class="operator">=</span>d.id <span class="keyword">and</span> d.xtype<span class="operator">=</span><span class="string">&#x27;U&#x27;</span> <span class="keyword">and</span> d.name<span class="operator">&lt;&gt;</span><span class="string">&#x27;dtproperties&#x27;</span>  </span><br><span class="line"> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span>( <span class="keyword">SELECT</span> major_id, <span class="keyword">value</span> </span><br><span class="line">     <span class="keyword">FROM</span> sys.extended_properties </span><br><span class="line">     <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">&#x27;MS_Description&#x27;</span> <span class="keyword">AND</span> minor_id <span class="operator">=</span> <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">as</span> ddd  <span class="keyword">ON</span> a.id <span class="operator">=</span> ddd.major_id</span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> syscomments e  </span><br><span class="line"> <span class="keyword">on</span> a.cdefault<span class="operator">=</span>e.id  </span><br><span class="line"> <span class="keyword">left</span> <span class="keyword">join</span> sys.extended_properties g  </span><br><span class="line"> <span class="keyword">on</span> a.id<span class="operator">=</span>g.major_id <span class="keyword">AND</span> a.colid <span class="operator">=</span> g.minor_id  <span class="keyword">where</span> d.name <span class="keyword">like</span> <span class="string">&#x27;%&#x27;</span></span><br><span class="line"> <span class="keyword">order</span> <span class="keyword">by</span> a.id,a.colorder</span><br></pre></td></tr></table></figure><p><strong>查询SQL占用</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">100</span></span><br><span class="line">[cpu_time],</span><br><span class="line"> [session_id],</span><br><span class="line"> [request_id],</span><br><span class="line"> [start_time] <span class="keyword">AS</span> <span class="string">&#x27;开始时间&#x27;</span>,</span><br><span class="line"> [status] <span class="keyword">AS</span> <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line"> <span class="comment">--[command] AS &#x27;命令&#x27;,</span></span><br><span class="line"> dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span>,</span><br><span class="line"> DB_NAME([database_id]) <span class="keyword">AS</span> <span class="string">&#x27;数据库名&#x27;</span>,</span><br><span class="line"> <span class="comment">--[blocking_session_id] AS &#x27;正在阻塞其他会话的会话ID&#x27;,</span></span><br><span class="line"> der.[wait_type] <span class="keyword">AS</span> <span class="string">&#x27;等待资源类型&#x27;</span>,</span><br><span class="line"> [wait_time] <span class="keyword">AS</span> <span class="string">&#x27;等待时间&#x27;</span>,</span><br><span class="line"> [wait_resource] <span class="keyword">AS</span> <span class="string">&#x27;等待的资源&#x27;</span>,</span><br><span class="line"> [dows].[waiting_tasks_count] <span class="keyword">AS</span> <span class="string">&#x27;当前正在进行等待的任务数&#x27;</span>,</span><br><span class="line"> [<span class="keyword">reads</span>] <span class="keyword">AS</span> <span class="string">&#x27;物理读次数&#x27;</span>,</span><br><span class="line"> [writes] <span class="keyword">AS</span> <span class="string">&#x27;写次数&#x27;</span>,</span><br><span class="line"> [logical_reads] <span class="keyword">AS</span> <span class="string">&#x27;逻辑读次数&#x27;</span>,</span><br><span class="line"> [row_count] <span class="keyword">AS</span> <span class="string">&#x27;返回结果行数&#x27;</span></span><br><span class="line"> <span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> [sys].[dm_os_wait_stats] <span class="keyword">AS</span> dows</span><br><span class="line"> <span class="keyword">ON</span> der.[wait_type]<span class="operator">=</span>[dows].[wait_type]</span><br><span class="line"> <span class="keyword">CROSS</span> APPLY</span><br><span class="line"> sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"> <span class="comment">--WHERE [session_id]&gt;50</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> [cpu_time] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">dest.[text] <span class="keyword">AS</span> <span class="string">&#x27;sql语句&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der</span><br><span class="line"><span class="keyword">CROSS</span> APPLY</span><br><span class="line">sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest</span><br><span class="line"><span class="keyword">WHERE</span> [session_id]<span class="operator">&gt;</span><span class="number">50</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [cpu_time] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">10</span></span><br><span class="line">   total_worker_time<span class="operator">/</span>execution_count <span class="keyword">AS</span> avg_cpu_cost, plan_handle,</span><br><span class="line">   execution_count,</span><br><span class="line">   (<span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(text, statement_start_offset<span class="operator">/</span><span class="number">2</span> <span class="operator">+</span> <span class="number">1</span>,</span><br><span class="line">      (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> statement_end_offset <span class="operator">=</span> <span class="number">-1</span></span><br><span class="line">         <span class="keyword">THEN</span> LEN(<span class="keyword">CONVERT</span>(nvarchar(max), text)) <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">         <span class="keyword">ELSE</span> statement_end_offset</span><br><span class="line">      <span class="keyword">END</span> <span class="operator">-</span> statement_start_offset)<span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">   <span class="keyword">FROM</span> sys.dm_exec_sql_text(sql_handle)) <span class="keyword">AS</span> query_text</span><br><span class="line"><span class="keyword">FROM</span> sys.dm_exec_query_stats</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> [avg_cpu_cost] <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> net_address, hostname,hostprocess,program_name,loginame,login_time <span class="keyword">from</span> master.dbo.sysprocesses</span><br><span class="line"><span class="keyword">where</span> dbid <span class="operator">=</span> DB_ID(<span class="string">&#x27;xsteam_datacenter&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> hostprocess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> p.object_id, object_name<span class="operator">=</span>object_name(p.object_id), p.index_id, buffer_pages<span class="operator">=</span><span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> sys.allocation_units a,sys.dm_os_buffer_descriptors b,     sys.partitions p </span><br><span class="line"><span class="keyword">where</span> a.allocation_unit_id<span class="operator">=</span>b.allocation_unit_id      <span class="keyword">and</span> a.container_id<span class="operator">=</span>p.hobt_id     <span class="keyword">and</span> b.database_id<span class="operator">=</span>db_id()</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p.object_id,p.index_id <span class="keyword">order</span> <span class="keyword">by</span> buffer_pages <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="项目迁移数据库做的调整"><a href="#项目迁移数据库做的调整" class="headerlink" title="项目迁移数据库做的调整"></a>项目迁移数据库做的调整</h2><p>对<code>EF Core</code>迁移数据库做了部分调整，如下：</p><p>我们在<code>EntityFrameworkCore</code>项目中添加扩展类，包含以下扩展方法</p><p>引入<code>Riven.EntityFrameworkCore</code>包，熊猫维护的开源包</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DbContextExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 映射规则</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;modelBuilder&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ModelBuilder <span class="title">UseTableMapping</span>(<span class="params"><span class="keyword">this</span> ModelBuilder modelBuilder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> verifyingEntityType = <span class="keyword">new</span> Func&lt;IMutableEntityType, <span class="built_in">bool</span>&gt;((e) =&gt; EntityHelper.IsEntity(e.ClrType));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelBuilder</span><br><span class="line">            .TableMappingTo(verifyingEntityType, (x) =&gt; x.ToLower()) <span class="comment">// 将表名和字段映射为小写</span></span><br><span class="line">            .MapDiscriminators(verifyingEntityType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在<code>DbContext</code>添加对扩展方法的调用</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    modelBuilder.UseTableMapping();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们重新迁移到一个新的数据库，使用以下迁移命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Add-Migration initdb</span><br><span class="line">Update-DataBase</span><br></pre></td></tr></table></figure><blockquote><p>需要删除之前生成的迁移文件</p></blockquote>]]></content>
    
    
    <summary type="html">SQL Server 批量处理表、属性等</summary>
    
    
    
    <category term="DBA" scheme="https://jonty.top/categories/DBA/"/>
    
    
    <category term="DBA" scheme="https://jonty.top/tags/DBA/"/>
    
    <category term="SQL Server" scheme="https://jonty.top/tags/SQL-Server/"/>
    
    <category term="SQL" scheme="https://jonty.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>漫谈数据库性能优化</title>
    <link href="https://jonty.top/2022/04/21/database-performance-optimization-solutions/"/>
    <id>https://jonty.top/2022/04/21/database-performance-optimization-solutions/</id>
    <published>2022-04-20T23:24:39.000Z</published>
    <updated>2022-09-14T07:48:30.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>毫不夸张的说咱们后端工程师，无论在哪家公司，呆在哪个团队，做哪个系统，遇到的第一个让人头疼的问题绝对是数据库性能问题。如果我们有一套成熟的方法论，能让大家快速、准确的去选择出合适的优化方案，我相信能够快速准备解决咱么日常遇到的80%甚至90%的性能问题。</p><p>　　从解决问题的角度出发，我们得先了解到问题的原因；其次我们得有一套思考、判断问题的流程方式，让我们合理的站在哪个层面选择方案；最后从众多的方案里面选择一个适合的方案进行解决问题，找到一个合适的方案的前提是我们自己对各种方案之间的优缺点、场景有足够的了解，没有一个方案是完全可以通吃通用的，软件工程没有银弹。</p><h2 id="为什么数据库会慢？"><a href="#为什么数据库会慢？" class="headerlink" title="为什么数据库会慢？"></a>为什么数据库会慢？</h2><hr><p><img data-src="https://cdn.jonty.top/img/202204210729504.png" alt="image-20220421072926363"></p><p>无论是关系型数据库还是NoSQL，任何存储系统决定于其查询性能的主要有三种：</p><ul><li><strong>查找的时间复杂度</strong></li><li><strong>数据总量</strong></li><li><strong>高负载</strong></li></ul><p>而决定于<strong>查找时间复杂度</strong>主要有两个因素：</p><ul><li><strong>查找算法</strong></li><li><strong>存储数据结构</strong></li></ul><p>无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。</p><p><strong>从关系型数据库角度出发，索引结构基本固定是B+Tree，时间复杂度是O(log n)，存储结构是行式存储。因此我们对于关系数据库能优化的一般只有数据量。</strong></p><p>而高负载造成原因有高并发请求、复杂查询等，导致CPU、磁盘繁忙等，而服务器资源不足则会导致慢查询等问题。该类型问题一般会选择集群、数据冗余的方式分担压力。</p><p><img data-src="https://cdn.jonty.top/img/202204210730825.png" alt="img"></p><h2 id="应该站在哪个层面思考优化？"><a href="#应该站在哪个层面思考优化？" class="headerlink" title="应该站在哪个层面思考优化？"></a>应该站在哪个层面思考优化？</h2><p><img data-src="https://cdn.jonty.top/img/202204210731601.png" alt="img"></p><p>从上图可见，自顶向下的一共有四层，分别是<strong>硬件、存储系统、存储结构、具体实现。层与层之间是紧密联系的，每一层的上层是该层的载体；因此越往顶层越能决定性能的上限，同时优化的成本也相对会比较高，性价比也随之越低</strong>。以最底层的具体实现为例，那么<strong>索引的优化的成本应该是最小</strong>的，可以说加了索引后无论是CPU消耗还是响应时间都是立竿见影降低；然而一个简单的语句，无论如何优化加索引也是有局限的，当在具体实现这层没有任何优化空间的时候就得往上一层【存储结构】思考，思考是否从物理表设计的层面出发优化（如分库分表、压缩数据量等），如果是文档型数据库得思考下文档聚合的结果；如果在存储结构这层优化得没效果，得继续往再上一次进行考虑，是否关系型数据库应该不适合用在现在得业务场景？如果要换存储，那么得换怎样的NoSQL?</p><p>​        所以我们优化的思路，出于性价比的优先考虑具体实现，实在没有优化空间了再往上一层考虑。当然如果公司有钱，直接使用钞能力，绕过了前面三层，这也是一种便捷的应急处理方式。</p><p>　　<strong>文章不讨论顶与底的两个层面的优化，主要从存储结构、存储系统中间两层的角度出发进行探讨</strong>。</p><h2 id="八大方案总结"><a href="#八大方案总结" class="headerlink" title="八大方案总结"></a>八大方案总结</h2><hr><p><img data-src="https://cdn.jonty.top/img/202204210733980.png" alt="image-20220421073339928"></p><p>数据库的优化方案核心本质有三种：<strong>减少数据量</strong>、<strong>用空间换性能</strong>、<strong>选择合适的存储系统，</strong>这也对应了开篇讲解的慢的三个原因：<strong>数据总量、高负载、查找的时间复杂度。</strong></p><p>　　这里大概解释下收益类型：短期收益，处理成本低，能紧急应对，久了则会有技术债务；长期收益则跟短期收益相反，短期内处理成本高，但是效果能长久使用，扩展性会更好。</p><p>　  静态数据意思是，相对改动频率比较低的，也无需过多联表的，where过滤比较少。动态数据与之相反，更新频率高，通过动态条件筛选过滤。</p><h3 id="减少数据量"><a href="#减少数据量" class="headerlink" title="减少数据量"></a>减少数据量</h3><hr><p>减少数据量类型共有四种方案：<strong>数据序列化存储、数据归档、中间表生成、分库分表。</strong></p><p>就如上面所说的，无论是哪种存储，数据量越少，自然查询性能就越高，随着数据量增多，资源的消耗（CPU、磁盘读写繁忙）、耗时也会越来越高。目前市面上的NoSQL基本上都支持分片存储，所以其天然分布式写的能力从数据量上能得到非常的解决方案。而关系型数据库，查找算法与存储结构是可以优化的空间比较少，因此我们一般思考出发点只有从<strong>如何减少数据量</strong>的这个角度进行选择优化，因此本类型的优化方案主要针对<strong>关系型数据库</strong>进行处理。</p><p><img data-src="https://cdn.jonty.top/img/202204210735989.png" alt="img"></p><h3 id="数据归档"><a href="#数据归档" class="headerlink" title="数据归档"></a>数据归档</h3><hr><p><img data-src="https://cdn.jonty.top/img/202204210736615.png" alt="image-20220421073617560"></p><p>　注意点：别一次性迁移数量过多，建议低频率多次限量迁移。像MySQL由于删除数据后是不会释放空间的，可以执行命令OPTIMIZE TABLE释放存储空间，但是会锁表，如果存储空间还满足，可以不执行。<br>　　建议优先考虑该方案，主要通过数据库作业把非热点数据迁移到历史表，如果需要查历史数据，可新增业务入口路由到对应的历史表（库）。</p><p><img data-src="https://cdn.jonty.top/img/202204210736411.png" alt="img"></p><h3 id="中间表（结果表）"><a href="#中间表（结果表）" class="headerlink" title="中间表（结果表）"></a>中间表（结果表）</h3><hr><p><img data-src="https://cdn.jonty.top/img/202204210737279.png" alt="image-20220421073713236"></p><p>中间表（结果表）其实就是利用调度任务把复杂查询的结果跑出来存储到一张额外的物理表，因为这张物理表存放的是通过跑批汇总后的数据，因此可以理解成根据原有的业务进行了高度的数据压缩。以报表为例，如果一个月的源数据有数十万，我们通过调度任务以月的维度生成，那么等于把原有的数据压缩了几十万分之一；接下来的季报和年报可以根据月报*N来进行统计，以这种方式处理的数据，就算三年、五年甚至十年数据量都可以在接受范围之内，而且可以精确计算得到。</p><p>　　那么数据的压缩比率是否越低越好？下面有一段口诀：</p><ul><li>字段越多，粒度越细，灵活性越高，可以以中间表进行不同业务联表处理。</li><li>字段越少，粒度越粗，灵活性越低，一般作为结果表查询出来。</li></ul><h3 id="数据序列化存储"><a href="#数据序列化存储" class="headerlink" title="数据序列化存储"></a>数据序列化存储</h3><hr><p><img data-src="https://cdn.jonty.top/img/202204210737499.png" alt="image-20220421073749446"></p><p><img data-src="https://cdn.jonty.top/img/202204210737619.png" alt="img"></p><p> 在数据库以序列化存储的方式，对于一些不需要结构化存储的业务来说是一种很好减少数据量的方式，特别是对于一些M*N的数据量的业务场景，如果以M作为主表优化，那么就可以把数据量维持最多是M的量级。另外像订单的地址信息，这种业务一般是不需要根据里面的字段检索出来，也比较适合。</p><p>​    这种方案我认为属于一种临时性的优化方案，无论是从序列化后丢失了部份字段的查询能力，还是这方案的可优化性都是有限的。</p><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><hr><p>分库分表作为数据库优化的一种非常经典的优化方案，特别是在以前NoSQL还不是很成熟的年代，这个方案就如救命草一般的存在。</p><p>　　如今也有不少同行也会选择这种优化方式，但是从我角度来看，分库分表是一种优化成本很大的方案。这里我有几个建议：</p><ol><li>分库分表是实在没有办法的办法，应放到最后选择。</li><li>优先选择NoSQL代替，因为NoSQL诞生基本上为了扩展性与高性能。</li><li>究竟分库还是分表？量大则分表，并发高则分库</li><li>不考虑扩容，一部做到位。因为技术更新太快了，每3-5年一大变。</li></ol><h4 id="拆分方式"><a href="#拆分方式" class="headerlink" title="拆分方式"></a>拆分方式</h4><p><img data-src="https://cdn.jonty.top/img/202204210738266.png" alt="image-20220421073849209"></p><p>只要涉及到这个拆，那么无论是微服务也好，分库分表也好，拆分的方式主要分两种：<strong>垂直拆分、水平拆分</strong>。</p><p>　　垂直拆分更多是从<strong>业务角度</strong>进行拆分，主要是为了<strong>降低业务耦合度；</strong>此外以SQL Server为例，一页是8KB存储，如果在一张表里字段越多，一行数据自然占的空间就越大，那么一页数据所存储的行数就自然越少，那么每次查询所需要IO则越高因此性能自然也越慢；因此反之，减少字段也能很好提高性能。之前我听说某些同行的表有80个字段，几百万的数据就开始慢了。</p><p>　　水平拆分更多是从<strong>技术角度</strong>进行拆分，拆分后每张表的结构是一模一样的，简而言之就是把原有一张表的数据，通过<strong>技术手段</strong>进行分片到多张表存储，从根本上解决了数据量的问题。</p><p><img data-src="https://cdn.jonty.top/img/202204210739856.png" alt="img"></p><h4 id="路由方式"><a href="#路由方式" class="headerlink" title="路由方式"></a>路由方式</h4><p><img data-src="https://cdn.jonty.top/img/202204210739428.png" alt="image-20220421073935371"></p><p>进行水平拆分后，根据分区键（sharding key）原来应该在同一张表的数据拆解写到不同的物理表里，那么查询也得根据分区键进行定位到对应的物理表从而把数据给查询出来。</p><p>　　路由方式一般有三种<strong>区间范围、Hash、分片映射表</strong>，每种路由方式都有自己的优点和缺点，可以根据对应的业务场景进行选择。</p><p>　　<strong>区间范围</strong>根据某个元素的区间的进行拆分，以时间为例子，假如有个业务我们希望以月为单位拆分那么表就会拆分像 table_2022-04，这种对于文档型、ElasticSearch这类型的NoSQL也适用，无论是定位查询，还是日后清理维护都是非常的方便的。那么缺点也明显，会因为业务独特性导致数据不平均，甚至不同区间范围之间的数据量差异很大。</p><p>　　<strong>Hash</strong>也是一种常用的路由方式，根据Hash算法取模以数据量均匀分别存储在物理表里，缺点是对于带分区键的查询依赖特别强，如果不带分区键就无法定位到具体的物理表导致相关所有表都查询一次，而且在分库的情况下对于Join、聚合计算、分页等一些RDBMS的特性功能还无法使用。</p><p><img data-src="https://cdn.jonty.top/img/202204210739346.png" alt="img"></p><p>一般分区键就一个，假如有时候业务场景得用不是分区键的字段进行查询，那么难道就必须得全部扫描一遍？其实可以使用<strong>分片映射表</strong>的方式，简单来说就是额外有一张表记录额外字段与分区键的映射关系。举个例子，有张订单表，原本是以UserID作为分区键拆分的，现在希望用OrderID进行查询，那么得有额外得一张物理表记录了OrderID与UserID的映射关系。因此得先查询一次映射表拿到分区键，再根据分区键的值路由到对应的物理表查询出来。可能有些朋友会问，那这映射表是否多一个映射关系就多一张表，还是多个映射关系在同一张表。我优先建议单独处理，如果说映射表字段过多，那跟不进行水平拆分时的状态其实就是一致的，这又跑回去的老问题。</p><h3 id="用空间换性能"><a href="#用空间换性能" class="headerlink" title="用空间换性能"></a>用空间换性能</h3><hr><p>该类型的两个方案都是用来应对高负载的场景，方案有以下两种：<strong>分布式缓存、一主多从。</strong></p><p>与其说这个方案叫用空间换性能，我认为用空间换资源更加贴切一些。因此两个方案的本质主要通<strong>数据冗余、集群</strong>等方式分担负载压力。</p><p>对于关系型数据库而言，因为他的ACID特性让它天生不支持写的分布式存储，<strong>但是它依然天然的支持分布式读</strong>。 </p><p><img data-src="https://cdn.jonty.top/img/202204210740386.png" alt="img"></p><h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><hr><p><img data-src="https://cdn.jonty.top/img/202204210741697.png" alt="image-20220421074105653"></p><p>缓存层级可以分好几种：<strong>客户端缓存</strong>、<strong>API服务本地缓存</strong>和<strong>分布式缓存</strong>，咱们这次只聊分布式缓存。一般我们选择分布式缓存系统都会优先选择NoSQL的键值型数据库，例如Memcached、Redis，如今Redis的数据结构多样性，高性能，易扩展性也逐渐占据了分布式缓存的主导地位。</p><p>缓存策略也主要有很多种：<strong>Cache-Aside</strong>、<strong>Read/Wirte-Through</strong>、<strong>Write-Back</strong>，咱们用得比较多的方式主要<strong>Cache-Aside，</strong>具体流程可看下图：</p><p><img data-src="https://cdn.jonty.top/img/202204210741433.png" alt="img"></p><p>对于分布式缓存有几点需要注意的：</p><h4 id="避免滥用缓存"><a href="#避免滥用缓存" class="headerlink" title="避免滥用缓存"></a>避免滥用缓存</h4><p><strong>缓存应该是按需使用，从28法则来看，80%的性能问题由主要的20%的功能引起</strong>。滥用缓存的后果会导致维护成本增大，而且有一些数据一致性的问题也不好定位。特别像一些动态条件的查询或者分页，key的组装是多样化的，量大又不好用keys指令去处理，当然我们可以用额外的一个key把记录数据的key以集合方式存储，删除时候做两次查询，先查Key的集合，然后再遍历Key集合把对应的内容删除。这一顿操作下来无疑是非常废功夫的，谁弄谁知道。</p><p><img data-src="https://cdn.jonty.top/img/202204210742344.png" alt="img"></p><h4 id="避免缓存穿透"><a href="#避免缓存穿透" class="headerlink" title="避免缓存穿透"></a>避免缓存穿透</h4><p>当缓存没有数据，就得跑去数据库查询出来，这就是<strong>缓存穿透</strong>。假如某个时间临界点数据是空的例如周排行榜，穿透过去的无论查找多少次数据库仍然是空，而且该查询消耗CPU相对比较高，并发一进来因为缺少了缓存层的对高并发的应对，这个时候就会<strong>因为并发导致数据库资源消耗过高</strong>，这就是<strong>缓存击穿</strong>。数据库资源消耗过高就会导致其他查询超时等问题。</p><p>　　该问题的解决方案也简单，对于查询到数据库的空结果也缓存起来，但是给一个相对快过期的时间。有些同行可能又会问，这样不就会造成了数据不一致了么？一般有数据同步的方案像分布式缓存、后续会说的一主多从、CQRS，只要存在<strong>数据同步</strong>这几个字，那就意味着会存在数据一致性的问题，<strong>因此如果使用上述方案，对应的业务场景应允许容忍一定的数据不一致。</strong></p><h4 id="不是所有慢查询都适用"><a href="#不是所有慢查询都适用" class="headerlink" title="不是所有慢查询都适用"></a>不是所有慢查询都适用</h4><p>一般来说，慢的查询都意味着比较吃资源的（CPU、磁盘I/O）。举个例子，假如某个查询功能需要3秒时间，串行查询的时候并没什么问题，我们继续假设这功能每秒大概QPS为100，那么在第一次查询结果返回之前，接下来的所有查询都应该穿透到数据库，也就意味着这几秒时间有300个请求到数据库，如果这个时候数据库CPU达到了100%，那么接下来的所有查询都会超时，也就是无法有第一个查询结果缓存起来，从而还是形成了缓存击穿。</p><h3 id="一主多从"><a href="#一主多从" class="headerlink" title="一主多从"></a>一主多从</h3><hr><p><img data-src="https://cdn.jonty.top/img/202204210743024.png" alt="image-20220421074329948"></p><p>常用的分担数据库压力还有一种常用做法，就是读写分离、一主多从。咱们都是知道关系型数据库天生是不具备分布式分片存储的，也就是不支持分布式写，但是它天然的支持分布式读。一主多从是部署多台从库只读实例，通过冗余主库的数据来分担读请求的压力，路由算法可有代码实现或者中间件解决，具体可以根据团队的运维能力与代码组件支持视情况选择。</p><p>一主多从在还没找到根治方案前是一个非常好的应急解决方案，特别是在现在云服务的年代，扩展从库是一件非常方便的事情，而且一般情况只需要运维或者DBA解决就行，无需开发人员接入。当然这方案也有缺点，因为数据无法分片，所以主从的数据量完全冗余过去，也会导致高的硬件成本。从库也有其上限，从库过多了会主库的多线程同步数据的压力。</p><p><img data-src="https://cdn.jonty.top/img/202204210743531.png" alt="img"></p><h3 id="选择合适的存储系统"><a href="#选择合适的存储系统" class="headerlink" title="选择合适的存储系统"></a>选择合适的存储系统</h3><p>　NoSQL主要以下五种类型：<strong>键值型、文档型、列型、图型、搜素引擎，</strong>不同的存储系统直接决定了<strong>查找算法</strong>、<strong>存储数据结构</strong>，也应对了需要解决的不同的业务场景。NoSQL的出现也解决了关系型数据库之前面临的难题（性能、高并发、扩展性等）。</p><p>​    例如，ElasticSearch的查找算法是倒排索引，可以用来代替关系型数据库的低性能、高消耗的Like搜索（全表扫描）。而Redis的Hash结构决定了时间复杂度为O(1)，还有它的内存存储，结合分片集群存储方式以至于可以支撑数十万QPS。</p><p>　　因此本类型的方案主要有两种：<strong>CQRS、替换（选择）存储，</strong>这两种方案的最终本质基本是一样的主要使用合适存储来弥补关系型数据库的缺点，只不过切换过渡的方式会有点不一样。</p><img data-src="https://cdn.jonty.top/img/202204210744493.png" alt="img" style="zoom: 50%;" /><h3 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h3><hr><blockquote><p><em>CQS（命令查询分离）指同一个对象中作为查询或者命令的方法，每个方法或者返回的状态，要么改变状态，但不能两者兼备</em>　</p></blockquote><p><img data-src="https://cdn.jonty.top/img/202204210745298.png" alt="image-20220421074500233"></p><p>讲解CQRS前得了解CQS，有些小伙伴看了估计还没不是很清晰，我这里用通俗的话解释：某个对象的数据访问的方法里，要么只是查询，要么只是写入（更新）。而CQRS（命令查询职责分离）基于CQS的基础上，用物理数据库来写入（更新），而用另外的存储系统来查询数据。因此我们在某些业务场景进行存储架构设计时，可以通过关系型数据库的ACID特性进行数据的更新与写入，用NoSQL的高性能与扩展性进行数据的查询处理，这样的好处就是关系型数据库和NoSQL的优点都可以兼得，同时对于某些业务不适于一刀切的替换存储的也可以有一个平滑的过渡。</p><p>从代码实现角度来看，不同的存储系统只是调用对应的接口API，因此CQRS的难点主要在于如何进行数据同步。</p><h3 id="数据同步方式"><a href="#数据同步方式" class="headerlink" title="数据同步方式"></a>数据同步方式</h3><hr><p><img data-src="https://cdn.jonty.top/img/202204210745102.png" alt="image-20220421074537057"></p><p>一般讨论到数据同步的方式主要是分<strong>推</strong>和<strong>拉：</strong></p><p>推指的是由数据变更端通过直接或者间接的方式把数据变更的记录发送到接收端，从而进行数据的一致性处理，这种主动的方式优点是实时性高。</p><p>拉指的是接收端定时的轮询数据库检查是否有数据需要进行同步，这种被动的方式从实现角度来看比推简单，因为推是需要数据变更端支持变更日志的推送的。</p><p>而推的方式又分两种：CDC（变更数据捕获）和领域事件。对于一些旧的项目来说，某些业务的数据入口非常多，无法完整清晰的梳理清楚，这个时候CDC就是一种非常好的方式，只要从最底层数据库层面把变更记录取到就可。</p><p>对于已经服务化的项目来说领域事件是一种比较舒服的方式，因为CDC是需要数据库额外开启功能或者部署额外的中间件，而领域事件则不需要，从代码可读性来看会更高，也比较开发人员的维护思维模式。</p><p><img data-src="https://cdn.jonty.top/img/202204210746719.png" alt="img"></p><h3 id="替换（选择）存储系统"><a href="#替换（选择）存储系统" class="headerlink" title="替换（选择）存储系统"></a>替换（选择）存储系统</h3><hr><p>因为从本质来看该模式与CQRS的核心本质是一样的，主要是要对NoSQL的优缺点有一个全面认识，这样才能在对应业务场景选择与判断出一个合适的存储系统。这里我像大家介绍一本书马丁.福勒《NoSQL精粹》，这本书我重复看了好几遍，也很好全面介绍各种NoSQL优缺点和使用场景。</p><p>当然替换存储的时候，我这里也有个建议：加入一个中间版本，该版本做好数据同步与业务开关，数据同步要保证全量与增加的处理，随时可以重来，业务开关主要是为了后续版本的更新做的一个临时型的功能，主要避免后续版本更新不顺利或者因为版本更新时导致的数据不一致的情况出现。在跑了一段时间后，验证了两个不同的存储系统数据是一致的后，接下来就可以把数据访问层的底层调用替换了。如此一来就可以平滑的更新切换。</p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><hr><p>本文到这里就把八大方案介绍完了，在这里再次提醒一句，每个方案都有属于它的应对场景，咱们只能根据业务场景选择对应的解决方案，没有通吃，没有银弹。</p><p>这八个方案里，大部分都存在数据同步的情况，只要存在数据同步，无论是一主多从、分布式缓存、CQRS都好，都会有数据一致性的问题导致，因此这些方案更多适合一些只读的业务场景。当然有些写后既查的场景，可以通过过渡页或者广告页通过用户点击关闭切换页面的方式来缓解数据不一致性的情况。</p><p>通过这篇文章我相信大家对数据库设计优化有了一个全面的认识，如果有更加的建议可以在下方评论反馈给给我。</p><blockquote><p>作　　者： <strong><a href="http://www.cnblogs.com/skychen1218/">陈珙</a></strong><br>出　　处：<a href="http://www.cnblogs.com/skychen1218/">http://www.cnblogs.com/skychen1218/</a><br>关于作者：专注于微软平台的项目开发。如有问题或建议，请多多赐教！<br>版权声明：本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p></blockquote>]]></content>
    
    
    <summary type="html">后端思维之数据库性能优化方案</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
    <category term="DBA" scheme="https://jonty.top/tags/DBA/"/>
    
    <category term="调优" scheme="https://jonty.top/tags/%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>代码整洁的 TypeScript</title>
    <link href="https://jonty.top/2022/03/07/clean-code-typescript/"/>
    <id>https://jonty.top/2022/03/07/clean-code-typescript/</id>
    <published>2022-03-07T14:11:47.000Z</published>
    <updated>2022-07-12T15:39:18.879Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接 <a href="https://github.com/labs42io/clean-code-typescript">clean-code-typescript</a></p></blockquote><p>将代码整洁的理念适配至 TypeScript ， 灵感来自于<a href="https://github.com/ryanmcdermott/clean-code-javascript">代码整洁的 JavaScript </a>。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img data-src="https://www.osnews.com/images/comics/wtfm.jpg" alt="一张用你阅读代码时吐槽的数量来评估软件质量的搞笑图片"></p><p>将源自 Robert C. Martin 的 <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882"><em>Clean Code</em></a>的软件工程原则适配到 TypeScript 。 这不是一个代码风格指南， 它是一个使用 TypeScript 来生产可读的、可重用的、以及可重构的软件的指南。</p><p>这里的每一项原则都不是必须遵守的， 甚至只有更少的能够被广泛认可。 这些仅仅是指南而已， 但却是<em>Clean Code</em> 作者多年经验的结晶。</p><p>我们的软件工程行业只有短短的 50 年， 依然有很多要我们去学习。 当软件架构与建筑架构一样古老时，也许我们将会有硬性的规则去遵守。 而现在， 让这些指南做为你和你的团队生产的 TypeScript 代码的质量的标准。</p><p>还有一件事： 知道这些指南并不能马上让你成为一个更加出色的软件开发者， 并且使用它们工作多年也并不意味着你不再会犯错误。 每一段代码最开始都是草稿， 像湿粘土一样被打造成最终的形态。 最后当我们和搭档们一起审查代码时清除那些不完善之处, 不要因为最初需要改善的草稿代码而自责， 而是对那些代<br>码下手。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="使用有意义的变量名称"><a href="#使用有意义的变量名称" class="headerlink" title="使用有意义的变量名称"></a>使用有意义的变量名称</h3><p>使用可以区分的名称， 让读者知道他们的区别是什么。</p><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">a1: T, a2: T, a3: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">between</span>&lt;<span class="title">T</span>&gt;(<span class="params">value: T, left: T, right: T</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> left &lt;= value &amp;&amp; value &lt;= right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用可拼读的变量名称"><a href="#使用可拼读的变量名称" class="headerlink" title="使用可拼读的变量名称"></a>使用可拼读的变量名称</h3><p>如果你不能把它读出来， 那你就不能和同事讨论它。</p><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DtaRcrd102 = &#123;</span><br><span class="line">  <span class="attr">genymdhms</span>: <span class="built_in">Date</span>;</span><br><span class="line">  modymdhms: <span class="built_in">Date</span>;</span><br><span class="line">  pszqint: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Customer = &#123;</span><br><span class="line">  <span class="attr">generationTimestamp</span>: <span class="built_in">Date</span>;</span><br><span class="line">  modificationTimestamp: <span class="built_in">Date</span>;</span><br><span class="line">  recordId: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为相同类型的变量使用相同的词汇"><a href="#为相同类型的变量使用相同的词汇" class="headerlink" title="为相同类型的变量使用相同的词汇"></a>为相同类型的变量使用相同的词汇</h3><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInfo</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserDetails</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserData</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>): <span class="title">User</span></span>;</span><br></pre></td></tr></table></figure><h3 id="使用可搜索的名称"><a href="#使用可搜索的名称" class="headerlink" title="使用可搜索的名称"></a>使用可搜索的名称</h3><p>我们要阅读的代码比要写的代码多得多， 所以我们写出的代码的可读性和可搜索性是很重要的。 使用没有意义的变量名将会导致我们的程序难于理解， 所以请使用可搜索的变量名。 类似 <a href="https://palantir.github.io/tslint/rules/no-magic-numbers/">TSLint</a>的工具可以帮助我们找到未命名的常量。</p><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// What the heck is 86400000 for?</span></span><br><span class="line"><span class="comment">// 艹， 86400000 是什么鬼？</span></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, <span class="number">86400000</span>);</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare them as capitalized named constants.</span></span><br><span class="line"><span class="comment">// 将它们声明为大写的变量</span></span><br><span class="line"><span class="keyword">const</span> MILLISECONDS_IN_A_DAY = <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(restart, MILLISECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure><h3 id="使用解释性的变量"><a href="#使用解释性的变量" class="headerlink" title="使用解释性的变量"></a>使用解释性的变量</h3><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> keyValue <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="comment">// iterate through users map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> users: <span class="built_in">Map</span>&lt;<span class="built_in">string</span>, User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [id, user] <span class="keyword">of</span> users) &#123;</span><br><span class="line">  <span class="comment">// iterate through users map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免心理映射"><a href="#避免心理映射" class="headerlink" title="避免心理映射"></a>避免心理映射</h3><p>显示比隐式更好。 清晰为王！</p><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> u = getUser();</span><br><span class="line"><span class="keyword">const</span> s = getSubscription();</span><br><span class="line"><span class="keyword">const</span> t = charge(u, s);</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = getUser();</span><br><span class="line"><span class="keyword">const</span> subscription = getSubscription();</span><br><span class="line"><span class="keyword">const</span> transaction = charge(user, subscription);</span><br></pre></td></tr></table></figure><h3 id="不添加不必要的上下文"><a href="#不添加不必要的上下文" class="headerlink" title="不添加不必要的上下文"></a>不添加不必要的上下文</h3><p>如果你的类/类型/对象名有意义， 不必在变量名上再重复。</p><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  <span class="attr">carMake</span>: <span class="built_in">string</span>;</span><br><span class="line">  carModel: <span class="built_in">string</span>;</span><br><span class="line">  carColor: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.carMake&#125;</span> <span class="subst">$&#123;car.carModel&#125;</span> (<span class="subst">$&#123;car.carColor&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Car = &#123;</span><br><span class="line">  <span class="attr">make</span>: <span class="built_in">string</span>;</span><br><span class="line">  model: <span class="built_in">string</span>;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">car: Car</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;car.make&#125;</span> <span class="subst">$&#123;car.model&#125;</span> (<span class="subst">$&#123;car.color&#125;</span>)`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用默认变量替代短路运算或条件"><a href="#使用默认变量替代短路运算或条件" class="headerlink" title="使用默认变量替代短路运算或条件"></a>使用默认变量替代短路运算或条件</h3><p>默认参数通常比短路运算更清晰。</p><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> loadCount = count !== <span class="literal">undefined</span> ? count : <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadPages</span>(<span class="params">count: <span class="built_in">number</span> = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数-两个以下最理想"><a href="#函数参数-两个以下最理想" class="headerlink" title="函数参数 (两个以下最理想)"></a>函数参数 (两个以下最理想)</h3><p>限制函数参数的个数是非常重要的， 因为这样将使你的函数容易进行测试。 一旦超过三个参数将会导致组合爆炸， 因为你不得不编写大量针对每个参数的测试用例。</p><p>一个或者两个参数是理想状况， 如果可能的话， 三个参数的情况应该避免， 超过三个应该被<strong>重构</strong>。 通常，如果你有一个超过两个函数的参数， 那就意味着你的函数尝试做太多的事情。 如果不是， 多数情况下一个 更高级对象可能会满足需求。</p><p>当你发现你自己需要大量的参数时， 考虑使用一个对象。</p><p>为了让函数需要的属性更明显， 可以使用<a href="https://basarat.gitbooks.io/typescript/docs/destructuring.html">解构</a>语法。 它有三个优点：</p><ol><li><p>当有人查看函数签名时， 会立刻清楚用到了哪些属性。</p></li><li><p>解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆参数对象中解构的对象和数组。</p></li><li><p>TypeScript 会警告您未使用的属性，如果没有解构，这将是不可能的。</p></li></ol><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(<span class="string">&#x27;Foo&#x27;</span>, <span class="string">&#x27;Bar&#x27;</span>, <span class="string">&#x27;Baz&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p><strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: &#123; title: <span class="built_in">string</span>, body: <span class="built_in">string</span>, buttonText: <span class="built_in">string</span>, cancellable: <span class="built_in">boolean</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你可以通过<a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases">类型别名</a>来显著提高可读性：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuOptions = &#123; <span class="attr">title</span>: <span class="built_in">string</span>, <span class="attr">body</span>: <span class="built_in">string</span>, <span class="attr">buttonText</span>: <span class="built_in">string</span>, <span class="attr">cancellable</span>: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">options: MenuOptions</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">  <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="函数应当只做一件事情"><a href="#函数应当只做一件事情" class="headerlink" title="函数应当只做一件事情"></a>函数应当只做一件事情</h3><p>单一职责原则，这是软件工程中最重要的一条规则， 当函数需要做更多的事情时， 它们将会更难进行编写、 测试和推理。当你能将一个函数隔离到只有一个动作， 他们将能够被容易的进行重构并且你的代码将会更容易阅读。 如果你严格遵守本指南中的这一条， 你将会领先于许多开发者。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client</span>) </span>&#123;</span><br><span class="line">  clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</span><br><span class="line">      email(client);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients: Client</span>) </span>&#123;</span><br><span class="line">  clients.filter(isActiveClient).forEach(email);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isActiveClient</span>(<span class="params">client: Client</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</span><br><span class="line">  <span class="keyword">return</span> clientRecord.isActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数名称应该说明它要做什么"><a href="#函数名称应该说明它要做什么" class="headerlink" title="函数名称应该说明它要做什么"></a>函数名称应该说明它要做什么</h3><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// It&#x27;s hard to tell from the function name what is added</span></span><br><span class="line"><span class="comment">// 很难从函数名看出加了什么</span></span><br><span class="line">addToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMonthToDate</span>(<span class="params">date: <span class="built_in">Date</span>, month: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">addMonthToDate(date, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="函数应该只有一个抽象级别"><a href="#函数应该只有一个抽象级别" class="headerlink" title="函数应该只有一个抽象级别"></a>函数应该只有一个抽象级别</h3><p>当在你的函数中有多于一个抽象级别时， 你的函数通常做了太多事情。 拆分函数将会提升重用性和测试性。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> ast = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// lex...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ast.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> REGEXES = [ <span class="comment">/* ... */</span> ];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseCode</span>(<span class="params">code: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tokens = tokenize(code);</span><br><span class="line">  <span class="keyword">const</span> syntaxTree = parse(tokens);</span><br><span class="line"></span><br><span class="line">  syntaxTree.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// parse...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span>(<span class="params">code: <span class="built_in">string</span></span>): <span class="title">Token</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> statements = code.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> tokens: Token[] = [];</span><br><span class="line"></span><br><span class="line">  REGEXES.forEach(<span class="function">(<span class="params">regex</span>) =&gt;</span> &#123;</span><br><span class="line">    statements.forEach(<span class="function">(<span class="params">statement</span>) =&gt;</span> &#123;</span><br><span class="line">      tokens.push( <span class="comment">/* ... */</span> );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">tokens: Token[]</span>): <span class="title">SyntaxTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> syntaxTree: SyntaxTree[] = [];</span><br><span class="line">  tokens.forEach(<span class="function">(<span class="params">token</span>) =&gt;</span> &#123;</span><br><span class="line">    syntaxTree.push( <span class="comment">/* ... */</span> );</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> syntaxTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除冗余代码"><a href="#移除冗余代码" class="headerlink" title="移除冗余代码"></a>移除冗余代码</h3><p>竭尽你的全力去避免冗余代码。 冗余代码是不好的， 因为它意味着当你需要修改一些逻辑时会有多个地方需要修改。</p><p>想象一下你在经营一家餐馆， 你需要记录所有的库存西红柿， 洋葱， 大蒜， 各种香料等等。 如果你有多个记录列表， 当你用西红柿做一道菜时你得更新多个列表。 如果你只有一个列表， 就只有一个地方需要更新！</p><p>你有冗余代码通常是因为你有两个或多个稍微不同的东西， 它们共享大部分， 但是它们的不同之处迫使你使用两个或更多独立的函数来处理大部分相同的东西。 移除冗余代码意味着创建一个可以处理这些不同之处的抽象的函数/模块/类。</p><p>让这个抽象正确是关键的， 这是为什么要你遵循 <em>Classes</em> 那一章的 SOLID 的原因。 不好的抽象比冗余代码更差， 所以要谨慎行事。 既然已经这么说了， 如果你能够做出一个好的抽象， 才去做。 不要重复你自己， 否则你会发现当你要修改一个东西时时刻需要修改多个地方。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span>(<span class="params">developers: Developer[]</span>) </span>&#123;</span><br><span class="line">  developers.forEach(<span class="function">(<span class="params">developer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = developer.getExperience();</span><br><span class="line">    <span class="keyword">const</span> githubLink = developer.getGithubLink();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      githubLink</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span>(<span class="params">managers: Manager[]</span>) </span>&#123;</span><br><span class="line">  managers.forEach(<span class="function">(<span class="params">manager</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = manager.getExperience();</span><br><span class="line">    <span class="keyword">const</span> portfolio = manager.getMBAProjects();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      portfolio</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getExtraDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">githubLink</span>: <span class="built_in">this</span>.githubLink,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getExtraDetails</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">portfolio</span>: <span class="built_in">this</span>.portfolio,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showEmployeeList</span>(<span class="params">employee: Developer | Manager</span>) </span>&#123;</span><br><span class="line">  employee.forEach(<span class="function">(<span class="params">employee</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class="line">    <span class="keyword">const</span> experience = employee.getExperience();</span><br><span class="line">    <span class="keyword">const</span> extra = employee.getExtraDetails();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">      expectedSalary,</span><br><span class="line">      experience,</span><br><span class="line">      extra,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    render(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您应该对代码冗余持批判的态度。 有时需要在冗余代码和通过因不必要的抽象而增加的复杂性之间做权衡。 当来自两个不同模块的两个实现看起来相似但存在于不同的域中时，冗余(可能)是可接受的并且优于提取公共代码。 在这种情况下，提取的公共代码引入了两个模块之间的间接依赖关系。</p><h3 id="使用-Object-assign-设置默认对象或者解构"><a href="#使用-Object-assign-设置默认对象或者解构" class="headerlink" title="使用 Object.assign 设置默认对象或者解构"></a>使用 Object.assign 设置默认对象或者解构</h3><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  config.title = config.title || <span class="string">&#x27;Foo&#x27;</span>;</span><br><span class="line">  config.body = config.body || <span class="string">&#x27;Bar&#x27;</span>;</span><br><span class="line">  config.buttonText = config.buttonText || <span class="string">&#x27;Baz&#x27;</span>;</span><br><span class="line">  config.cancellable = config.cancellable !== <span class="literal">undefined</span> ? config.cancellable : <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">config: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> menuConfig = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="attr">buttonText</span>: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">    <span class="attr">cancellable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>另外， 也可以使用解构来处理默认值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MenuConfig = &#123; title?: <span class="built_in">string</span>, body?: <span class="built_in">string</span>, buttonText?: <span class="built_in">string</span>, cancellable?: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title = <span class="string">&#x27;Foo&#x27;</span>, body = <span class="string">&#x27;Bar&#x27;</span>, buttonText = <span class="string">&#x27;Baz&#x27;</span>, cancellable = <span class="literal">true</span> &#125;: MenuConfig</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createMenu(&#123; <span class="attr">body</span>: <span class="string">&#x27;Bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>要避免显示传递 <code>undefined</code> 或者 <code>null</code> 值产生的负面影响或异常行为， 可以设置 TypeScript 编译器来禁止。 请查看 TypeScript 的 <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks"><code>--strictNullChecks</code></a> 选项。</p><h3 id="不要使用标记位做为函数参数"><a href="#不要使用标记位做为函数参数" class="headerlink" title="不要使用标记位做为函数参数"></a>不要使用标记位做为函数参数</h3><p>标记位是告诉你的用户这个函数做了不只一件事情。 函数应该只做一件事情。 如果你的函数因为一个布尔值出现不同的代码路径， 请拆分它们。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span>, temp: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (temp) &#123;</span><br><span class="line">    fs.create(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.create(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  createFile(<span class="string">`./temp/<span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  fs.create(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免副作用（第-1-部分）"><a href="#避免副作用（第-1-部分）" class="headerlink" title="避免副作用（第 1 部分）"></a>避免副作用（第 1 部分）</h3><p>如果一个函数做了除接受一个值然后返回一个值或多个值之外的任何事情， 它将会产生副作用， 它可能是写入一个文件， 修改一个全局变量， 或者意外的把你所有的钱连接到一个陌生人那里。</p><p>现在在你的程序中确实偶尔需要副作用， 就像上面的代码， 你也许需要写入到一个文件， 你需要做的是集中化你要做的事情， 不要让多个函数或者类写入一个特定的文件， 用一个服务来实现它， 一个并且只有一个。</p><p>重点是避免这些常见的易犯的错误， 比如在对象之间共享状态而不使用任何结构， 使用任何地方都可以写入的可变的数据类型， 没有集中化导致副作用。 如果你能做到这些， 那么你将会比其它的码农大军更加幸福。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// 全局变量被下面的函数引用</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Robert C. Martin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  name = btoa(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toBase64();</span><br><span class="line"><span class="comment">// If we had another function that used this name, now it&#x27;d be a Base64 value</span></span><br><span class="line"><span class="comment">// 如果我们有另一个函数使用这个 name ， 现在它应该是一个 Base64 字符串值。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// expected to print &#x27;Robert C. Martin&#x27; but instead &#x27;Um9iZXJ0IEMuIE1hcnRpbg==&#x27;</span></span><br><span class="line"><span class="comment">// 期望打印出 &#x27;Robert C. Martin&#x27; 但是却是 &#x27;Um9iZXJ0IEMuIE1hcnRpbg==&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Robert C. Martin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toBase64</span>(<span class="params">text: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> btoa(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encodedName = toBase64(name);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure><h3 id="避免副作用-（第-2-部分）"><a href="#避免副作用-（第-2-部分）" class="headerlink" title="避免副作用 （第 2 部分）"></a>避免副作用 （第 2 部分）</h3><p>在 JavaScript 中， 基本类型通过值进行传递而对象/类通过引用传递。 以对象和数组为例， 如果你的函数对一个购物车数组做出了更改， 比如添加了一个要购买的东西， 那么其它使用这个购物车数组的任何函数都会受到影响。 这样貌似挺不错的， 不过也可能很糟糕。 让我们来想象一个糟糕的情况：</p><p>用户点击“购买”按钮， 调用一个 <code>purchase</code> 函数， 发出一个网络请求， 经购物车数组发送到服务器。 由于网络情况比较差， <code>purchase</code> 函数只能尝试重新发送请求。 现在， 用户在网络请求开始之前， 突然点击了“添加到购物车”按钮， 添加了一项并不是真心想买的东西， 那么 <code>purchase</code> 函数将会发送这个突然被添加的项目， 因为它们引用了同一个购物车数组对象， 而这个对象 <code>addItemToCart</code> 函数修改了， 添加了一个不想要的项目。</p><p>一个好的方案应该是让 <code>addItemToCart</code> 始终克隆一个购物车副本， 编辑并返回副本。 这样能够保证它不会被其它任何函数引用， 也就不能进行修改。</p><p>这种方案下需要注意以下 2 个问题：</p><ol><li><p>可能在有些情况下确实需要修改输入对象， 但是当你采用这种编程实践之后， 你会发现这种情况是寥寥无几的。 很多东西可以被重构来消除负面影响。 （参考<a href="https://zh.wikipedia.org/wiki/%E7%BA%AF%E5%87%BD%E6%95%B0">纯函数</a>/<a href="https://en.wikipedia.org/wiki/Pure_function">Pure function</a>）</p></li><li><p>克隆大对象可能比较消耗性能。 幸运的是， 在实际操作上， 并不是一个多大的问题， 因为有优秀的类库可以让这一操作变得非常快， 同时也比手工克隆这些对象和数组节省很多内存。</p></li></ol><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  cart.push(&#123; item, <span class="attr">date</span>: <span class="built_in">Date</span>.now() &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItemToCart</span>(<span class="params">cart: CartItem[], item: Item</span>): <span class="title">CartItem</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...cart, &#123; item, <span class="attr">date</span>: <span class="built_in">Date</span>.now() &#125;];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="不要写入全局函数"><a href="#不要写入全局函数" class="headerlink" title="不要写入全局函数"></a>不要写入全局函数</h3><p>污染全局在 JavaScript 中是一个不好的做法， 因为你可能会和另外一个类库冲突， 你的 API 的用户可能不够聪明， 直到他们得到在生产环境得到一个异常。 让我们来考虑这样一个例子： 假设你要扩展JavaScript 的 原生 <code>Array</code> ， 添加一个可以显示两个数组的不同之处的 <code>diff</code> 方法， 你可以在<code>Array.prototype</code> 中写一个新的方法， 但是它可能会和尝试做相同事情的其它类库发生冲突。 如果有另外一个类库仅仅使用 <code>diff</code> 方法来查找数组的第一个元素和最后一个元素之间的不同之处呢？ 这就是为什么使用 ES2015/ES6 的类是一个更好的做法的原因， 只要简单的扩展全局的 <code>Array</code> 即可。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">global</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> Array&lt;T&gt; &#123;</span><br><span class="line">    diff(other: T[]): <span class="built_in">Array</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.diff) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.diff = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">other: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  diff(other: T[]): T[] &#123;</span><br><span class="line">    <span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Set</span>(other);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.filter(<span class="function"><span class="params">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数式编程优于指令式编程"><a href="#函数式编程优于指令式编程" class="headerlink" title="函数式编程优于指令式编程"></a>函数式编程优于指令式编程</h3><p>当你可以使用函数式编程风格时请尽情使用。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Uncle Bobby&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Suzie Q&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jimmy Gosling&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Gracie Hopper&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> totalOutput = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contributions.length; i++) &#123;</span><br><span class="line">  totalOutput += contributions[i].linesOfCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> contributions = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Uncle Bobby&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Suzie Q&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1500</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jimmy Gosling&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">150</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Gracie Hopper&#x27;</span>,</span><br><span class="line">    <span class="attr">linesOfCode</span>: <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalOutput = contributions</span><br><span class="line">  .reduce(<span class="function">(<span class="params">totalLines, output</span>) =&gt;</span> totalLines + output.linesOfCode, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="封装条件语句"><a href="#封装条件语句" class="headerlink" title="封装条件语句"></a>封装条件语句</h3><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (subscription.isTrial || account.balance &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">canActivateService</span>(<span class="params">subscription: Subscription, account: Account</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> subscription.isTrial || account.balance &gt; <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (canActivateService(subscription, account)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免负面条件"><a href="#避免负面条件" class="headerlink" title="避免负面条件"></a>避免负面条件</h3><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailNotUsed</span>(<span class="params">email: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isEmailNotUsed(email)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmailUsed</span>(<span class="params">email</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isEmailUsed(node)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免条件语句"><a href="#避免条件语句" class="headerlink" title="避免条件语句"></a>避免条件语句</h3><p>这看起来似乎是一个不可能的任务。 第一次听到这个时， 多数人会说： “没有 <code>if</code> 语句还能期望我干啥呢”， 答案是多数情况下你可以使用多态来完成同样的任务。 第二个问题通常是 “好了， 那么做很棒，但是我为什么想要那样做呢”， 答案是我们学到的上一条代码整洁之道的理念： 一个函数应当只做一件事情。<br>当你有使用 <code>if</code> 语句的类/函数是， 你在告诉你的用户你的函数做了不止一件事情。 记住： 只做一件事情。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">this</span>.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;777&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getPassengerCount();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Air Force One&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;Cessna&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getFuelExpenditure();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Unknown airplane type.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> getMaxAltitude(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="comment">// shared logic with subclasses ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getPassengerCount();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">extends</span> <span class="title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="title">getCruisingAltitude</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getMaxAltitude() - <span class="built_in">this</span>.getFuelExpenditure();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免类型检查"><a href="#避免类型检查" class="headerlink" title="避免类型检查"></a>避免类型检查</h3><p>TypeScript 是 JavaScript 的一个严格语法的超集， 为这门语言增加了可选的静态类型检查。始终倾向于给变量、 参数以及返回值定义类型一体现 TypeScript 的完整特征。这将使重构变得更加容易。</p><p><strong>NO</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle: Bicycle | Car</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">    vehicle.pedal(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">    vehicle.drive(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>YES</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vehicle = Bicycle | Car;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span>(<span class="params">vehicle: Vehicle</span>) </span>&#123;</span><br><span class="line">  vehicle.move(currentLocation, <span class="keyword">new</span> Location(<span class="string">&#x27;texas&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h3><p>现代化浏览器运行时在幕后做大量的优化， 在大多数的时间， 做优化就是在浪费你的时间。 <a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers">这些是好的资源</a>， 用来查看那些地方需要优化。 为这些而优化， 直到它们被修正。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// On old browsers, each iteration with uncached `list.length` would be costly</span></span><br><span class="line"><span class="comment">// because of `list.length` recomputation. In modern browsers, this is optimized.</span></span><br><span class="line"><span class="comment">// 在旧的浏览器上， 每次循环 `list.length` 都没有被缓存， 会导致不必要的开销， 因为要重新计</span></span><br><span class="line"><span class="comment">// 算 `list.length` 。 在现代化浏览器上， 这个已经被优化了。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除僵尸代码"><a href="#移除僵尸代码" class="headerlink" title="移除僵尸代码"></a>移除僵尸代码</h3><p>僵死代码和冗余代码同样糟糕。 没有理由在代码库中保存它。 如果它不会被调用， 就删掉它。 当你需要<br>它时， 它依然保存在版本历史记录中。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">&#x27;apples&#x27;</span>, req, <span class="string">&#x27;www.inventory-awesome.io&#x27;</span>);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span>(<span class="params">url: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = requestModule;</span><br><span class="line">inventoryTracker(<span class="string">&#x27;apples&#x27;</span>, req, <span class="string">&#x27;www.inventory-awesome.io&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="使用枚举器和生成器"><a href="#使用枚举器和生成器" class="headerlink" title="使用枚举器和生成器"></a>使用枚举器和生成器</h3><p>当像流一样处理数据集时， 使用生成器和枚举器。 这样做的好处是：</p><ul><li>被调用者与生成器解耦， 这样被调用者可以决定处理多少项；</li><li>延迟执行， 元素按流式按需处理；</li><li>允许为枚举模式实现进行优化；</li></ul><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">n: <span class="built_in">number</span></span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> [<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">2</span>) <span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> items: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">while</span> (items.length &lt; n) &#123;</span><br><span class="line">    items.push(items[items.length - <span class="number">2</span>] + items[items.length - <span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  fibonacci(n).forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print first 10 Fibonacci numbers.</span></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成一个无限长的斐波那契数字流， 生成器并没有保存数字数组。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fib <span class="keyword">of</span> fibonacci()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i++ === n) <span class="keyword">break</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(fib);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Print first 10 Fibonacci numbers.</span></span><br><span class="line">print(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>一些类库可以与原生数组类似的方式使用枚举， 将 <code>map</code>， <code>slice</code>， <code>forEach</code> 等方法串联到一起。 请参考 <a href="https://www.npmjs.com/package/itiriri">itiriri</a> 的高级枚举处理示例（或者 <a href="https://www.npmjs.com/package/itiriri-async">itiriri-async</a> 的异步枚举处理）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itiriri <span class="keyword">from</span> <span class="string">&#x27;itiriri&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fibonacci</span>(<span class="params"></span>): <span class="title">IterableIterator</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [a, b] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a;</span><br><span class="line">    [a, b] = [b, a + b];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">itiriri(fibonacci())</span><br><span class="line">  .take(<span class="number">10</span>)</span><br><span class="line">  .forEach(<span class="function"><span class="params">fib</span> =&gt;</span> <span class="built_in">console</span>.log(fib));</span><br></pre></td></tr></table></figure><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="使用-getter-和-setter"><a href="#使用-getter-和-setter" class="headerlink" title="使用 getter 和 setter"></a>使用 getter 和 setter</h3><p>TypeScript 支持 getter/setter 语法。 正因为如此， 使用 getters 和 setters 来访问对象上的数据比简单的在一个对象上查找属性要好得多。 “为什么？” 你可能会问， 好吧， 原因请看下面的列表：</p><ul><li><p>当你想在获取一个对象属性的背后做更多的事情时， 你不需要在代码库中查找和修改每一处访问；</p></li><li><p>使用 <code>set</code> 可以让添加验证变得容易；</p></li><li><p>封装内部实现；</p></li><li><p>使用 getting 和 setting 时， 容易添加日志和错误处理；</p></li><li><p>你可以延迟加载对象的属性， 比如说从服务器获取。</p></li><li><p><em>NO：</em>*</p></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BankAccount = &#123;</span><br><span class="line">  <span class="attr">balance</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> account: BankAccount = &#123;</span><br><span class="line">  <span class="attr">balance</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot set negative balance.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">account.balance = value;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> accountBalance: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">balance</span>(): <span class="title">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.accountBalance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">balance</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Cannot set negative balance.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.accountBalance = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在 `BankAccount` 封装了验证逻辑， 如果某一天需求变化了， 需要添加额外的验证规则， 我们只需要修改 `setter` 即可， 其它依赖性代码则无需修改。</span></span><br><span class="line"><span class="keyword">const</span> account = <span class="keyword">new</span> BankAccount();</span><br><span class="line">account.balance = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="让对象拥有私有的-受保护的成员"><a href="#让对象拥有私有的-受保护的成员" class="headerlink" title="让对象拥有私有的/受保护的成员"></a>让对象拥有私有的/受保护的成员</h3><p>TypeScript 支持在类成员上添加 <code>public</code> <em>(默认)</em> ， <code>protected</code> 和 <code>private</code> 修饰符。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">perimeter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">surface</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> radius: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">perimeter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">surface</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="倾向于不可变性"><a href="#倾向于不可变性" class="headerlink" title="倾向于不可变性"></a>倾向于不可变性</h3><p>TypeScript 的类型系统允许将类/接口的某些属性标记为 <em>只读</em> 。 这允许你在一个很舒适的方式下工作（不需要考虑意外的变化）。 针对更加高级的场景， 有一个内置的 <code>Readonly</code> 类型， 它接受一个类型 <code>T</code> ， 实用类型映射， 将类型 <code>T</code> 的全部属性统统标记为只读（参考 <a href="https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types">mapped types</a>）。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="built_in">string</span>;</span><br><span class="line">  port: <span class="built_in">string</span>;</span><br><span class="line">  db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="keyword">readonly</span> host: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> port: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> db: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型-vs-接口"><a href="#类型-vs-接口" class="headerlink" title="类型 vs. 接口"></a>类型 vs. 接口</h3><p>当需要并集或者交集时， 实用类型。 当需要扩展或实现时， 实用接口。 然而并没有严格的规则， 哪个适合就用哪个。 若需要一个更加详细的解释， 请参考关于 TypeScript 的类型和接口之间的不同的这个<a href="https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543">答案</a>。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> EmailConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DbConfig &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Config &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmailConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DbConfig = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config  = EmailConfig | DbConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="title">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="title">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="类应当小"><a href="#类应当小" class="headerlink" title="类应当小"></a>类应当小</h3><p>类的大小由它的职责衡量。 根据 <em>单一职责原则</em> 一个类应该小。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dashboard</span> </span>&#123;</span><br><span class="line">  getLanguage(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  setLanguage(language: <span class="built_in">string</span>): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  showProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  hideProgress(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  isDirty(): <span class="built_in">boolean</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeSubscription(subscription: Subscription): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  addUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  removeUser(user: User): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  goToHomePage(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  updateProfile(details: UserDetails): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dashboard</span> </span>&#123;</span><br><span class="line">  disable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  enable(): <span class="built_in">void</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getVersion(): <span class="built_in">string</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将其它方法移到其它类以拆分职责</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="高内聚和低耦合"><a href="#高内聚和低耦合" class="headerlink" title="高内聚和低耦合"></a>高内聚和低耦合</h3><p>内聚定义了类成员彼此相关的程度。 理想情况下，每个方法都应使用类中的所有字段。<br>然后我们说这个类是<em>最高内聚</em>。 实际上， 这并非总是可行， 甚至不可取。 但是你应该更喜欢高内聚。</p><p>耦合指的是两个类相互依赖或相互依赖的程度。 如果其中一个类中的更改不影响其它的， 则称这些类是低耦合的。</p><p>好的软件设计拥有 <strong>高内聚</strong> 和 <strong>低耦合</strong> 。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 不好的： 每一个私有变量仅仅被一组或另一组方法使用， 这很明显说明这个类在兼负多个职责。 当我仅仅需要一个服务来获取用户事务时， 还得传递另外一个 `emailSender` 的实例。</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> db: Database,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> emailSender: EmailSender</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(<span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> db: Database</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getUser(id: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.db.users.findOne(&#123; id &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> getTransactions(userId: <span class="built_in">number</span>): <span class="built_in">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="built_in">this</span>.db.transactions.find(&#123; userId &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserNotifier</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> emailSender: EmailSender</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendGreeting(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.emailSender.send(<span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNotification(text: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">this</span>.emailSender.send(text);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> sendNewsletter(): <span class="built_in">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合优先于继承"><a href="#组合优先于继承" class="headerlink" title="组合优先于继承"></a>组合优先于继承</h3><p>正如<a href="https://en.wikipedia.org/wiki/Design_Patterns"><em>设计模式四人帮</em></a>所述， 如果可能，你应该优先使用组合而不是继承。 有许多好的理由去使用继承， 也有许多好的理由去使用组合。这个格言的重点是， 如果你本能的观点是继承， 那么请想一下组合能否更好的为你的问题建模。 很多情况下它真的可以。</p><p>那么你也许会这样想， “我什么时候改使用继承？” 这取决于你手上的问题， 不过这儿有一个像样的列表说明什么时候继承比组合更好用：</p><ol><li>你的继承表示”是一个”的关系而不是”有一个”的关系（人类-&gt;动物 vs 用户-&gt;用户详情）；</li><li>你可以重用来自基类的代码（人可以像所有动物一样行动）；</li><li>你想通过基类对子类进行全局的修改（改变所有动物行动时的热量消耗）；</li></ol><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bad because Employees &quot;have&quot; tax data. EmployeeTaxData is not a type of Employee</span></span><br><span class="line"><span class="comment">// 不好是因为雇员“有”税率数据， EmployeeTaxData 不是一个 Employee 类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    email: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> ssn: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> salary: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> taxData: EmployeeTaxData;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> name: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> email: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setTaxData(ssn: <span class="built_in">string</span>, <span class="attr">salary</span>: <span class="built_in">number</span>): Employee &#123;</span><br><span class="line">    <span class="built_in">this</span>.taxData = <span class="keyword">new</span> EmployeeTaxData(ssn, salary);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">readonly</span> ssn: <span class="built_in">string</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> <span class="keyword">readonly</span> salary: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法链"><a href="#使用方法链" class="headerlink" title="使用方法链"></a>使用方法链</h3><p>这个模式在 JavaScript 中是非常有用的， 并且在许多类库使用。 它使你的代码变得富有表现力， 并减少啰嗦。 因为这个原因， 我说， 使用方法链然后再看看你的代码会变得多么简洁。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.collection = collection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, <span class="attr">itemsPerPage</span>: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="built_in">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.orderByFields = fields;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queryBuilder = <span class="keyword">new</span> QueryBuilder();</span><br><span class="line">queryBuilder.from(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line">queryBuilder.page(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">queryBuilder.orderBy(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = queryBuilder.build();</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryBuilder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> collection: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> pageNumber: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> itemsPerPage: <span class="built_in">number</span> = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">private</span> orderByFields: <span class="built_in">string</span>[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">from</span>(collection: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.collection = collection;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  page(<span class="built_in">number</span>: <span class="built_in">number</span>, <span class="attr">itemsPerPage</span>: <span class="built_in">number</span> = <span class="number">100</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.pageNumber = <span class="built_in">number</span>;</span><br><span class="line">    <span class="built_in">this</span>.itemsPerPage = itemsPerPage;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  orderBy(...fields: <span class="built_in">string</span>[]): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.orderByFields = fields;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build(): Query &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> query = <span class="keyword">new</span> QueryBuilder()</span><br><span class="line">  .from(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">  .page(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">  .orderBy(<span class="string">&#x27;firstName&#x27;</span>, <span class="string">&#x27;lastName&#x27;</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure><h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><h3 id="单一职责原则-SRP"><a href="#单一职责原则-SRP" class="headerlink" title="单一职责原则 (SRP)"></a>单一职责原则 (SRP)</h3><p>正如代码整洁之道所述， “永远不要有超过一个理由来修改一个类”。 给一个类塞满许多功能， 就像你在航班上只能带一个行李箱一样， 这样做的问题你的类不会有理想的内聚性， 将会有太多的理由来对它进行修改。最小化需要修改一个类的次数时很重要的， 因为如果一个类拥有太多的功能， 一旦你修改它的一小部分，<br>将会很难弄清楚会对代码库中的其它模块造成什么影响。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeSettings</span>(<span class="params">settings: UserSettings</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">verifyCredentials</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">verifyCredentials</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> auth: UserAuth;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> user: User</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.auth = <span class="keyword">new</span> UserAuth(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">changeSettings</span>(<span class="params">settings: UserSettings</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.auth.verifyCredentials()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开闭原则-OCP"><a href="#开闭原则-OCP" class="headerlink" title="开闭原则 (OCP)"></a>开闭原则 (OCP)</h3><p>Bertrand Meyer 说过， “软件实体 (类， 模块， 函数等) 应该为扩展开放， 但是为修改关闭。” 这是什么意思呢？ 这个原则基本上说明了你应该允许用户添加功能而不必修改现有的代码。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> adapter: Adapter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.adapter <span class="keyword">instanceof</span> AjaxAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeAjaxCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.adapter <span class="keyword">instanceof</span> NodeAdapter) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">await</span> makeHttpCall&lt;T&gt;(url);</span><br><span class="line">      <span class="comment">// transform response and return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span>&lt;<span class="title">T</span>&gt;(<span class="params">url: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// request and return promise</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// code shared to subclasses ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> request&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="comment">// request and return promise</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> adapter: Adapter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> fetch&lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="built_in">this</span>.adapter.request&lt;T&gt;(url);</span><br><span class="line">    <span class="comment">// transform response and return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 (LSP)"></a>里氏替换原则 (LSP)</h3><p>这是针对一个非常简单的里面的一个恐怖意图， 它的正式定义是： “如果 S 是 T 的一个子类型， 那么类型为 T 的对象可以被类型为 S 的对象替换（例如， 类型为 S 的对象可作为类型为 T 的替代品）而不需要修改目标程序的期望性质 （正确性、 任务执行性等）。” 这甚至是个恐怖的定义。</p><p>最好的解释是， 如果你有一个基类和一个子类， 那个基类和字类可以互换而不会产生不正确的结果。 这可能还有些疑惑， 让我们来看一下这个经典的正方形与矩形的例子。 从数学上说， 一个正方形是一个矩形，但是你用 “is-a” 的关系用继承来实现， 你将很快遇到麻烦。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">protected</span> width: <span class="built_in">number</span> = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">protected</span> height: <span class="built_in">number</span> = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">area: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  setWidth(width: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = width;</span><br><span class="line">    <span class="built_in">this</span>.height = width;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height: <span class="built_in">number</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.width = height;</span><br><span class="line">    <span class="built_in">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeRectangles</span>(<span class="params">rectangles: Rectangle[]</span>) </span>&#123;</span><br><span class="line">  rectangles.forEach(<span class="function">(<span class="params">rectangle</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = rectangle</span><br><span class="line">      .setWidth(<span class="number">4</span>)</span><br><span class="line">      .setHeight(<span class="number">5</span>)</span><br><span class="line">      .getArea(); <span class="comment">// BAD: Returns 25 for Square. Should be 20.</span></span><br><span class="line">    rectangle.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  setColor(color: <span class="built_in">string</span>): <span class="built_in">this</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">area: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> getArea(): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> width = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">private</span> <span class="keyword">readonly</span> height = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.width * <span class="built_in">this</span>.height;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> length: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getArea(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length * <span class="built_in">this</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">renderLargeShapes</span>(<span class="params">shapes: Shape[]</span>) </span>&#123;</span><br><span class="line">  shapes.forEach(<span class="function">(<span class="params">shape</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> area = shape.getArea();</span><br><span class="line">    shape.render(area);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shapes = [<span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Square(<span class="number">5</span>)];</span><br><span class="line">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 (ISP)"></a>接口隔离原则 (ISP)</h3><p>接口隔离原则说的是 “客户端不应该强制依赖他们不需要的接口。” 这个原则与单一职责原则紧密相关。</p><p>它的真正含义是你应该总是设计一种抽象的方式，使用部分方法的客户端不会得到全部实现。 这还包括禁止客户端实现他们不需要的方法。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SmartPrinter &#123;</span><br><span class="line">  print();</span><br><span class="line">  fax();</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllInOnePrinter</span> <span class="title">implements</span> <span class="title">SmartPrinter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EconomicPrinter</span> <span class="title">implements</span> <span class="title">SmartPrinter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Fax not supported.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Scan not supported.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Printer &#123;</span><br><span class="line">  print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Fax &#123;</span><br><span class="line">  fax();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Scanner &#123;</span><br><span class="line">  scan();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AllInOnePrinter</span> <span class="title">implements</span> <span class="title">Printer</span>, <span class="title">Fax</span>, <span class="title">Scanner</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="title">fax</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">scan</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EconomicPrinter</span> <span class="title">implements</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖反转原则-DIP"><a href="#依赖反转原则-DIP" class="headerlink" title="依赖反转原则 (DIP)"></a>依赖反转原则 (DIP)</h3><p>这个原则阐述了两个重要的事情：</p><ol><li>高级模块不应该依赖于低级模块， 两者都应该依赖与抽象；</li><li>抽象不应当依赖于具体实现， 具体实现应当依赖于抽象。</li></ol><p>这个一开始会很难理解， 但是如果你使用过 Angular.js ， 你应该已经看到过通过依赖注入来实现的这个原则， 虽然他们不是相同的概念， 依赖反转原则让高级模块远离低级模块的细节和创建， 可以通过 DI 来实现。 这样做的巨大益处是降低模块间的耦合。 耦合是一个非常糟糕的开发模式， 因为会导致代码难于重构。</p><p>DIP 通常通过使用控制反转 (IoC) 容器来达到。 <a href="https://www.npmjs.com/package/inversify">InversifyJs</a> 是 TypeScript 下的一个强大的 IoC 容器示例。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlFormatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts an XML string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// BAD: We have created a dependency on a specific request implementation.</span></span><br><span class="line">  <span class="comment">// We should just have ReportReader depend on a parse method: `parse`</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> formatter = <span class="keyword">new</span> XmlFormatter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader();</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.xml&#x27;</span>);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; readFile <span class="keyword">as</span> readFileCb &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = promisify(readFileCb);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReportData = &#123;</span><br><span class="line">  <span class="comment">// ..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Formatter &#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XmlFormatter</span> <span class="title">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts an XML string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonFormatter</span> <span class="title">implements</span> <span class="title">Formatter</span> </span>&#123;</span><br><span class="line">  parse&lt;T&gt;(content: <span class="built_in">string</span>): T &#123;</span><br><span class="line">    <span class="comment">// Converts a JSON string to an object T</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReportReader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> formatter: Formatter</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> read(path: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> text = <span class="keyword">await</span> readFile(path, <span class="string">&#x27;UTF8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> XmlFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.xml&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or if we had to read a json report</span></span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> ReportReader(<span class="keyword">new</span> JsonFormatter());</span><br><span class="line"><span class="keyword">await</span> report = <span class="keyword">await</span> reader.read(<span class="string">&#x27;report.json&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试比发布更加重要。 如果你没有测试或者测试不够充分， 每次发布时你就不能确认没有破坏任何事情。<br>测试的量由你的团队决定， 但是拥有 100% 的覆盖率(包括所有的语句和分支)是你为什么能达到高度自信和内心的平静。 这意味着需要一个额外的伟大的测试框架， 也需要一个好的<a href="http://gotwarlost.github.io/istanbul/">覆盖率工具</a>。</p><p>没有理由不写测试。 这里有<a href="http://jstherightway.org/#testing-tools">大量的优秀的 JS 测试框架</a>，<br>选一个适合你的团队的即可。 当为团队选择了测试框架之后， 接下来的目标是为生产的每一个新的功能／模块编写测试。 如果你倾向于测试驱动开发(TDD)， 那就太棒了， 但是要点是确认你在上线任何功能或者重构一个现有功能之前， 达到了需要的目标覆盖率。</p><h3 id="TDD-的三大纪律"><a href="#TDD-的三大纪律" class="headerlink" title="TDD 的三大纪律"></a>TDD 的三大纪律</h3><ol><li>不得写任何生产代码， 除非是修复了一个失败的单元测试；</li><li>出现任何失败， 不得继续编写任何单元测试； 编译失败也是失败；</li><li>只要有失败的单元测试， 不得继续编写任何生产代码；</li></ol><h3 id="F-I-R-S-T-规则"><a href="#F-I-R-S-T-规则" class="headerlink" title="F.I.R.S.T. 规则"></a>F.I.R.S.T. 规则</h3><p>简洁测试应当遵循的规则：</p><ul><li><p><strong>快速 (Fast)</strong> 测试应当很快， 因为我们希望经常运行他们。</p></li><li><p><strong>独立 (Independent)</strong> 测试不应当相互依赖。 不管是单独运行还是一起以任意顺序运行， 应当有相同的输出。</p></li><li><p><strong>重复 (Repeatable)</strong> 测试应当是在任何环境下可重复的， 测试失败不应有任何理由。</p></li><li><p><strong>自验证 (Self-Validating)</strong> 一个测试的结果应该是 <em>通过</em> 或者 <em>失败</em> 。 不需要去比较日志文件来判断测试是否通过。</p></li><li><p><strong>及时 (Timely)</strong> 单元测试应该在产品代码之前编写。 如果你在产品代码之后编写测试， 就会发现写测试太难了。</p></li></ul><h3 id="每个测试单个概念"><a href="#每个测试单个概念" class="headerlink" title="每个测试单个概念"></a>每个测试单个概念</h3><p>单元测试也应当遵守 <em>单一职责原则</em> 。 让每个单元测试只包含一个断言。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;AwesomeDate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;handles date boundaries&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> date: AwesomeDate;</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;1/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;1/31/2015&#x27;</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2016&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;2/29/2016&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line"></span><br><span class="line">    date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;3/1/2015&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">&#x27;chai&#x27;</span>;</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;AwesomeDate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;handles 30-day months&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;1/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;1/31/2015&#x27;</span>, date.addDays(<span class="number">30</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;handles leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2016&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;2/29/2016&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;handles non-leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> AwesomeDate(<span class="string">&#x27;2/1/2015&#x27;</span>);</span><br><span class="line">    assert.equal(<span class="string">&#x27;3/1/2015&#x27;</span>, date.addDays(<span class="number">28</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="测试的名称应当揭示它的动机"><a href="#测试的名称应当揭示它的动机" class="headerlink" title="测试的名称应当揭示它的动机"></a>测试的名称应当揭示它的动机</h3><p>当测试失败时， 它的名称就是错误的第一指示。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Calendar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;2/29/2020&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;throws&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">&#x27;Calendar&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;should handle leap year&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">&#x27;should throw when format is invalid&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="倾向于-Promise-而不是回调"><a href="#倾向于-Promise-而不是回调" class="headerlink" title="倾向于 Promise 而不是回调"></a>倾向于 Promise 而不是回调</h3><p>回调不够简洁， 因为他们会产生过多的嵌套 <em>（回调地狱）</em> 。 这些工具可以将使用回调函数转换成返回 Promise 的函数 （对于 Node.js ， 参考 <a href="https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original"><code>util.promisify</code></a> ， 而对于更加通用的场景， 参考  <a href="https://www.npmjs.com/package/pify">pify</a>, <a href="https://www.npmjs.com/package/es6-promisify">es6-promisify</a> ）。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span>, callback: (error: <span class="built_in">Error</span>, content?: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  get(url, <span class="function">(<span class="params">error, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      callback(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      writeFile(saveTo, response.body, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">          callback(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback(<span class="literal">null</span>, response.body);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>, <span class="function">(<span class="params">error, content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(url)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));  </span><br></pre></td></tr></table></figure><p>Promise 提供了一些帮助方法来让代码变得更加简洁：</p><table><thead><tr><th>Pattern</th><th>Description</th></tr></thead><tbody><tr><td><code>Promise.resolve(value)</code></td><td>将一个值转换为一个已解决的 Promise 。</td></tr><tr><td><code>Promise.reject(error)</code></td><td>将一个错误转换为一个已拒绝的 Promise 。</td></tr><tr><td><code>Promise.all(promises)</code></td><td>从一组 Promise 返回一个新的 Promise ， 如果这组 Promise 全部解决， 则解决新生成的 Promise ， 否则拒绝新生成的 Promise 。</td></tr><tr><td><code>Promise.race(promises)</code></td><td>从多个 Promise 生成一个新的 Promise ， 返回值由第一个解决或者拒绝的 Promise 决定。</td></tr></tbody></table><p><code>Promise.all</code> 在需要并行运行任务时非常有用， 而 <code>Promise.race</code> 则可以比较容易的实现类似超时的 Promise 。</p><h3 id="Async-Await-比-Promise-更加简洁"><a href="#Async-Await-比-Promise-更加简洁" class="headerlink" title="Async/Await 比 Promise 更加简洁"></a>Async/Await 比 Promise 更加简洁</h3><p>使用<code>async</code> /<code>await</code>语法，您可以编写更清晰，更易理解的链接承诺的代码。 通过在方法前面标记 <code>async</code> 关键字， 可以让 JavaScript 运行时在遇到 <code>async</code> 关键字时暂停（当使用 Promise 时才能这样做）。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = util.promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> get(url).then(<span class="function"><span class="params">response</span> =&gt;</span> write(saveTo, response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">content</span> =&gt;</span> <span class="built_in">console</span>.log(content))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.error(error));  </span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;request&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; writeFile &#125; <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&#x27;util&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> write = promisify(writeFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadPage</span>(<span class="params">url: <span class="built_in">string</span>, saveTo: <span class="built_in">string</span></span>): <span class="title">Promise</span>&lt;<span class="title">string</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> get(url);</span><br><span class="line">  <span class="keyword">await</span> write(saveTo, response);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// somewhere in an async function</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> content = <span class="keyword">await</span> downloadPage(<span class="string">&#x27;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#x27;</span>, <span class="string">&#x27;article.html&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(content);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>抛出错误是件好事！ 它们意味着当程序出错时， 成功的通知运行时， 并通过停止执行当前堆栈上的函数， 终止进程（在 Node 中）， 并且在控制台打印错误堆栈信息以通知你。</p><h3 id="始终使用为抛出或拒绝使用错误对象-Error"><a href="#始终使用为抛出或拒绝使用错误对象-Error" class="headerlink" title="始终使用为抛出或拒绝使用错误对象 (Error)"></a>始终使用为抛出或拒绝使用错误对象 (Error)</h3><p>JavaScript 以及 TypeScript 允许你 <code>抛出</code> 任意对象， 一个 Promise 也能够用任意对象进行拒绝。 使用 <code>抛出 (throw)</code> 语法和 <code>错误 (Error)</code> 类型是非常明智的， 这是因为错误消息可能会被更高级的语句用 <code>cache</code> 捕获到。 而捕获一个字符串可能会非常令人疑惑的， 同时也会让<a href="https://basarat.gitbooks.io/typescript/docs/types/exceptions.html#always-use-error">调试更加痛苦</a>。 同样的理由， 拒绝 Promise 时， 也应该使用 <code>Error</code> 类型。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;Not implemented.&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or equivalent to:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Item</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Not implemented.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>Error</code> 类型的好处是它被 <code>try/catch/finally</code> 支持， 并且所有的 Error 对象都有一个隐式属性 <code>stack</code> ， 在调试时很有用。 还有一个选择， 那就是不使用 <code>throw</code> 语法， 始终返回自定义的错误对象。 TypeScript 下更加容易， 参看下面的例子：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Result&lt;R&gt; = &#123; <span class="attr">isError</span>: <span class="literal">false</span>, <span class="attr">value</span>: R &#125;;</span><br><span class="line"><span class="keyword">type</span> Failure&lt;E&gt; = &#123; <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">error</span>: E &#125;;</span><br><span class="line"><span class="keyword">type</span> Failable&lt;R, E&gt; = Result&lt;R&gt; | Failure&lt;E&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculateTotal</span>(<span class="params">items: Item[]</span>): <span class="title">Failable</span>&lt;<span class="title">number</span>, &#x27;<span class="title">empty</span>&#x27;&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (items.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">isError</span>: <span class="literal">true</span>, <span class="attr">error</span>: <span class="string">&#x27;empty&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">isError</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="number">42</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要查看这个主意的更详细说明， 请参考<a href="https://medium.com/@dhruvrajvanshi/making-exceptions-type-safe-in-typescript-c4d200ee78e9">原帖</a>。</p><h3 id="不要忽略捕获到的错误"><a href="#不要忽略捕获到的错误" class="headerlink" title="不要忽略捕获到的错误"></a>不要忽略捕获到的错误</h3><p>捕获到错误后，什么都不做， 既不能让你修复错误， 也不能让你响应错误。 使用 <code>console.log</code> 将错误输出到控制台并不是十分高明， 因为经常会有大量的内容被打印输出到控制台， 很难再被找到。 一旦你在 <code>try/catch</code> 中包括了任何一点儿代码， 这就意味着你认为这里可能会有错误发生， 你应当针对它有一个计划， 或者一段代码来进行处理。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or even worse</span></span><br><span class="line"><span class="comment">// 更糟糕的是</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="comment">// ignore error</span></span><br><span class="line">  <span class="comment">// 完全忽略错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&#x27;./logging&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  functionThatMightThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要忽略被拒绝的-Promise"><a href="#不要忽略被拒绝的-Promise" class="headerlink" title="不要忽略被拒绝的 Promise"></a>不要忽略被拒绝的 Promise</h3><p>由于同样的原因， 你不应该忽略由 <code>try/catch</code> 捕获到的错误。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; logger &#125; <span class="keyword">from</span> <span class="string">&#x27;./logging&#x27;</span></span><br><span class="line"></span><br><span class="line">getUser()</span><br><span class="line">  .then(<span class="function">(<span class="params">user: User</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    logger.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 async/await 语法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> getUser();</span><br><span class="line">  <span class="keyword">await</span> sendEmail(user.email, <span class="string">&#x27;Welcome!&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  logger.log(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>格式化是主观的。 就像其它规则一样， 没有必须让你遵守的硬性规则。 重点是不要因为格式去争论， 有大量的工具来自动格式化， 使用其中的一个即可！ 因为做为工程师去争论格式化就是在浪费时间和金钱。 要遵守的通用规则是 <em>保持一致的格式化规则</em> 。</p><p>对 TypeScript 来说， 有一个强大的工具叫做 <a href="https://palantir.github.io/tslint/">TSLint</a> 。 它是一个可以显著提高代码的可读性和可维护性的静态分析工具。 也已经有一些可用的 TSLint 配置供你在项目中参考：</p><ul><li><p><a href="https://www.npmjs.com/package/tslint-config-standard">标准的 TSLint 配置</a> - 标准风格规则</p></li><li><p><a href="https://www.npmjs.com/package/tslint-config-airbnb">Airbnb 的 TSLint 配置</a> - Airbnb 风格指南</p></li><li><p><a href="https://www.npmjs.com/package/tslint-clean-code">简洁代码的 TSLint 配置</a> - 受 <a href="https://www.amazon.ca/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code: A Handbook of Agile Software Craftsmanship</a> 影响的 TSLint 规则</p></li><li><p><a href="https://www.npmjs.com/package/tslint-react">React 的 TSLint 配置</a> - React &amp; JSX 相关的 TSLint 配置</p></li><li><p><a href="https://www.npmjs.com/package/tslint-config-prettier">TSLint + Prettier</a> - <a href="https://github.com/prettier/prettier">Prettier</a> 的代码检查规则</p></li><li><p><a href="https://www.npmjs.com/package/tslint-eslint-rules">TypeScript 的 ESLint 规则</a> - TypeScript 的 ESLint 规则</p></li><li><p><a href="https://www.npmjs.com/package/tslint-immutable">Immutable</a> - TypeScript 中禁止突变的规则</p></li></ul><p>也请参考这个伟大的 <a href="https://basarat.gitbooks.io/typescript/docs/styleguide/styleguide.html">TypeScript 风格指南和编码约定</a> 。</p><h3 id="使用一致的大小写"><a href="#使用一致的大小写" class="headerlink" title="使用一致的大小写"></a>使用一致的大小写</h3><p>大小写可以告诉你很多关于你的变量， 函数等等。 这些规则是主观的， 所以你的团队可以选择他们想要的任何东西。 关键是， 无论你选择什么， 只要 <em>保持一致</em> 即可。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> daysInMonth = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> songs = [<span class="string">&#x27;Back In Black&#x27;</span>, <span class="string">&#x27;Stairway to Heaven&#x27;</span>, <span class="string">&#x27;Hey Jude&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> Artists = [<span class="string">&#x27;ACDC&#x27;</span>, <span class="string">&#x27;Led Zeppelin&#x27;</span>, <span class="string">&#x27;The Beatles&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restore_database</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DAYS_IN_WEEK = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> DAYS_IN_MONTH = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SONGS = [<span class="string">&#x27;Back In Black&#x27;</span>, <span class="string">&#x27;Stairway to Heaven&#x27;</span>, <span class="string">&#x27;Hey Jude&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> ARTISTS = [<span class="string">&#x27;ACDC&#x27;</span>, <span class="string">&#x27;Led Zeppelin&#x27;</span>, <span class="string">&#x27;The Beatles&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">restoreDatabase</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">type</span> Container = &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>建议类、 接口、 类型和命名空间使用 <code>PascalCase</code> 风格， 变量、 函数和类成员使用 <code>camelCase</code> 风格。</p><h3 id="函数的调用方与被调用方应该靠近"><a href="#函数的调用方与被调用方应该靠近" class="headerlink" title="函数的调用方与被调用方应该靠近"></a>函数的调用方与被调用方应该靠近</h3><p>如果一个函数调用另一个， 则在代码中这两个函数的竖直位置应该靠近。 理想情况下，保持被调用函数在被调用函数的正上方。 我们倾向于从上到下阅读代码， 就像读一章报纸。 由于这个原因， 保持你的代码可<br>以按照这种方式阅读。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> employee: Employee</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupPeers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee.id, <span class="string">&#x27;peers&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupManager</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee, <span class="string">&#x27;manager&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getPeerReviews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="built_in">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">review</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getPeerReviews();</span><br><span class="line">    <span class="built_in">this</span>.getManagerReview();</span><br><span class="line">    <span class="built_in">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getManagerReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="built_in">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getSelfReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PerformanceReview</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> employee: Employee</span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">review</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getPeerReviews();</span><br><span class="line">    <span class="built_in">this</span>.getManagerReview();</span><br><span class="line">    <span class="built_in">this</span>.getSelfReview();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getPeerReviews</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> peers = <span class="built_in">this</span>.lookupPeers();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupPeers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee.id, <span class="string">&#x27;peers&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getManagerReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> manager = <span class="built_in">this</span>.lookupManager();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">lookupManager</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> db.lookup(<span class="built_in">this</span>.employee, <span class="string">&#x27;manager&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="title">getSelfReview</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> review = <span class="keyword">new</span> PerformanceReview(employee);</span><br><span class="line">review.review();</span><br></pre></td></tr></table></figure><h3 id="组织导入"><a href="#组织导入" class="headerlink" title="组织导入"></a>组织导入</h3><p>使用简洁易读的 import 语句， 您可以快速查看当前代码的依赖关系。 确保对 <code>import</code> 语句应用以下良好实践：</p><ul><li>导入应当排序并分组；</li><li>未使用的导入应当删除；</li><li>命名导入应当排序 (比如： <code>import &#123;A, B, C&#125; from &#39;foo&#39;;</code>)</li><li>导入源应当在分组内排序， 比如： <code>import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;</code></li><li>分组导入之间保留一个空行；</li><li>分组之间应当遵守下面的顺序：<ul><li>兼容性填充 (比如： <code>import &#39;reflect-metadata&#39;;</code>)</li><li>Node 内置模块 (比如： <code>import fs from &#39;fs&#39;;</code>)</li><li>外部模块 (比如： <code>import &#123; query &#125; from &#39;itiriri&#39;;</code>)</li><li>内部模块 (i.e <code>import &#123; UserService &#125; from &#39;src/services/userService&#39;;</code>)</li><li>来自父目录的模块 (比如： <code>import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;</code>)</li><li>来自相同目录或同级目录的模块 (比如： <code>import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;</code>)</li></ul></li></ul><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">&#x27;../types/typeDefinition&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/attribute&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/api/authorization&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./plugins/config/configPlugin&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">&#x27;inversify&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;reflect-metadata&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&#x27;fs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BindingScopeEnum, Container &#125; <span class="keyword">from</span> <span class="string">&#x27;inversify&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AttributeTypes &#125; <span class="keyword">from</span> <span class="string">&#x27;../model/attribute&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TypeDefinition &#125; <span class="keyword">from</span> <span class="string">&#x27;../types/typeDefinition&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ApiCredentials, Adapters &#125; <span class="keyword">from</span> <span class="string">&#x27;./common/api/authorization&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ConfigPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;./plugins/config/configPlugin&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="使用-TypeScript-别名"><a href="#使用-TypeScript-别名" class="headerlink" title="使用 TypeScript 别名"></a>使用 TypeScript 别名</h3><p>通过在 <code>tsconfig.json</code> 文件中的 compilerOptions 对象内定义路径和基础路径， 可以创建更漂亮的导入。</p><p>这将避免导入时出现太长的相对路径。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;../../../services/UserService&#x27;</span>;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">&#x27;@services/UserService&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line">...</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;src&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@services&quot;</span>: [<span class="string">&quot;services/*&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>使用注释就意味着代码的表达失败。 代码应该是唯一的事实来源。</p><blockquote><p>不是为烂代码添加注释， 而是重写它们。  </p><ul><li><em>Brian W. Kernighan 和 P. J. Plaugher</em></li></ul></blockquote><h3 id="倾向于自描述的代码而不是注释"><a href="#倾向于自描述的代码而不是注释" class="headerlink" title="倾向于自描述的代码而不是注释"></a>倾向于自描述的代码而不是注释</h3><p>评论是代码的辩解， 不是要求。 多数情况下， 好的代码就是文档。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check if subscription is active.</span></span><br><span class="line"><span class="keyword">if</span> (subscription.endDate &gt; <span class="built_in">Date</span>.now) &#123;  &#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSubscriptionActive = subscription.endDate &gt; <span class="built_in">Date</span>.now;</span><br><span class="line"><span class="keyword">if</span> (isSubscriptionActive) &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="不要在代码库中保存注释掉的代码"><a href="#不要在代码库中保存注释掉的代码" class="headerlink" title="不要在代码库中保存注释掉的代码"></a>不要在代码库中保存注释掉的代码</h3><p>因为有版本控制， 把旧的代码留在历史记录即可</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">// age: number;</span></span><br><span class="line">  <span class="comment">// jobPosition: string;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  email: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不要有日志式的注释"><a href="#不要有日志式的注释" class="headerlink" title="不要有日志式的注释"></a>不要有日志式的注释</h3><p>记住， 使用版本控制！ 不需要僵尸代码， 注释掉的代码， 尤其是日志式的评论。 使用 <code>git log</code> 来<br>获取历史记录。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2016-12-20: Removed monads, didn&#x27;t understand them (RM)</span></span><br><span class="line"><span class="comment"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class="line"><span class="comment"> * 2016-02-03: Added type-checking (LI)</span></span><br><span class="line"><span class="comment"> * 2015-03-14: Implemented combine (JR)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免占位符"><a href="#避免占位符" class="headerlink" title="避免占位符"></a>避免占位符</h3><p>它们仅仅添加了干扰。 让函数和变量名称与合适的缩进和格式化为你的代码提供视觉结构。<br>绝大多数 IDE 支持代码折叠， 允许你展开/关闭代码段 （查看 Visual Studio Code <a href="https://code.visualstudio.com/updates/v1_17#_folding-regions">folding regions</a> ） 。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Client class</span></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// public methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="comment">// private methods</span></span><br><span class="line">  <span class="comment">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  address: Address;</span><br><span class="line">  contact: Contact;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> describe(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeAddress(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> describeContact(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="TODO-注释"><a href="#TODO-注释" class="headerlink" title="TODO 注释"></a>TODO 注释</h3><p>当你发现你需要在代码中做一些后期改进是， 请使用 <code>// TODO</code> 注释。 大多数 IDE 对这种类型的注释有着特殊的支持， 你可以快速的发现全部的 TODO 列表。</p><p>记住， <em>TODO</em> 注视并不是烂代码的借口。</p><p> <strong>NO：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; <span class="attr">dueDate</span>: &#123; <span class="attr">$lte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>YES：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getActiveSubscriptions</span>(<span class="params"></span>): <span class="title">Promise</span>&lt;<span class="title">Subscription</span>[]&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> ensure `dueDate` is indexed.</span></span><br><span class="line">  <span class="keyword">return</span> db.subscriptions.find(&#123; <span class="attr">dueDate</span>: &#123; <span class="attr">$lte</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">将代码整洁的理念适配至 TypeScript</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
    <category term="Github" scheme="https://jonty.top/tags/Github/"/>
    
    <category term="TypeScript" scheme="https://jonty.top/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>我在ThoughtWorks的头三年</title>
    <link href="https://jonty.top/2022/01/29/My-first-three-years-at-ThoughtWorks/"/>
    <id>https://jonty.top/2022/01/29/My-first-three-years-at-ThoughtWorks/</id>
    <published>2022-01-29T13:25:28.000Z</published>
    <updated>2022-07-24T13:48:17.633Z</updated>
    
    <content type="html"><![CDATA[<img data-src="https://cdn.jonty.top/img/1.png" ><div class="note info"><p>作者是 <a href="https://github.com/JulyShi">七姑娘</a> ，这里是 <a href="https://mp.weixin.qq.com/s/5SyFjxymvevAvX67TSjjsg">原文链接</a> 。</p></div><hr><p>几天前，同事小Y发来微信。</p><pre><code>“嗨，你参加过AWS考试吗？你说我要不要先考一下AWS从业者证书？” 小Y问道。“你对AWS证书了解吗？” 我说。“不是很了解。” 小Y回答。“建议你先做做功课再做决定哈，了解清楚在考这个证书的过程中你能学到什么？证书有什么作用？你为什么在当下选择考它而不是别的？”“不过，你为什么忽然想要考AWS证书呢？” 我问道。“我看到XX 和XX都在考，所以想一起考。” 小Y答。</code></pre><p>小Y是2019年加入公司的毕业生QA，和大多数新人一样好学上进，眼里充满对知识的渴望和对大神的敬仰，但缺乏目标、东奔西撞。这不禁让我想到了自己。</p><p>2016年底，我加入ThoughtWorks，仿佛一脚跨进了知识爆炸的时代。面对琳琅满目的学习素材、开放的网络、分享型的组织文化、一张张打满鸡血的脸庞，我浑身充满干劲，但同时饱尝着能力进阶的压力和焦虑。于是，学会“如何提升自己”就成了我这几年研究的重要课题。</p><div class="note info"><p>第一年</p></div><p>作为一名QA加入公司，我要足够专业！这是我的立身之本。</p><p>我相信，能够给人带来机会的是自己的“长板”，但限制自己发展的往往是“短板”。所以，我首先纵观全局，把QA需要具备的技能都理清楚了，然后不断寻找自己当前“最短”的一块板来提升。我将这个过程称为 <strong>“短板学习法”</strong> 。</p><p>这样做的好处是：能力发展会比较均衡、不偏科；其次，一旦有了全局意识，即使从最细小的事情开始，大方向也始终保持一致，有序而不乱。</p><p>我用“精益价值树”给自己画了一个愿景，并细分出成为一名专业QA的必备技能。</p><img data-src="https://cdn.jonty.top/img/zlRE7i6fNqTStu8.png" ><p>树的“投注”层就是我为了达成目标所需要提升的能力。要识别“短板”，首先要对每一项“投注”进行打分：</p><ul><li>0 - 表示你不具备这种技能</li><li>1 - 表示你能在别人指导下完成</li><li>2 - 表示你能独立完成</li><li>3 - 表示你能指导他人完成</li><li>4 - 表示你是这方面的专家，能去创造新的方法</li></ul><p>其中，得分最小的项就是我一定要提升的“短板”。假如有好几项得分相等且最低，我就会选择当前最容易实践的那一项，制定详细的学习举措。</p><p>“举措”非常重要，这决定了我最终能不能将提升计划落地。“举措”就是我要采取的具体行动，我习惯将理论与实际相结合。制定“举措”一定要考虑时间的投入。经过实践我发现，尽量不要在同一时间同时做3个以上的举措，时间的最小单位设定在2-3天最适宜。下图是我在提升自己API自动化测试时的举措，实践证明，这个“短板式学习法”很奏效。</p><img data-src="https://cdn.jonty.top/img/jOt5oyPxYiAS2LR.png" ><div class="note info"><p>第二年</p></div><p>工作的第二年，我陆续遇到一些思维的瓶颈。</p><ul><li>我们发现了很多Bug，但开发进度非常紧张，Bug如何才能更好地排进迭代（估算与计划）</li><li>与团队探讨问题时，我的想法是正确的，可却无法说服别人（沟通）</li><li>每天睁开眼睛，眼前都是堆积如山的工作，但我却无法让团队成员分担（团队协作与培养他人）</li><li>在项目上临时客串了几个月BA，一起出差到客户现场挖掘需求。客户有一堆想要做的东西，而时间和成本都有限，大家讨论地非常激烈，而我如鲠在喉。太少面对客户的机会，让我觉得客户仿佛有‘尖牙利爪’，不知如何应对（自信、领域知识、MVP、痛点挖掘、愿景分析、引导技术、谈判技术）</li></ul><img data-src="https://cdn.jonty.top/img/FZ4PrcHmUh7TCGi.png" ><p>为了打破这些思维的困境，我从公司内部找到好多资料来学习。</p><ul><li>参加公司BA系列培训，阅读BA基础必读书籍《用户故事与敏捷方法》、《用户故事地图》、《实例化需求》等。重新回顾自己客串BA时的全过程，反复推敲不足与待改进点</li><li>听了公司在“meia美啊”平台上公开的PM系列课程(搜索”ThoughtWorks”)，并挑选一些关键课程撰写个人感悟</li><li>参加公司的Tech Lead培训，学习角色认知、冲突管理、风险管理、影响力等等。并梳理自己工作中的典型案例，通过博客的方式，来记录自己的灵感和想法，如《你引导过一个窘迫的会议吗？》</li></ul><p>在学习的过程中，我意识到自己的学习动机来自于偶尔听到、看到或思考的一些课题，都是些零零散散的点，不够系统。因此，我需要按照一定的方式进行归类，构造出一个新的体系来。我将这个学习过程称为 <strong>“散点式学习法”</strong> 。</p><img data-src="https://cdn.jonty.top/img/y85EOiPuCrRBJqc.png" ><p>我通过社区培训、数据、文章、思考、与大师交流等形式获得知识，然后将这些散点按照产品、需求、领域知识、通用技能4个维度进行归类。在散点图中，我用不同的颜色标记当前对知识的掌握程度，用距离中心的位置表示学习的优先级。</p><p>如此一来，每当遇到一个思维瓶颈，我就将它作为一个新的课题来研究。通过散点式学习法，我碎片化地积累了很多知识。</p><div class="note info"><p>第三年</p></div><p>工作的第三年，除了继续以QA的角色做交付项目之外，我还做了很多事情。</p><ul><li>我参与了一些售前的工作，开始了解到一个交付项目是怎么来的、标书是什么东西、打标是怎么回事、Proposal该怎么写</li><li>我参与到一些咨询的工作，也终于明白为什么做咨询的人看起来睿智、自信又侃侃而谈</li><li>我参与到招聘，一起来设计招聘需求；参与面试，寻找适合我们的人才；我组织面试官培训，让大家都来掌握面试的技巧</li><li>我学习管理自己的团队，让大家有归属感、有成长、有贡献</li></ul><p>在这些工作中，我不断提升自己的文案功底、优秀的视觉化能力、精准地分析问题能力、敏锐的洞察力、精确的表达能力、良好的归纳能力、卓越的沟通技巧。</p><p>学到的知识越多，就越需要归纳总结。不然就很容易变成“这也会，那也会；但这也不熟，那也不精”。</p><img data-src="https://cdn.jonty.top/img/gqt9oHl6h2wZmSR.png" ><p>我将自己的技能归纳为三层：</p><ul><li>最里面是“核心技能”层：核心技能是我当前的立身之本。我作为一名QA，专业QA需要的技能及优秀素质就是我需要持续深耕的。我要严格要求自己，切不可3分钟热度</li><li>中间是“拓展技能”层：拓展技能层是我在角色周边获取的技能，它能帮助我突破瓶颈，站在更广阔的视野去思考；也能帮助我寻找更多的发展途径</li><li>最外层是“战略技能”层：这里的技能不受角色限制，不管你是一名QA，还是未来有一天你会成为一位像马爸爸一样的人，你都需要具备这些技能。随着职位越高，做的事情越复杂，你对“战略技能”的掌握就要更深入。“战略技能”让我们充满无限可能</li></ul><p>这是我在ThoughtWorks的头三年关于个人提升的理解，未来的三年，又将会是怎样的呢？</p><hr><p>写在最后：</p><p>电影《一代宗师》里宫老爷子说，习武之人有三个阶段：见自己，见天地，见众生。</p><ul><li>见自己，就是认识自己、了解自己，知道自己擅长学习什么武功</li><li>见天地，就是见识各门各派武学高手，知道自己所处的位置，这样才能日益精进</li><li>见众生，就是“普度众生”，让更多人学习这门武学，这样才能将其传承下去</li></ul><p>其实这不仅仅是武术传承，个人技能提升又何尝不是如此。你品、你细品……</p>]]></content>
    
    
    <summary type="html">QA打怪升级指南,技术向发展指南</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
    <category term="QA" scheme="https://jonty.top/tags/QA/"/>
    
  </entry>
  
</feed>
