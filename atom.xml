<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卷不动了</title>
  
  <subtitle>life has no Ctrl Z</subtitle>
  <link href="https://jonty.top/atom.xml" rel="self"/>
  
  <link href="https://jonty.top/"/>
  <updated>2021-10-27T15:47:46.395Z</updated>
  <id>https://jonty.top/</id>
  
  <author>
    <name>Jonty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VMware桥接模式连接失败</title>
    <link href="https://jonty.top/2021/10/27/vmware-bridge-ping-nowhere/"/>
    <id>https://jonty.top/2021/10/27/vmware-bridge-ping-nowhere/</id>
    <published>2021-10-27T15:19:50.000Z</published>
    <updated>2021-10-27T15:47:46.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习<code>Linux</code>以及<code>Oracle</code>数据库，为出差<code>AMD</code>做准备。（未知）顺便顺点CPU回来😂</p><p>🐂*吹过头了，话不多说，上图：</p><img data-src="https://cdn.jonty.top/img/image-20211027204530933.png" alt="image-20211027204530933" style="zoom:67%;" /><p>使用<strong>VMware</strong>安装<strong>Oracle Linux</strong>,使用<u>桥接模式(Bridge)</u>连接网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 192.168.2.1</span><br></pre></td></tr></table></figure><p>在<code>ping</code>本机时发现无法连接。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="检查网络设置"><a href="#检查网络设置" class="headerlink" title="检查网络设置"></a>检查网络设置</h3><p>查看<strong>Linux</strong>中<strong>IPv4</strong>设置，</p><p>这里使用的手动模式获取，</p><ul><li>地址：192.168.2.51</li><li>掩码：255.255.255.0</li><li>网关：192.168.2.1</li></ul><img data-src="https://cdn.jonty.top/img/image-20211027204554710.png" alt="image-20211027204554710" style="zoom:67%;" /><p>与本机地址对比，检查是否配置错误</p><p>使用以下命令查看<code>win</code>的网络配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><blockquote><p>PS：linux中为：ifconfig</p></blockquote><img data-src="https://cdn.jonty.top/img/image-20211027200202788.png" style="zoom:67%;" /><p>对比发现：掩码和网关一致，IP也未冲突。所以Linux中配置无误。</p><h3 id="检查虚拟网络编辑器"><a href="#检查虚拟网络编辑器" class="headerlink" title="检查虚拟网络编辑器"></a>检查虚拟网络编辑器</h3><p>查看一下<strong>VMware</strong>网络编辑器中<strong>桥接模式</strong>的配置</p><img data-src="https://cdn.jonty.top/img/image-20211027204653746.png" alt="image-20211027204653746" style="zoom:67%;" /><p>点击更改设置，一般桥接模式<strong>桥接地址</strong>为<strong>自动</strong>选择，建议配置为电脑网络连接使用的网卡地址。</p><img data-src="https://cdn.jonty.top/img/image-20211027204735327.png" alt="image-20211027204735327" style="zoom:67%;" /><h3 id="检查本机网卡"><a href="#检查本机网卡" class="headerlink" title="检查本机网卡"></a>检查本机网卡</h3><p>打开<strong>控制面板</strong>，找到当前连接网络</p><img data-src="https://cdn.jonty.top/img/image-20211027204905408.png" alt="image-20211027204905408" style="zoom:67%;" /><p>查看连接网络属性</p><img data-src="https://cdn.jonty.top/img/image-20211027204929950.png" alt="image-20211027204929950" style="zoom:67%;" /><p>可以看到，当前连接网络使用的网卡为：<code>Realtek PCIe GbE Family Controller</code>,我们将VMware虚拟网络编辑器中桥接模式的网卡设置为本机当前网络使用的网卡。</p><p>选择后点击<strong>应用</strong></p><img data-src="https://cdn.jonty.top/img/image-20211027205006171.png" alt="image-20211027205006171" style="zoom:67%;" /><h3 id="检查连接状态"><a href="#检查连接状态" class="headerlink" title="检查连接状态"></a>检查连接状态</h3><p>回到<strong>Linux</strong>中，再次<code>ping</code>连接成功。</p><img data-src="https://cdn.jonty.top/img/image-20211027205030251.png" alt="image-20211027205030251" style="zoom:67%;" /><p>这是一个很小的问题，记录一下。</p><blockquote><p>有时候问题很复杂，答案却很简单</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>VMware桥接模式</strong>：</p><p>VMware桥接模式，也就是将虚拟机的虚拟网络适配器与主机的物理网络适配器进行交接，虚拟机中的虚拟网络适配器可通过主机中的物理网络适配器直接访问到外部网络。</p><p>简而言之，这就好像在上图所示的局域网中添加了一台新的、独立的计算机一样。因此，虚拟机也会占用局域网中的一个IP地址，并且可以和其他终端进行相互访问。</p><p>桥接模式网络连接支持有线和无线主机网络适配器。如果你想把虚拟机当做一台完全独立的计算机看待，并且允许它和其他终端一样的进行网络通信，那么桥接模式通常是虚拟机访问网络的最简单途径。因为”桥接模式”下虚拟机相当于局域网中的一台电脑，所以IP同主机的IP在同一网段</p>]]></content>
    
    
    <summary type="html">VMware安装Linux网络桥接模式连接失败</summary>
    
    
    
    <category term="Linux" scheme="https://jonty.top/categories/Linux/"/>
    
    
    <category term="VMware" scheme="https://jonty.top/tags/VMware/"/>
    
    <category term="Linux" scheme="https://jonty.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>温故而知新-C#泛型</title>
    <link href="https://jonty.top/2021/10/08/csharp-generic-review-02/"/>
    <id>https://jonty.top/2021/10/08/csharp-generic-review-02/</id>
    <published>2021-10-07T17:05:07.000Z</published>
    <updated>2021-10-07T17:08:05.505Z</updated>
    
    <content type="html"><![CDATA[<h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>除了有<strong>泛型方法</strong>，还有<strong>泛型类</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DocumentManager</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">readonly</span>  <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; _documentQueue</span>= <span class="keyword">new</span> Queue&lt;T&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _lock = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsAvailable =&gt;_documentQueue.Count &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddDocument</span>(<span class="params">T doc</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            _documentQueue.Enqueue(doc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">GetDocument</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        T doc = <span class="literal">default</span>;</span><br><span class="line">        <span class="keyword">lock</span> (_lock)</span><br><span class="line">        &#123;</span><br><span class="line">            doc=_documentQueue.Dequeue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>可以看到在<code>GetDocument</code>这个方法中初始化<code>doc</code>变量时，我们使用了<code>default</code>关键字</p><blockquote><p>default关键字根据上下文可以有多种含义，switch语句中使用default定义默认情况。在泛型中取决于泛型类型是值类型还是引用类型，泛型default关键字将泛型类型初始化为null或0</p></blockquote><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><p><strong>泛型类</strong>都有了，<strong>泛型接口</strong>也可以有</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDocumentManager</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">AddDocument</span>(<span class="params">T doc</span>)</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="function">T <span class="title">GetDocument</span>(<span class="params"></span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>还有<strong>泛型委托</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">T t</span>)</span>;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>1、泛型在声明的时候可以不指定具体的类型，在使用时需要指定具体类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AClass</span>:<span class="title">BClass</span>&lt;<span class="title">int</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>2、如果子类也是泛型的，那么继承的时候可以不指定具体类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AClass</span>&lt;<span class="title">T</span>&gt;:<span class="title">BClass</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="逆变和协变"><a href="#逆变和协变" class="headerlink" title="逆变和协变"></a>逆变和协变</h4><p>在<code>.NET4.0</code>之前，泛型接口是不变的。</p><p><strong>协变</strong>和<strong>逆变</strong>指对参数和返回值的类型进行转换。只能放在接口或委托的泛型参数前面</p><p><code>out</code>协变 covariant 用来修饰返回值；</p><p><code>in</code>逆变 contravariant 用来修饰传入参数；</p><p>示例：</p><p>定义一个<code>Animal</code>类，再定义一个<code>Cat</code>类继承<code>Animal</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">Animal animal1 = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; animals = <span class="keyword">new</span> List&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Cat&gt;cats= <span class="keyword">new</span> List&lt;Cat&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;Animal&gt; list = <span class="keyword">new</span> List&lt;Cat&gt;(); <span class="comment">// 报错 没有父子级关系</span></span><br></pre></td></tr></table></figure><p>这个时候可以使用<strong>协变</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable list = <span class="keyword">new</span> List&lt;Cat&gt;();</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20211008001058082.png" alt="image-20211008001058082"></p><p>可以看到，泛型接口使用了<code>out</code>参数修饰，<code>T</code>只能是返回值类型，不能作为参数类型。使用<strong>协变</strong>后，左边声明的是基类，右边可以声明子类或基类。</p><p>协变也可用于委托：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Func&lt;Animal&gt;func = <span class="keyword">new</span> Func&lt;Cat&gt;(()=&gt;<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h4 id="自定义协变"><a href="#自定义协变" class="headerlink" title="自定义协变"></a>自定义协变</h4><p><strong>out</strong>协变，只能是返回结果</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerListOut</span>&lt;<span class="keyword">out</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">T <span class="title">Get</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerListOut</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICustomerListOut</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ICustomerListOut&lt;Animal&gt; list1 = <span class="keyword">new</span> CustomerListOut&lt;Cat&gt;();</span><br></pre></td></tr></table></figure><h4 id="自定义逆变"><a href="#自定义逆变" class="headerlink" title="自定义逆变"></a>自定义逆变</h4><p><strong>in</strong>逆变，只能作为方法参数，不能作为返回值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ICustomerListIn</span>&lt;<span class="keyword">in</span> <span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Show</span>(<span class="params">T t</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CustomerListIn</span>&lt;<span class="title">T</span>&gt; : <span class="title">ICustomerListIn</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params">T t</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ICustomerListIn&lt;Cat&gt; list2 = <span class="keyword">new</span> CustomerListIn&lt;Animal&gt;();</span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>如果泛型类需要调用泛型类型中的方法，则需要添加约束。</p><p>定义一个<code>IDocument</code>接口，定义两个<strong>只读属性</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDocument</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Document</span>:<span class="title">IDocument</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Document</span>(<span class="params"><span class="built_in">string</span> title,<span class="built_in">string</span> content</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Title = title;</span><br><span class="line">        <span class="keyword">this</span>.Content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Title &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要显示<strong>Document</strong>的标题，我们可以这样写:</p><p>将<code>T</code>强制转换为<code>IDocument</code>接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayAllDocuments</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> _documentQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(((IDocument)doc).Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果我们实现的不是<code>IDocument</code>呢？而是其他的，并没有<code>Title</code>，这个时候就会报错。</p><p>这个时候我们可以给<code>DocumentManager</code>一个约束：<strong>T</strong>类型必须实现<strong>IDocument</strong>接口，使用<code>Where</code>关键字</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DocumentManager&lt;T&gt;:IDocumentManager&lt;T&gt; <span class="keyword">where</span> T : <span class="function">IDocument</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayAllDocuments</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">foreach</span> (<span class="keyword">var</span> doc <span class="keyword">in</span> _documentQueue)</span><br><span class="line">   &#123;</span><br><span class="line">       Console.WriteLine(doc.Title);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><img data-src="https://cdn.jonty.top/img/image-20211007223036959.png" alt="image-20211007223036959" style="zoom:80%;" /><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><table><thead><tr><th align="center">约束</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">where T:struct</td><td align="center">T类型必须是值类型</td></tr><tr><td align="center">where T:class</td><td align="center">T类型必须是引用类型（类、接口、委托、数组等）</td></tr><tr><td align="center">where T:IFoo</td><td align="center">指定类型必须实现接口IFoo</td></tr><tr><td align="center">where T:Foo</td><td align="center">指定类型T必须派生自基类Foo</td></tr><tr><td align="center">where T:new()</td><td align="center">构造函数约束，指定类型T必须有一个默认构造函数，需最后指定</td></tr><tr><td align="center">where T1:T2</td><td align="center">T1派生自泛型类型T2</td></tr></tbody></table><blockquote><p>new()只能为默认构造函数定义构造函数约束，不能为其他构造函数定义构造函数约束</p><p>基类约束时，基类不能是密封类（即sealed类），sealed类不能被继承，则此约束无意义。</p></blockquote><p>泛型约束可以多个约束：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>&lt;<span class="title">T</span>&gt;(<span class="params">T t</span>) <span class="keyword">where</span> T:Document,<span class="keyword">new</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型继承"><a href="#泛型继承" class="headerlink" title="泛型继承"></a>泛型继承</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">DocumentManager</span>&lt;<span class="symbol">T</span>&gt; : <span class="symbol">IDocumentManager</span>&lt;<span class="symbol">T</span>&gt; <span class="symbol">where</span> <span class="symbol">T</span> : <span class="symbol">IDocument</span></span><br></pre></td></tr></table></figure><p>泛型类型可以实现泛型接口，也可以派生自一个类。泛型类可以派生自泛型基类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span>&lt;<span class="title">T</span>&gt;:<span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>必须重复实现接口的泛型类型，或者必须执行基类的类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Base</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Derived</span>&lt;<span class="title">T</span>&gt;:<span class="title">Base</span>&lt;<span class="title">string</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>派生类可以是<strong>泛型类</strong>或<strong>非泛型类</strong></p><p>例子：定义一个抽象的泛型类,在派生类中用另一种实现</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Calc</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">Add</span>(<span class="params">T x, T y</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">IntCalc</span> : <span class="title">Calc</span>&lt;<span class="title">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Add</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h3><p>泛型类的静态成员只能在类的一个实例中共享</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StaticDemo</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StaticDemo&lt;<span class="built_in">string</span>&gt;.x = <span class="number">4</span>;</span><br><span class="line">StaticDemo&lt;<span class="built_in">int</span>&gt;.x = <span class="number">5</span>;</span><br><span class="line">Console.WriteLine(StaticDemo&lt;<span class="built_in">string</span>&gt;.x);</span><br></pre></td></tr></table></figure><p>结果： </p><p><img data-src="https://cdn.jonty.top/img/image-20211007233059047.png" alt="image-20211007233059047"></p><h3 id="泛型缓存"><a href="#泛型缓存" class="headerlink" title="泛型缓存"></a>泛型缓存</h3><p>我们知道，类的静态构造函数只会执行一次，所以不管无论实例化多少次，在内存中只会有一个。</p><p>在泛型中，<code>T</code>类型不同，每个不同的<code>T</code>类型都会生成一个不同的副本，会产生不同的静态属性、静态构造函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">int</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">long</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;<span class="built_in">string</span>&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(GenericCache&lt;DateTime&gt;.GetCache());</span><br><span class="line">    Thread.Sleep(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GenericCache</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> _typeTime;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="title">GenericCache</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;static&quot;</span>);</span><br><span class="line"></span><br><span class="line">        _typeTime = <span class="string">$&quot;<span class="subst">&#123;<span class="keyword">typeof</span>(T).FullName&#125;</span>_<span class="subst">&#123;DateTime.Now:yyyyMMddHHmmss.fff&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetCache</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> _typeTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><img data-src="https://cdn.jonty.top/img/image-20211008003511609.png" alt="image-20211008003511609" style="zoom:80%;" /><p>泛型会为不同类型都创建一个副本，构造函数执行5次，后面获取的缓存都是相同的。</p><p>注意：只能为不同的类型缓存一次。泛型缓存比字典缓存效率高，但是不能主动释放。</p><h3 id="泛型结构"><a href="#泛型结构" class="headerlink" title="泛型结构"></a>泛型结构</h3><p>与类一样，结构也可以是泛型的。但是不同于类，不能继承。</p><p>以<code>Nullable&lt;T&gt;</code>为例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Nullable&lt;T&gt; <span class="keyword">where</span> T: <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> _hasValue;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> HasValue =&gt; _hasValue;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Nullable</span>(<span class="params">T <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _hasValue = <span class="literal">true</span>;</span><br><span class="line">        _value = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T _value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T Value</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!_hasValue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(<span class="string">&quot;no value&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> _value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">T</span>(<span class="params">Nullable&lt;T&gt; <span class="keyword">value</span></span>)</span> =&gt; <span class="keyword">value</span>.Value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">implicit</span> <span class="keyword">operator</span> <span class="title">Nullable</span>&lt;<span class="title">T</span>&gt;(<span class="params">T <span class="keyword">value</span></span>)</span> =&gt; <span class="keyword">new</span> Nullable&lt;T&gt;(<span class="keyword">value</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span>? ToString()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !HasValue ? <span class="built_in">string</span>.Empty : _value.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Nullable&lt;<span class="built_in">int</span>&gt; x;</span><br><span class="line">x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">if</span> (x.HasValue)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(x.Value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可空类型"><a href="#可空类型" class="headerlink" title="可空类型"></a>可空类型</h4><p>在<code>c#</code>中，使用<code>?</code>定义可空类型</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>? i = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>可空类型可以与<code>null</code>或数字比较</li><li>可空类型可以与算数运算符使用</li></ul><p>非可空类型可以转换成可空类型，隐式转换</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">int</span>? y = x;</span><br></pre></td></tr></table></figure><p>可空类型转为非可空类型可能会失败，如果可空类型<code>null</code>赋值给非可空类型则会抛出<code>InvalidOperationException</code>异常，需要强制类型转换</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>? x = GetNullableType(); <span class="comment">// 可能返回null</span></span><br><span class="line"><span class="built_in">int</span> y = (<span class="built_in">int</span>)x;</span><br></pre></td></tr></table></figure><p>如果不进行显示转换，则可以使用合并运算符从可空类型转换成非可空类型，关键词<code>??</code>，为转换定义一个默认值，以防可控类型的值为<code>null</code>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>? x = GetNullableType();</span><br><span class="line"><span class="built_in">int</span> y = x ?? <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">推迟一切可以推迟的东西-泛型应用</summary>
    
    
    
    <category term="CSharp" scheme="https://jonty.top/categories/CSharp/"/>
    
    
    <category term="Review" scheme="https://jonty.top/tags/Review/"/>
    
    <category term="Generic" scheme="https://jonty.top/tags/Generic/"/>
    
  </entry>
  
  <entry>
    <title>温故而知新-C#泛型</title>
    <link href="https://jonty.top/2021/10/04/csharp-generic-review-01/"/>
    <id>https://jonty.top/2021/10/04/csharp-generic-review-01/</id>
    <published>2021-10-04T09:42:29.000Z</published>
    <updated>2021-10-04T10:07:28.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发中，经常会遇到功能相同的模块，但是参数类型不同，这时候只能分别写不同的方法处理不同的数据类型。那么有没有一种办法，只用同一个方法来处理不同类型参数的方法</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params"><span class="built_in">string</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowTypeName</span>(<span class="params">DateTime i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面几个方法分别获取<code>int、string、DateTime</code>类型的名称，可以看到对应写了三种类型的<code>重载</code>方法。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowTypeName(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowTypeName(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowTypeName(DateTime.Now);</span><br></pre></td></tr></table></figure><p>结果：</p><p><img data-src="https://cdn.jonty.top/img/image-20211004162840338.png"></p><p>这个时候我们就会想<strong>面向对象的继承</strong>，我们知道在<code>C#</code>语言中，所有的类型都继承自基类<code>object</code></p><p>优化：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowObjectName</span>(<span class="params"><span class="built_in">object</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img data-src="https://cdn.jonty.top/img/image-20211004163223821.png" alt="image-20211004163223821"></p><p>可以看到，使用<code>object</code>类型作为参数传入达到了我们预期的效果，解决了代码的<strong>复用性</strong>。</p><p>但是这里又会引发另一个问题：装箱和拆箱带来的性能损耗问题。</p><blockquote><p>装箱和拆箱：在把值类型转换为引用类型或把引用类型转换成值类型时，需要进行装箱和拆箱的操作。</p><p>值类型存储在栈上，引用类型存储在堆上。</p><p>值类型  ==&gt; 引用类型  装箱    隐式转换(自动转换)  </p><p>引用类型 ==&gt; 值类型   拆箱    显示转换（强制转换）需要类型转换运算符</p></blockquote><h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>泛型就是为了解决这个问题而产生的，在<code>.NET2.0</code>推出泛型</p><blockquote><p>泛型是<code>C#</code>和<code>.NET</code>的一个重要概念，不仅是<code>C#</code>语言的一部分而且和<code>IL</code>中间语言紧密结合。</p><p>在泛型类型或方法定义中，类型参数是在其实例化泛型类型的一个变量时，客户端指定的特定类型的占位符。</p><p>泛型类( <code>GenericList&lt;T&gt;</code>)无法按原样使用，因为它不是真正的类型；它更像是类型的蓝图。 若要使用 <code>GenericList&lt;T&gt;</code>，客户端代码必须通过指定尖括号内的类型参数来声明并实例化构造类型。 此特定类的类型参数可以是编译器可识别的任何类型。 可创建任意数量的构造类型实例，其中每个使用不同的类型参数。</p></blockquote><h4 id="定义泛型参数"><a href="#定义泛型参数" class="headerlink" title="定义泛型参数"></a>定义泛型参数</h4><p>优化：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowName</span>&lt;<span class="title">T</span>&gt;(<span class="params">T i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(i?.GetType().Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;Jonty&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> d = DateTime.Now;</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************CommonMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowTypeName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowTypeName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowTypeName(d);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************ObjectMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowObjectName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowObjectName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowObjectName(d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Console.WriteLine(<span class="string">&quot;***************GenericMethod*************&quot;</span>);</span><br><span class="line"><span class="comment">// int</span></span><br><span class="line">CommonMethod.ShowName(i);</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line">CommonMethod.ShowName(s);</span><br><span class="line"><span class="comment">// datetime</span></span><br><span class="line">CommonMethod.ShowName(d);</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p>可以看到，效果是一摸一样的：</p><p><img data-src="https://cdn.jonty.top/img/image-20211004170341353.png" alt="image-20211004170341353"></p><p><strong>为什么泛型可以解决这个问题呢？</strong></p><p>泛型是延迟声明的：即定义的时候没有指定具体的参数类型，把参数类型的声明推迟到了调用的时候才指定参数类型</p><p><strong>泛型是如何工作的呢？</strong></p><p>控制台程序最终会编译成一个exe程序，exe被点击的时候，会经过JIT(即时编译器)的编译，最终生成二进制代码，才能被计算机执行。泛型加入到语法以后，<code>visual studio</code>自带的编译器又做了升级，升级之后编译时遇到泛型，会做特殊的处理：生成占位符。再次经过JIT编译的时候，会把上面编译生成的占位符替换成具体的数据类型。</p><p>示例:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="keyword">typeof</span>(List&lt;&gt;));</span><br><span class="line">Console.WriteLine(<span class="keyword">typeof</span>(Dictionary&lt;,&gt;));</span><br></pre></td></tr></table></figure><p>结果：</p><p>可以看到，泛型在编译后会生成占位符</p><p><img data-src="https://cdn.jonty.top/img/image-20211004171349172.png" alt="image-20211004171349172"></p><p><strong>性能对比：</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">11932</span></span><br><span class="line">    <span class="built_in">long</span> commonSecond = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> objectSecond = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">long</span> genericSecond = <span class="number">0</span></span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowInt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        commonSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowObject(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        objectSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch stopwatch = <span class="keyword">new</span>();</span><br><span class="line">        stopwatch.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">1000000000</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Show(i);</span><br><span class="line">        &#125;</span><br><span class="line">        stopwatch.Stop();</span><br><span class="line">        genericSecond = stopwatch.ElapsedMilliseconds;</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(</span><br><span class="line">        <span class="string">$&quot;commonMethod:<span class="subst">&#123;commonSecond&#125;</span>\nobjectMethod:<span class="subst">&#123;objectSecond&#125;</span>\ngenericMethod:<span class="subst">&#123;genericSecond&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">region</span> Private Metho</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowInt</span>(<span class="params"><span class="built_in">int</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowObject</span>(<span class="params"><span class="built_in">object</span> i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Show</span>&lt;<span class="title">T</span>&gt;(<span class="params">T i</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endregion</span></span></span><br></pre></td></tr></table></figure><p>结果：</p><p>泛型方法&lt;普通方法&lt;Object方法 </p><p><img data-src="https://cdn.jonty.top/img/image-20211004172530409.png" alt="image-20211004172530409"></p><h3 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h3><p>泛型的另一个特性就是<strong>类型安全</strong></p><p>示例：</p><p><code>ArrayList</code>可以添加任意类型的参数</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList arrayList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">arrayList.Add(<span class="number">123</span>);</span><br><span class="line">arrayList.Add(<span class="string">&quot;jonty&quot;</span>);</span><br><span class="line">arrayList.Add(DateTime.Now);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> arrayList)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型可以进行类型约束：</p><p>如果我们添加其他类型的参数则会编译报错，<strong>参数无效</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="built_in">int</span>&gt; arrInts = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">arrInts.Add(<span class="number">1</span>);</span><br><span class="line">arrInts.Add(<span class="number">2</span>);</span><br><span class="line">arrInts.Add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h3><ul><li><p>泛型类型的名称首字母用<code>T</code></p></li><li><p>如果没有特殊要求，泛型类型允许用任何类代替；且只使用了一个泛型类型时，可以直接使用<code>T</code>作为泛型类型的名称</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt;&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果泛型的类型有特殊的要求，或者使用了两个或多个泛型类型，那么泛型类应该使用描述性名称</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">Eventhandler</span>&lt;<span class="title">TEventArgs</span>&gt;(<span class="params">Object sender,TEventargs e</span>)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SortedList</span>&lt;<span class="title">Tkey</span>,<span class="title">TValue</span>&gt;&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">推迟一切可以推迟的东西-泛型概念</summary>
    
    
    
    <category term="CSharp" scheme="https://jonty.top/categories/CSharp/"/>
    
    
    <category term="Review" scheme="https://jonty.top/tags/Review/"/>
    
    <category term="Generic" scheme="https://jonty.top/tags/Generic/"/>
    
  </entry>
  
  <entry>
    <title>Windows Terminal 美化</title>
    <link href="https://jonty.top/2021/10/03/windows-terminal-beautify/"/>
    <id>https://jonty.top/2021/10/03/windows-terminal-beautify/</id>
    <published>2021-10-02T16:03:40.000Z</published>
    <updated>2021-10-02T17:02:19.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>用了很久的<code>Terminal+PowerShell</code>,加上装了<code>oh-my-posh</code>这个插件，不管用起来还是看起来都很舒服。</p><img data-src="https://cdn.jonty.top/img/image-20211003000724702.png" alt="image-20211003000724702" style="zoom: 80%;" /><p>由于电脑恢复了，重新配置一下，记录以供参考。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>1、下载<code>Terminal</code></p><p>可以直接在微软商店下载，我这里已经安装过了。</p><img data-src="https://cdn.jonty.top/img/image-20211003001214531.png" alt="image-20211003001214531" style="zoom:80%;" /><p>2、安装<code>PowerShell</code></p><blockquote><p>这里的PowerShell并非<code>win</code>系统自带的<code>PowerShell</code>,而是它的一个跨平台版本，类似于<code>.NET</code>与<code>.NET Core</code>的关系。</p></blockquote><p><a href="https://github.com/PowerShell/PowerShell/releases">下载地址</a>，找到系统对应的版本下载安装，我这里下载的是这个版本</p><img data-src="https://cdn.jonty.top/img/image-20211003001938075.png" alt="image-20211003001938075" style="zoom:80%;" /><p>3、安装插件</p><ul><li><code>PSReadLine</code>:提供自动补全等功能，GitHub地址：<a href="https://github.com/PowerShell/PSReadLine">https://github.com/PowerShell/PSReadLine</a></li><li><code>posh-git</code>:提供git的状态显示和命令补全。</li><li><code>oh-my-posh</code>:提供自定义主题和配色等,官网：<a href="https://ohmyposh.dev/">https://ohmyposh.dev/</a></li></ul><p>使用管理员打开新安装的<code>PowerShell</code>,执行下列命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install-Module PSReadline</span><br><span class="line">Install-Module posh-git</span><br><span class="line">Install-Module oh-my-posh</span><br></pre></td></tr></table></figure><p>安装时提示则直接输入<code>y</code>信任即可。</p><p>4、安装字体</p><p><a href="https://www.nerdfonts.com/font-downloads">下载字体</a> 选择合适的字体，我这里使用的是<code>FiraCode</code></p><blockquote><p>顺便推荐一下使用<code>FiraCode</code>码代码也挺爽的</p><p>使用Nerd Font不会导致乱码，特殊的一些符号会乱码，如图</p></blockquote><img data-src="https://cdn.jonty.top/img/image-20211003003954813.png" alt="image-20211003003954813" style="zoom:80%;" /><p>将下载下来的字体文件全选，拖入安装</p><img data-src="https://cdn.jonty.top/img/image-20211003004813071.png" alt="image-20211003004813071" style="zoom:80%;" /><p>5、编辑<code>$Profile</code>文件</p><p>Windows:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notepad<span class="selector-class">.exe</span> <span class="variable">$Profile</span></span><br></pre></td></tr></table></figure><p>没有文件则创建，配置一下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 PowerShell 主题</span></span><br><span class="line">Set-PoshPrompt paradox </span><br></pre></td></tr></table></figure><p>主题可以通过<code>Get-PoshThemes</code>命令查看，选择喜欢的然后将主题名称替换即可。</p><p>6、配置<code>Terminal</code></p><p>打开配置文件<img data-src="https://cdn.jonty.top/img/image-20211003005518036.png" alt="image-20211003005518036" style="zoom:80%;" /></p><p>加入以下配置：</p><p>视各自的情况配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&quot;defaultProfile&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, # 设置默认</span><br><span class="line">&quot;profiles&quot;: </span><br><span class="line">    &#123;</span><br><span class="line">        &quot;defaults&quot;: &#123;&#125;,</span><br><span class="line">        &quot;list&quot;: </span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;acrylicOpacity&quot;: 0.5,</span><br><span class="line">                &quot;backgroundImage&quot;: null,</span><br><span class="line">                &quot;commandline&quot;: &quot;C:/Program Files/PowerShell/7/pwsh.exe -nologo&quot;,</span><br><span class="line">                &quot;fontSize&quot;: 11,</span><br><span class="line">                &quot;fontFace&quot;: &quot;FiraCode Nerd Font&quot;,</span><br><span class="line">                &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;,</span><br><span class="line">                &quot;hidden&quot;: false,</span><br><span class="line">                &quot;historySize&quot;: 9001,</span><br><span class="line">                &quot;name&quot;: &quot;pwsh&quot;,</span><br><span class="line">                &quot;padding&quot;: &quot;5, 5, 20, 25&quot;,</span><br><span class="line">                &quot;snapOnInput&quot;: true,</span><br><span class="line">                &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;,</span><br><span class="line">                &quot;startingDirectory&quot;: &quot;.&quot;,</span><br><span class="line">                &quot;useAcrylic&quot;: true</span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>7、<code>VsCode</code>配置</p><img data-src="https://cdn.jonty.top/img/image-20211003005954791.png" alt="image-20211003005954791" style="zoom:80%;" /><p>至此大功告成，这下是不是卷的更有动力了。</p>]]></content>
    
    
    <summary type="html">Windows Terminal 美化</summary>
    
    
    
    <category term="Win" scheme="https://jonty.top/categories/Win/"/>
    
    
    <category term="Other" scheme="https://jonty.top/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>知乎关于我国高等教育的看法</title>
    <link href="https://jonty.top/2021/09/27/the-systematic-failure-of-higher-education-in-china/"/>
    <id>https://jonty.top/2021/09/27/the-systematic-failure-of-higher-education-in-china/</id>
    <published>2021-09-27T15:07:23.000Z</published>
    <updated>2021-09-27T15:15:06.212Z</updated>
    
    <content type="html"><![CDATA[<p>和老同学聊到在学校的生活，突然想到之前在知乎看到的这篇帖子，转载记录一下</p><p><a href="https://www.zhihu.com/people/517a82a684971b49348575efaa8f6fdd">@Youngster38324</a> 的回答透露出来了我国高等教育系统中的不少问题：</p><ol><li><strong>「进大学前唯分数和同质化教育」</strong>导致了太多人去大学后根本不知道自己要干嘛，很多人专业根本就不是自己选的更不要说知道自己有没有兴趣了，即便是很多高分考生也路径依赖地以为继续努力填鸭就能成功，没有意识到高考后的人生已经换赛道了。作为解决方案，可以引入类似美国 AP（Advanced Placement）的预科制度以及调整整个社会鼓励向自我发展看而不是向钱看的风气。</li><li><strong>「进大学后专业制度没有容错性」</strong>，即便已经发现自己不喜欢被录取专业了也没有办法，因为转专业制度不完善（通常要求你先要在你已经不喜欢了的本专业内卷到班级前多少名）。在不少西方学校，专业可以 undecided（先上课再决定专业，比如经典的哈佛 CS50，你上下来感兴趣了再去选 CS）；学位本身只是某个学科下课程学分累计的自然结果，因此可以灵活的转专业与多学位；班级这种促进内卷的概念也被弱化，强调跟自己比关注个人的成长，学生自己控制上几年课，念几个学位，中间休学一下都没关系。</li><li>前两步的结果就是导致大学为了毕业率把<strong>「评判标准搞成了平均主义」</strong>，为了能够每年顺利向社会输送一批（80% 将来都不会从事本专业）的人才，打分根据每年学生情况动态规划自适应，把大学搞成了「严进宽出」。其实大学教育更应该强调「宽进严出」，无论你底子如何，无论重修几次，你只要通过了某个（相对稳定的）客观标准就是合格，为了保证该制度的机械性运作，就要辅以严格的日常作业计分，对「作弊」零容忍（自动化判重，发现一次重修两次退学）。</li><li>平均主义进一步导致<strong>「课程设置没有灵活性无法自定义」</strong>，老师不但要照顾及格率还有一颗圣母心希望那些对专业没什么兴趣的人能好歹学到点东西，同时又真心欣赏且想要给予好学的尖子生资源，最后即便绞尽脑汁了也还是只能弄出个在差生里下限高在尖子生里上限低的课程安排两面不当人 —— 尖子生觉得课程要求太低不能激发自己的潜力喂不饱（常见于私下要求加难度或者去无学分旁听），摸鱼的觉得老师影响了我的快乐学习（常见于课堂上一布置作业下面就叫苦连天）该挂还是挂或者 60 分万岁。在不少西方学校学生，课程表可以自行安排，一个课可以开多个班次照顾灵活性，学霸可以比别人多上任意节课，也可以跨专业选课或者减少课程增加实习或研究，而且难度自选只要你点过前置技能就行。</li></ol><p>有类似迟先生这样诉求的人很多，可是一个系统很难由系统内的个体改变，所以很多个体选择了做局部优化趋利避害陪玩成为既得利益者，或者全局优化更换自己所处的系统。</p><p>只要所处系统里的大部分个体都已经默许了这个游戏规则，无论迟先生是「凡尔赛」还是「理想主义」，改变赛道规则就会被其他个体认为侵害到利益。小孩才分对错，成年人的屁股都是歪得，都是各取所需。</p><blockquote><p>作者：黄玄<br>链接：<a href="https://www.zhihu.com/question/439622084/answer/1685314467">https://www.zhihu.com/question/439622084/answer/1685314467</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <summary type="html">知乎关于我国高等教育看法的高赞回答</summary>
    
    
    
    <category term="Reprint" scheme="https://jonty.top/categories/Reprint/"/>
    
    
    <category term="Zhihu" scheme="https://jonty.top/tags/Zhihu/"/>
    
    <category term="View" scheme="https://jonty.top/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>浏览器实现静默打印</title>
    <link href="https://jonty.top/2021/09/25/browser-silent-printing/"/>
    <id>https://jonty.top/2021/09/25/browser-silent-printing/</id>
    <published>2021-09-25T15:42:22.000Z</published>
    <updated>2021-10-04T10:12:34.516Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近有一个需求涉及到<code>静默打印</code>,也就是打印时不需要弹出打印配置框，而是直接调用打印机</p><img data-src="https://cdn.jonty.top/img/image-20210925223925277.png"><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>经过讨论大概是以下几种方案：</p><ul><li>把打印配置弹窗干掉、模拟点击打印事件</li><li>浏览器实现静默打印</li><li>本地运行一个服务，客户端返回请求状态后请求本地接口调用打印</li></ul><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>第一种没有去尝试，所以先讲讲第二种解决方案，通过前端控制浏览器打印，但是百度一圈下来的解决方案都是通过设置浏览器参数，然后创建一个快捷程序并设置启动参数，操作很简单，但实在不符合需求，总不能给每个客户也这样配置一边吧，所以第二种也<code>pass</code>。</p><p>操作如下：</p><img data-src="https://cdn.jonty.top/img/image-20210925225136606.png"><h5 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h5><p>重点讲一下方案，也是目前在探索中，后续有更好的方法会发出来，也欢迎各位提出更好的解决方案。</p><p>目前仅支持windows环境，<code>winform</code>最终是<code>.exe</code>程序</p><h4 id="新建Winform程序"><a href="#新建Winform程序" class="headerlink" title="新建Winform程序"></a>新建Winform程序</h4><h5 id="使用VS2019创建"><a href="#使用VS2019创建" class="headerlink" title="使用VS2019创建"></a>使用<code>VS2019</code>创建</h5><img data-src="https://cdn.jonty.top/img/image-20210925225722885.png"><h5 id="拖入ComboBox控件，用来选择本地打印机"><a href="#拖入ComboBox控件，用来选择本地打印机" class="headerlink" title="拖入ComboBox控件，用来选择本地打印机"></a>拖入<code>ComboBox</code>控件，用来选择本地打印机</h5><img data-src="https://cdn.jonty.top/img/image-20210925225843764.png"><h5 id="获取打印机列表填充下拉"><a href="#获取打印机列表填充下拉" class="headerlink" title="获取打印机列表填充下拉"></a>获取打印机列表填充下拉</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 加载打印机列表</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitPrinterList</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> print = <span class="keyword">new</span> PrintDocument();</span><br><span class="line">    <span class="keyword">var</span> defaultPrinter = print.PrinterSettings.PrinterName;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; PrinterSettings.InstalledPrinters.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = PrinterSettings.InstalledPrinters[i];</span><br><span class="line">        <span class="keyword">if</span> (tmp == defaultPrinter)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp += <span class="string">&quot;(默认)&quot;</span>; <span class="comment">// 标记默认的打印机</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.comboBox1.Items.Add(tmp);  <span class="comment">// 下拉项新增</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    InitPrinterList(); <span class="comment">// 窗体加载事件中调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ctrl-f5运行窗体查看效果"><a href="#ctrl-f5运行窗体查看效果" class="headerlink" title="ctrl+f5运行窗体查看效果"></a><code>ctrl+f5</code>运行窗体查看效果</h5><img data-src="https://cdn.jonty.top/img/image-20210925230348173.png"><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>没有使用<code>socket</code>,而是在<code>winform</code>中创建了一个<code>http</code>服务，并开放端口供浏览器本地请求</p><p>先新增两个依赖：</p><ol><li>BeetleX 1.5.1.7 </li><li>BeetleX.FastHttpApi 1.8.2.61</li></ol><p>这两个版本是支持<code>.net framework</code>的，<a href="https://github.com/IKende/BeetleX/">BeetleX</a>是一个基于.Net Core开发的一个开源跨平台TCP通讯框架，它提供了完整的会话服务管理，协议分析扩展，TLS支持和缓冲区管理等完全服务基础功能。有兴趣的可以去Github参观一下。</p><h5 id="初始化Http服务"><a href="#初始化Http服务" class="headerlink" title="初始化Http服务"></a>初始化Http服务</h5><p>在Load方法中调用<code>InitHttpServer()</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 初始化网关服务</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">InitHttpServer</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    _httpApiServer = <span class="keyword">new</span> HttpApiServer(<span class="keyword">new</span> HttpOptions()</span><br><span class="line">    &#123;</span><br><span class="line">        Port = <span class="number">9000</span>, <span class="comment">// 本地开放的端口 要注意不要被占用</span></span><br><span class="line">        LogToConsole = <span class="literal">true</span>,</span><br><span class="line">        LogLevel = BeetleX.EventArgs.LogType.Debug</span><br><span class="line">     &#125;);</span><br><span class="line">    _httpApiServer.IPv4Tables.AddWhite(<span class="string">&quot;127.0.0.1/24&quot;</span>);</span><br><span class="line">    _httpApiServer.Options.CrossDomain = <span class="keyword">new</span> OptionsAttribute() &#123; AllowOrigin = <span class="string">&quot;*&quot;</span>, AllowMethods = <span class="string">&quot;*&quot;</span>, AllowHeaders = <span class="string">&quot;*&quot;</span> &#125;; <span class="comment">// 跨域配置，这个很重要</span></span><br><span class="line">    _httpApiServer.Register(<span class="keyword">typeof</span>(Home).Assembly);</span><br><span class="line">    _httpApiServer.Open();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册的程序就是<code>Controller</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Controller(BaseUrl = <span class="meta-string">&quot;/home&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Home</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Hello Word</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;name&quot;&gt;</span>string:  you name<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>string<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">Hello</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> &#123; Hello = <span class="string">&quot;hello &quot;</span> + name, Time = DateTime.Now &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制下服务的生命周期</p><img data-src="https://cdn.jonty.top/img/image-20210925231850394.png"><p>使用<code>Postman</code>请求一下</p><p><code>http://localhost:9000/home/Hello?name=test</code> 返回成功</p><img data-src="https://cdn.jonty.top/img/image-20210925232302311.png"><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p>客户端向本地请求打印接口，传入参数</p><p>这里传入了pdf文件地址，通过请求文件并打印</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 打印接口</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;url&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;printCount&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">int</span> printCount</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    url = url.Replace(<span class="string">&quot;\n &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(WebRequest.Create(url) <span class="keyword">is</span> HttpWebRequest request)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(request.GetResponse() <span class="keyword">is</span> HttpWebResponse response)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> stream = response.GetResponseStream();</span><br><span class="line">    <span class="comment">// 创建打印机</span></span><br><span class="line">    <span class="keyword">var</span> pdf = <span class="keyword">new</span> InputPdf(ReadFully(stream));</span><br><span class="line">    <span class="keyword">var</span> printJob = <span class="keyword">new</span> PrintJob(Printer.Default, pdf); <span class="comment">// 默认打印机</span></span><br><span class="line">    printJob.PrintOptions.Copies = printCount; <span class="comment">//打印数量</span></span><br><span class="line">    printJob.Print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 读取字节流</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;input&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">ReadFully</span>(<span class="params">Stream input</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        input.CopyTo(ms);</span><br><span class="line">        <span class="keyword">return</span> ms.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印插件调用的<code>DynamicPdf</code></p><p>打印插件文档：<a href="https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options">https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options</a> </p></blockquote><h4 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h4><p>可以通过下拉框选择的打印机打印,需要记录选择的打印机</p><p>通过读取和设置<code>config</code>值实现,引入<code>System.Configuration</code></p><p>ConfigHelper类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ConfigHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>返回*.exe.config文件中appSettings配置节的value项  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;strKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span> </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span> </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetAppConfig</span>(<span class="params"><span class="built_in">string</span> strKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">        <span class="keyword">var</span> config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">        <span class="keyword">return</span> config.AppSettings.Settings.AllKeys.Any(key =&gt; key == strKey) ? config.AppSettings.Settings[strKey].Value.ToString() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>在*.exe.config文件中appSettings配置节增加一对键值对  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;/summary&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;newKey&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span><span class="doctag">&lt;param name=&quot;newValue&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span>  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateAppConfig</span>(<span class="params"><span class="built_in">string</span> newKey, <span class="built_in">string</span> newValue</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">        <span class="keyword">var</span> config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">        <span class="keyword">var</span> exist = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> key <span class="keyword">in</span> config.AppSettings.Settings.AllKeys)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == newKey)</span><br><span class="line">            &#123;</span><br><span class="line">                exist = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exist)</span><br><span class="line">        &#123;</span><br><span class="line">            config.AppSettings.Settings.Remove(newKey);</span><br><span class="line">        &#125;</span><br><span class="line">        config.AppSettings.Settings.Add(newKey, newValue);</span><br><span class="line">        config.Save(ConfigurationSaveMode.Modified);</span><br><span class="line">        ConfigurationManager.RefreshSection(<span class="string">&quot;appSettings&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="设置下拉选择事件"><a href="#设置下拉选择事件" class="headerlink" title="设置下拉选择事件"></a>设置下拉选择事件</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">comboBox1_SelectedIndexChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 更新setting设置</span></span><br><span class="line">    <span class="keyword">var</span> selectedPrint = <span class="keyword">this</span>.comboBox1.SelectedItem.ToString();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(selectedPrint))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 移除掉初始化打印机列表添加的默认文本</span></span><br><span class="line">    <span class="keyword">if</span> (selectedPrint.Contains(<span class="string">&quot;默认&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        selectedPrint = selectedPrint.Replace(<span class="string">&quot;(默认)&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ConfigHelper.UpdateAppConfig(<span class="string">&quot;defaultPrint&quot;</span>, selectedPrint);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优化后的打印接口"><a href="#优化后的打印接口" class="headerlink" title="优化后的打印接口"></a>优化后的打印接口</h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 获取设置的打印机 （读取配置）</span></span><br><span class="line"><span class="keyword">var</span> defaultPrinter = ConfigHelper.GetAppConfig(<span class="string">&quot;defaultPrint&quot;</span>);</span><br><span class="line"><span class="comment">// 创建打印机</span></span><br><span class="line"><span class="keyword">var</span> printer = <span class="keyword">new</span> Printer(defaultPrinter);</span><br><span class="line"><span class="keyword">var</span> pdf = <span class="keyword">new</span> InputPdf(ReadFully(stream));</span><br><span class="line"><span class="keyword">var</span> printJob = <span class="keyword">new</span> PrintJob(printer, pdf);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样就能实现简单的静默打印，当然还有很多欠缺之处，后续优化，不当之处请指出</p>]]></content>
    
    
    <summary type="html">浏览器实现静默打印的小方案😁</summary>
    
    
    
    <category term=".Net" scheme="https://jonty.top/categories/Net/"/>
    
    
    <category term="Winform" scheme="https://jonty.top/tags/Winform/"/>
    
    <category term="Print" scheme="https://jonty.top/tags/Print/"/>
    
  </entry>
  
  <entry>
    <title>Docker中安装jira</title>
    <link href="https://jonty.top/2021/09/23/install-jira-in-docker/"/>
    <id>https://jonty.top/2021/09/23/install-jira-in-docker/</id>
    <published>2021-09-23T13:25:56.000Z</published>
    <updated>2021-10-04T10:12:57.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>其他数据库请参考文档</p><p><a href="https://confluence.atlassian.com/adminjiraserver/connecting-jira-applications-to-a-database-938846850.html">Connecting Jira applications to a database</a></p><p>这里使用的是PostgreSql</p><ol><li><p>创建空数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jiradb <span class="keyword">WITH</span> ENCODING <span class="string">&#x27;UNICODE&#x27;</span> LC_COLLATE <span class="string">&#x27;C&#x27;</span> LC_CTYPE <span class="string">&#x27;C&#x27;</span> TEMPLATE template0;</span><br></pre></td></tr></table></figure></li><li><p>创建用户(也可以使用默认用户)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jira <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;bb123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 给权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE jiradb <span class="keyword">TO</span> jira</span><br></pre></td></tr></table></figure></li></ol><p><img data-src="https://cdn.jonty.top/img/20210711235815.png" alt="image-20210708171601263"></p><h3 id="Jira安装"><a href="#Jira安装" class="headerlink" title="Jira安装"></a>Jira安装</h3><p><a href="https://confluence.atlassian.com/adminjiraserver071/jira-applications-installation-requirements-802592164.html">需要保证服务器有<code>4GB</code>以上内存</a></p><p>我在安装的时候1核2G跑不动换成了4核8G👀</p><p><img data-src="https://cdn.jonty.top/img/20210711235851.png" alt="image-20210708164819758"></p><h4 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h4><p>查看docker文档</p><p><img data-src="https://cdn.jonty.top/img/20210712000508.png"></p><ol><li>创建卷</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name jiraVolume</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取镜像并运行</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -v jiraVolume:/var/atlassian/application-data/jira --name=<span class="string">&quot;jira&quot;</span> -d -p <span class="number">8080</span>:<span class="number">8080</span> atlassian/jira-software:<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>ps：注意：我们破解的版本的为8.1.0，拉镜像需要指定版本</p></blockquote><p><img data-src="https://cdn.jonty.top/img/20210712001529.png" alt="image-20210708170606734"></p><ol start="4"><li>浏览器打开<code>IP:8080</code>端口</li></ol><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初次打开为英文，可在右上角设置为中文。选择第二个，自定义配置</p><p><img data-src="https://cdn.jonty.top/img/20210712001604.png" alt="image-20210708170935567"></p><p>点击下一步</p><p><img data-src="https://cdn.jonty.top/img/20210721102437.png" alt="image-20210708171706660"></p><p><img data-src="https://cdn.jonty.top/img/20210721102449.png" alt="image-20210708171725265"></p><p>点击下一步，等待几分钟，正在创建数据库表</p><p><img data-src="https://cdn.jonty.top/img/20210721102444.png" alt="image-20210708171808729"></p><p>数据库创建完成之后</p><p><img data-src="https://cdn.jonty.top/img/20210721102454.png" alt="image-20210708172102316"></p><p>点击下一步，获取授权码，可以有30天试用</p><p>需要先按照提示去官方获取试用授权码，这样才可以进入系统，然后进行破解包的替换，重启服务即可。</p><p>点击连接去官网生成许可证</p><p><img data-src="https://cdn.jonty.top/img/20210721102458.png" alt="image-20210708172300316"></p><p>我这里是直接用微软账号登录申请的，点击生成按钮后自动跳转回来并自动填入授权码</p><p><img data-src="https://cdn.jonty.top/img/20210712001647.png" alt="image-20210708172452780"></p><p>配置管理员账号</p><p><img data-src="https://cdn.jonty.top/img/20210721102555.png" alt="image-20210708172617985"></p><p>邮件服务器，以后再说</p><p><img data-src="https://cdn.jonty.top/img/20210721102602.png" alt="image-20210708172653783"></p><p>设置默认语言</p><p><img data-src="https://cdn.jonty.top/img/20210721102726.png" alt="image-20210708172918673"></p><p>选择头像</p><p><img data-src="https://cdn.jonty.top/img/20210721102743.png" alt="image-20210708172949746"></p><p>这里可以选择创建示例项目</p><p><img data-src="https://cdn.jonty.top/img/20210721102835.png" alt="image-20210708173027592"></p><p><img data-src="https://cdn.jonty.top/img/20210721102859.png" alt="image-20210708173118682"></p><p>进入首页面板</p><p><img data-src="https://cdn.jonty.top/img/20210721102910.png" alt="image-20210708173327874"></p><p>点击右上角的管理&gt;应用程序</p><p><img data-src="https://cdn.jonty.top/img/20210721102535.png" alt="image-20210708173606783"></p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><ol><li>下载破解包</li></ol><p><a href="https://cloud.189.cn/t/2MFZFvriQ7fe">atlassian-extras-3.2</a></p><ol start="2"><li>使用ftp工具上传到服务器</li></ol><p><img data-src="https://cdn.jonty.top/img/20210721102527.png" alt="image-20210708174235612"></p><ol start="3"><li><p>替换</p><p>通过docker ps 获取jira容器id，然后把破解包上传至宿主机通过docker cp 命令复制到容器中，重启jira容器　</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker cp atlassian-extras-3.2.jar  06849baab1a6:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib</span><br><span class="line"></span><br><span class="line">docker restart 06849baab1a6</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/20210721091151.png" alt="image-20210708174512592"></p></li></ol><p>破解成功</p><p><img data-src="https://cdn.jonty.top/img/20210721102816.png" alt="image-20210708174733130"></p>]]></content>
    
    
    <summary type="html">使用Docker部署项目管理工具Jira</summary>
    
    
    
    <category term="Docker" scheme="https://jonty.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Jira" scheme="https://jonty.top/tags/Jira/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jonty.top/2021/09/08/hello-world/"/>
    <id>https://jonty.top/2021/09/08/hello-world/</id>
    <published>2021-09-08T14:55:00.544Z</published>
    <updated>2021-09-25T15:48:37.826Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hello World ! this is my first blog👏</summary>
    
    
    
    <category term="Hexo" scheme="https://jonty.top/categories/Hexo/"/>
    
    
    <category term="Config" scheme="https://jonty.top/tags/Config/"/>
    
  </entry>
  
</feed>
