<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jonty&#39;s Blog</title>
  
  <subtitle>记录搬砖生活</subtitle>
  <link href="https://jonty.top/atom.xml" rel="self"/>
  
  <link href="https://jonty.top/"/>
  <updated>2024-06-25T15:18:11.453Z</updated>
  <id>https://jonty.top/</id>
  
  <author>
    <name>JontyWang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Abp vNext - 应用开发系列之集成测试</title>
    <link href="https://jonty.top/2024/06/24/abp-vNext-tutorials-part-4/"/>
    <id>https://jonty.top/2024/06/24/abp-vNext-tutorials-part-4/</id>
    <published>2024-06-24T14:35:21.000Z</published>
    <updated>2024-06-25T15:18:11.453Z</updated>
    
    <content type="html"><![CDATA[<p>在系列教程中，我们会构建一个基于ABP的Web应用程序，用于管理书籍及其作者列表</p><p>使用到的技术：</p><ul><li>Entity Framework Core</li><li>Angular</li></ul><p>本教程分为以下部分：</p><ul><li><a href="/2024/06/19/abp-vNext-tutorials-part-1/" title="Part1：创建服务端">Part1：创建服务端</a></li><li><a href="/2024/06/23/abp-vNext-tutorials-part-2/" title="Part 2：图书列表页面">Part 2：图书列表页面</a></li><li><a href="/2024/06/23/abp-vNext-tutorials-part-2/" title="Part 3：创建,更新和删除图书">Part 3：创建,更新和删除图书</a></li><li>Part 4: 集成测试（本节）</li><li><a href="#">Post not found: abp-vNext-tutorials-part-5 Part 5：授权</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-6 Part 6：作者: 领域层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-7 Part 7：作者: 数据库集成</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-8 Part 8：作者: 应用服务层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-9 Part 9：作者: 用户界面</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-10 Part 10：图书到作者的关系</a></li></ul><h2 id="解决方案中的测试项目"><a href="#解决方案中的测试项目" class="headerlink" title="解决方案中的测试项目"></a>解决方案中的测试项目</h2><p>在解决方案目录中，<code>test</code>下包含了测试项目</p><p><img data-src="https://cdn.jonty.top/img/202406252306277.png" alt="image-20240625230642200"></p><p>每个项目用于测试相关的应用程序项目，测试项目使用以下库进行测试:</p><ul><li><a href="https://xunit.github.io/">xunit</a> 作为主测试框架</li><li><a href="http://shouldly.readthedocs.io/en/latest/">Shoudly</a> 作为断言库</li><li><a href="http://nsubstitute.github.io/">NSubstitute</a> 作为模拟库</li></ul><h2 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h2><p>如果已经按照<a href="/2024/06/19/abp-vNext-tutorials-part-1/" title="第一部分">第一部分</a>中的操作创建了数据种子，则相同的数据也在测试中可用。 如果未创建种子数据，可以使用 <code>BookStoreTestDataSeedContributor</code> 为后续的测试准备种子数据</p><h2 id="测试-BookAppService"><a href="#测试-BookAppService" class="headerlink" title="测试 BookAppService"></a>测试 BookAppService</h2><p>在 <code>Acme.BookStore.Application.Tests</code> 项目的 <code>Books</code> 命名空间(文件夹)中创建一个名叫 <code>BookAppService_Tests</code> 的测试类：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Shouldly;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Dtos;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Modularity;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Validation;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BookAppService_Tests</span>&lt;<span class="title">TStartupModule</span>&gt; : <span class="title">BookStoreApplicationTestBase</span>&lt;<span class="title">TStartupModule</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">TStartupModule</span> : <span class="title">IAbpModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IBookAppService _bookAppService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BookAppService_Tests</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _bookAppService = GetRequiredService&lt;IBookAppService&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Fact</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Should_Get_List_Of_Books</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Act</span></span><br><span class="line">        <span class="keyword">var</span> result = <span class="keyword">await</span> _bookAppService.GetListAsync(</span><br><span class="line">            <span class="keyword">new</span> PagedAndSortedResultRequestDto()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Assert</span></span><br><span class="line">        result.TotalCount.ShouldBeGreaterThan(<span class="number">0</span>);</span><br><span class="line">        result.Items.ShouldContain(b =&gt; b.Name == <span class="string">&quot;1984&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>测试方法 <code>Should_Get_List_Of_Books</code> 直接使用 <code>BookAppService.GetListAsync</code> 方法来获取用户列表，并执行检查</li><li>可以检查 “1984” 这本书是否包含在结果中，因为之前在种子数据中已经创建</li></ul><p>在 <code>Acme.BookStore.EntityFrameworkCore.Tests</code> 项目 <code>EntityFrameworkCore\Applications\Books</code> 文件夹中添加 <code>BookAppService_Tests</code> 的实现类<code>EfCoreBookAppService_Tests.cs</code> ：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Acme.BookStore.Books;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.EntityFrameworkCore.Applications.Books</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Collection(BookStoreTestConsts.CollectionDefinitionName)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EfCoreBookAppService_Tests</span> : <span class="title">BookAppService_Tests</span>&lt;<span class="title">BookStoreEntityFrameworkCoreTestModule</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增测试方法，创建一个<code>Book</code>实体的场景：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Should_Create_A_Valid_Book</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Act</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> _bookAppService.CreateAsync(</span><br><span class="line">        <span class="keyword">new</span> CreateUpdateBookDto</span><br><span class="line">        &#123;</span><br><span class="line">            Name = <span class="string">&quot;New test book 42&quot;</span>,</span><br><span class="line">            Price = <span class="number">10</span>,</span><br><span class="line">            PublishDate = DateTime.Now,</span><br><span class="line">            Type = BookType.ScienceFiction</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Assert</span></span><br><span class="line">    result.Id.ShouldNotBe(Guid.Empty);</span><br><span class="line">    result.Name.ShouldBe(<span class="string">&quot;New test book 42&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增测试方法，创建一个错误<code>book</code>实体失败的场景：</p><ul><li>由于 <code>Name</code> 是空值，ABP 抛出一个 <code>AbpValidationException</code> 异常</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Should_Not_Create_A_Book_Without_Name</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> exception = <span class="keyword">await</span> Assert.ThrowsAsync&lt;AbpValidationException&gt;(<span class="keyword">async</span> () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> _bookAppService.CreateAsync(</span><br><span class="line">            <span class="keyword">new</span> CreateUpdateBookDto</span><br><span class="line">            &#123;</span><br><span class="line">                Name = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                Price = <span class="number">10</span>,</span><br><span class="line">                PublishDate = DateTime.Now,</span><br><span class="line">                Type = BookType.ScienceFiction</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    exception.ValidationErrors</span><br><span class="line">        .ShouldContain(err =&gt; err.MemberNames.Any(mem =&gt; mem == <span class="string">&quot;Name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终的测试类如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Shouldly;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Dtos;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Validation;</span><br><span class="line"><span class="keyword">using</span> Xunit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BookAppService_Tests</span>&lt;<span class="title">TStartupModule</span>&gt; : <span class="title">BookStoreApplicationTestBase</span>&lt;<span class="title">TStartupModule</span>&gt;</span><br><span class="line">        <span class="keyword">where</span> <span class="title">TStartupModule</span> : <span class="title">IAbpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IBookAppService _bookAppService;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BookAppService_Tests</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _bookAppService = GetRequiredService&lt;IBookAppService&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Fact</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Should_Get_List_Of_Books</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Act</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> _bookAppService.GetListAsync(</span><br><span class="line">                <span class="keyword">new</span> PagedAndSortedResultRequestDto()</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Assert</span></span><br><span class="line">            result.TotalCount.ShouldBeGreaterThan(<span class="number">0</span>);</span><br><span class="line">            result.Items.ShouldContain(b =&gt; b.Name == <span class="string">&quot;1984&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Fact</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Should_Create_A_Valid_Book</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//Act</span></span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">await</span> _bookAppService.CreateAsync(</span><br><span class="line">                <span class="keyword">new</span> CreateUpdateBookDto</span><br><span class="line">                &#123;</span><br><span class="line">                    Name = <span class="string">&quot;New test book 42&quot;</span>,</span><br><span class="line">                    Price = <span class="number">10</span>,</span><br><span class="line">                    PublishDate = DateTime.Now,</span><br><span class="line">                    Type = BookType.ScienceFiction</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Assert</span></span><br><span class="line">            result.Id.ShouldNotBe(Guid.Empty);</span><br><span class="line">            result.Name.ShouldBe(<span class="string">&quot;New test book 42&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Fact</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Should_Not_Create_A_Book_Without_Name</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> exception = <span class="keyword">await</span> Assert.ThrowsAsync&lt;AbpValidationException&gt;(<span class="keyword">async</span> () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> _bookAppService.CreateAsync(</span><br><span class="line">                    <span class="keyword">new</span> CreateUpdateBookDto</span><br><span class="line">                    &#123;</span><br><span class="line">                        Name = <span class="string">&quot;&quot;</span>,</span><br><span class="line">                        Price = <span class="number">10</span>,</span><br><span class="line">                        PublishDate = DateTime.Now,</span><br><span class="line">                        Type = BookType.ScienceFiction</span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            exception.ValidationErrors</span><br><span class="line">                .ShouldContain(err =&gt; err.MemberNames.Any(mem =&gt; mem == <span class="string">&quot;Name&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目录如下：</p><img data-src="https://cdn.jonty.top/img/202406252314984.png" alt="image-20240625231450946" style="zoom:67%;" /><p>打开<strong>测试资源管理器</strong>(测试 -&gt; Windows -&gt; 测试资源管理器)并<strong>执行所有</strong>测试</p><p><img data-src="https://cdn.jonty.top/img/202406252315599.png" alt="image-20240625231511560"></p><h2 id="下一节"><a href="#下一节" class="headerlink" title="下一节"></a>下一节</h2><p>教程<a href="#">Post not found: abp-vNext-tutorials-part-5 下一节</a></p>]]></content>
    
    
    <summary type="html">基于Abp vNext开发Web应用程序系列 - 集成测试</summary>
    
    
    
    <category term="Abp vNext" scheme="https://jonty.top/categories/Abp-vNext/"/>
    
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>Abp vNext - 应用开发系列之增删改</title>
    <link href="https://jonty.top/2024/06/24/abp-vNext-tutorials-part-3/"/>
    <id>https://jonty.top/2024/06/24/abp-vNext-tutorials-part-3/</id>
    <published>2024-06-24T12:40:39.000Z</published>
    <updated>2024-06-25T14:48:21.370Z</updated>
    
    <content type="html"><![CDATA[<p>在系列教程中，我们会构建一个基于ABP的Web应用程序，用于管理书籍及其作者列表</p><p>使用到的技术：</p><ul><li>Entity Framework Core</li><li>Angular</li></ul><p>本教程分为以下部分：</p><ul><li><a href="/2024/06/19/abp-vNext-tutorials-part-1/" title="Part1：创建服务端">Part1：创建服务端</a></li><li><a href="/2024/06/23/abp-vNext-tutorials-part-2/" title="Part 2： 图书列表页面">Part 2： 图书列表页面</a></li><li>Part 3：创建,更新和删除图书（本节）</li><li><a href="/2024/06/24/abp-vNext-tutorials-part-4/" title="Part 4：集成测试">Part 4：集成测试</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-5 Part 5：授权</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-6 Part 6：作者: 领域层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-7 Part 7：作者: 数据库集成</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-8 Part 8：作者: 应用服务层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-9 Part 9：作者: 用户界面</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-10 Part 10：图书到作者的关系</a></li></ul><h2 id="创建新书籍"><a href="#创建新书籍" class="headerlink" title="创建新书籍"></a>创建新书籍</h2><p>本节我们完成一个基本的增删改操作</p><img data-src="https://cdn.jonty.top/img/202406242122384.png" alt="book manager" style="width:67%;" /><h3 id="BookComponent"><a href="#BookComponent" class="headerlink" title="BookComponent"></a>BookComponent</h3><p>在<code>/src/app/book/book.component.ts</code>中新增以下内容：</p><ul><li>isModalOpen属性：用于判断模态框的打开关闭</li><li>createBook方法：新增按钮调用方法，打开弹窗</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ListService, PagedResultDto &#125; from &#x27;@abp/ng.core&#x27;;</span><br><span class="line">import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; BookService, BookDto&#125; from &#x27;@proxy/books&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-book&#x27;,</span><br><span class="line">  templateUrl: &#x27;./book.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./book.component.scss&#x27;],</span><br><span class="line">  providers: [ListService],</span><br><span class="line">&#125;)</span><br><span class="line">export class BookComponent implements OnInit &#123;</span><br><span class="line">  book = &#123; items: [], totalCount: 0 &#125; as PagedResultDto&lt;BookDto&gt;;</span><br><span class="line"></span><br><span class="line">  // 是否打开弹窗</span><br><span class="line">  isModalOpen = false; </span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    public readonly list: ListService, </span><br><span class="line">    private bookService: BookService,</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    const bookStreamCreator = (query) =&gt; this.bookService.getList(query);</span><br><span class="line"></span><br><span class="line">    this.list.hookToQuery(bookStreamCreator).subscribe((response) =&gt; &#123;</span><br><span class="line">      this.book = response;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 创建图书</span><br><span class="line">   */</span><br><span class="line">  createBook() &#123;</span><br><span class="line">    this.isModalOpen = true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开 <code>/src/app/book/book.component.html</code></p><ul><li>新增创建按钮</li><li>新增模态框</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col col-md-6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>&#123;&#123; &#x27;::Menu:Books&#x27; | abpLocalization &#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span>        </span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end col col-md-6&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 新增按钮在这里！！！ --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-lg-end pt-2&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;createBook()&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-plus mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; &quot;::NewBook&quot; | abpLocalization &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模态框组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abp-modal</span> [(<span class="attr">visible</span>)]=<span class="string">&quot;isModalOpen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpHeader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; &#x27;::NewBook&#x27; | abpLocalization &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpBody</span>&gt;</span> <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpFooter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">abpClose</span>&gt;</span></span><br><span class="line">      &#123;&#123; &#x27;::Close&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">abp-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候，点击新增按钮弹窗如下：</p><img data-src="https://cdn.jonty.top/img/202406242129742.png" alt="modal" style="width:67%;" /><h3 id="添加弹窗表单"><a href="#添加弹窗表单" class="headerlink" title="添加弹窗表单"></a>添加弹窗表单</h3><p>打开 <code>/src/app/book/book.component.ts</code> 新增以下内容：</p><ul><li>从<code>@angular/forms</code>导入 <code>FormGroup</code>、 <code>FormBuilder</code>、<code>Validators</code></li><li>添加 <code>form: FormGroup</code> 变量</li><li>添加 <code>bookTypes</code> 属性作为 <code>BookType</code> 枚举成员列表，在表单图书类型选项中使用</li><li>注入<code>FormBuilder</code> 到构造函数</li><li>添加 <code>buildForm</code> 方法到文件末尾，在 <code>createBook</code> 方法调用 <code>buildForm()</code> 方法初始化</li><li>添加<code>save</code> 方法，用于保存表单填写数据到后台（发起请求）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ListService, PagedResultDto &#125; from &#x27;@abp/ng.core&#x27;;</span><br><span class="line">import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; BookService, BookDto, bookTypeOptions &#125; from &#x27;@proxy/books&#x27;; // 导入 bookTypeOptions</span><br><span class="line">import &#123; FormGroup, FormBuilder, Validators &#125; from &#x27;@angular/forms&#x27;; // 导入</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-book&#x27;,</span><br><span class="line">  templateUrl: &#x27;./book.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./book.component.scss&#x27;],</span><br><span class="line">  providers: [ListService],</span><br><span class="line">&#125;)</span><br><span class="line">export class BookComponent implements OnInit &#123;</span><br><span class="line">  book = &#123; items: [], totalCount: 0 &#125; as PagedResultDto&lt;BookDto&gt;;</span><br><span class="line"></span><br><span class="line">  form: FormGroup; // 定义form</span><br><span class="line"></span><br><span class="line">  // 图书类型选项</span><br><span class="line">  bookTypes = bookTypeOptions;</span><br><span class="line"></span><br><span class="line">  isModalOpen = false;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    public readonly list: ListService,</span><br><span class="line">    private bookService: BookService,</span><br><span class="line">    private fb: FormBuilder // 注入 FormBuilder</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    const bookStreamCreator = (query) =&gt; this.bookService.getList(query);</span><br><span class="line"></span><br><span class="line">    this.list.hookToQuery(bookStreamCreator).subscribe((response) =&gt; &#123;</span><br><span class="line">      this.book = response;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createBook() &#123;</span><br><span class="line">    this.buildForm(); // 打开模态框 初始化表单</span><br><span class="line">    this.isModalOpen = true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 初始化表单</span><br><span class="line">  buildForm() &#123;</span><br><span class="line">    this.form = this.fb.group(&#123;</span><br><span class="line">      name: [&#x27;&#x27;, Validators.required],</span><br><span class="line">      type: [null, Validators.required],</span><br><span class="line">      publishDate: [null, Validators.required],</span><br><span class="line">      price: [null, Validators.required],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 新增保存方法</span><br><span class="line">  save() &#123;</span><br><span class="line">    if (this.form.invalid) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.bookService.create(this.form.value).subscribe(() =&gt; &#123;</span><br><span class="line">      this.isModalOpen = false;</span><br><span class="line">      this.form.reset();</span><br><span class="line">      this.list.get();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开 <code>/src/app/book/book.component.html</code>新增以下内容：</p><ul><li>表单</li><li>操作按钮</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abp-modal</span> [(<span class="attr">visible</span>)]=<span class="string">&quot;isModalOpen&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpHeader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; (selectedBook.id ? &#x27;::Edit&#x27; : &#x27;::NewBook&#x27; ) | abpLocalization &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpBody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> [<span class="attr">formGroup</span>]=<span class="string">&quot;form&quot;</span> (<span class="attr">ngSubmit</span>)=<span class="string">&quot;save()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;book-name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> * <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;book-name&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;name&quot;</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;book-price&quot;</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> * <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">id</span>=<span class="string">&quot;book-price&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;price&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;book-type&quot;</span>&gt;</span>Type<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> * <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">id</span>=<span class="string">&quot;book-type&quot;</span> <span class="attr">formControlName</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> [<span class="attr">ngValue</span>]=<span class="string">&quot;null&quot;</span>&gt;</span>Select a book type<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span> [<span class="attr">ngValue</span>]=<span class="string">&quot;type.value&quot;</span> *<span class="attr">ngFor</span>=<span class="string">&quot;let type of bookTypes&quot;</span>&gt;</span>&#123;&#123; type.key &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Publish date<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span> * <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">          #<span class="attr">datepicker</span>=<span class="string">&quot;ngbDatepicker&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">&quot;datepicker&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">formControlName</span>=<span class="string">&quot;publishDate&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ngbDatepicker</span></span></span><br><span class="line"><span class="tag">          (<span class="attr">click</span>)=<span class="string">&quot;datepicker.toggle()&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpFooter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span> <span class="attr">abpClose</span>&gt;</span></span><br><span class="line">      &#123;&#123; &#x27;::Close&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> (<span class="attr">click</span>)=<span class="string">&quot;save()&quot;</span> [<span class="attr">disabled</span>]=<span class="string">&quot;form.invalid&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-check mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      &#123;&#123; &#x27;::Save&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">abp-modal</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Datepicker"><a href="#Datepicker" class="headerlink" title="Datepicker"></a>Datepicker</h3><p>在这个组件中使用了<code>NgBootstrap datepicker</code>，需要添加与此组件相关的依赖项，打开 <code>/src/app/book/book.module.ts</code> 新增以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; SharedModule &#125; from &#x27;../shared/shared.module&#x27;;</span><br><span class="line">import &#123; BookRoutingModule &#125; from &#x27;./book-routing.module&#x27;;</span><br><span class="line">import &#123; BookComponent &#125; from &#x27;./book.component&#x27;;</span><br><span class="line">import &#123; NgbDatepickerModule &#125; from &#x27;@ng-bootstrap/ng-bootstrap&#x27;; // 导入</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [BookComponent],</span><br><span class="line">  imports: [</span><br><span class="line">    BookRoutingModule,</span><br><span class="line">    SharedModule,</span><br><span class="line">    NgbDatepickerModule, // 注册</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class BookModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>在 <code>/src/app/book/book.component.ts</code> 中使用<code>NgbDateAdapter</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ListService, PagedResultDto &#125; from &#x27;@abp/ng.core&#x27;;</span><br><span class="line">import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; BookService, BookDto, bookTypeOptions &#125; from &#x27;@proxy/books&#x27;;</span><br><span class="line">import &#123; FormGroup, FormBuilder, Validators &#125; from &#x27;@angular/forms&#x27;;</span><br><span class="line"></span><br><span class="line">// 导入</span><br><span class="line">import &#123; NgbDateNativeAdapter, NgbDateAdapter &#125; from &#x27;@ng-bootstrap/ng-bootstrap&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-book&#x27;,</span><br><span class="line">  templateUrl: &#x27;./book.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./book.component.scss&#x27;],</span><br><span class="line">  providers: [</span><br><span class="line">    ListService,</span><br><span class="line">    &#123; provide: NgbDateAdapter, useClass: NgbDateNativeAdapter &#125; // 提供器</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打开弹窗</p><img data-src="https://cdn.jonty.top/img/202406242139676.png" alt="弹窗" style="width:67%;" /><h2 id="更新书籍"><a href="#更新书籍" class="headerlink" title="更新书籍"></a>更新书籍</h2><p>打开 <code>/src/app/book/book.component.ts</code> 新增以下内容：</p><ul><li>声明类型为 <code>BookDto</code> 的 <code>selectedBook</code> 变量，用于存储获取到的Book对象</li><li>添加了<code>editBook</code> 方法，根据选择的书籍 <code>Id</code> 设置 <code>selectedBook</code> 对象</li><li>替换 <code>buildForm</code> 方法使用 <code>selectedBook</code> 数据初始化表单</li><li>替换 <code>createBook</code> 方法，设置 <code>selectedBook</code> 为空</li><li>修改 <code>save</code> 方法，同时处理新增和更新操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ListService, PagedResultDto &#125; from &#x27;@abp/ng.core&#x27;;</span><br><span class="line">import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; BookService, BookDto, bookTypeOptions &#125; from &#x27;@proxy/books&#x27;;</span><br><span class="line">import &#123; FormGroup, FormBuilder, Validators &#125; from &#x27;@angular/forms&#x27;;</span><br><span class="line">import &#123; NgbDateNativeAdapter, NgbDateAdapter &#125; from &#x27;@ng-bootstrap/ng-bootstrap&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-book&#x27;,</span><br><span class="line">  templateUrl: &#x27;./book.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./book.component.scss&#x27;],</span><br><span class="line">  providers: [ListService, &#123; provide: NgbDateAdapter, useClass: NgbDateNativeAdapter &#125;],</span><br><span class="line">&#125;)</span><br><span class="line">export class BookComponent implements OnInit &#123;</span><br><span class="line">  book = &#123; items: [], totalCount: 0 &#125; as PagedResultDto&lt;BookDto&gt;;</span><br><span class="line"></span><br><span class="line">  selectedBook = &#123;&#125; as BookDto; // 定义 selectedBook</span><br><span class="line"></span><br><span class="line">  form: FormGroup;</span><br><span class="line"></span><br><span class="line">  bookTypes = bookTypeOptions;</span><br><span class="line"></span><br><span class="line">  isModalOpen = false;</span><br><span class="line"></span><br><span class="line">  constructor(</span><br><span class="line">    public readonly list: ListService,</span><br><span class="line">    private bookService: BookService,</span><br><span class="line">    private fb: FormBuilder</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    const bookStreamCreator = (query) =&gt; this.bookService.getList(query);</span><br><span class="line"></span><br><span class="line">    this.list.hookToQuery(bookStreamCreator).subscribe((response) =&gt; &#123;</span><br><span class="line">      this.book = response;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  createBook() &#123;</span><br><span class="line">    this.selectedBook = &#123;&#125; as BookDto; // 创建时将selectedBook置空</span><br><span class="line">    this.buildForm();</span><br><span class="line">    this.isModalOpen = true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 编辑书籍根据选择的Id查询Book信息</span><br><span class="line">  editBook(id: string) &#123;</span><br><span class="line">    this.bookService.get(id).subscribe((book) =&gt; &#123;</span><br><span class="line">      this.selectedBook = book; </span><br><span class="line">      this.buildForm();</span><br><span class="line">      this.isModalOpen = true;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildForm() &#123;</span><br><span class="line">    // 判断selectedBook是否有值，区分是否编辑或新增</span><br><span class="line">    this.form = this.fb.group(&#123;</span><br><span class="line">      name: [this.selectedBook.name || &#x27;&#x27;, Validators.required],</span><br><span class="line">      type: [this.selectedBook.type || null, Validators.required],</span><br><span class="line">      publishDate: [</span><br><span class="line">        this.selectedBook.publishDate ? new Date(this.selectedBook.publishDate) : null,</span><br><span class="line">        Validators.required,</span><br><span class="line">      ],</span><br><span class="line">      price: [this.selectedBook.price || null, Validators.required],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 保存</span><br><span class="line">  save() &#123;</span><br><span class="line">    if (this.form.invalid) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 判断selectedBook.id是否有值</span><br><span class="line">    // true:更新</span><br><span class="line">    // false:新增</span><br><span class="line">    const request = this.selectedBook.id</span><br><span class="line">      ? this.bookService.update(this.selectedBook.id, this.form.value)</span><br><span class="line">      : this.bookService.create(this.form.value);</span><br><span class="line"></span><br><span class="line">    request.subscribe(() =&gt; &#123;</span><br><span class="line">      this.isModalOpen = false;</span><br><span class="line">      this.form.reset();</span><br><span class="line">      this.list.get();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加表格操作按钮"><a href="#添加表格操作按钮" class="headerlink" title="添加表格操作按钮"></a>添加表格操作按钮</h3><p>打开 <code>/src/app/book/book.component.html</code> 在 <code>ngx-datatable</code> 第一列添加 <code>ngx-datatable-column</code> 定义:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ngx-datatable-column</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">name</span>]=<span class="string">&quot;&#x27;::Actions&#x27; | abpLocalization&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">maxWidth</span>]=<span class="string">&quot;150&quot;</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">sortable</span>]=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">let-row</span>=<span class="string">&quot;row&quot;</span> <span class="attr">ngx-datatable-cell-template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ngbDropdown</span> <span class="attr">container</span>=<span class="string">&quot;body&quot;</span> <span class="attr">class</span>=<span class="string">&quot;d-inline-block&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;btn btn-primary btn-sm dropdown-toggle&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">data-toggle</span>=<span class="string">&quot;dropdown&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">aria-haspopup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ngbDropdownToggle</span></span></span><br><span class="line"><span class="tag">      &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-cog mr-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123; &#x27;::Actions&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ngbDropdownMenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">ngbDropdownItem</span> (<span class="attr">click</span>)=<span class="string">&quot;editBook(row.id)&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; &#x27;::Edit&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ngx-datatable-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在表格的第一列添加了一个 <code>Actions</code> 下拉菜单，如下图所示：</p><p><img data-src="https://cdn.jonty.top/img/202406242202315.png" alt="action"></p><p>同时如下所示更改 <code>ng-template #abpHeader</code> 部分:</p><ul><li>根据是否有选中的值判断弹窗展示文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">abpHeader</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; (selectedBook.id ? &#x27;::Edit&#x27; : &#x27;::NewBook&#x27; ) | abpLocalization &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除书籍"><a href="#删除书籍" class="headerlink" title="删除书籍"></a>删除书籍</h2><p>打开 <code>/src/app/book/book.component.ts</code> 注入 <code>ConfirmationService</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// ...</span><br><span class="line"></span><br><span class="line">// 新增导入</span><br><span class="line">import &#123; ConfirmationService, Confirmation &#125; from &#x27;@abp/ng.theme.shared&#x27;;</span><br><span class="line"></span><br><span class="line">constructor(</span><br><span class="line">  public readonly list: ListService,</span><br><span class="line">  private bookService: BookService,</span><br><span class="line">  private fb: FormBuilder,</span><br><span class="line">  private confirmation: ConfirmationService // 注入</span><br><span class="line">) &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 新增删除方法</span><br><span class="line">delete(id: string) &#123;</span><br><span class="line">  this.confirmation.warn(&#x27;::AreYouSureToDelete&#x27;, &#x27;::AreYouSure&#x27;).subscribe((status) =&gt; &#123;</span><br><span class="line">    if (status === Confirmation.Status.confirm) &#123;</span><br><span class="line">      this.bookService.delete(id).subscribe(() =&gt; this.list.get());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加删除按钮"><a href="#添加删除按钮" class="headerlink" title="添加删除按钮"></a>添加删除按钮</h3><p>打开 <code>/src/app/book/book.component.html</code> 修改 <code>ngbDropdownMenu</code> 添加删除按钮</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ngbDropdownMenu</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- add the Delete button --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ngbDropdownItem</span> (<span class="attr">click</span>)=<span class="string">&quot;delete(row.id)&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; &#x27;::Delete&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/202406242202315.png" alt="action"></p><p>点击 <code>delete</code> 操作调用 <code>delete</code> 方法，然后显示一个确认弹层如下图所示：</p><p><img data-src="https://cdn.jonty.top/img/202406242209267.png" alt="confirm"></p><p>至此就完成了对Book的增删改操作</p><h2 id="下一节"><a href="#下一节" class="headerlink" title="下一节"></a>下一节</h2><p>教程<a href="/2024/06/24/abp-vNext-tutorials-part-4/" title="下一节">下一节</a></p>]]></content>
    
    
    <summary type="html">基于Abp vNext开发Web应用程序系列 - 增删改</summary>
    
    
    
    <category term="Abp vNext" scheme="https://jonty.top/categories/Abp-vNext/"/>
    
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>Abp vNext - 应用开发系列之页面</title>
    <link href="https://jonty.top/2024/06/23/abp-vNext-tutorials-part-2/"/>
    <id>https://jonty.top/2024/06/23/abp-vNext-tutorials-part-2/</id>
    <published>2024-06-23T06:51:38.000Z</published>
    <updated>2024-06-25T14:46:50.434Z</updated>
    
    <content type="html"><![CDATA[<p>在系列教程中，我们会构建一个基于ABP的Web应用程序，用于管理书籍及其作者列表</p><p>使用到的技术：</p><ul><li>Entity Framework Core</li><li>Angular</li></ul><p>本教程分为以下部分：</p><ul><li><a href="/2024/06/19/abp-vNext-tutorials-part-1/" title="Part1：创建服务端">Part1：创建服务端</a></li><li>Part 2：图书列表页面（本节）</li><li><a href="/2024/06/24/abp-vNext-tutorials-part-3/" title="Part 3: 创建,更新和删除图书">Part 3: 创建,更新和删除图书</a></li><li><a href="/2024/06/24/abp-vNext-tutorials-part-4/" title="Part 4: 集成测试">Part 4: 集成测试</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-5 Part 5: 授权</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-6 Part 6: 作者: 领域层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-7 Part 7: 作者: 数据库集成</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-8 Part 8: 作者: 应用服务层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-9 Part 9: 作者: 用户界面</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-10 Part 10: 图书到作者的关系</a></li></ul><h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>配置本地化多语言，位于<code>.Domain.Shared</code>项目<code>Localization/BookStore</code>目录下：</p><p>编辑<code>zh-Hans.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;culture&quot;</span>: <span class="string">&quot;zh-Hans&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;texts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Menu:Home&quot;</span>: <span class="string">&quot;首页&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Welcome&quot;</span>: <span class="string">&quot;欢迎&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LongWelcomeMessage&quot;</span>: <span class="string">&quot;欢迎使用本应用程序。这是一个基于 ABP 框架的启动项目。更多信息，请访问 abp.io。&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Menu:BookStore&quot;</span>: <span class="string">&quot;书店&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Menu:Books&quot;</span>: <span class="string">&quot;书籍&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Actions&quot;</span>: <span class="string">&quot;操作&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Close&quot;</span>: <span class="string">&quot;关闭&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Delete&quot;</span>: <span class="string">&quot;删除&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Edit&quot;</span>: <span class="string">&quot;编辑&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;PublishDate&quot;</span>: <span class="string">&quot;发布日志&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;NewBook&quot;</span>: <span class="string">&quot;新的书籍&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Name&quot;</span>: <span class="string">&quot;名称&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Type&quot;</span>: <span class="string">&quot;类型&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Price&quot;</span>: <span class="string">&quot;价格&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CreationTime&quot;</span>: <span class="string">&quot;创建时间&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;AreYouSure&quot;</span>: <span class="string">&quot;是否确认?&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;AreYouSureToDelete&quot;</span>: <span class="string">&quot;是否确认删除?&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.0&quot;</span>: <span class="string">&quot;未定义&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.1&quot;</span>: <span class="string">&quot;冒险&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.2&quot;</span>: <span class="string">&quot;传记&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.3&quot;</span>: <span class="string">&quot;乌托邦&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.4&quot;</span>: <span class="string">&quot;奇幻&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.5&quot;</span>: <span class="string">&quot;恐怖&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.6&quot;</span>: <span class="string">&quot;科学&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.7&quot;</span>: <span class="string">&quot;科幻&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Enum:BookType.8&quot;</span>: <span class="string">&quot;诗歌&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过修改<code>DomainSharedModule.cs</code>配置默认语言</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreDomainSharedModule</span> : <span class="title">AbpModule</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">ServiceConfigurationContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Configure&lt;AbpLocalizationOptions&gt;(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.Resources</span><br><span class="line">                .Add&lt;BookStoreResource&gt;(<span class="string">&quot;zh-Hans&quot;</span>)</span><br><span class="line">                .AddBaseTypes(<span class="keyword">typeof</span>(AbpValidationResource))</span><br><span class="line">                .AddVirtualJson(<span class="string">&quot;/Localization/BookStore&quot;</span>);</span><br><span class="line"></span><br><span class="line">            options.DefaultResourceType = <span class="keyword">typeof</span>(BookStoreResource);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本地化多语言的关键字Key可以是任意的，但是对于的特定的文本类型，ABP有如下约定：</p><ul><li>为按钮项添加<code>Menu:</code>前缀</li><li>使用 <code>Enum:&lt;enum-type&gt;:&lt;enum-name&gt;</code> 或 <code>&lt;enum-type&gt;.&lt;enum-name&gt;</code> 或 <code>&lt;enum-name&gt;</code> 命名约定来本地化枚举成员，ABP会自动将枚举本地化</li></ul><p>如果没有在本地化多语言文件中定义文本，将直接显示本地化键Key</p><h2 id="安装NPM包"><a href="#安装NPM包" class="headerlink" title="安装NPM包"></a>安装NPM包</h2><p>在 <code>angular</code> 目录下打开命令行窗口,选择 <code>yarn</code> 命令安装NPM包:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>使用以下命令启动前端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜ yarn start</span><br><span class="line">yarn run v1.22.19</span><br><span class="line">$ ng serve --open</span><br><span class="line">✔ Browser application bundle generation complete.</span><br><span class="line"></span><br><span class="line">Initial Chunk Files </span><br></pre></td></tr></table></figure><h2 id="创建图书页面"><a href="#创建图书页面" class="headerlink" title="创建图书页面"></a>创建图书页面</h2><p>开发ABP Angular前端应用程序时，需要使用一些工具:</p><ul><li><a href="https://ng-bootstrap.github.io/#/home">Ng Bootstrap</a> 用做UI组件库</li><li><a href="https://swimlane.gitbook.io/ngx-datatable/">ngx-datatable</a> 用做 datatable 类库</li></ul><p>运行以下命令在angular应用程序根目录创建一个名为 <code>BookModule</code> 的新模块:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn ng generate module book --module app --routing --route books</span><br></pre></td></tr></table></figure><p>命令输出：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜ yarn ng generate module book --module app --routing --route books</span><br><span class="line">&gt; </span><br><span class="line">yarn run v1.22.19</span><br><span class="line"><span class="built_in">$</span> ng generate module book --module app --routing --route books</span><br><span class="line">CREATE src/app/book/book-routing.module.ts (346 bytes)</span><br><span class="line">CREATE src/app/book/book.module.ts (358 bytes)</span><br><span class="line">CREATE src/app/book/book.component.html (20 bytes)</span><br><span class="line">CREATE src/app/book/book.component.spec.ts (610 bytes)</span><br><span class="line">CREATE src/app/book/book.component.ts (202 bytes)</span><br><span class="line">CREATE src/app/book/book.component.scss (0 bytes)</span><br><span class="line">UPDATE src/app/app-routing.module.ts (1017 bytes)</span><br><span class="line">Done in 1.07s.</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/202406231846285.png" alt="image-20240623184420790"></p><h3 id="BookModule"><a href="#BookModule" class="headerlink" title="BookModule"></a>BookModule</h3><p>打开 <code>/src/app/book/book.module.ts</code> 并做如下调整：</p><ul><li>添加了 <code>SharedModule</code>，<code>SharedModule</code> 导出了一些创建用户界面所需的通用模块</li><li><code>SharedModule</code> 已经导出了 <code>CommonModule</code>，所以删除了 <code>CommonModule</code></li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line"><span class="deletion">-- import &#123; CommonModule &#125; from &#x27;@angular/common&#x27;;</span></span><br><span class="line"><span class="addition">++ import &#123; SharedModule &#125; from &#x27;../shared/shared.module&#x27;;</span></span><br><span class="line"></span><br><span class="line">import &#123; BookRoutingModule &#125; from &#x27;./book-routing.module&#x27;;</span><br><span class="line">import &#123; BookComponent &#125; from &#x27;./book.component&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    BookComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line"><span class="deletion">--  CommonModule,</span></span><br><span class="line"><span class="addition">++ SharedModule</span></span><br><span class="line">    BookRoutingModule</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class BookModule &#123; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>生成的代码将新的路由定义放在 <code>src/app/app-routing.module.ts</code> 文件中，如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const routes: Routes = [</span><br><span class="line">  // other route definitions...</span><br><span class="line">  &#123; path: &#x27;books&#x27;, loadChildren: () =&gt; import(&#x27;./book/book.module&#x27;).then(m =&gt; m.BookModule) &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>打开 <code>src/app/route.provider.ts</code> 替换 <code>configureRoutes</code> 函数为以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function configureRoutes(routes: RoutesService) &#123;</span><br><span class="line">  return () =&gt; &#123;</span><br><span class="line">    routes.add([</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;/&#x27;,</span><br><span class="line">        name: &#x27;::Menu:Home&#x27;,</span><br><span class="line">        iconClass: &#x27;fas fa-home&#x27;,</span><br><span class="line">        order: 1,</span><br><span class="line">        layout: eLayoutType.application,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;/book-store&#x27;,</span><br><span class="line">        name: &#x27;::Menu:BookStore&#x27;,</span><br><span class="line">        iconClass: &#x27;fas fa-book&#x27;,</span><br><span class="line">        order: 2,</span><br><span class="line">        layout: eLayoutType.application,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: &#x27;/books&#x27;,</span><br><span class="line">        name: &#x27;::Menu:Books&#x27;,</span><br><span class="line">        parentName: &#x27;::Menu:BookStore&#x27;,</span><br><span class="line">        layout: eLayoutType.application,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RoutesService</code> 是ABP框架提供的用于配置主菜单和路由的服务</p><ul><li><code>path</code>： 路由的URL</li><li><code>name</code> ：菜单项的名称</li><li><code>iconClass</code>： 菜单项的图标</li><li><code>order</code> ：菜单项的排序</li><li><code>layout</code> ：路由的布局(有三个预定义的布局类型: <code>eLayoutType.application</code>，<code>eLayoutType.account</code> 或 <code>eLayoutType.empty</code>)</li></ul><h3 id="生成服务代理"><a href="#生成服务代理" class="headerlink" title="生成服务代理"></a>生成服务代理</h3><p><a href="https://docs.abp.io/zh-Hans/abp/latest/CLI">ABP CLI</a> 提供 <code>generate-proxy</code> 命令为HTTP APIs生成客户端代理类，生成代理后，在客户端使用HTTP APIs会更方便</p><p> 运行 <code>generate-proxy</code> 命令前,，请先运行<code>HostApi</code></p><blockquote><p><strong>警告</strong>: 使用IIS Express时有一个问题；它不允许从另一个进程连接应用程序，如果使用Visual Studio,，在运行按钮的下拉框中选择<code>Acme.BookStore.HttpApi.Host</code>，不要选择IIS Express，如下图：</p></blockquote><p><img data-src="https://cdn.jonty.top/img/202406231854967.png" alt="image-20240623185429925"></p><p>启动<code>Host</code>后，在<code>angular</code>目录运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abp generate-proxy -t ng</span><br></pre></td></tr></table></figure><p>命令输出如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜ abp generate-proxy -t ng</span><br><span class="line">ABP CLI 8.1.4</span><br><span class="line">CREATE src/app/proxy/generate-proxy.json (311016 bytes)</span><br><span class="line">CREATE src/app/proxy/README.md (1000 bytes)</span><br><span class="line">CREATE src/app/proxy/books/book.service.ts (1715 bytes)</span><br><span class="line">CREATE src/app/proxy/books/models.ts (375 bytes)</span><br><span class="line">CREATE src/app/proxy/books/book-type.enum.ts (299 bytes)</span><br><span class="line">CREATE src/app/proxy/books/index.ts (92 bytes)</span><br><span class="line">CREATE src/app/proxy/index.ts (52 bytes)</span><br></pre></td></tr></table></figure><p>可以看到，该命令在<code>/src/app/proxy/books</code>文件夹下生成以下文件：</p><p><img data-src="https://cdn.jonty.top/img/202406231856965.png" alt="image-20240623185641930"></p><h3 id="BookComponent"><a href="#BookComponent" class="headerlink" title="BookComponent"></a>BookComponent</h3><p>编辑 <code>/src/app/book/book.component.ts</code> </p><ul><li>引入并注入了生成的 <code>BookService</code>.</li><li>使用 <a href="https://docs.abp.io/zh-Hans/abp/latest/UI/Angular/List-Service">ListService</a>，它是一个工具服务，提供了易用的分页，排序和搜索</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ListService, PagedResultDto &#125; from &#x27;@abp/ng.core&#x27;;</span><br><span class="line">import &#123; Component, OnInit &#125; from &#x27;@angular/core&#x27;;</span><br><span class="line">import &#123; BookService, BookDto &#125; from &#x27;@proxy/books&#x27;;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: &#x27;app-book&#x27;,</span><br><span class="line">  templateUrl: &#x27;./book.component.html&#x27;,</span><br><span class="line">  styleUrls: [&#x27;./book.component.scss&#x27;],</span><br><span class="line">  providers: [ListService],</span><br><span class="line">&#125;)</span><br><span class="line">export class BookComponent implements OnInit &#123;</span><br><span class="line">  book = &#123; items: [], totalCount: 0 &#125; as PagedResultDto&lt;BookDto&gt;;</span><br><span class="line"></span><br><span class="line">  constructor(public readonly list: ListService, private bookService: BookService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    const bookStreamCreator = (query) =&gt; this.bookService.getList(query);</span><br><span class="line"></span><br><span class="line">    this.list.hookToQuery(bookStreamCreator).subscribe((response) =&gt; &#123;</span><br><span class="line">      this.book = response;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑 <code>/src/app/book/book.component.html</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col col-md-6&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; &#x27;::Menu:Books&#x27; | abpLocalization &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-end col col-md-6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ngx-datatable</span> [<span class="attr">rows</span>]=<span class="string">&quot;book.items&quot;</span> [<span class="attr">count</span>]=<span class="string">&quot;book.totalCount&quot;</span> [<span class="attr">list</span>]=<span class="string">&quot;list&quot;</span> <span class="attr">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ngx-datatable-column</span> [<span class="attr">name</span>]=<span class="string">&quot;&#x27;::Name&#x27; | abpLocalization&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ngx-datatable-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ngx-datatable-column</span> [<span class="attr">name</span>]=<span class="string">&quot;&#x27;::Type&#x27; | abpLocalization&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">let-row</span>=<span class="string">&quot;row&quot;</span> <span class="attr">ngx-datatable-cell-template</span>&gt;</span></span><br><span class="line">          &#123;&#123; &#x27;::Enum:BookType:&#x27; + row.type | abpLocalization &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ngx-datatable-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ngx-datatable-column</span> [<span class="attr">name</span>]=<span class="string">&quot;&#x27;::PublishDate&#x27; | abpLocalization&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;publishDate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">let-row</span>=<span class="string">&quot;row&quot;</span> <span class="attr">ngx-datatable-cell-template</span>&gt;</span></span><br><span class="line">          &#123;&#123; row.publishDate | date &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ngx-datatable-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ngx-datatable-column</span> [<span class="attr">name</span>]=<span class="string">&quot;&#x27;::Price&#x27; | abpLocalization&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ng-template</span> <span class="attr">let-row</span>=<span class="string">&quot;row&quot;</span> <span class="attr">ngx-datatable-cell-template</span>&gt;</span></span><br><span class="line">          &#123;&#123; row.price | currency &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ngx-datatable-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ngx-datatable</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看页面</p><p><img data-src="https://cdn.jonty.top/img/202406231919086.png" alt="image-20240623191950019"></p><p>到这里我们就完成了前端启动和开发</p><h2 id="下一节"><a href="#下一节" class="headerlink" title="下一节"></a>下一节</h2><p>教程<a href="/2024/06/24/abp-vNext-tutorials-part-3/" title="下一节">下一节</a></p>]]></content>
    
    
    <summary type="html">基于Abp vNext开发Web应用程序系列 - 创建页面</summary>
    
    
    
    <category term="Abp vNext" scheme="https://jonty.top/categories/Abp-vNext/"/>
    
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>Abp vNext - 应用开发系列之服务端</title>
    <link href="https://jonty.top/2024/06/19/abp-vNext-tutorials-part-1/"/>
    <id>https://jonty.top/2024/06/19/abp-vNext-tutorials-part-1/</id>
    <published>2024-06-19T14:23:23.000Z</published>
    <updated>2024-06-25T14:46:59.911Z</updated>
    
    <content type="html"><![CDATA[<p>在系列教程中，我们会构建一个基于ABP的Web应用程序，用于管理书籍及其作者列表</p><p>使用到的技术：</p><ul><li>Entity Framework Core</li><li>Angular</li></ul><p>本教程分为以下部分：</p><ul><li>Part1：创建服务端（本节）</li><li><a href="/2024/06/23/abp-vNext-tutorials-part-2/" title="Part 2: 图书列表页面">Part 2: 图书列表页面</a></li><li><a href="/2024/06/24/abp-vNext-tutorials-part-3/" title="Part 3: 创建,更新和删除图书">Part 3: 创建,更新和删除图书</a></li><li><a href="/2024/06/24/abp-vNext-tutorials-part-4/" title="Part 4: 集成测试">Part 4: 集成测试</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-5 Part 5: 授权</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-6 Part 6: 作者: 领域层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-7 Part 7: 作者: 数据库集成</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-8 Part 8: 作者: 应用服务层</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-9 Part 9: 作者: 用户界面</a></li><li><a href="#">Post not found: abp-vNext-tutorials-part-10 Part 10: 图书到作者的关系</a></li></ul><h2 id="创建解决方案"><a href="#创建解决方案" class="headerlink" title="创建解决方案"></a>创建解决方案</h2><p>在开始开发之前，请先按照<a href="/2024/06/19/getting-start-abp/" title="让项目跑起来">让项目跑起来</a>创建项目</p><h2 id="创建Book实体"><a href="#创建Book实体" class="headerlink" title="创建Book实体"></a>创建Book实体</h2><p>项目中的<strong>领域层</strong>分为两个项目：</p><ul><li><code>Acme.BookStore.Domain</code>：实体、领域服务</li><li><code>Acme.BookStore.Domain.Shared</code>：共享的常量、枚举</li></ul><blockquote><p>这里相较于原有<code>ASP.NET Boilerplate</code>多了<code>.Domian.Shared</code>项目，相当于向上抽取一层，实际上是领域服务的一部分，其他项目都会使用到，该项目不依赖解决方案中的其他项目，其他项目直接或间接依赖该项目。</p><p>例如 <code>BookType</code> 枚举和 <code>BookConsts</code> 类 (可能是 <code>Book</code> 实体用到的常数字段,像<code>MaxNameLength</code>)都适合放在这个项目中。</p></blockquote><p>在领域层中定义实体，在<code>.Domain</code>项目中创建一个Books文件夹，添加一个<code>Book</code>的类</p><p><img data-src="https://cdn.jonty.top/img/202406231242055.png" alt="Book"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations.Schema;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Domain.Entities.Auditing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Book</span>: <span class="title">AuditedAggregateRoot</span>&lt;<span class="title">Guid</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BookType Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime PublishDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ABP为实体提供了两个基类：AggregateRoot和Entity</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> AggregateRoot.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AggregateRoot</span>&lt;<span class="title">TKey</span>&gt; : <span class="title">BasicAggregateRoot</span>&lt;<span class="title">TKey</span>&gt;,</span><br><span class="line">    <span class="title">IHasExtraProperties</span>,</span><br><span class="line">    <span class="title">IHasConcurrencyStamp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> ExtraPropertyDictionary ExtraProperties &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DisableAuditing</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> ConcurrencyStamp &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AggregateRoot</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConcurrencyStamp = Guid.NewGuid().ToString(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">        ExtraProperties = <span class="keyword">new</span> ExtraPropertyDictionary();</span><br><span class="line">        <span class="keyword">this</span>.SetDefaultsForExtraProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AggregateRoot</span>(<span class="params">TKey id</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ConcurrencyStamp = Guid.NewGuid().ToString(<span class="string">&quot;N&quot;</span>);</span><br><span class="line">        ExtraProperties = <span class="keyword">new</span> ExtraPropertyDictionary();</span><br><span class="line">        <span class="keyword">this</span>.SetDefaultsForExtraProperties();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Entity.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Entity</span>&lt;<span class="title">TKey</span>&gt; : <span class="title">Entity</span>, <span class="title">IEntity</span>&lt;<span class="title">TKey</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;inheritdoc/&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> TKey Id &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125; = <span class="literal">default</span>!;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Entity</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Entity</span>(<span class="params">TKey id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Aggregate Root</strong>是领域驱动设计的一个概念，可视为可直接查询和处理的根实体，<code>AggregateRoot</code> 类实现了 <code>IHasExtraProperties</code> 和 <code>IHasConcurrencyStamp</code> 接口,这为派生类带来了两个属性 <code>IHasExtraProperties</code>和 <code>IHasConcurrencyStamp</code> </p><ul><li><code>IHasExtraProperties</code>： 使实体可扩展 </li><li><code>IHasConcurrencyStamp</code>：添加了由ABP框架管理的 <code>ConcurrencyStamp</code> 属性实现<a href="https://docs.microsoft.com/zh-cn/ef/core/saving/concurrency">乐观并发</a></li></ul><blockquote><p><code>ConcurrencyStamp</code>通过比较前后不同的Token值校验一致性</p><p>如果不需要这些功能，聚合根可以继承 <code>BasicAggregateRoot&lt;TKey&gt;</code>(或<code>BasicAggregateRoot</code>)</p></blockquote><p>Book实体继承<code>AuditedAggregateRoot</code>类在<code>AggregateRoot</code>的基础上新增了基础审计信息，如CreationTime、CreatorId、LastModificationTime等，框架自动处理这些审计信息，<code>AuditedAggregateRoot&lt;Guid&gt;</code>是泛型的，<code>&lt;Guid&gt;</code>定义了实体的主键类型</p><h3 id="BookType枚举"><a href="#BookType枚举" class="headerlink" title="BookType枚举"></a>BookType枚举</h3><p>Book实体引用了<code>BookType</code>枚举类，在<code>.Domain.Shared</code>项目中创建<code>Books</code>文件夹，并创建<code>BookType</code>枚举类</p><p><img data-src="https://cdn.jonty.top/img/202406231312953.png" alt="BookType"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 书籍类型</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BookType</span><br><span class="line">&#123;</span><br><span class="line">    Undefined,</span><br><span class="line">    Adventure,</span><br><span class="line">    Biography,</span><br><span class="line">    Dystopia,</span><br><span class="line">    Fantastic,</span><br><span class="line">    Horror,</span><br><span class="line">    Science,</span><br><span class="line">    ScienceFiction,</span><br><span class="line">    Poetry</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终文件目录如下：</p><p><img data-src="https://cdn.jonty.top/img/202406231313028.png" alt="领域层目录"></p><h3 id="实体注册"><a href="#实体注册" class="headerlink" title="实体注册"></a>实体注册</h3><p>EF Core需要将实体注册到<code>DbContext</code>中，在<code>.EntityFrameworkCore</code>项目<code>BookStoreDbContext.cs</code>中注册</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreDbContext</span> :</span><br><span class="line">    <span class="title">AbpDbContext</span>&lt;<span class="title">BookStoreDbContext</span>&gt;,</span><br><span class="line">    <span class="title">IIdentityDbContext</span>,</span><br><span class="line">    <span class="title">ITenantManagementDbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Add DbSet properties for your Aggregate Roots / Entities here. */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DbSet&lt;Book&gt; Books &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其他的类注册都来自于模块中</p></blockquote><h3 id="配置实体映射"><a href="#配置实体映射" class="headerlink" title="配置实体映射"></a>配置实体映射</h3><p>在<code>OnModelCreating</code>方法中配置实体映射代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.EntityFrameworkCore</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreDbContext</span> :</span><br><span class="line">    <span class="title">AbpDbContext</span>&lt;<span class="title">BookStoreDbContext</span>&gt;,</span><br><span class="line">    <span class="title">IIdentityDbContext</span>,</span><br><span class="line">    <span class="title">ITenantManagementDbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder builder</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.OnModelCreating(builder);</span><br><span class="line">        <span class="comment">//builder.Entity&lt;YourEntity&gt;(b =&gt;</span></span><br><span class="line">        <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//    b.ToTable(BookStoreConsts.DbTablePrefix + &quot;YourEntities&quot;, BookStoreConsts.DbSchema);</span></span><br><span class="line">        <span class="comment">//    b.ConfigureByConvention(); //auto configure for the base class props</span></span><br><span class="line">        <span class="comment">//    //...</span></span><br><span class="line">        <span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">        builder.Entity&lt;Book&gt;(b =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            b.ToTable(BookStoreConsts.DbTablePrefix + <span class="string">&quot;Books&quot;</span>, BookStoreConsts.DbSchema);</span><br><span class="line">            b.ConfigureByConvention(); <span class="comment">//auto configure for the base class props</span></span><br><span class="line">            b.Property(x =&gt; x.Name).IsRequired().HasMaxLength(<span class="number">128</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>BookStoreConsts</code>：定义系统常量值，这里定义<code>DbTablePrefix</code>用于配置映射到数据库表的前缀，不强制使用，建议在统一的地方控制，保持一致性且易于后期维护</li><li><code>ConfigureByConvention</code>：自动配置映射关系，通过依赖约定配置，减少了手动配置的繁琐工作</li></ul><blockquote><p>为什么不直接配置实体字段属性？</p><p>ABP框架使用Fluent API配置映射关系是为了实现更好的解耦、灵活性和可维护性。通过集中管理映射配置，避免代码污染，并支持复杂映射关系，Fluent API为开发者提供了强大的工具来处理实体与数据库之间的映射。</p></blockquote><h3 id="添加数据迁移"><a href="#添加数据迁移" class="headerlink" title="添加数据迁移"></a>添加数据迁移</h3><p>新增实体或修改数据库映射配置后，需要创建一个新的迁移并更新到数据库，以保证实体与表字段保持一致。</p><p>两种方式新增数据库迁移：</p><p>1、终端命令行，右键<code>.EntityFrameworkCore</code>项目，选择在终端中打开</p><p><img data-src="https://cdn.jonty.top/img/202406231332144.png" alt="右键打开终端"></p><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef migrations add Created_Book_Entity</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Acme.BookStore.EntityFrameworkCore&gt; dotnet ef migrations add Created_Book_Entity</span><br><span class="line">Build started...</span><br><span class="line">Build succeeded.</span><br><span class="line">The Entity Framework tools version <span class="string">&#x27;6.0.8&#x27;</span> is older than that of the runtime <span class="string">&#x27;8.0.0&#x27;</span>. Update the tools <span class="keyword">for</span> the latest features and bug fixes. See https://aka.ms/AAc1fbw <span class="keyword">for</span> more information.</span><br><span class="line">Done. To undo this action, use <span class="string">&#x27;ef migrations remove&#x27;</span></span><br></pre></td></tr></table></figure><p>2、使用程序包管理控制台（PMC）</p><p>打开程序包管理控制台，并选择项目为<code>.EntityFrameworkCore</code>项目</p><img data-src="https://cdn.jonty.top/img/202406231333426.png" alt="设置PMC默认项目" style="width:67%;" /><p>输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-Migration Created_Book_Entity</span><br></pre></td></tr></table></figure><blockquote><p>第二种方式需要在启动项目中新增<code>Microsoft.EntityFrameworkCore.Design</code>包</p></blockquote><p><img data-src="https://cdn.jonty.top/img/202406231341540.png" alt="迁移文件"></p><h3 id="种子数据"><a href="#种子数据" class="headerlink" title="种子数据"></a>种子数据</h3><p>在<code>.Domain</code>项目中创建<code>BookStoreDataSeederContributor.cs</code>，继承自<code>IDataSeedContributor</code>，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Acme.BookStore.Books;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Data;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Domain.Repositories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreDataSeederContributor</span></span><br><span class="line">        : <span class="title">IDataSeedContributor</span>, <span class="title">ITransientDependency</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IRepository&lt;Book, Guid&gt; _bookRepository;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BookStoreDataSeederContributor</span>(<span class="params">IRepository&lt;Book, Guid&gt; bookRepository</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _bookRepository = bookRepository;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">SeedAsync</span>(<span class="params">DataSeedContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">await</span> _bookRepository.GetCountAsync() &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> _bookRepository.InsertAsync(</span><br><span class="line">                    <span class="keyword">new</span> Book</span><br><span class="line">                    &#123;</span><br><span class="line">                        Name = <span class="string">&quot;三体&quot;</span>,</span><br><span class="line">                        Type = BookType.Dystopia,</span><br><span class="line">                        PublishDate = <span class="keyword">new</span> DateTime(<span class="number">1949</span>, <span class="number">6</span>, <span class="number">8</span>),</span><br><span class="line">                        Price = <span class="number">19.84f</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    autoSave: <span class="literal">true</span></span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> _bookRepository.InsertAsync(</span><br><span class="line">                    <span class="keyword">new</span> Book</span><br><span class="line">                    &#123;</span><br><span class="line">                        Name = <span class="string">&quot;The Hitchhiker&#x27;s Guide to the Galaxy&quot;</span>,</span><br><span class="line">                        Type = BookType.ScienceFiction,</span><br><span class="line">                        PublishDate = <span class="keyword">new</span> DateTime(<span class="number">1995</span>, <span class="number">9</span>, <span class="number">27</span>),</span><br><span class="line">                        Price = <span class="number">42.0f</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    autoSave: <span class="literal">true</span></span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果数据库表中没有图书数据则创建种子数据，使用IRepository&lt;Book, Guid&gt;</p><p>在运行应用程序之前最好将初始数据添加到数据库中</p></blockquote><h3 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h3><p>通过执行迁移以更新迁移文件到数据库，以保证实体与表字段保持一致。</p><p>同<a href="#%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB">添加数据迁移</a>，更新迁移数据有相同方式</p><p>1、通过命令行执行迁移</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><p>2、通过程序包管理控制台（PMC）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Update-DataBase</span><br></pre></td></tr></table></figure><p>ABP提供了<code>.DbMigrator</code>控制台应用程序用来执行迁移操作和初始化种子数据：</p><p>将<code>.DbMigrator</code>项目设为启动项目并启动</p><p><img data-src="https://cdn.jonty.top/img/202406231356132.png" alt="启动项目设置"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[13:55:54 INF] Started database migrations...</span><br><span class="line">[13:55:54 INF] Migrating schema for host database...</span><br><span class="line">[13:55:57 INF] Executing host database seed...</span><br><span class="line">[13:55:59 INF] Successfully completed host database migrations.</span><br><span class="line">[13:56:03 INF] Successfully completed all database migrations.</span><br><span class="line">[13:56:03 INF] You can safely end this process...</span><br></pre></td></tr></table></figure><p>迁移完成，在数据库中查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> __EFMigrationsHistory</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> AppBooks</span><br></pre></td></tr></table></figure><p>可以看到，迁移记录和种子数据已创建</p><p><img data-src="https://cdn.jonty.top/img/202406231358303.png" alt="数据库查询结果"></p><h2 id="创建应用服务"><a href="#创建应用服务" class="headerlink" title="创建应用服务"></a>创建应用服务</h2><p>应用服务层包含两个项目：</p><ul><li><code>.Application.Contracts</code>：包含DTO和应用服务接口定义</li><li><code>.Application</code>：包含应用服务实现</li></ul><p>在这部分，将创建一个应用服务，使用ABP Framework的<code>CrudAppService</code>基类实现对<code>Book</code>的增删改查操作</p><h3 id="BookDto"><a href="#BookDto" class="headerlink" title="BookDto"></a>BookDto</h3><p><code>CrudAppService</code>基类需要定义实体的基本DTO，在<code>.Application.Contracts</code>项目中创建<code>Books</code>文件夹并添加<code>BookDto.cs</code></p><ul><li>DTO：Data Transfer Object 数据传输对象，用与应用层和表示层的数据传输，确保数据传输的安全性并减少冗余，减少不必要的数据传输以提高性能</li><li>定义BookDto用于传输在用户界面展示的书籍信息</li><li>BookDto继承自<code>AuditedEntityDto&lt;Guid&gt;</code>，同定义实体一样，定义审计信息，减少重复工作</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Dtos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookDto</span> : <span class="title">AuditedEntityDto</span>&lt;<span class="title">Guid</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BookType Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DateTime PublishDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在将书籍返回到表示层时，需要将<code>Book</code>实体转换为<code>BookDto</code>对象，<a href="https://automapper.org/">AutoMapper</a>库可以在定义了正确的映射时自动执行转换，启动模板配置了AutoMapper，在<code>.Application</code>项目的<code>BookStoreApplicationAutoMapperProfile.cs</code>中配置映射关系。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Acme.BookStore.Books;</span><br><span class="line"><span class="keyword">using</span> AutoMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreApplicationAutoMapperProfile</span> : <span class="title">Profile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookStoreApplicationAutoMapperProfile</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* You can configure your AutoMapper mapping configuration here.</span></span><br><span class="line"><span class="comment">         * Alternatively, you can split your mapping configurations</span></span><br><span class="line"><span class="comment">         * into multiple profile classes for a better organization. */</span></span><br><span class="line">        CreateMap&lt;Book, BookDto&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CreateUpdateBookDto"><a href="#CreateUpdateBookDto" class="headerlink" title="CreateUpdateBookDto"></a>CreateUpdateBookDto</h3><p>新增<code>CreateUpdateBookDto.cs</code>，用于在创建或更新书籍的时候从用户界面传输图书信息。</p><p>这里定义了数据注释特性(如<code>[Required]</code>)来定义属性的验证规则，DTO由ABP框架自动验证。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.ComponentModel.DataAnnotations;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateUpdateBookDto</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">StringLength(128)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    <span class="keyword">public</span> BookType Type &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = BookType.Undefined;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    [<span class="meta">DataType(DataType.Date)</span>]</span><br><span class="line">    <span class="keyword">public</span> DateTime PublishDate &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = DateTime.Now;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Required</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Price &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置实体映射关系：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreApplicationAutoMapperProfile</span> : <span class="title">Profile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookStoreApplicationAutoMapperProfile</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CreateMap&lt;Book, BookDto&gt;();</span><br><span class="line">        CreateMap&lt;CreateUpdateBookDto, Book&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IBookAppService"><a href="#IBookAppService" class="headerlink" title="IBookAppService"></a>IBookAppService</h3><p>定义应用服务接口，在<code>.Application.Contracts</code>项目中创建<code>Books</code>文件夹，并添加<code>IBookAppService</code>接口</p><ul><li>定义应用服务接口不是必须的，但建议作为<strong>最佳实践</strong></li><li><code>ICrudAppService</code>定义了常见的<strong>CRUD</strong>方法:<code>GetAsync</code>，<code>GetListAsync</code>，<code>CreateAsync</code>，<code>UpdateAsync</code>和<code>DeleteAsync</code>，也可以从空的<code>IApplicationService</code>接口继承并手动定义自己的方法。</li><li><code>ICrudAppService</code>中使用不同的DTO进行创建和更新</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Dtos;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBookAppService</span> :</span><br><span class="line">        <span class="title">ICrudAppService</span>&lt; //<span class="title">Defines</span> <span class="title">CRUD</span> <span class="title">methods</span></span><br><span class="line">        <span class="title">BookDto</span>, //<span class="title">Used</span> <span class="title">to</span> <span class="title">show</span> <span class="title">books</span></span><br><span class="line">        <span class="title">Guid</span>, //<span class="title">Primary</span> <span class="title">key</span> <span class="title">of</span> <span class="title">the</span> <span class="title">book</span> <span class="title">entity</span></span><br><span class="line">        <span class="title">PagedAndSortedResultRequestDto</span>, //<span class="title">Used</span> <span class="title">for</span> <span class="title">paging</span>/<span class="title">sorting</span></span><br><span class="line">        <span class="title">CreateUpdateBookDto</span>&gt; <span class="comment">//Used to create/update a book</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BookAppService"><a href="#BookAppService" class="headerlink" title="BookAppService"></a>BookAppService</h3><p>实现<code>IBookAppService</code>接口，在<code>.Application</code>项目中创建<code>Books</code>文件夹，并添加<code>BookAppService</code>类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Dtos;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Application.Services;</span><br><span class="line"><span class="keyword">using</span> Volo.Abp.Domain.Repositories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Acme.BookStore.Books</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookAppService</span> :</span><br><span class="line">    <span class="title">CrudAppService</span>&lt;</span><br><span class="line">        <span class="title">Book</span>, //<span class="title">The</span> <span class="title">Book</span> <span class="title">entity</span></span><br><span class="line">        <span class="title">BookDto</span>, //<span class="title">Used</span> <span class="title">to</span> <span class="title">show</span> <span class="title">books</span></span><br><span class="line">        <span class="title">Guid</span>, //<span class="title">Primary</span> <span class="title">key</span> <span class="title">of</span> <span class="title">the</span> <span class="title">book</span> <span class="title">entity</span></span><br><span class="line">        <span class="title">PagedAndSortedResultRequestDto</span>, //<span class="title">Used</span> <span class="title">for</span> <span class="title">paging</span>/<span class="title">sorting</span></span><br><span class="line">        <span class="title">CreateUpdateBookDto</span>&gt;, <span class="comment">//Used to create/update a book</span></span><br><span class="line">    <span class="title">IBookAppService</span> <span class="comment">//implement the IBookAppService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookAppService</span>(<span class="params">IRepository&lt;Book, Guid&gt; repository</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">repository</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>BookAppService</code>继承了<code>CrudAppService&lt;...&gt;</code>，并实现了 <code>ICrudAppService</code> 定义的CRUD方法.</li><li><code>BookAppService</code>注入<code>IRepository &lt;Book,Guid&gt;</code>，这是<code>Book</code>实体的默认仓储. ABP自动为每个聚合根(或实体)创建默认仓储</li><li><code>BookAppService</code>使用<code>IObjectMapper</code>将<code>Book</code>对象转换为<code>BookDto</code>对象，将<code>CreateUpdateBookDto</code>对象转换为<code>Book</code>对象</li></ul><p>目录如图：</p><p><img data-src="https://cdn.jonty.top/img/202406231440056.png" alt="应用层"></p><h3 id="自动生成API-Controllers"><a href="#自动生成API-Controllers" class="headerlink" title="自动生成API Controllers"></a>自动生成API Controllers</h3><p>在普通的ASP.NET Core应用程序中，通过创建<strong>API Controller</strong>将应用程序服务公开为<strong>HTTP API</strong>端点。提供给浏览器或第三方客户端通过HTTP调用。</p><p>ABP可以自动按照约定将应用程序服务配置为MVC API控制器，配置如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">DependsOn(BookStoreApplicationModule)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookStoreWebModule</span> : <span class="title">AbpModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">PreConfigureServices</span>(<span class="params">ServiceConfigurationContext context</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        PreConfigure&lt;AbpAspNetCoreMvcOptions&gt;(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options</span><br><span class="line">                .ConventionalControllers</span><br><span class="line">                .Create(<span class="keyword">typeof</span>(BookStoreApplicationModule).Assembly);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Swagger-UI"><a href="#Swagger-UI" class="headerlink" title="Swagger UI"></a>Swagger UI</h3><p>启动模板使用<a href="https://github.com/domaindrivendev/Swashbuckle.AspNetCore">Swashbuckle.AspNetCore</a>运行<a href="https://swagger.io/tools/swagger-ui/">swagger UI</a>。</p><p>将<code>.HttpApi.Host</code>设为启动项目，并使用<code>Crtl+f5</code>运行，启动后打开浏览器访问<code>https://localhost:&lt;port&gt;/swagger/</code></p><img data-src="https://cdn.jonty.top/img/202406231439409.png" alt="swagger" style="width:67%;" /><p>使用<code>SwaggerUI</code>测试接口</p><img data-src="https://cdn.jonty.top/img/202406231442249.png" alt="image-20240623144230196" style="width:67%;" /><p>点击执行，返回数据如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;totalCount&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;items&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;盗墓笔记&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;publishDate&quot;</span>: <span class="string">&quot;2005-09-27T00:00:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="number">42</span>,</span><br><span class="line">      <span class="attr">&quot;lastModificationTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;lastModifierId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;creationTime&quot;</span>: <span class="string">&quot;2024-06-23T13:55:59.2354244&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;creatorId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;afddb57d-1d66-d271-3bdb-3a1355d73e82&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;1984&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">&quot;publishDate&quot;</span>: <span class="string">&quot;2000-06-08T00:00:00&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="number">19.84</span>,</span><br><span class="line">      <span class="attr">&quot;lastModificationTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;lastModifierId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;creationTime&quot;</span>: <span class="string">&quot;2024-06-23T13:55:58.9727875&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;creatorId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;d589b899-4033-3f76-9eea-3a1355d73d55&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里我们就完成了基于ABP的后端服务接口学习</p><h2 id="下一节"><a href="#下一节" class="headerlink" title="下一节"></a>下一节</h2><p>教程<a href="/2024/06/23/abp-vNext-tutorials-part-2/" title="下一节">下一节</a></p>]]></content>
    
    
    <summary type="html">基于Abp vNext开发Web应用程序系列 - 创建服务端</summary>
    
    
    
    <category term="Abp vNext" scheme="https://jonty.top/categories/Abp-vNext/"/>
    
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>Abp vNext - 让项目跑起来</title>
    <link href="https://jonty.top/2024/06/19/getting-start-abp/"/>
    <id>https://jonty.top/2024/06/19/getting-start-abp/</id>
    <published>2024-06-19T08:24:59.000Z</published>
    <updated>2024-06-19T08:41:54.020Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>Abp vNext是Abp的.NET Core 版本，但它不仅仅只是代码重写了。Abp团队在过去多年社区和商业版本的反馈上做了很多的改进。包括性能、底层的框架设计，它融合了更多优雅的设计实践。不管是自己需要快速上手项目、或者是公司的研发团队没有足够的能力去完整地开发一套稳定且功能全面的快速开发框架；对于.NET 系的开发者和公司来说，Abp目前就是目前最好的选择。</p></div><h2 id="设置开发环境"><a href="#设置开发环境" class="headerlink" title="设置开发环境"></a>设置开发环境</h2><p>安装以下工具：</p><ul><li><a href="https://dotnet.microsoft.com/zh-cn/download/dotnet/8.0">.NET SDK 8.0+</a></li><li>Node v16 / v18</li><li>IDE：VS或者VS Code</li></ul><h2 id="安装ABP-CLI"><a href="#安装ABP-CLI" class="headerlink" title="安装ABP CLI"></a>安装ABP CLI</h2><p><a href="https://docs.abp.io/zh-Hans/abp/latest/CLI">ABP CLI</a> (命令行接口) 是一个命令行工具，用来执行基于ABP解决方案的一些常见操作。</p><p>使用以下命令安装 ABP CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install -g Volo.Abp.Cli</span><br></pre></td></tr></table></figure><p>如果已安装, 则可以使用以下命令对其进行更新：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool update -g Volo.Abp.Cli</span><br></pre></td></tr></table></figure><h2 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h2><p>使用 ABP CLI 创建一个新的 ABP 项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abp new Acme.BookStore -u angular</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/202406181037509.png" alt="image-20240618103736323" style="zoom:50%;" /><p>创建项目完成后，生成目录如下：</p><p><img data-src="https://cdn.jonty.top/img/202406191448791.png" alt="image-20240619144825909"></p><h2 id="生成数据库"><a href="#生成数据库" class="headerlink" title="生成数据库"></a>生成数据库</h2><h3 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h3><p>在<code>.HttpApi.Host</code>和<code>.DbMigrator</code>项目中修改<code>appsetting.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;ConnectionStrings&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;Default&quot;</span>: <span class="string">&quot;Server=(LocalDb)\\MSSQLLocalDB;Database=BookStore;Trusted_Connection=True&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h3><p>EF Core 提供两种主要方法来保持 EF Core 模型和数据库架构同步</p><p>如果没有数据库：<br>1、先写代码，自动创建数据库。<br>2、如果代码有变化，自动删除数据库重建，或者是使用迁移功能更改已有数据库。<br>如果已有数据库：<br>1、使用EF PowerTools反向工程生成模型。</p><blockquote><p>至于选用哪种方式，区分是以 EF Core 模型为准还是以数据库为准。</p><p>如果以 EF Core 模型为准，则使用<a href="https://learn.microsoft.com/zh-cn/ef/core/managing-schemas/migrations/">迁移</a>。 对 EF Core 模型进行更改时，此方法会以增量方式将相应架构更改应用到数据库，以使数据库保持与 EF Core 模型兼容。</p><p>如果希望以数据库架构为准，则使用<a href="https://learn.microsoft.com/zh-cn/ef/core/managing-schemas/scaffolding/">反向工程</a>。 使用此方法，可通过将数据库架构反向工程到 EF Core 模型来生成相应的 DbContext 和实体类型。</p></blockquote><p>在ABP中使用的是<code>Code First</code>同步数据库，也就是通过代码迁移；ABP提供迁移程序执行迁移：</p><p>将<code>.DbMigrator</code>项目设置启动项目，确认数据库连接字符串</p><p><img data-src="https://cdn.jonty.top/img/202406191452253.png" alt="image-20240619145238797"></p><p>启动，输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[14:53:41 INF] Started database migrations...</span><br><span class="line">[14:53:41 INF] Migrating schema for host database...</span><br><span class="line">[14:53:44 INF] Executing host database seed...</span><br><span class="line">[14:53:45 INF] Successfully completed host database migrations.</span><br><span class="line">[14:53:49 INF] Successfully completed all database migrations.</span><br><span class="line">[14:53:49 INF] You can safely end this process...</span><br></pre></td></tr></table></figure><p>或者使用<strong>程序包管理控制台</strong>执行命令迁移：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Update-Database</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/202406191506527.png" alt="image-20240619150615715" style="zoom: 67%;" /><blockquote><p>初始的<a href="https://docs.abp.io/zh-Hans/abp/latest/Data-Seeding">种子数据</a>在数据库中创建了 <code>admin</code> 用户(密码为<code>1q2w3E*</code>) 用于登录应用程序。所以，对于新数据库至少使用 <code>.DbMigrator</code> 执行一次迁移</p></blockquote><h2 id="运行应用"><a href="#运行应用" class="headerlink" title="运行应用"></a>运行应用</h2><h3 id="运行Host-API"><a href="#运行Host-API" class="headerlink" title="运行Host API"></a>运行Host API</h3><p>将<code>.HttpApi.Host</code>项目设为启动项目，执行<code>ctrl+f5</code>，打开<code>swagger</code>如下：</p><img data-src="https://cdn.jonty.top/img/202406191514987.png" alt="image-20240619151443725" style="width:500px" /><h3 id="运行客户端"><a href="#运行客户端" class="headerlink" title="运行客户端"></a>运行客户端</h3><p>打开<code>angular</code>，还原依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>模块安装完成后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><img data-src="https://cdn.jonty.top/img/202406191558444.png" alt="image-20240619155821450" style="width:67%;" />]]></content>
    
    
    <summary type="html">Abp vNext是Abp的.NET Core 版本，但它不仅仅只是代码重写了~</summary>
    
    
    
    <category term="Abp vNext" scheme="https://jonty.top/categories/Abp-vNext/"/>
    
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>【分享】5w的月薪很高吗</title>
    <link href="https://jonty.top/2024/03/17/prevent-brainwashing/"/>
    <id>https://jonty.top/2024/03/17/prevent-brainwashing/</id>
    <published>2024-03-17T13:59:02.000Z</published>
    <updated>2024-06-19T14:13:16.186Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/202406192203088.jpeg" alt="img"></p><p>在互联网里经常能看到一些“混得比较好的”同学发言，类似于“5w的月薪很高吗？”，“我身边年薪六七十w的人不少”之类的话，加上偶尔看到一些“年薪百万很简单”的标题党文章或者视频，其实对于我来说，我根本懒得去考证这些是真是假！</p><p>但是我觉得有必要去聊一聊！</p><h2 id="知识的贫乏"><a href="#知识的贫乏" class="headerlink" title="知识的贫乏"></a>知识的贫乏</h2><p>首先在说这个问题之前，我想引用罗翔老师的一句话。</p><blockquote><p>一个知识越贫乏的人，就越有莫名的优越感！</p></blockquote><p>一年多以前，我回老家，和以前的高中女同学出来聊天，彼此聊了聊自己现在的工作，然后她问我，“你现在一个月能赚三四万吧！”，我当时惊呆了，我回她：“瞧你说的，捡黄树叶也要赶上秋天呢”，我反问她你现在多少呢，她说两千八，我继续问，“你觉得工资多少才算高？”，她说最起码5万以上吧！我苦笑答：“我的妈呀，怎么都这么厉害呀！”。</p><p>事实是怎样的呢？</p><p>我们先不把事情说得太远，“脉脉上人均年薪百万”，“抖音上人手一台劳斯莱斯”这些不在叙述范围内，感情咱也不会那么不要脸去吹！</p><h2 id="大众才是真相"><a href="#大众才是真相" class="headerlink" title="大众才是真相"></a>大众才是真相</h2><p>像我们这种普通二本学校的学生现状应该最能接近真相了，往上不谈双一流，往下不谈专科，据我所知，我校2021年毕业的学生，如果继续做软件工程的话，现在一个月能拿两万以上的人没几个，还得是一线城市，在一线城市的大多都是一万多，所以一万多就是一个中位数。</p><p>不过要注意，软件工程专业毕业后从事本专业的人是很少的，就拿我们班来说，班上50人，但是从事软件的不超过20个，20个还是比较理想的。</p><p>那么就有一部分从事其它职业，一部分待业，一部分考公考编。</p><p>软件行业在整个市场来说工资高一点，就业相对来说简单一点，虽然近几年来行情越来越差，但是相比于其他行业来说，还是稍微好一点！</p><p>从事其他行业的人来说，如果家里有点关系的人，条件好一点的人，可能去到一个单位里面暂时上班，条件不好的，那就出来随便找一个班上，对于销售型的，在广州深圳，大多都是六七千，小城市的话，五千基本上已经很高了。对于待业的，那基本上没收入，考公考编的一般都回到了小县城，随便找个单位临时上班，一个月也就两千来块！</p><p>我们就不去分析双一流，专科，中职这些了，所以整体算下来，我们现在的年轻人的收入是很低的。</p><h2 id="时代特征"><a href="#时代特征" class="headerlink" title="时代特征"></a>时代特征</h2><p>努力在这个社会貌似已经不是一个正能量的词了，仿佛已经是一个调侃的词了，就像现在大多女孩子，她现在不会选择一个很努力的男孩子作为伴侣，因为努力后得到回报是一个概率事件，大多会选择有“存货”的人！当然，并不是人人都这样。</p><p>社会的发展就是这样，就像森林里面的狼越来越多，那么捕获到猎物的概率就越来越小，这和努力没多大的关系，这是时代特征！</p><p>八九十年代别说考上大学，考上中专谋个职位都不难，而现在一砖头下去都能打中几个研究生已经不是什么稀奇事了。</p><p>还有现在的经济形势如此严峻，企业和单位的寒冬一直在降临，无数的人蜂拥而至，导致形势更加紧张，本来在夹缝中已经难以生存了，现在变成了针眼！</p><p>所以前段时间网红带货主播李佳琦在网上说：“找找自己的原因，工资涨了没涨，有没有认真工作”，是因为的认知出现了谬误，所以才说出了这种言论，而他的成功完全靠努力吗？你怎么看！</p><h2 id="这和你没关系"><a href="#这和你没关系" class="headerlink" title="这和你没关系"></a>这和你没关系</h2><p>浮躁来自于你的认知水平，在这个信息爆炸的时代，如果不能分辨真假是非，那么就很容易陷入浮躁的状态！</p><p>网络上和现实中总是充斥着一股“赚钱很容易”的妖风，他们去编造一些故事，制造一些假象来迷惑人的双眼，如果你的甄别能力不够，那么你就会觉得为啥别人那么厉害，自己为啥混成这样，从而陷入浮躁和迷茫之中，当你进入这个状态后，等待你的要么是镰刀，要么是内耗！</p><p>做人过程中的一大蠢事就是自己啥也不是的时候，总是去炫耀自己拥有的那些八竿子打不着的人脉和资源，被那些不知真假的事物去影响，去自我否定，当一个人不能独立去思考问题，不站在现实角度去看待问题的时候，那么是永远不可能获得成长的。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现实中，很多人都是很窘迫的，赚到钱的人永远在少数，这是时代特征和个人运气所决定的，努力只占了很小一部分，所以别被互联网上的一些妖风所影响！</p><p>这个时代我们虽然能决定的东西很少，事物都充满不确定性，但是依然要如罗曼罗兰说的那样”世界上只有一种英雄主义，看清生活的真相依然热爱生活”，正因为充满不确定性，所以才有“赌”的意义！</p>]]></content>
    
    
    <summary type="html">别让垃圾短视频废了可思化，多出去看看，别活在短视频和文字里！</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Swarm overlay网络详解</title>
    <link href="https://jonty.top/2023/12/21/docker-swarm-network-overlay/"/>
    <id>https://jonty.top/2023/12/21/docker-swarm-network-overlay/</id>
    <published>2023-12-21T12:54:01.000Z</published>
    <updated>2023-12-21T12:55:32.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="查看overlay网络"><a href="#查看overlay网络" class="headerlink" title="查看overlay网络"></a>查看overlay网络</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> docker network ls</span><br><span class="line">NETWORK ID     NAME              DRIVER    SCOPE</span><br><span class="line">aba37840837a   bridge            bridge    local</span><br><span class="line">20a5dcd30faa   docker<span class="built_in">_</span>gwbridge   bridge    local</span><br><span class="line">97d548bf9e22   host              host      local</span><br><span class="line">yta4shlonx9v   ingress           overlay   swarm</span><br><span class="line">4644b3cc4c43   none              null      local</span><br></pre></td></tr></table></figure><p>对于理解swarm的网络来讲，个人认为最重要的两个点：</p><ul><li><p>第一是外部如何访问部署运行在swarm集群内的服务，可以称之为<code>入方向</code> 流量，在swarm里我们通过<code>ingress</code>来解决</p></li><li><p>第二是部署在swarm集群里的服务，如何对外进行访问，这部分又分为两块:</p><ul><li><p>第一，<code>东西向流量</code> ，也就是不同swarm节点上的容器之间如何通信，swarm通过 <code>overlay </code>网络来解决；</p></li><li><p>第二，<code>南北向流量</code> ，也就是swarm集群里的容器如何对外访问，比如互联网，这个是 <code>Linux bridge + iptables NAT</code> 来解决；</p></li></ul></li></ul><h3 id="创建-overlay-网络"><a href="#创建-overlay-网络" class="headerlink" title="创建 overlay 网络"></a>创建 overlay 网络</h3><p>这个网络会同步到所有的swarm节点上</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span> docker network create -d overlay mynet</span><br><span class="line">4f05pvu8zzj36c2fwu0208wa4</span><br><span class="line"></span><br><span class="line"><span class="built_in">$</span> docker network ls</span><br><span class="line">NETWORK ID     NAME              DRIVER    SCOPE</span><br><span class="line">aba37840837a   bridge            bridge    local</span><br><span class="line">20a5dcd30faa   docker<span class="built_in">_</span>gwbridge   bridge    local</span><br><span class="line">97d548bf9e22   host              host      local</span><br><span class="line">yta4shlonx9v   ingress           overlay   swarm</span><br><span class="line">4f05pvu8zzj3   mynet             overlay   swarm</span><br><span class="line">4644b3cc4c43   none              null      local</span><br></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><p>创建一个服务连接到这个 overlay网络， name 是 test ， replicas 是 2</p><p>可以看到这两个容器分别被创建在worker1和worker2两个节点上</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vagrant@swarm-manager:~<span class="built_in">$</span> docker service create --network mynet --name test --replicas 2 busybox ping 8.8.8.8</span><br><span class="line">vagrant@swarm-manager:~<span class="built_in">$</span> docker service ps test</span><br><span class="line">ID             NAME      IMAGE            NODE            DESIRED STATE   CURRENT STATE            ERROR     PORTS</span><br><span class="line">yf5uqm1kzx6d   test.1    busybox:latest   swarm-worker1   Running         Running 18 seconds ago</span><br><span class="line">3tmp4cdqfs8a   test.2    busybox:latest   swarm-worker2   Running         Running 18 seconds ago</span><br></pre></td></tr></table></figure><h3 id="网络查看"><a href="#网络查看" class="headerlink" title="网络查看"></a>网络查看</h3><p>到worker1和worker2上分别查看容器的网络连接情况</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vagrant@swarm-worker1:~<span class="built_in">$</span> docker container ls</span><br><span class="line">CONTAINER ID   IMAGE            COMMAND          CREATED      STATUS      PORTS     NAMES</span><br><span class="line">cac4be28ced7   busybox:latest   &quot;ping 8.8.8.8&quot;   2 days ago   Up 2 days             test.1.yf5uqm1kzx6dbt7n26e4akhsu</span><br><span class="line">vagrant@swarm-worker1:~<span class="built_in">$</span> docker container exec -it cac sh</span><br><span class="line">/ <span class="params">#</span> ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER<span class="built_in">_</span>UP&gt; mtu 65536 qdisc noqueue qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">    valid<span class="built_in">_</span>lft forever preferred<span class="built_in">_</span>lft forever</span><br><span class="line">24: eth0@if25: &lt;BROADCAST,MULTICAST,UP,LOWER<span class="built_in">_</span>UP,M-DOWN&gt; mtu 1450 qdisc noqueue</span><br><span class="line">    link/ether 02:42:0a:00:01:08 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.1.8/24 brd 10.0.1.255 scope global eth0</span><br><span class="line">    valid<span class="built_in">_</span>lft forever preferred<span class="built_in">_</span>lft forever</span><br><span class="line">26: eth1@if27: &lt;BROADCAST,MULTICAST,UP,LOWER<span class="built_in">_</span>UP,M-DOWN&gt; mtu 1500 qdisc noqueue</span><br><span class="line">    link/ether 02:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.3/16 brd 172.18.255.255 scope global eth1</span><br><span class="line">    valid<span class="built_in">_</span>lft forever preferred<span class="built_in">_</span>lft forever</span><br><span class="line">/ <span class="params">#</span></span><br></pre></td></tr></table></figure><p>这个容器有两个接口 <a href="https://so.csdn.net/so/search?q=eth0&spm=1001.2101.3001.7020">eth0</a>和eth1， 其中eth0是连到了mynet这个网络，eth1是连到docker_gwbridge这个网络</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vagrant@swarm-worker1:~<span class="built_in">$</span> docker network ls</span><br><span class="line">NETWORK ID     NAME              DRIVER    SCOPE</span><br><span class="line">a631a4e0b63c   bridge            bridge    local</span><br><span class="line">56945463a582   docker<span class="built_in">_</span>gwbridge   bridge    local</span><br><span class="line">9bdfcae84f94   host              host      local</span><br><span class="line">14fy2l7a4mci   ingress           overlay   swarm</span><br><span class="line">lpirdge00y3j   mynet             overlay   swarm</span><br><span class="line">c1837f1284f8   none              null      local</span><br></pre></td></tr></table></figure><p>在这个容器里是可以直接ping通worker2上容器的IP 10.0.1.9的</p><p>结构图讲解<br>南北向：主要用于访问外部网络。通过eht1网卡，走veth的docker_gwbridge网络，根据NAT把容器地址转换成主机地址，访问到外部网络。<br>东西向：用于集群之间的网络访问。<code>192.168.200.10</code>上的容器通过eht0访问overlay的网络mynet，将原始数据加一个VXLAN的头，封装成数据包，这时会原始地址就是<code>192.168.200.10</code>，目标IP地址<code>192.168.200.11</code>，通过这个管道发送到目标机器上，再通过overlay网络的mynet接收解封，发送到<code>192.168.200.11</code>的容器上。</p><p>集群的两个节点之间 <code>10.0.1.8 - &gt; 10.0.1.9</code> 转换后两台机器 <code>192.168.200.10 -&gt; 192.168.200.11</code></p><p><img data-src="https://cdn.jonty.top/img/202311221100439.png" alt="image-20231122110010154"></p>]]></content>
    
    
    <summary type="html">Swarm overlay网络详解</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Docker Swarm" scheme="https://jonty.top/tags/Docker-Swarm/"/>
    
  </entry>
  
  <entry>
    <title>Lazy延迟初始化</title>
    <link href="https://jonty.top/2023/10/31/about-of-csharp-lazy-initialization/"/>
    <id>https://jonty.top/2023/10/31/about-of-csharp-lazy-initialization/</id>
    <published>2023-10-31T02:32:00.000Z</published>
    <updated>2023-10-31T02:34:32.945Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>从net 4.0开始，C#开始支持延迟初始化，通过Lazy关键字，可以声明某个对象在第一次使用的时候再初始化，如果一直没有调用，那就不初始化，省去了一部分不必要的开销，提升了效率，同时Lazy是天生<strong>线程安全</strong>的。</p></div><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><ul><li><p>对象创建成本高且程序可能不会使用它。 </p><p>例如，假定内存中有具有 <code>Orders</code> 属性的 <code>Customer</code> 对象，该对象包含大量 <code>Order</code> 对象，初始化这些对象需要数据库连接。 如果用户不需要显示 Orders 或在计算中使用该数据，则无需使用系统内存或计算周期来创建它。 通过使用 <code>Lazy&lt;Orders&gt;</code> 来声明 <code>Orders</code> 对象用于迟缓初始化，可以避免在不使用该对象时浪费系统资源。</p></li><li><p>对象创建成本高，且希望将其创建推迟到其他高成本操作完成后。</p><p>例如，假定程序在启动时加载多个对象实例，但是只需立即加载其中一部分。 可以通过推迟初始化不需要的对象，直到创建所需对象，提升程序的启动性能。</p></li></ul><blockquote><p>建议使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy<T></a>。 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy<T></a> 及其相关的类型支持线程安全并提供一致的异常传播策略。</p><p><a href="https://learn.microsoft.com/zh-cn/dotnet/framework/performance/lazy-initialization">延迟初始化 - .NET Framework | Microsoft Learn</a></p></blockquote><p><img data-src="https://cdn.jonty.top/img/202310310935922.png" alt="image-20231031093457833"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h3><p>在使用Lazy时，如果没有在构造函数中传入委托，则在首次访问值属性时，将会使用<code>Activator.CreateInstance</code>来创建类型的对象，如果此类型没有无参数的构造函数时将会引发运行时异常。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LazyUsage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">LazyDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Lazy&lt;Data&gt; lazyData = <span class="keyword">new</span> Lazy&lt;Data&gt;();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line">            lazyData.Value.Print();<span class="comment">//此处访问时才会将Data真正的初始化</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Data</span>(<span class="params"></span>)</span> </span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::.ctor-&gt;Initialized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::Print-&gt;println&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main-&gt;is lazyData Initialized? value = False</span><br><span class="line">Data::.ctor-&gt;Initialized</span><br><span class="line">Data::Print-&gt;println</span><br><span class="line">Main-&gt;is lazyData Initialized? value = True</span><br></pre></td></tr></table></figure><h3 id="委托初始化"><a href="#委托初始化" class="headerlink" title="委托初始化"></a>委托初始化</h3><p>指定委托来初始化</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LazyUsage</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">LazyDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//指定委托来初始化Data</span></span><br><span class="line">            Lazy&lt;Data&gt; lazyData = <span class="keyword">new</span> Lazy&lt;Data&gt;(</span><br><span class="line">                () =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;Main-&gt;lazyData will be Initialized!&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> Data(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line">            lazyData.Value.Print();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Main-&gt;is lazyData Initialized? value = &quot;</span> + lazyData.IsValueCreated);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Data</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::.ctor-&gt;Initialized,name = &quot;</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Data::Print-&gt;name = &quot;</span> + Name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Main-&gt;is lazyData Initialized? value = False</span><br><span class="line">Main-&gt;lazyData will be Initialized!</span><br><span class="line">Data::.ctor-&gt;Initialized,name = Test</span><br><span class="line">Data::Print-&gt;name = Test</span><br><span class="line">Main-&gt;is lazyData Initialized? value = True</span><br></pre></td></tr></table></figure><h3 id="线程安全初始化"><a href="#线程安全初始化" class="headerlink" title="线程安全初始化"></a>线程安全初始化</h3><p>默认情况下，<a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy</a> 对象是线程安全的。也就是说，如果构造函数没有指定线程安全性的类型，该函数创建的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy</a> 对象是线程安全的。 </p><p>在多线程方案中，访问线程安全 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1">Lazy</a> 对象的 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1.value">Value</a> 属性的第一个线程会为所有线程上的所有后续访问对其初始化，且所有线程共享相同的数据。 因此，哪个线程初始化对象并不重要，争用条件是良性的。</p><p>以下示例演示了相同的 <code>Lazy&lt;int&gt;</code> 实例对于三个单独的线程输出相同的值。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initialize the integer to the managed thread id of the</span></span><br><span class="line"><span class="comment">// first thread that accesses the Value property.</span></span><br><span class="line">Lazy&lt;<span class="built_in">int</span>&gt; number = <span class="keyword">new</span> Lazy&lt;<span class="built_in">int</span>&gt;(() =&gt; Thread.CurrentThread.ManagedThreadId);</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(() =&gt; Console.WriteLine(<span class="string">&quot;number on t1 = &#123;0&#125; ThreadID = &#123;1&#125;&quot;</span>,</span><br><span class="line">                                        number.Value, Thread.CurrentThread.ManagedThreadId));</span><br><span class="line">t1.Start();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() =&gt; Console.WriteLine(<span class="string">&quot;number on t2 = &#123;0&#125; ThreadID = &#123;1&#125;&quot;</span>,</span><br><span class="line">                                        number.Value, Thread.CurrentThread.ManagedThreadId));</span><br><span class="line">t2.Start();</span><br><span class="line"></span><br><span class="line">Thread t3 = <span class="keyword">new</span> Thread(() =&gt; Console.WriteLine(<span class="string">&quot;number on t3 = &#123;0&#125; ThreadID = &#123;1&#125;&quot;</span>, number.Value,</span><br><span class="line">                                        Thread.CurrentThread.ManagedThreadId));</span><br><span class="line">t3.Start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure that thread IDs are not recycled if the</span></span><br><span class="line"><span class="comment">// first thread completes before the last one starts.</span></span><br><span class="line">t1.Join();</span><br><span class="line">t2.Join();</span><br><span class="line">t3.Join();</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/* Sample Output:</span><br><span class="line">    number on t1 = 11 ThreadID = 11</span><br><span class="line">    number on t3 = 11 ThreadID = 13</span><br><span class="line">    number on t2 = 11 ThreadID = 12</span><br><span class="line">    Press any key to exit.</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><blockquote><p>如果每个线程需要单独的数据，使用 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.threading.threadlocal-1">ThreadLocal</a> 类型</p></blockquote><h3 id="Lazy-Value"><a href="#Lazy-Value" class="headerlink" title="Lazy.Value"></a>Lazy.Value</h3><p>Lazy对象创建后，并不会立即创建对应的对象，只有在变量的Value属性被首次访问时才会真正的创建，同时会将其缓存到Value中，以便将来访问。</p><p>Value属性是只读的，也就意味着如果Value存储了引用类型，将无法为其分配新对象，只可以更改此对象公共的属性或者字段等，如果Value存储的是值类型，那么就不能修改其值了，只能通过再次调用变量的函数使用新的参数来创建新的变量。</p><p>在Lazy对象创建后，在首次访问变量的Value属性前。</p><h3 id="延迟属性"><a href="#延迟属性" class="headerlink" title="延迟属性"></a>延迟属性</h3><p>要使用延迟初始化实现公共属性，则将该属性的支持字段定义为 Lazy，并从该属性的 <code>get</code> 访问器返回 <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.lazy-1.value">Value</a> 属性。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Customer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Lazy&lt;Orders&gt; _orders;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> CustomerID &#123;<span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span>(<span class="params"><span class="built_in">string</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CustomerID = id;</span><br><span class="line">        _orders = <span class="keyword">new</span> Lazy&lt;Orders&gt;(() =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Orders(<span class="keyword">this</span>.CustomerID);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Orders MyOrders</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> _orders.Value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="#Lazy.Value">Lazy.Value</a>中可以得知：Value的属性是只读的，所以示例中只提供了Get的访问器，并未提供Set的访问器。</p><p>如果需要支持读取与写入属性的话，则Set访问器必须创建一个新的Lazy对象，同时必须编写自己的线程安全代码才能执行此操作。</p><h2 id="循环依赖问题"><a href="#循环依赖问题" class="headerlink" title="循环依赖问题"></a>循环依赖问题</h2><p>在构建应用程序时，良好的设计应该避免服务之间的循环依赖，循环依赖是指某些组件直接或间接相互依赖。</p><p>比如下面这样：</p><p><img data-src="https://cdn.jonty.top/img/202310310951075.png" alt="Circular dependency"></p><p>在.NET Core中使用依赖注入，如果产生循环依赖关系，则会报一下错误：</p><blockquote><p><em><strong>System.InvalidOperationException</strong>: A circular dependency was detected for the service of type ‘Demo.IA’</em></p></blockquote><h3 id="注入IServiceProvider"><a href="#注入IServiceProvider" class="headerlink" title="注入IServiceProvider"></a>注入IServiceProvider</h3><p>当应用复杂度达到一定程度时，很难避免造成服务循环依赖的问题，理想的情况下，应该是选择重构。</p><blockquote><p>但是项目时间紧，任务重，没有时间重构代码</p></blockquote><p><img data-src="https://cdn.jonty.top/img/202310311009917.png" alt="image-20231031100909845"></p><p>我们可以通过注入<code>IServiceProvider </code>去获取服务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">IC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IA _a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">IA a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bar</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        _a.Foo()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免依赖性循环，可以注入<code> IServiceProvider</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">IC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProvider _services;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">IServiceProvider services</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _services = services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bar</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">var</span> a = _services.GetRequiredService&lt;IA&gt;();</span><br><span class="line">        a.Foo();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式有一定弊端，例如强制依赖IOC，并且很难看到类的依赖关系。</p><h3 id="巧用-Lazy-lt-T-gt"><a href="#巧用-Lazy-lt-T-gt" class="headerlink" title="巧用 Lazy&lt;T&gt;"></a><strong>巧用</strong> <code>Lazy&lt;T&gt;</code></h3><p>新建一个 <code>IServiceCollection</code> 的扩展类<code>AddLazyResolution</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddLazyResolution</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> services.AddTransient(</span><br><span class="line">        <span class="keyword">typeof</span>(Lazy&lt;&gt;),</span><br><span class="line">        <span class="keyword">typeof</span>(LazilyResolved&lt;&gt;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title">LazilyResolved</span>&lt;<span class="title">T</span>&gt; : <span class="title">Lazy</span>&lt;<span class="title">T</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LazilyResolved</span>(<span class="params">IServiceProvider serviceProvider</span>)</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params">serviceProvider.GetRequiredService&lt;T&gt;</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Startup.cs</code>中注册</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddLazyResolution();</span><br></pre></td></tr></table></figure><p>在依赖的类中IA，注入Lazy，当要使用IA时，只需访问Lazy的值 Value 即可：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">C</span> : <span class="title">IC</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Lazy&lt;IA&gt; _a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C</span>(<span class="params">Lazy&lt;IA&gt; a</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Bar</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">        _a.Value.Foo();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法不是最完美的，但是解决了根本问题，并且依赖项在构造函数中有明确声明。</p><p>为了打破循环依赖关系，我们需要一个服务工厂，而不是实际的对象，在示例中，<code>IServiceProvider</code> 和 <code>Lazy</code>都被用作工厂。</p></blockquote><p>可以看到在<code>ABP</code>中也提供了<code>IAbpLazyServiceProvider</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">object</span>? GetService(Type serviceType)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> CachedServices.GetOrAdd(</span><br><span class="line">        serviceType,</span><br><span class="line">        _ =&gt; <span class="keyword">new</span> Lazy&lt;<span class="built_in">object</span>?&gt;(() =&gt; ServiceProvider.GetService(serviceType))</span><br><span class="line">    ).Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/202310311028274.webp" alt="img"></p><blockquote><p>参考：<a href="https://stackoverflow.com/questions/44934511/does-net-core-dependency-injection-support-lazyt">c# - Does .net core dependency injection support Lazy - Stack Overflow</a></p><p><a href="https://thomaslevesque.com/2020/03/18/lazily-resolving-services-to-fix-circular-dependencies-in-net-core/">[Lazily resolving services to fix circular dependencies in .NET Core - Thomas Levesque’s .NET Blog]</a></p></blockquote>]]></content>
    
    
    <summary type="html">C#性能优化 - Lazy延迟初始化</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="C#" scheme="https://jonty.top/tags/C/"/>
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
  </entry>
  
  <entry>
    <title>【分享】IP 基础知识“全家桶”</title>
    <link href="https://jonty.top/2023/08/27/about-of-IP/"/>
    <id>https://jonty.top/2023/08/27/about-of-IP/</id>
    <published>2023-08-27T01:58:00.000Z</published>
    <updated>2023-10-16T02:02:27.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下文章来源于小林coding ，作者小林coding</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，有读者希望我写一篇关于 IP 分类地址、子网划分等的文章，他反馈常常混淆，摸不着头脑。</p><p>那么，说来就来！而且要盘就盘全一点，顺便挑战下小林的图解功力，所以就来个 <strong>IP 基础知识全家桶</strong>。</p><p>吃完这个 IP 基础知识全家桶全家桶，包你撑着肚子喊出：“<strong>真香！</strong>”</p><p>不多说，直接上菜，共分为<strong>三道菜</strong>：</p><ul><li>首先是前菜 「 IP 基本认识 」</li><li>其次是主菜 「IP 地址的基础知识」</li><li>最后是点心 「IP 协议相关技术」</li></ul><p><img data-src="https://cdn.jonty.top/img/%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="IP基础知识全家桶"></p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="前菜-——-IP-基本认识"><a href="#前菜-——-IP-基本认识" class="headerlink" title="前菜 —— IP 基本认识"></a>前菜 —— IP 基本认识</h3><p>IP 在 TCP/IP 参考模型中处于第三层，也就是<strong>网络层</strong>。</p><p>网络层的主要作用是：<strong>实现主机与主机之间的通信，也叫点对点（end to end）通信。</strong></p><p><img data-src="https://cdn.jonty.top/img/640.png" alt="IP的作用"></p><blockquote><p>网络层与数据链路层有什么关系呢？</p></blockquote><p>有的小伙伴分不清 IP（网络层） 和 MAC （数据链路层）之间的区别和关系。</p><p>其实很容易区分，在上面我们知道 IP 的作用是主机之间通信中的，而 <strong>MAC 的作用则是实现「直连」的两个设备之间通信，而 IP 则负责在「没有直连」的两个网络之间进行通信传输。</strong></p><p>举个生活的栗子，小林要去一个很远的地方旅行，制定了一个行程表，其间需先后乘坐飞机、地铁、公交车才能抵达目的地，为此小林需要买飞机票，地铁票等。</p><p>飞机票和地铁票都是去往特定的地点的，每张票只能够在某一限定区间内移动，此处的「区间内」就如同通信网络中数据链路。</p><p>在区间内移动相当于数据链路层，充当区间内两个节点传输的功能，区间内的出发点好比源 MAC 地址，目标地点好比目的 MAC 地址。</p><p>整个旅游行程表就相当于网络层，充当远程定位的功能，行程的开始好比源 IP，行程的终点好比目的 IP 地址。</p><p><img data-src="https://cdn.jonty.top/img/202308272207889.png" alt="IP 的作用与 MAC 的作用"></p><p>如果小林只有行程表而没有车票，就无法搭乘交通工具到达目的地。相反，如果除了车票而没有行程表，恐怕也很难到达目的地。因为小林不知道该坐什么车，也不知道该在哪里换乘。</p><p>因此，只有两者兼备，既有某个区间的车票又有整个旅行的行程表，才能保证到达目的地。与此类似，<strong>计算机网络中也需要「数据链路层」和「网络层」这个分层才能实现向最终目标地址的通信。</strong></p><p>还有重要一点，旅行途中我们虽然不断变化了交通工具，但是旅行行程的起始地址和目的地址始终都没变。其实，在网络中数据包传输中也是如此，<strong>源IP地址和目标IP地址在传输过程中是不会变化的，只有源 MAC 地址和目标 MAC 一直在变化。</strong></p><hr><h3 id="主菜-——-IP-地址的基础知识"><a href="#主菜-——-IP-地址的基础知识" class="headerlink" title="主菜 —— IP 地址的基础知识"></a>主菜 —— IP 地址的基础知识</h3><p>在 TCP/IP 网络通信时，为了保证能正常通信，每个设备都需要配置正确的 IP 地址，否则无法实现正常的通信。</p><p>IP 地址（IPv4 地址）由 <code>32</code> 位正整数来表示，IP 地址在计算机是以二进制的方式处理的。</p><p>而人类为了方便记忆采用了<strong>点分十进制</strong>的标记方式，也就是将 32 位 IP 地址以每 8 位为组，共分为 <code>4</code> 组，每组以「<code>.</code>」隔开，再将每组转换成十进制。</p><p><img data-src="https://cdn.jonty.top/img/202308272208690.png" alt="点分十进制"></p><p>那么，IP 地址最大值也就是</p><p><img data-src="https://cdn.jonty.top/img/202308272209488.png"></p><p>也就说，最大允许 43 亿台计算机连接到网络。</p><p>实际上，IP 地址并不是根据主机台数来配置的，而是以网卡。像服务器、路由器等设备都是有 2 个以上的网卡，也就是它们会有 2 个以上的 IP 地址。</p><p><img data-src="https://cdn.jonty.top/img/202309071006166.png" alt="每块网卡可以分配一个以上的IP地址"></p><p>因此，让 43 亿台计算机全部连网其实是不可能的，更何况 IP 地址是由「网络标识」和「主机标识」这两个部分组成的，所以实际能够连接到网络的计算机个数更是少了很多。</p><blockquote><p>可能有的小伙伴提出了疑问，现在不仅电脑配了 IP， 手机、IPad 等电子设备都配了 IP 呀，照理来说肯定会超过 43 亿啦，那是怎么能够支持这么多 IP 的呢？</p></blockquote><p>因为会根据一种可以更换 IP 地址的技术 <code>NAT</code>，使得可连接计算机数超过 43 亿台。<code>NAT</code> 技术后续会进一步讨论和说明。</p><h4 id="IP-地址的分类"><a href="#IP-地址的分类" class="headerlink" title="IP 地址的分类"></a>IP 地址的分类</h4><p>互联网诞生之初，IP 地址显得很充裕，于是计算机科学家们设计了<strong>分类地址</strong>。</p><p>IP 地址分类成了 5 种类型，分别是 A 类、B 类、C 类、D 类、E 类。</p><p><img data-src="https://cdn.jonty.top/img/202309071006808.png" alt="IP 地址分类"></p><p>上图中黄色部是分类号，用以区分 IP 地址类别。</p><blockquote><p>什么是 A、B、C 类地址？</p></blockquote><p>其中对于 A、B、C 类主要分为两个部分，分别是<strong>网络号和主机号</strong>。这很好理解，好比小林是 A 小区 1 栋 101 号，你是 B 小区 1 栋 101 号。</p><p>我们可以用下面这个表格， 就能很清楚的知道 A、B、C 分类对应的地址范围、最大主机个数。</p><p><img data-src="https://cdn.jonty.top/img/202309071006375.png" alt="A、B、C 分类地址"></p><blockquote><p>A、B、C 分类地址最大主机个数是如何计算的呢？</p></blockquote><p>最大主机个数，就是要看主机号的位数，如 C 类地址的主机号占 8 位，那么 C 类地址的最大主机个数：</p><p><img data-src="https://cdn.jonty.top/img/202309071007734.png"></p><p>为什么要减 2 呢？</p><p>因为在 IP 地址中，有两个 IP 是特殊的，分别是主机号全为 1 和 全为 0 地址。</p><p><img data-src="https://cdn.jonty.top/img/202309071007166.png"></p><ul><li>主机号全为 1 指定某个网络下的所有主机，用于广播</li><li>主机号全为 0 指定某个网络</li></ul><p>因此，在分配过程中，应该去掉这两种情况。</p><blockquote><p>广播地址用于什么？</p></blockquote><p>广播地址用于在<strong>同一个链路中相互连接的主机之间发送数据包</strong>。</p><p>学校班级中就有广播的例子，在准备上课的时候，通常班长会喊：“上课， 全体起立！”，班里的同学听到这句话是不是全部都站起来了？这个句话就有广播的含义。</p><p>当主机号全为 1 时，就表示该网络的广播地址。例如把 <code>172.20.0.0/16</code> 用二进制表示如下：</p><p>10101100.00010100.00000000.00000000</p><p>将这个地址的<strong>主机部分全部改为 1</strong>，则形成广播地址：</p><p>10101100.00010100.<strong>11111111.11111111</strong></p><p>再将这个地址用十进制表示，则为 <code>172.20.255.255</code>。</p><p>广播地址可以分为本地广播和直接广播两种。</p><ul><li><strong>在本网络内广播的叫做本地广播</strong>。例如网络地址为 192.168.0.0/24 的情况下，广播地址是 192.168.0.255 。因为这个广播地址的 IP 包会被路由器屏蔽，所以不会到达 192.168.0.0/24 以外的其他链路上。</li><li><strong>在不同网络之间的广播叫做直接广播</strong>。例如网络地址为 192.168.0.0/24 的主机向 192.168.1.255/24 的目标地址发送 IP 包。收到这个包的路由器，将数据转发给192.168.1.0/24，从而使得所有 192.168.1.1~192.168.1.254 的主机都能收到这个包（由于直接广播有一定的安全问题，多数情况下会在路由器上设置为不转发）。</li></ul><p><img data-src="https://cdn.jonty.top/img/202309071007094.jpg" alt="本地广播与直接广播"></p><blockquote><p>什么是 D、E 类地址？</p></blockquote><p>而 D 类和 E 类地址是没有主机号的，所以不可用于主机 IP，D 类常被用于<strong>多播</strong>，E 类是预留的分类，暂时未使用。</p><p><img data-src="https://cdn.jonty.top/img/202309071007132.png" alt="D、E 分类地址"></p><blockquote><p>多播地址用于什么？</p></blockquote><p>多播用于<strong>将包发送给特定组内的所有主机。</strong></p><p>还是举班级的栗子，老师说：“最后一排的同学，上来做这道数学题。”，老师是指定的是最后一排的同学，也就是多播的含义了。</p><p>由于广播无法穿透路由，若想给其他网段发送同样的包，就可以使用可以穿透路由的多播（组播）。</p><p><img data-src="https://cdn.jonty.top/img/202309071008044.png" alt="单播、广播、多播通信"></p><p>多播使用的 D 类地址，其前四位是 <code>1110</code> 就表示是多播地址，而剩下的 28 位是多播的组编号。</p><p>从 224.0.0.0 ~ 239.255.255.255 都是多播的可用范围，其划分为以下三类：</p><ul><li>224.0.0.0 ~ 224.0.0.255 为预留的组播地址，只能局域网中，路由器是不会进行转发的</li><li>224.0.1.0 ~ 238.255.255.255  为用户可用的组播地址，可以用于 Internet 上</li><li>239.0.0.0 ~ 239.255.255.255 为本地管理组播地址，可供内部网在内部使用，仅在特定的本地范围内有效</li></ul><blockquote><p>IP 分类的优点</p></blockquote><p>不管是路由器还是主机解析到一个 IP 地址时候，我们判断其 IP 地址的首位是否为 0，为 0 则为 A 类地址，那么就能很快的找出网络地址和主机地址。</p><p>其余分类判断方式参考如下图：</p><p><img data-src="https://cdn.jonty.top/img/202309071009420.png" alt="IP 分类判断"></p><p>所以，这种分类地址的优点就是<strong>简单明了、选路（基于网络地址）简单</strong>。</p><blockquote><p>IP 分类的缺点</p></blockquote><p><em>缺点一</em></p><p><strong>同一网络下没有地址层次</strong>，比如一个公司里用了 B 类地址，但是可能需要根据生产环境、测试环境、开发环境来划分地址层次，而这种 IP 分类是没有地址层次划分的功能，所以这就<strong>缺少地址的灵活性</strong>。</p><p><em>缺点二</em></p><p>A、B、C类有个尴尬处境，就是<strong>不能很好的与现实网络匹配</strong>。</p><ul><li>C 类地址能包含的最大主机数量实在太少了，只有 254 个，估计一个网吧都不够用。</li><li>而 B 类地址能包含的最大主机数量又太多了，6 万多台机器放在一个网络下面，一般的企业基本达不到这个规模，闲着的地址就是浪费。</li></ul><p>这两个缺点，都可以在 <code>CIDR</code> 无分类地址解决。</p><h4 id="无分类地址-CIDR"><a href="#无分类地址-CIDR" class="headerlink" title="无分类地址 CIDR"></a>无分类地址 CIDR</h4><p>正因为 IP 分类存在许多缺点，所有后面提出了无分类地址的方案，即 <code>CIDR</code>。</p><p>这种方式不再有分类地址的概念，32 比特的 IP 地址被划分为两部分，前面是<strong>网络号</strong>，后面是<strong>主机号</strong>。</p><blockquote><p>怎么划分网络号和主机号的呢？</p></blockquote><p>表示形式 <code>a.b.c.d/x</code>，其中 <code>/x</code> 表示前 x 位属于<strong>网络号</strong>， x 的范围是 <code>0 ~ 32</code>，这就使得 IP 地址更加具有灵活性。</p><p>比如 10.100.122.2/24，这种地址表示形式就是 CIDR，<code>/24</code> 表示前 24 位是网络号，剩余的 8 位是主机号。</p><p><img data-src="https://cdn.jonty.top/img/202309071010223.png"></p><p>还有另一种划分网络号与主机号形式，那就是<strong>子网掩码</strong>，掩码的意思就是掩盖掉主机号，剩余的就是网络号。</p><p><strong>将子网掩码和 IP 地址按位计算 AND，就可得到网络号。</strong></p><p><img data-src="https://cdn.jonty.top/img/202309071010949.png"></p><blockquote><p>为什么要分离网络号和主机号？</p></blockquote><p>因为两台计算机要通讯，首先要判断是否处于同一个广播域内，即网络地址是否相同。如果网络地址相同，表明接受方在本网络上，那么可以把数据包直接发送到目标主机，</p><p>路由器寻址工作中，也就是通过这样的方式来找到对应的网络号的，进而把数据包转发给对应的网络内。</p><p><img data-src="https://cdn.jonty.top/img/202309071017210.png" alt="IP地址的网络号"></p><blockquote><p>怎么进行子网划分？</p></blockquote><p>在上面我们知道可以通过子网掩码划分出网络号和主机号，那实际上子网掩码还有一个作用，那就是<strong>划分子网</strong>。</p><p><strong>子网划分实际上是将主机地址分为两个部分：子网网络地址和子网主机地址</strong>。形式如下：</p><p><img data-src="https://cdn.jonty.top/img/202309071010496.png" alt=" "></p><ul><li>未做子网划分的 ip 地址：网络地址＋主机地址</li><li>做子网划分后的 ip 地址：网络地址＋（子网网络地址＋子网主机地址）</li></ul><p>假设对 C 类地址进行子网划分，网络地址 192.168.1.0，使用子网掩码 255.255.255.192 对其进行子网划分。</p><p>C 类地址中前 24 位 是网络号，最后 8 位是主机号，根据子网掩码可知<strong>从 8 位主机号中借用 2 位作为子网号</strong>。</p><p><img data-src="https://cdn.jonty.top/img/202309071010498.png" alt=" "></p><p>由于子网网络地址被划分成 2 位，那么子网地址就有 4 个，分别是 00、01、10、11，具体划分如下图：</p><p><img data-src="https://cdn.jonty.top/img/202309071017676.png"></p><p>划分后的 4 个子网如下表格：</p><p><img data-src="https://cdn.jonty.top/img/202309071018562.png"></p><h4 id="公有-IP-地址与私有-IP-地址"><a href="#公有-IP-地址与私有-IP-地址" class="headerlink" title="公有 IP 地址与私有 IP 地址"></a>公有 IP 地址与私有 IP 地址</h4><p>在 A、B、C 分类地址，实际上有分公有 IP 地址和 私有 IP 地址。</p><p><img data-src="https://cdn.jonty.top/img/202309071018330.png"></p><p>平时我们办公室、家里、学校用的 IP 地址，一般都是私有 IP 地址。因为这些地址允许组织内部的 IT 人员自己管理、自己分配，而且可以重复。因此，你学校的某个私有 IP 地址和我学校的可以是一样的。</p><p>就像每个小区都有自己的楼编号和门牌号，你小区家可以叫  1 栋 101 号，我小区家也可以叫 1 栋 101，没有任何问题。但一旦出了小区，就需要带上中山路 666 号（公网 IP 地址），是国家统一分配的，不能两个小区都叫中山路 666。</p><p>所以，公有 IP 地址是有个组织统一分配的，假设你要开一个博客网站，那么你就需要去申请购买一个公有 IP，这样全世界的人才能访问。并且公有 IP 地址基本上要在整个互联网范围内保持唯一。</p><p><img data-src="https://cdn.jonty.top/img/202309071018546.png" alt="公有 IP 地址与私有 IP 地址"></p><blockquote><p>公有 IP 地址由谁管理呢？</p></blockquote><p>私有 IP 地址通常是内部的 IT 人员值管理，公有 IP 地址是由 <code>ICANN</code> 组织管理，中文叫「互联网名称与数字地址分配机构」。</p><p>IANA 是 ICANN 的其中一个机构，它负责分配互联网 IP 地址，是按州的方式层层分配。</p><p><img data-src="https://cdn.jonty.top/img/202309071018715.png"></p><ul><li>ARIN 北美地区</li><li>LACNIC 拉丁美洲和一些加勒比群岛</li><li>RIPE NCC 欧洲、中东和中亚</li><li>AfriNIC 非洲地区</li><li>APNIC 亚太地区</li></ul><p>其中，在中国是由 CNNIC 的机构进行管理，它是中国国内唯一指定的全局 IP 地址管理的组织。</p><h4 id="IP-地址与路由控制"><a href="#IP-地址与路由控制" class="headerlink" title="IP 地址与路由控制"></a>IP 地址与路由控制</h4><p>IP地址的<strong>网络地址</strong>这一部分是用于进行路由控制。</p><p>路由控制表中记录着网络地址与下一步应该发送至路由器的地址，在主机和路由器上都会有各自的路由器控制表。</p><p>在发送 IP 包时，首先要确定 IP 包首部中的目标地址，再从路由控制表中找到与该地址具有<strong>相同网络地址</strong>的记录，根据该记录将 IP 包转发给相应的下一个路由器。如果路由控制表中存在多条相同网络地址的记录，就选择相同位数最多的网络地址，也就是最长匹配。</p><p>下面以下图的网络链路作为例子说明：</p><p><img data-src="https://cdn.jonty.top/img/202309071018655.png" alt="IP 地址与路由控制"></p><ol><li>主机 A 要发送一个 IP 包，其源地址是 <code>10.1.1.30</code> 和目标地址是 <code>10.1.2.10</code>，由于没有在主机 A 的路由表找到与目标地址 <code>10.1.2.10</code> 的网络地址，于是把包被转发到默认路由（路由器 <code>1</code> ）</li><li>路由器 <code>1</code> 收到 IP 包后，也在路由器 <code>1</code> 的路由表匹配与目标地址相同的网络地址记录，发现匹配到了，于是就把 IP 数据包转发到了 <code>10.1.0.2</code> 这台路由器 <code>2</code></li><li>路由器 <code>2</code> 收到后，同样对比自身的路由表，发现匹配到了，于是把 IP 包从路由器 <code>2</code> 的 <code>10.1.2.1</code> 这个接口出去，最终经过交换机把 IP 数据包转发到了目标主机</li></ol><blockquote><p>环回地址是不会流向网络</p></blockquote><p>环回地址是在同一台计算机上的程序之间进行网络通信时所使用的一个默认地址。</p><p>计算机使用一个特殊的 IP 地址 <strong>127.0.0.1 作为环回地址，</strong>与该地址具有相同意义的是一个叫做 <code>localhost</code> 的主机名。</p><p>使用这个 IP 或主机名时，数据包不会流向网络。</p><h4 id="IP-分片与重组"><a href="#IP-分片与重组" class="headerlink" title="IP 分片与重组"></a>IP 分片与重组</h4><p>每种数据链路的最大传输单元 <code>MTU</code> 都是不相同的，如 FDDI 数据链路 MTU 4352、以太网的 MTU 是 1500 字节等。</p><p>每种数据链路的 MTU 之所以不同，是因为每个不同类型的数据链路的使用目的不同。使用目的不同，可承载的 MTU 也就不同。</p><p>其中，我们最常见数据链路是以太网，它的 MTU 是 <code>1500</code> 字节。</p><p>那么当 IP 数据包大小大于 MTU 时， IP 数据包就会被分片。</p><p>经过分片之后的 IP 数据报在被重组的时候，只能由目标主机进行，路由器是不会进行重组的。</p><p>假设发送方发送一个 4000 字节的大数据报，若要传输在以太网链路，则需要把数据报分片成 3 个小数据报进行传输，再交由接收方重组成大数据报。</p><p><img data-src="https://cdn.jonty.top/img/202309071018909.png" alt="分片与重组"></p><p>在分片传输中，一旦某个分片丢失，则会造成整个 IP 数据报作废，所以 TCP 引入了 <code>MSS</code> 也就是在 TCP 层进行分片不由 IP 层分片，那么对于 UDP 我们尽量不要发送一个大于 <code>MTU</code> 的数据报文。</p><h4 id="IPv6-基本认识"><a href="#IPv6-基本认识" class="headerlink" title="IPv6 基本认识"></a>IPv6 基本认识</h4><p>IPv4 的地址是 32 位的，大约可以提供 42 亿个地址，但是早在 2011 年 IPv4 地址就已经被分配完了。</p><p>但是 IPv6 的地址是 <code>128</code> 位的，这可分配的地址数量是大的惊人，说个段子 <strong>IPv6 可以保证地球上的每粒沙子都能被分配到一个 IP 地址。</strong></p><p>但 IPv6 除了有更多的地址之外，还有更好的安全性和扩展性，说简单点就是 IPv6 相比于 IPv4 能带来更好的网络体验。</p><p>但是因为 IPv4 和 IPv6 不能相互兼容，所以不但要我们电脑、手机之类的设备支持，还需要网络运营商对现有的设备进行升级，所以这可能是 IPv6 普及率比较慢的一个原因。</p><blockquote><p>IPv6 的亮点</p></blockquote><p>IPv6 不仅仅只是可分配的地址变多了，他还有非常多的亮点。</p><ul><li>IPv6 可自动配置，即使没有 DHCP 服务器也可以实现自动分配IP地址，真是<strong>便捷到即插即用</strong>啊。</li><li>IPv6 包头包首部长度采用固定的值 <code>40</code> 字节，去掉了包头校验和，简化了首部结构，减轻了路由器负荷，大大<strong>提高了传输的性能</strong>。</li><li>IPv6 有应对伪造 IP 地址的网络安全功能以及防止线路窃听的功能，大大<strong>提升了安全性</strong>。</li><li><strong>…</strong> （由你发现更多的亮点）</li></ul><blockquote><p>IPv6 地址的标识方法</p></blockquote><p>IPv4 地址长度共 32 位，是以每 8 位作为一组，并用点分十进制的表示方式。</p><p>IPv6 地址长度是 128 位，是以每 16 位作为一组，每组用冒号 「:」 隔开。</p><p><img data-src="https://cdn.jonty.top/img/202309071019953.png" alt="IPv6 地址表示方法"></p><p>如果出现连续的 0 时还可以将这些 0 省略，并用两个冒号 「::」隔开。但是，一个 IP 地址中只允许出现一次两个连续的冒号。</p><p><img data-src="https://cdn.jonty.top/img/202309071019678.png" alt="Pv6 地址缺省表示方"></p><blockquote><p>IPv6 地址的结构</p></blockquote><p>IPv6 类似 IPv4，也是通过 IP 地址的前几位标识 IP 地址的种类。</p><p>IPv6 的地址主要有一下类型地址：</p><ul><li>单播地址，用于一对一的通信</li><li>组播地址，用于一对多的通信</li><li>任播地址，用于通信最近的节点，最近的节点是由路由协议决定</li><li>没有广播地址</li></ul><p><img data-src="https://cdn.jonty.top/img/202309071020170.png" alt="IPv6地址结构"></p><blockquote><p>IPv6 单播地址类型</p></blockquote><p>对于一对一通信的 IPv6 地址，主要划分了三类单播地址，每类地址的有效范围都不同。</p><ul><li>在同一链路单播通信，不经过路由器，可以使用<strong>链路本地单播地址</strong>，IPv4 没有此类型</li><li>在内网里单播通信，可以使用<strong>唯一本地地址</strong>，相当于 IPv4 的私有 IP</li><li>在互联网通信，可以使用<strong>全局单播地址</strong>，相当于 IPv4 的公有 IP</li></ul><p><img data-src="https://cdn.jonty.top/img/202309071020294.png" alt="IPv6 中的单播通信"></p><h4 id="IPv4-首部与-IPv6-首部"><a href="#IPv4-首部与-IPv6-首部" class="headerlink" title="IPv4 首部与 IPv6 首部"></a>IPv4 首部与 IPv6 首部</h4><p>IPv4 首部与 IPv6 首部的差异如下图：</p><p><img data-src="https://cdn.jonty.top/img/202309071021885.png" alt="IPv4 首部与 IPv6 首部的差异"></p><p>IPv6 相比 IPv4 的首部改进：</p><ul><li><strong>取消了首部校验和字段。</strong> 因为在数据链路层和传输层都会校验，因此 IPv6 直接取消了 IP 的校验。</li><li><strong>取消了分片/重新组装相关字段。</strong> 分片与重组是耗时的过程，IPv6 不允许在中间路由器进行分片与重组，这种操作只能在源与目标主机，这将大大提高了路由器转发的速度。</li><li><strong>取消选项字段。</strong> 选项字段不再是标准 IP 首部的一部分了，但它并没有消失，而是可能出现在 IPv6 首部中的「下一个首部」指出的位置上。删除该选项字段是的 IPv6 的首部成为固定长度的 <code>40</code> 字节。</li></ul><hr><h3 id="点心-——-IP-协议相关技术"><a href="#点心-——-IP-协议相关技术" class="headerlink" title="点心 —— IP 协议相关技术"></a>点心 —— IP 协议相关技术</h3><p>跟 IP 协议相关的技术也不少，接下来说说与 IP 协议相关的重要且常见的技术。</p><ul><li>DNS 域名解析</li><li>ARP 与 RARP 协议</li><li>DHCP 动态获取 IP 地址</li><li>NAT 网络地址转换</li><li>ICMP 互联网控制报文协议</li><li>IGMP 因特网组管理协</li></ul><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>我们在上网的时候，通常使用的方式域名，而不是 IP 地址，因为域名方便人类记忆。</p><p>那么实现这一技术的就是 <strong>DNS 域名解析</strong>，DNS 可以将域名网址自动转换为具体的 IP 地址。</p><blockquote><p>域名的层级关系</p></blockquote><p>DNS 中的域名都是用<strong>句点</strong>来分隔的，比如 <code>www.server.com</code>，这里的句点代表了不同层次之间的<strong>界限</strong>。</p><p>在域名中，<strong>越靠右</strong>的位置表示其层级<strong>越高</strong>。</p><p>毕竟域名是外国人发明，所以思维和中国人相反，比如说一个城市地点的时候，外国喜欢从小到大的方式顺序说起（如 XX 街道 XX 区 XX 市 XX 省），而中国则喜欢从大到小的顺序（如 XX 省 XX 市 XX 区 XX 街道）。</p><p>根域是在最顶层，它的下一层就是 com 顶级域，再下面是 server.com。</p><p>所以域名的层级关系类似一个树状结构：</p><ul><li>根 DNS 服务器</li><li>顶级域 DNS 服务器（com）</li><li>权威 DNS 服务器（server.com）</li></ul><p><img data-src="https://cdn.jonty.top/img/202309071021280.png" alt="DNS 树状结构"></p><p>根域的 DNS 服务器信息保存在互联网中所有的 DNS 服务器中。这样一来，任何 DNS 服务器就都可以找到并访问根域 DNS 服务器了。</p><p>因此，客户端只要能够找到任意一台 DNS 服务器，就可以通过它找到根域 DNS 服务器，然后再一路顺藤摸瓜找到位于下层的某台目标 DNS 服务器。</p><blockquote><p>域名解析的工作流程</p></blockquote><p>浏览器首先看一下自己的缓存里有没有，如果没有就向操作系统的缓存要，还没有就检查本机域名解析文件 <code>hosts</code>，如果还是没有，就会 DNS 服务器进行查询，查询的过程如下：</p><ol><li>客户端首先会发出一个 DNS 请求，问 <a href="http://www.server.com/">www.server.com</a> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。</li><li>本地域名服务器收到客户端的请求后，如果缓存里的表格能找到 <a href="http://www.server.com,则它直接返回/">www.server.com，则它直接返回</a> IP 地址。如果没有，本地 DNS 会去问它的根域名服务器：“老大， 能告诉我 <a href="http://www.server.com/">www.server.com</a> 的 IP 地址吗？” 根域名服务器是最高层次的，它不直接用于域名解析，但能指明一条道路。</li><li>根 DNS 收到来自本地 DNS 的请求后，发现后置是 .com，说：“<a href="http://www.server.com/">www.server.com</a> 这个域名归 .com 区域管理”，我给你 .com 顶级域名服务器地址给你，你去问问它吧。”</li><li>本地 DNS 收到顶级域名服务器的地址后，发起请求问“老二， 你能告诉我 <a href="http://www.server.com/">www.server.com</a>  的 IP 地址吗？”</li><li>顶级域名服务器说：“我给你负责 <a href="http://www.server.com/">www.server.com</a> 区域的权威 DNS 服务器的地址，你去问它应该能问到”。</li><li>本地 DNS 于是转向问权威 DNS 服务器：“老三，<a href="http://www.server.com对应的IP是啥呀？”">www.server.com对应的IP是啥呀？”</a> server.com 的权威 DNS 服务器，它是域名解析结果的原出处。为啥叫权威呢？就是我的域名我做主。</li><li>权威 DNS 服务器查询后将对应的 IP 地址 X.X.X.X 告诉本地 DNS。</li><li>本地 DNS 再将 IP 地址返回客户端，客户端和目标建立连接。</li></ol><p>至此，我们完成了 DNS 的解析过程。现在总结一下，整个过程我画成了一个图。</p><p><img data-src="https://cdn.jonty.top/img/202309071021815.png" alt="域名解析的工作流程"></p><p>DNS 域名解析的过程蛮有意思的，整个过程就和我们日常生活中找人问路的过程类似，<strong>只指路不带路</strong>。</p><h4 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h4><p>在传输一个 IP 数据报的时候，确定了源 IP 地址和目标 IP 地址后，就会通过主机「路由表」确定 IP 数据包下一跳。然而，网络层的下一层是数据链路层，所以我们还要知道「下一跳」的 MAC 地址。</p><p>由于主机的路由表中可以找到下一条的 IP 地址，所以可以通过 <strong>ARP 协议</strong>，求得下一跳的 MAC 地址。</p><blockquote><p>那么 ARP 又是如何知道对方 MAC 地址的呢？</p></blockquote><p>简单地说，ARP 是借助 <strong>ARP 请求与 ARP 响应</strong>两种类型的包确定 MAC 地址的。</p><p><img data-src="https://cdn.jonty.top/img/202309071021309.png" alt="ARP 广播"></p><ul><li>主机会通过<strong>广播发送 ARP 请求</strong>，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。</li><li>当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 <strong>ARP 响应包</strong>返回给主机。</li></ul><p>操作系统通常会把第一次通过 ARP 获取的 MAC 地址缓存起来，以便下次直接从缓存中找到对应 IP 地址的 MAC 地址。</p><p>不过，MAC 地址的缓存是有一定期限的，超过这个期限，缓存的内容将被清除。</p><blockquote><p>RARP 协议你知道是什么吗？</p></blockquote><p>ARP 协议是已知 IP 地址 求 MAC 地址，那 RARP 协议正好相反。</p><p>它是<strong>已知 MAC 地址求 IP 地址</strong>。例如将打印机服务器等小型嵌入式设备接入到网络时就经常会用得到。</p><p>通常这需要架设一台 <code>RARP</code> 服务器，在这个服务器上注册设备的 MAC 地址及其 IP 地址。然后再将这个设备接入到网络，接着：</p><ul><li>该设备会发送一条「我的 MAC 地址是XXXX，请告诉我，我的IP地址应该是什么」的请求信息。</li><li>RARP 服务器接到这个消息后返回「MAC地址为 XXXX 的设备，IP地址为 XXXX」的信息给这个设备。</li></ul><p>最后，设备就根据从 RARP 服务器所收到的应答信息设置自己的 IP 地址。</p><p><img data-src="https://cdn.jonty.top/img/202309071022117.png" alt="RARP"></p><h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><p>DHCP 在生活中我们是很常见的了，我们的电脑通常都是通过 DHCP 动态获取 IP 地址，大大省去了配 IP 信息繁琐的过程。</p><p>接下来，我们来看看我们的电脑是如何通过 4 个步骤的过程，获取到 IP 的。</p><p><img data-src="https://cdn.jonty.top/img/202309071022333.png" alt="DHCP 工作流程"></p><p>先说明一点，DHCP 客户端进程监听的是 68 端口号，DHCP 服务端进程监听的是 67 端口号。</p><p>DHCP 交互的 4 个步骤：</p><ul><li>客户端首先发起 <strong>DHCP 发现报文（DHCP DISCOVER）</strong> 的 IP 数据报，由于客户端没有 IP 地址，也不知道 DHCP 服务器的地址，所以使用的是 UDP <strong>广播</strong>通信，其使用的广播目的地址是 255.255.255.255（端口 67） 并且使用 0.0.0.0（端口 68） 作为源 IP 地址。DHCP 客户端将该 IP 数据报传递给链路层，链路层然后将帧广播到所有的网络中设备。</li><li>DHCP 服务器收到 DHCP 发现报文时，用 <strong>DHCP 提供报文（DHCP OFFER）</strong> 向客户端做出响应。该报文仍然使用 IP 广播地址 255.255.255.255，该报文信息携带服务器提供可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及 <strong>IP 地址租用期</strong>。</li><li>客户端收到一个或多个服务器的 DHCP 提供报文后，从中选择一个服务器，并向选中的服务器发送 <strong>DHCP 请求报文（DHCP REQUEST</strong>进行响应，回显配置的参数。</li><li>最后，服务端用 <strong>DHCP ACK 报文</strong>对 DHCP 请求报文进行响应，应答所要求的参数。</li></ul><p>一旦客户端收到 DHCP ACK 后，交互便完成了，并且客户端能够在租用期内使用 DHCP 服务器分配的 IP 地址。</p><p>如果租约的 DHCP IP 地址快期后，客户端会向服务器发送 DHCP 请求报文：</p><ul><li>服务器如果同意继续租用，则用 DHCP ACK 报文进行应答，客户端就会延长租期。</li><li>服务器如果不同意继续租用，则用 DHCP NACK 报文，客户端就要停止使用租约的 IP 地址。</li></ul><p>可以发现，DHCP 交互中，<strong>全程都是使用 UDP 广播通信</strong>。</p><blockquote><p>咦，用的是广播，那如果 DHCP 服务器和客户端不是在同一个局域网内，路由器又不会转发广播包，那不是每个网络都要配一个 DHCP 服务器？</p></blockquote><p>所以，为了解决这一问题，就出现了 <strong>DHCP 中继代理</strong>。</p><p>有了 DHCP 中继代理以后，<strong>对不同网段的 IP 地址分配也可以由一个 DHCP 服务器统一进行管理。</strong></p><p><img data-src="https://cdn.jonty.top/img/202309071022612.png" alt="DHCP 中继代理"></p><ul><li>DHCP 客户端会向 DHCP 中继代理发送 DHCP 请求包，而 DHCP 中继代理在收到这个广播包以后，再以<strong>单播</strong>的形式发给 DHCP 服务器。</li><li>服务器端收到该包以后再向 DHCP 中继代理返回应答，并由 DHCP 中继代理将此包转发给 DHCP 客户端 。</li></ul><p>因此，DHCP 服务器即使不在同一个链路上也可以实现统一分配和管理IP地址。</p><h4 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h4><p>IPv4 的地址是非常紧缺的，在前面我们也提到可以通过无分类地址来减缓 IPv4 地址耗尽的速度，但是互联网的用户增速是非常惊人的，所以 IPv4 地址依然有被耗尽的危险。</p><p>于是，提出了一个种<strong>网络地址转换 NAT</strong> 的方法，再次缓解了 IPv4 地址耗尽的问题。</p><p>简单的来说 NAT 就是在同个公司、家庭、教室内的主机对外部通信时，把私有 IP 地址转换成公有 IP 地址。</p><p><img data-src="https://cdn.jonty.top/img/202309071022779.png" alt="NAT"></p><blockquote><p>那不是 N 个 私有 IP 地址，你就要 N 个公有 IP 地址？这怎么就缓解了 IPv4 地址耗尽的问题？这不瞎扯吗？</p></blockquote><p>确实是，普通的 NAT 转换没什么意义。</p><p>由于绝大多数的网络应用都是使用传输层协议 TCP 或 UDP 来传输数据的。</p><p>因此，可以把 IP 地址 + 端口号一起进行转换。</p><p>这样，就用一个全球 IP 地址就可以了，这种转换技术就叫<strong>网络地址与端口转换 NAPT。</strong></p><p>很抽象？来，看下面的图解就能瞬间明白了。</p><p><img data-src="https://cdn.jonty.top/img/202309071023670.png" alt="NAPT">NAPT</p><p>图中有两个客户端 192.168.1.10 和 192.168.1.11 同时与服务器 183.232.231.172 进行通信，并且这两个客户端的本地端口都是 1025。</p><p>此时，<strong>两个私有 IP 地址都转换 IP 地址为公有地址 120.229.175.121，但是以不同的端口号作为区分。</strong></p><p>于是，生成一个 NAPT 路由器的转换表，就可以正确地转换地址跟端口的组合，令客户端 A、B 能同时与服务器之间进行通信。</p><p>这种转换表在 NAT 路由器上自动生成。例如，在 TCP 的情况下，建立 TCP 连接首次握手时的 SYN 包一经发出，就会生成这个表。而后又随着收到关闭连接时发出 FIN 包的确认应答从表中被删除。</p><blockquote><p>NAT 那么牛逼，难道就没缺点了吗？</p></blockquote><p>当然有缺陷，肯定没有十全十美的方案。</p><p>由于 NAT/NAPT 都依赖于自己的转换表，因此会有以下的问题：</p><ul><li>外部无法主动与 NAT 内部服务器建立连接，因为 NAPT 转换表没有转换记录。</li><li>转换表的生产与转换操作都会产生性能开销。</li><li>通信过程中，如果 NAT 路由器重启了，所有的 TCP 连接都将被重置。</li></ul><blockquote><p>如何解决 NAT 潜在的问题呢？</p></blockquote><p>解决的方法主要两种方法。</p><p><em>第一种就是改用 IPv6</em></p><p>IPv6 可用范围非常大，以至于每台设备都可以配置一个公有 IP 地址，就不搞那么多花里胡哨的地址转换了，但是 IPv6 普及速度还需要一些时间。</p><p><em>第二种 NAT 穿透技术</em></p><p>NAT 穿越技术拥有这样的功能，它能够让网络应用程序主动发现自己位于 NAT 设备之后，并且会主动获得 NAT 设备的公有 IP，并为自己建立端口映射条目，注意这些都是 NAT设备后的应用程序自动完成的。</p><p>也就是说，在 NAT 穿越技术中，NAT 设备后的应用程序处于主动地位，它已经明确地知道 NAT 设备要修改它外发的数据包，于是它主动配合 NAT 设备的操作，主动地建立好映射，这样就不像以前由 NAT 设备来建立映射了。</p><p>说人话，就是客户端主动从 NAT 设备获取公有 IP 地址，然后自己建立端口映射条目，然后用这个条目对外通信，就不需要 NAT 设备来进行转换了。</p><h4 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h4><p>ICMP 全称是 <strong>Internet Control Message Protocol</strong>，也就是<strong>互联网控制报文协议</strong>。</p><p>里面有个关键词 —— <strong>控制</strong>，如何控制的呢？</p><p>网络包在复杂的网络传输环境里，常常会遇到各种问题。</p><p>当遇到问题的时候，总不能死个不明不白，没头没脑的作风不是计算机网络的风格。所以需要传出消息，报告遇到了什么问题，这样才可以调整传输策略，以此来控制整个局面。</p><blockquote><p>ICMP 功能都有啥？</p></blockquote><p><code>ICMP</code> 主要的功能包括：<strong>确认 IP 包是否成功送达目标地址、报告发送过程中 IP 包被废弃的原因和改善网络设置等。</strong></p><p>在 <code>IP</code> 通信中如果某个 <code>IP</code> 包因为某种原因未能达到目标地址，那么这个具体的原因将<strong>由 ICMP 负责通知</strong>。</p><p><img data-src="https://cdn.jonty.top/img/202309071023492.png" alt="ICMP 目标不可达消息"></p><p>如上图例子，主机 <code>A</code> 向主机 <code>B</code> 发送了数据包，由于某种原因，途中的路由器 <code>2</code> 未能发现主机 <code>B</code> 的存在，这时，路由器 <code>2</code> 就会向主机 <code>A</code> 发送一个 <code>ICMP</code> 目标不可达数据包，说明发往主机 <code>B</code> 的包未能成功。</p><p>ICMP 的这种通知消息会使用 <code>IP</code> 进行发送 。</p><p>因此，从路由器 <code>2</code> 返回的 ICMP 包会按照往常的路由控制先经过路由器 <code>1</code> 再转发给主机 <code>A</code> 。收到该 ICMP 包的主机 <code>A</code> 则分解 ICMP 的首部和数据域以后得知具体发生问题的原因。</p><blockquote><p>ICMP 类型</p></blockquote><p>ICMP 大致可以分为两大类：</p><ul><li>一类是用于诊断的查询消息，也就是「<strong>查询报文类型</strong>」</li><li>另一类是通知出错原因的错误消息，也就是「<strong>差错报文类型</strong>」</li></ul><p><img data-src="https://cdn.jonty.top/img/202309071023450.png" alt="常见的 ICMP 类型"></p><h4 id="IGMP"><a href="#IGMP" class="headerlink" title="IGMP"></a>IGMP</h4><p>ICMP 跟 IGMP 是一点关系都没有的，就好像周杰与周杰伦的区别，大家不要混淆了。</p><p>在前面我们知道了组播地址，也就是 D 类地址，既然是组播，那就说明是只有一组的主机能收到数据包，不在一组的主机不能收到数组包，怎么管理是否是在一组呢？那么，就需要 <code>IGMP</code> 协议了。</p><p><img data-src="https://cdn.jonty.top/img/202309071023807.png" alt="组播模型"></p><p><strong>IGMP 是因特网组管理协议，工作在主机（组播成员）和最后一跳路由之间</strong>，如上图中的蓝色部分。</p><ul><li>IGMP 报文向路由器申请加入和退出组播组，默认情况下路由器是不会转发组播包到连接中的主机，除非主机通过 IGMP 加入到组播组，主机申请加入到组播组时，路由器就会记录 IGMP 路由器表，路由器后续就会转发该组播地址的数据包了。</li><li>IGMP 报文采用 IP 封装，IP 头部的协议号为 2，而且 TTL 字段值通常 为 1，因为 IGMP 是工作在主机与连接的路由器之间。</li></ul><blockquote><p>IGMP 工作机制</p></blockquote><p>IGMP 分为了三个版本分别是，IGMPv1、IGMPv2、IGMPv3。</p><p>接下来，以 <code>IGMPv2</code> 作为例子，说说<strong>常规查询与响应和离开组播组</strong>这两个工作机制。</p><p><em>常规查询与响应工作机制</em></p><p><img data-src="https://cdn.jonty.top/img/202309071023560.png" alt="IGMP 常规查询与响应工作机制"></p><ol><li>路由器会周期性发送目的地址为 <code>224.0.0.1</code>（表示同一网段内所有主机和路由器） <strong>IGMP 常规查询报文；</strong></li><li>主机1 和 主机 3 收到这个查询，随后会启动「报告延迟计时器」，计时器的时间是随机的，通常是 0~10 秒，计时器超时后主机就会发送 <strong>IGMP 成员关系报告报文</strong>（源 IP 地址为自己主机的 IP 地址，目的 IP 地址为组播地址）。如果在定时器超时之前，收到同一个组内的其他主机发送的成员关系报告报文，则自己不再发送，这样可以减少网络中多余的 IGMP 报文数量；</li><li>路由器收到主机的成员关系报告报文后，就会在 IGMP 路由表中加入该组播组，后续网络中一旦该组播地址的数据到达路由器，它会把数据包转发出去；</li></ol><p><em>离开组播组工作机制</em></p><p>离开组播组的情况一，网段中仍有该组播组：</p><p><img data-src="https://cdn.jonty.top/img/202309071024282.png" alt="IGMPv2 离开组播组工作机制 情况1"></p><ol><li>主机 1 要离开组 224.1.1.1，发送 IGMPv2 离组报文，报文的目的地址是 224.0.0.2（表示发向网段内的所有路由器）；</li><li>路由器收到该报文后，以 1 秒为间隔连续发送 IGMP 特定组查询报文（共计发送 2 个），以便确认该网络是否还有 224.1.1.1 组的其他成员；</li><li>主机 3 仍然是组 224.1.1.1 的成员，因此它立即响应这个特定组查询。路由器知道该网络中仍然存在该组播组的成员，于是继续向该网络转发 224.1.1.1 的组播数据包；</li></ol><p>离开组播组的情况二，网段中没有该组播组：</p><p><img data-src="https://cdn.jonty.top/img/202309071024481.png" alt="IGMPv2 离开组播组工作机制 情况2"></p><ol><li>主机 1 要离开组播组 224.1.1.1，发送 IGMP 离组报文；</li><li>路由器收到该报文后，以 1 秒为间隔连续发送 IGMP 特定组查询报文（共计发送 2 个）。此时在该网段内，组 224.1.1.1 已经没有其他成员了，因此没有主机响应这个查询；</li><li>一定时间后，路由器认为该网段中已经没有 224.1.1.1 组播组成员了，将不会再向这个网段转发该组播地址的数据包；</li></ol><hr><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p>[1] 计算机网络-自顶向下方法.陈鸣 译.机械工业出版社</p><p>[2] TCP/IP详解 卷1：协议.范建华 译.机械工业出版社</p><p>[3] 图解TCP/IP.竹下隆史.人民邮电出版社</p>]]></content>
    
    
    <summary type="html">关于 IP 分类地址、子网划分等的文章</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>【分享】前端Chrome调试</title>
    <link href="https://jonty.top/2023/07/13/chrome-debugging-tips/"/>
    <id>https://jonty.top/2023/07/13/chrome-debugging-tips/</id>
    <published>2023-07-13T03:03:53.000Z</published>
    <updated>2023-07-13T03:05:25.592Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/151257-20230623112938457-597264579.png" alt="image.png"></p><p>Chrome浏览器调试工具的核心功能：</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938315-1220135849.jpg" alt="img"></p><blockquote><p>🥷🏻注：本文测试、截图均为Edge浏览器（内核是Chromium），浏览器内核可了解《<a href="https://www.yuque.com/kanding/ktech/fh36v0">有哪些浏览器/内核？</a>》</p></blockquote><h2 id="基础操作汇总"><a href="#基础操作汇总" class="headerlink" title="基础操作汇总"></a>基础操作汇总</h2><table><thead><tr><th align="left"><strong>操作类型</strong></th><th align="left"><strong>快捷键/说明</strong></th></tr></thead><tbody><tr><td align="left">切换浏览器标签</td><td align="left">🔸 <code>Ctrl+1到8</code>切换到对应序号的浏览器标签<br/> 🔸 <code>Ctrl+PgUp/PgDn</code>标签页左右切换</td></tr><tr><td align="left">浏览器全屏</td><td align="left"><code>F11</code> (<code>⌘ + shift + F</code> Mac)</td></tr><tr><td align="left">打开调试模式</td><td align="left">🔸 <code>F12</code>，<code>Ctrl + Shift + I</code> (Windows) 或<code> Cmd + Opt + I</code> (Mac) <br/>🔸 页面右键菜单“检查”，浏览器菜单“开发者工具”</td></tr><tr><td align="left">切换调试工具位置（下面、右边）</td><td align="left"><code>ctrl + shift + D</code> (<code>⌘ + shift + D</code> Mac)</td></tr><tr><td align="left">切换 DevTools 的面板标签</td><td align="left"><code>ctrl + [</code> 和 <code>ctrl + ]</code>左右切换调试工具面板</td></tr><tr><td align="left">内容搜索查找</td><td align="left"><code>Ctrl+F</code>：元素、控制台、源代码、网络都支持搜索查找</td></tr><tr><td align="left">使用命令Command面板</td><td align="left"><code>Ctrl] + [Shift] + [P]</code> （Mac：<code> [⌘] + [Shift]+ [P]</code>） 类似VSCode的命令面板，有大量的隐藏功能，可以在这里搜索使用</td></tr><tr><td align="left">复制元素</td><td align="left">🔸 元素面板：选中元素》<code>Ctrl+C</code> <br/>🔸 元素面板：选中元素》右键菜单》复制元素 <br/>🔸 <code>copy($0)</code> 控制台中代码复制当前选中元素</td></tr><tr><td align="left">控制台：快速访问当前元素’$0’</td><td align="left"><code>$0</code>代表在元素面板中选中元素，<code>$1</code>是上一个，支持到<code>$4</code></td></tr><tr><td align="left">控制台：全局<code>copy</code>方法</td><td align="left">复制任何对象到剪切板，<code>copy(window.location)</code></td></tr><tr><td align="left">控制台：queryObjects(Type)</td><td align="left">查询指定类型（构造器）的对象实例有哪些</td></tr><tr><td align="left">控制台：保存堆栈信息( Stack trace )</td><td align="left">报错信息可以右键另存为文件，保存完整堆栈信息</td></tr><tr><td align="left">控制台：<code>$</code>、<code>$$</code>查询Dom元素</td><td align="left">- <code>$</code> = <code>document.querySelector</code> - <code>$$</code> = <code>document.querySelectorAll</code></td></tr><tr><td align="left">Store as global（存储为全局变量）</td><td align="left">🔸 控制台（右键）：把一个对象设置为全局变量，自动命名为<code>temp*</code> <br/>🔸 元素面板（右键）：把一个元素设置全局变量，同上</td></tr><tr><td align="left">元素：<code>h</code>快速隐藏、显示该元素</td><td align="left">选中元素，按下<code>h</code>快速隐藏、显示该元素。</td></tr><tr><td align="left">元素：移动元素</td><td align="left">🔸 鼠标拖动到任意位置 <br/>🔸 上下移动，<code>[ctrl] + [⬆]</code> / <code>[ctrl] + [⬇]</code> （<code>[⌘] + [⬆] / [⌘] + [⬇]</code>on Mac）</td></tr></tbody></table><p>🔸<strong>Store as global（存储为全局变量）</strong>：类似copy方法，将一个对象保存为全局变量，变量命名依次为<code>temp1</code>、<code>temp2</code></p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938377-948109294.png" alt="image.png"></p><p>**🔸保存堆栈信息( Stack trace )**：错误堆栈信息另存为文件，保存完整堆栈信息。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938299-1173868388.png" alt="image.png"></p><p><strong>🔸Command面板</strong>：同VSCode的命令面板，可以找到调试工具的所有的（隐藏）功能。<code>Ctrl] + [Shift] + [P]</code> （Mac：<code>[⌘] + [Shift]+ [P]</code>）</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938237-1437141754.png" alt="image.png"></p><ul><li><strong>设置主题</strong>：打开Command面板，搜索“主题”，可以切换多种主题</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938406-1112736968.png" alt="image.png"></p><ul><li><strong>分析代码的覆盖率</strong>：打开Command面板，如下图搜索“覆盖”，分析首次页面加载过程中哪些代码执行了，那些没有执行，输出一个报告。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938411-1934457543.png" alt="image.png"></p><p>选择文件可进一步查看代码的使用分析，红色 = 尚未执行，青蓝色 = 至少执行了一次。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938364-1323536527.png" alt="image.png"></p><p><strong>🔸元素截图</strong>：输出指定元素的截图，包含隐藏滚动的内容，这个功能挺好用的。</p><ul><li>通过Command面板：搜索“截图”，全屏截图、指定节点截图。</li><li>元素面板中，选中元素》右键菜单》“捕获节点屏幕截图”。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938298-493151014.png" alt="image.png"></p><h2 id="元素面板（Element）"><a href="#元素面板（Element）" class="headerlink" title="元素面板（Element）"></a>元素面板（Element）</h2><p>可以自由调试DOM、CSS样式，使用评率级高：⭐⭐⭐⭐⭐。</p><ul><li><strong>DOM树</strong>：左侧为DOM元素树，支持多种操作，如编辑、删除、新增、复制DOM元素，更多可查看右键菜单。</li><li><strong>样式</strong>：选中元素的样式，可编辑、添加CSS样式，实时预览。</li><li><strong>已计算</strong>：选中元素计算的样式值。</li><li><strong>布局</strong>：grid布局、flex布局调试。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623113942060-636325101.png" alt="image"></p><h3 id="CSS可视化编辑器"><a href="#CSS可视化编辑器" class="headerlink" title="CSS可视化编辑器"></a>CSS可视化编辑器</h3><p>可视化的颜色、贝塞尔曲线、阴影编辑器，所见即所得，挺好用！</p><ul><li><strong>颜色编辑器</strong>：只要是颜色属性，都可以点击色块按钮可视化编辑颜色，支持拖动设置颜色、取色、设置对比度。</li><li><strong>Grid、Flex布局编辑器</strong>：当使用弹性布局Grid、Flex时，支持可视化编辑布局对齐方式。</li><li><strong>阴影编辑器</strong>：阴影<code>shadow</code>属性上，会出现编辑器按钮，可视化编辑阴影效果。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938265-495918130.png" alt="image.png"></p><ul><li><strong>贝塞尔曲线编辑器</strong>：在动画<code>transition</code>、<code>animation</code>中会用到贝塞尔曲线函数（缓动函数）。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938307-631688298.png" alt="image.png"></p><h3 id="强制激活伪类"><a href="#强制激活伪类" class="headerlink" title="强制激活伪类"></a>强制激活伪类</h3><p>强制激活元素的伪类效果。</p><ul><li>选择Dom节点右键“强制状态”。</li><li>如下图CSS样式中“切换元素状态”。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938340-1528296991.png" alt="image.png"></p><h3 id="DOM断点"><a href="#DOM断点" class="headerlink" title="DOM断点"></a>DOM断点</h3><p>选中DOM元素，右键设置中断点，可以在元素更改（JS代码修改DOM）时触发断点。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938147-1545031101.png" alt="image.png"></p><p>添加后可以在源代码中查看到已添加的DOM断点，或者元素面板中的“DOM断点”。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938405-2021055934.png" alt="image.png"></p><h2 id="控制台面板（Console）"><a href="#控制台面板（Console）" class="headerlink" title="控制台面板（Console）"></a>控制台面板（Console）</h2><p>主要功能就是调试JavaScript代码，是比较常用的调试工具，使用频率很高：⭐⭐⭐⭐⭐</p><ul><li><strong>运行代码</strong>：可执行任意JS代码，包括调用页面已有的JS对象、函数。</li><li><strong>console输出</strong>：代码中的Console、异常错误都会在这里输出。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938378-1572840200.png" alt="image.png"></p><h3 id="console函数"><a href="#console函数" class="headerlink" title="console函数"></a>console函数</h3><p>用console函数输出变量，是比较常用的调试技巧，console的常用函数：</p><table><thead><tr><th align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console"><strong>console</strong></a><strong>函数</strong></th><th align="left"><strong>说明</strong></th></tr></thead><tbody><tr><td align="left">console.<strong>log</strong>(str)</td><td align="left">控制台输出一条消息</td></tr><tr><td align="left">console.<strong>error</strong>(str);</td><td align="left">打印一条错误信息，类似的还有<code>info</code>、<code>warn</code></td></tr><tr><td align="left">console.<strong>table</strong>(data [, columns])</td><td align="left">将数据以表格的形式显示，很实用，data为数组或对象，第二个参数（数组）可指定输出的列</td></tr><tr><td align="left">console.<strong>dir</strong>(object)</td><td align="left">树形方式打印对象，特别是DOM对象非常实用</td></tr><tr><td align="left">console.<strong>assert</strong>(false, ‘false’)</td><td align="left">断言输出，为<code>false</code>才会输出</td></tr><tr><td align="left">console.<strong>trace</strong>()</td><td align="left">输出当前位置的执行堆栈，用断点会更实用一些。</td></tr><tr><td align="left">console.<strong>time</strong>(label)</td><td align="left">计时器，可用来计算耗时（毫秒），三个函数配合使用：<strong>time</strong>(开始计时) &gt; <strong>timeLog</strong>(计时) &gt; <strong>timeEnd</strong>(结束)</td></tr><tr><td align="left">console.<strong>clear</strong>()</td><td align="left">清空控制台，并输出 Console was cleared。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;log&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">&#x27;info&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">&#x27;warn&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.table([<span class="string">&quot;sam&quot;</span>, <span class="string">&quot;egan&quot;</span>, <span class="string">&quot;kettle&quot;</span>])</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了！！！&#x27;</span>)</span><br></pre></td></tr></table></figure><p>控制台输出效果，右侧链接为对应JS代码的链接。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938407-1186520163.png" alt="image.png"></p><p>用<code>console.time()</code>来计算代码的耗时，参数为计时器命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> u = &#123; <span class="attr">name</span>: <span class="string">&#x27;sam&#x27;</span>, <span class="attr">age</span>: i &#125;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算一个函数的耗时</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;sum&#x27;</span>) <span class="comment">// 开始计时</span></span><br><span class="line"><span class="keyword">const</span> total = sum(<span class="number">100000</span>);</span><br><span class="line"><span class="built_in">console</span>.timeLog(<span class="string">&#x27;sum&#x27;</span>);  <span class="comment">// 计时：sum: 4.43994140625 ms</span></span><br><span class="line"><span class="keyword">const</span> total2 = sum(<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&#x27;sum&#x27;</span>);  <span class="comment">// 计时：sum: 5.0419921875 ms</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; total &#125;);  <span class="comment">//&#123;total: 5000050000&#125;</span></span><br></pre></td></tr></table></figure><h3 id="增强log"><a href="#增强log" class="headerlink" title="增强log"></a>增强log</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">100</span>, y = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x, y); <span class="comment">// 100 200</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; x, y &#125;); <span class="comment">// &#123;x: 100, y: 200&#125;</span></span><br><span class="line"><span class="built_in">console</span>.table(&#123; x, y &#125;); </span><br></pre></td></tr></table></figure><p>如上代码，经常我们会输出一些变量值，如果直接输出值，则不知道值对应的变量。这时可以用字面量对象，输出的可读性立马就提升了，再加上<code>console.table</code>就更完美了。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938292-321740182.png" alt="image.png"></p><h3 id="自定义log样式：占位符"><a href="#自定义log样式：占位符" class="headerlink" title="自定义log样式：占位符"></a>自定义log样式：占位符</h3><p><code>console</code>函数支持的占位符：</p><table><thead><tr><th align="left">占位符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>%c</code></td><td align="left">CSS样式占位符，值就是CSS样式，如下示例，可用来自定义log的样式</td></tr><tr><td align="left"><code>%o</code> or <code>%O</code></td><td align="left">打印 JavaScript 对象。在审阅器点击对象名字可展开更多对象的信息。</td></tr><tr><td align="left"><code>%d</code> or <code>%i</code></td><td align="left">打印整数。支持数字格式化。例如，console.log(“Foo %.2d”, 1.1) 会输出有先导 0 的两位有效数字：Foo 01。</td></tr><tr><td align="left"><code>%s</code></td><td align="left">打印字符串。</td></tr><tr><td align="left"><code>%f</code></td><td align="left">打印浮点数。支持格式化，比如 console.log(“Foo %.2f”, 1.1) 会输出两位小数：Foo 1.10</td></tr></tbody></table><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938195-1563619369.png" alt="image.png"></p><h3 id="监听函数"><a href="#监听函数" class="headerlink" title="监听函数"></a>监听函数</h3><p>通过如下（调试工具）的全局函数可监听一个函数、事件的执行。</p><table><thead><tr><th align="left">函数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><strong>monitor</strong>( function )</td><td align="left">监听一个函数，当被监听函数执行的时候，会打印被调用信息</td></tr><tr><td align="left"><strong>monitorEvents</strong> ( event )</td><td align="left">监听一个事件，当事件被触发时打印触发事件日志</td></tr></tbody></table><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938184-1929017682.png" alt="image.png"></p><h3 id="监听变量：活动表达式"><a href="#监听变量：活动表达式" class="headerlink" title="监听变量：活动表达式"></a>监听变量：活动表达式</h3><p>一个不错的小功能，点击下图中的眼睛图标，相当于添加了一个动态表达式，然后实时监控（显示）该表达式的值。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938226-1635124708.png" alt="image.png"></p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938696-1137434295.webp" alt="img"></p><h2 id="源代码面板（Sources）"><a href="#源代码面板（Sources）" class="headerlink" title="源代码面板（Sources）"></a>源代码面板（Sources）</h2><p>顾名思义，管理网页所有的源代码文件，包括JS、CSS、图片等资源，经常就是在这里断点调试JS代码，使用评率中：⭐⭐⭐⭐。</p><p>在调试模式下可以查看（鼠标悬浮在变量上）变量值、上下文作用域、函数调用堆栈信息。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623114401947-402092485.png" alt="image"></p><ul><li><strong>① 页面资源目录</strong>：页面涉及的所有资源（树）。</li><li><strong>② 源代码</strong>：文件源代码，可以在这里添加断点调试JS代码，如果想编辑在线JS代码，也是可以的，详见后文。</li><li><strong>③ Debug工具栏</strong>：断点调试的操作工具，可以控制暂停、继续、单步…执行代码。</li><li><strong>④ 断点调试器</strong>：这里包含多个断点调试器：</li></ul><blockquote><ul><li><strong>监视（Watch）</strong>：可添加对变量的监视。</li><li><strong>断点（Breakpoints）</strong>：所有添加的断点，可在这里编辑、删除管理。</li><li><strong>作用域（Scope）</strong>：当前代码上下文的作用域，含闭包。</li><li><strong>调用堆栈（Call Stack</strong>）：当前函数的调用堆栈，推荐参考《<a href="https://www.yuque.com/kanding/ktech/jsfunctoin2#cuhoC">JavaScript函数(2)原理{深入}执行上下文</a>》。</li><li><strong>XHR/提取断点</strong>：可以在这里添加对AJAX请求（XHR、Fetch）的断点，添加URL地址即可。</li><li><strong>DOM断点</strong>：在元素页面添加的DOM断点会在这里显示。</li></ul></blockquote><h3 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h3><p>如下图，在源代码行号位置添加断点。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938272-1731314310.png" alt="image.png"></p><ul><li><strong>添加断点（Add breakpoint）</strong>：添加一个普通断点，最左侧行号处，点击添加断点，或者右键菜单。</li></ul><p>也可以在JS代码中设置断点，关键字：<code>debugger</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">debugger</span> <span class="comment">// 会在这里断点</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;debugger&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>添加条件断点（Add conditional breakpoint）</strong>：添加一个条件断点，符合条件断点才会生效，条件可使用当前代码上下文中的变量。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938383-147289909.png" alt="image.png"></p><ul><li><strong>添加记录点（Add logpoint）</strong>：添加一个日志打印，打印当前代码环境的变量，非常方便，不用在源码下添加<code>console</code>了。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938406-1818916486.png" alt="image.png"></p><h3 id="调试线上代码：本地工作区"><a href="#调试线上代码：本地工作区" class="headerlink" title="调试线上代码：本地工作区"></a>调试线上代码：本地工作区</h3><p>如果是线上的环境，能不能直接修改源代码（JS、CSS）调试呢？—— 可以的。思路就是创建本地的JS副本，页面加载本地的JS文件，就可以在本地JS文件上修改了。</p><p><strong>① 创建本地工作目录</strong>：</p><ul><li>如下图，源代码下面找到“覆盖（Override）”。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938255-79717952.png" alt="image.png"></p><ul><li>然后点击“选择替代文件夹”，添加一个本地空的文件夹，作为本地工作目录。</li><li>添加后要注意要确认授权。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938618-621276412.png" alt="image.png"></p><p><strong>② 创建源代码的本地副本</strong>：选择需要修改的源代码右键“保存以备替代”，就会在本地目录创建副本文件，网页使用本地的JS文件。</p><ul><li>创建的本地副本，可以在“覆盖”下看到，也可以在本地文件夹下看到。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938458-1154512196.png" alt="image.png"></p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938278-1914798126.png" alt="image.png"></p><p><strong>③ 编辑代码</strong>：该JS文件就可以直接在源代码中编辑修改了，实时生效。</p><ul><li>CSS、HTML、JavaScript都支持。</li><li>可以在浏览器的源代码中修改，也可以本地其他工具中打开编辑。</li></ul><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938469-1983085199.png" alt="image.png"></p><h2 id="网络面板（Network）"><a href="#网络面板（Network）" class="headerlink" title="网络面板（Network）"></a>网络面板（Network）</h2><p><img data-src="https://cdn.jonty.top/img/151257-20230623114556140-1411307077.png" alt="image"></p><p>工具栏中两个比较实用的小功能：禁用缓存、模拟弱网环境。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938271-33800824.png" alt="image.png"></p><p>点击请求的资源项，可以查看详细的请求、响应数据，常用于服务端接口的联调。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623114634987-834374801.png" alt="image"></p><p>还可以编辑参数，重新发起请求</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938615-1015835259.png" alt="image.png"></p><h2 id="性能面板（Performance）"><a href="#性能面板（Performance）" class="headerlink" title="性能面板（Performance）"></a>性能面板（Performance）</h2><p>先录制，后分析，分析网络、CPU、内存、渲染FPS帧率，用于定位、解决页面性能问题。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623114704972-512414378.png" alt="image"></p><blockquote><p><strong>🚩特别提示</strong>：调试性能建议在<strong>无痕模式</strong>下进行，尽量避浏览器插件的影响。包括其他异常Bug的调试，也要考虑浏览器插件问题，之前就遇到过类似问题，页面上一个Bug怎么也复现不了，几经波折才发现是测试机上的油猴插件的影响。</p></blockquote><p><strong>🔸性能监视器</strong>（Performance monitor）面板可以<strong>实时</strong>的监控页面性能参数。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938470-616843507.png" alt="image.png"></p><p><strong>🔸Lighthouse</strong>，这个就很厉害了，对页面进行综合分析，包括性能、PWA（Progressive Web App，渐进式Web应用）、SEO、无障碍访问等，分析完后产出报告，给出得分，还给出了页面改进建议。</p><p><img data-src="https://cdn.jonty.top/img/151257-20230623112938471-1405739588.png" alt="image.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>掘金小册：<a href="https://juejin.cn/book/6844733783166418958">你不知道的 Chrome 调试技巧</a> ，<a href="https://dendoink.github.io/daydream/docs/chrome-tricks/index">开源版</a></li><li>掘金小册：<a href="https://juejin.cn/course/bytetech/7180922988034785336/section/7181029728822755385">前端开发调试之 PC 端调试</a></li><li><a href="https://bytedance.feishu.cn/file/boxcnAGLgshQ1EKi7ACwx4WI9vc">前端必须知道的开发调试知识.pptx</a></li><li><a href="https://www.yuque.com/kanding/ktech/fh36v0">有哪些浏览器/内核？</a></li><li><a href="https://www.yuque.com/kanding/ktech/jsfunctoin2#cuhoC">JavaScript函数(2)原理{深入}执行上下文</a></li></ul><blockquote><p><strong>©️版权申明</strong>：版权所有@安木夕，本文内容仅供学习，欢迎指正、交流，转载请注明出处！<a href="https://www.yuque.com/kanding/ktech/mh8eqzgf6wnbphuv#q18bL"><em>原文编辑地址-语雀</em></a></p></blockquote>]]></content>
    
    
    <summary type="html">前端Chrome调试技巧汇总</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
    <category term="Web Debug" scheme="https://jonty.top/tags/Web-Debug/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建私有Gitlab</title>
    <link href="https://jonty.top/2023/07/07/ubuntu-docker-deploy-gitlab/"/>
    <id>https://jonty.top/2023/07/07/ubuntu-docker-deploy-gitlab/</id>
    <published>2023-07-07T01:39:28.000Z</published>
    <updated>2023-07-07T08:24:58.527Z</updated>
    
    <content type="html"><![CDATA[<p><img data-src="https://cdn.jonty.top/img/R-C.ecb6c01c3a955a63337b4c624a15276f.png" alt="gitlab"></p><div class="note info"><p>GitLab is the only place where enterprises build mission‑critical software.</p></div><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/gitlab/config/ssl</span><br><span class="line">mkdir /root/gitlab/logs</span><br><span class="line">mkdir /root/gitlab/data</span><br></pre></td></tr></table></figure><p>阿里云申请ssl证书，下载Nginx版本</p><p>解压到<code>/root/gitlab/config/ssl</code>目录</p><p><code>pem</code>后缀改成<code>crt</code></p><p><img data-src="https://cdn.jonty.top/img/image-20230627171654621.png" alt="image-20230627171654621"></p><p><img data-src="https://cdn.jonty.top/img/image-20230707154229073.png" alt="image-20230707154229073"></p><p>创建<code>docker-compose.yaml</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  gitlab:</span><br><span class="line">    environment:</span><br><span class="line">      GITLAB_OMNIBUS_CONFIG: |</span><br><span class="line">        external_url <span class="string">&#x27;https://gitlab.jonty.top&#x27;</span></span><br><span class="line">        nginx[<span class="string">&#x27;listen_port&#x27;</span>] = 443</span><br><span class="line">        nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/gitlab.jonty.top.crt&quot;</span></span><br><span class="line">        nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/gitlab.jonty.top.key&quot;</span></span><br><span class="line"></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465</span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;501211312@qq.com&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;your_passwork_key&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">false</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;gitlab.jonty.top&#x27;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    container_name: gitlab</span><br><span class="line">    ports:</span><br><span class="line">      - 80:80</span><br><span class="line">      - 443:443</span><br><span class="line">    image: gitlab/gitlab-ee:latest</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /root/gitlab/config:/etc/gitlab</span><br><span class="line">      - /root/gitlab/logs:/var/<span class="built_in">log</span>/gitlab</span><br><span class="line">      - /root/gitlab/data:/var/opt/gitlab</span><br><span class="line">    networks:</span><br><span class="line">      - internal-network</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  internal-network:</span><br><span class="line">    external: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line">[root@VM-0-5-centos gitlab]<span class="comment"># docker compose up -d</span></span><br><span class="line">[+] Running 1/1</span><br><span class="line"> ✔ Container gitlab  Started </span><br></pre></td></tr></table></figure><p>进入容器查看初始密码，账号为：root</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">cat /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230707155449732.png" alt="image-20230707155449732"></p><p><img data-src="https://cdn.jonty.top/img/image-20230707155527280.png" alt="image-20230707155527280"></p><h2 id="生成许可证"><a href="#生成许可证" class="headerlink" title="生成许可证"></a>生成许可证</h2><blockquote><p>安装Ruby:<a href="https://www.cnblogs.com/livelab/p/12960670.html">如何在Ubuntu 20.04上安装Ruby2.7.0 - GlaryJoker - 博客园 (cnblogs.com)</a></p></blockquote><p>安装Ruby</p><p>版本大于2.7</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ruby-full</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">root@gitlab:/home/jonty/gitlab<span class="comment"># ruby -v</span></span><br><span class="line">ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-linux-gnu]</span><br></pre></td></tr></table></figure><p>安装gitlab-license</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem install gitlab-license</span><br></pre></td></tr></table></figure><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/gitlab/license &amp; <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><p>创建<code>license.rb</code>文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">require &quot;openssl&quot;</span><br><span class="line">require &quot;gitlab/license&quot;</span><br><span class="line">key<span class="built_in">_</span>pair = OpenSSL::PKey::RSA.generate(2048)</span><br><span class="line">File.open(&quot;license<span class="built_in">_</span>key&quot;, &quot;w&quot;) &#123; |f| f.write(key<span class="built_in">_</span>pair.to<span class="built_in">_</span>pem) &#125;</span><br><span class="line">public<span class="built_in">_</span>key = key<span class="built_in">_</span>pair.public<span class="built_in">_</span>key</span><br><span class="line">File.open(&quot;license<span class="built_in">_</span>key.pub&quot;, &quot;w&quot;) &#123; |f| f.write(public<span class="built_in">_</span>key.to<span class="built_in">_</span>pem) &#125;</span><br><span class="line">private<span class="built_in">_</span>key = OpenSSL::PKey::RSA.new File.read(&quot;license<span class="built_in">_</span>key&quot;)</span><br><span class="line">Gitlab::License.encryption<span class="built_in">_</span>key = private<span class="built_in">_</span>key</span><br><span class="line">license = Gitlab::License.new</span><br><span class="line">license.licensee = &#123;</span><br><span class="line">&quot;Name&quot; =&gt; &quot;Jonty&quot;,</span><br><span class="line">&quot;Company&quot; =&gt; &quot;Jonty.tEd&quot;,</span><br><span class="line">&quot;Email&quot; =&gt; &quot;gitlab@jonty.top&quot;,</span><br><span class="line">&#125;</span><br><span class="line">license.starts<span class="built_in">_</span>at = Date.new(2021, 1, 1) <span class="params">#</span> 开始时间</span><br><span class="line">license.expires<span class="built_in">_</span>at = Date.new(2050, 1, 1) <span class="params">#</span> 结束时间</span><br><span class="line">license.notify<span class="built_in">_</span>admins<span class="built_in">_</span>at = Date.new(2049, 12, 1)</span><br><span class="line">license.notify<span class="built_in">_</span>users<span class="built_in">_</span>at = Date.new(2049, 12, 1)</span><br><span class="line">license.block<span class="built_in">_</span>changes<span class="built_in">_</span>at = Date.new(2050, 1, 1)</span><br><span class="line">license.restrictions = &#123;</span><br><span class="line">active<span class="built_in">_</span>user<span class="built_in">_</span>count: 10000,</span><br><span class="line">&#125;</span><br><span class="line">puts &quot;License:&quot;</span><br><span class="line">puts license</span><br><span class="line">data = license.export</span><br><span class="line">puts &quot;Exported license:&quot;</span><br><span class="line">puts data</span><br><span class="line">File.open(&quot;GitLabBV.gitlab-license&quot;, &quot;w&quot;) &#123; |f| f.write(data) &#125;</span><br><span class="line">public<span class="built_in">_</span>key = OpenSSL::PKey::RSA.new File.read(&quot;license<span class="built_in">_</span>key.pub&quot;)</span><br><span class="line">Gitlab::License.encryption<span class="built_in">_</span>key = public<span class="built_in">_</span>key</span><br><span class="line">data = File.read(&quot;GitLabBV.gitlab-license&quot;)</span><br><span class="line"><span class="built_in">$</span>license = Gitlab::License.import(data)</span><br><span class="line">puts &quot;Imported license:&quot;</span><br><span class="line">puts <span class="built_in">$</span>license</span><br><span class="line">unless <span class="built_in">$</span>license</span><br><span class="line">raise &quot;The license is invalid.&quot;</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.restricted?(:active<span class="built_in">_</span>user<span class="built_in">_</span>count)</span><br><span class="line">active<span class="built_in">_</span>user<span class="built_in">_</span>count = 10000</span><br><span class="line">if active<span class="built_in">_</span>user<span class="built_in">_</span>count &gt; <span class="built_in">$</span>license.restrictions[:active<span class="built_in">_</span>user<span class="built_in">_</span>count]</span><br><span class="line">    raise &quot;The active user count exceeds the allowed amount!&quot;</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.notify<span class="built_in">_</span>admins?</span><br><span class="line">puts &quot;The license is due to expire on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;.&quot;</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.notify<span class="built_in">_</span>users?</span><br><span class="line">puts &quot;The license is due to expire on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;.&quot;</span><br><span class="line">end</span><br><span class="line">module Gitlab</span><br><span class="line">class GitAccess</span><br><span class="line">    def check(cmd, changes = nil)</span><br><span class="line">    if <span class="built_in">$</span>license.block<span class="built_in">_</span>changes?</span><br><span class="line">        return build<span class="built_in">_</span>status<span class="built_in">_</span>object(false, &quot;License expired&quot;)</span><br><span class="line">    end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line">end</span><br><span class="line">puts &quot;This instance of GitLab Enterprise Edition is licensed to:&quot;</span><br><span class="line"><span class="built_in">$</span>license.licensee.each do |key, value|</span><br><span class="line">puts &quot;<span class="params">#</span>&#123;key&#125;: <span class="params">#</span>&#123;value&#125;&quot;</span><br><span class="line">end</span><br><span class="line">if <span class="built_in">$</span>license.expired?</span><br><span class="line">puts &quot;The license expired on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;&quot;</span><br><span class="line">elsif <span class="built_in">$</span>license.will<span class="built_in">_</span>expire?</span><br><span class="line">puts &quot;The license will expire on <span class="params">#</span>&#123;<span class="built_in">$</span>license.expires<span class="built_in">_</span>at&#125;&quot;</span><br><span class="line">else</span><br><span class="line">puts &quot;The license will never expire.&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>执行<code>license.rb</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby license.rb</span><br></pre></td></tr></table></figure><p>生成以下文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitLabBV.gitlab-license  license.rb  license<span class="built_in">_</span>key  license<span class="built_in">_</span>key.pub</span><br></pre></td></tr></table></figure><ul><li>GitLabBV.gitlab-license : 页面导入的License文件</li><li>license_key.pub ：覆盖原有的key</li></ul><p>查看<code>license_key.pub </code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@gitlab:/home/jonty/gitlab/backups<span class="comment"># cat license_key.pub </span></span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtRXZpH9H6EXFEohYjLcZ</span><br><span class="line">uAYoSVJfZjdpRnT/76JlNfHOOA6RbCBzzwN5FJkyCev/wXCe5P+jR1+jqp0DErrF</span><br><span class="line">3/tYe3ZkUyDkD8c54AMpNqeXeevB+EEz4KqdsO9Q5260jlKxfTEVSQLZaItRfi0s</span><br><span class="line">kq25nPRghOSX7kTL/riQA9dg2L0/of5ewgS164cTtgjeTKBCoOKN/vfw/GC0PDWn</span><br><span class="line">Mf9OaR0C7NtOGesJBCWR47QjnPOjXHFip/yt0K8ytc42XGgzdJjFjPrUuZ1hbzJ7</span><br><span class="line">Y8W9EvWu9+k9iupBK9XeeTORZDZYBvpHvAT2orEoLN1IUX7Bo12c2ddagfoSWp0v</span><br><span class="line">swIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>复制后进入容器内，替换密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span><br><span class="line">vi /opt/gitlab/embedded/service/gitlab-rails/.license_encryption_key.pub</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose restart</span><br></pre></td></tr></table></figure><p>导入License文件，进入管理中心=&gt; 通用=&gt;添加许可证</p><p>导入<code>GitLabBV.gitlab-license</code>文件 </p><p><img data-src="https://cdn.jonty.top/img/image-20230627174050150.png" alt="image-20230627174050150"></p><p>激活完成</p><p><img data-src="https://cdn.jonty.top/img/image-20230627174223096.png" alt="image-20230627174223096"></p>]]></content>
    
    
    <summary type="html">Ubuntu-使用Docker搭建私有代码托管平台</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Gitlab" scheme="https://jonty.top/tags/Gitlab/"/>
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Redis分布式锁以及ABP应用</title>
    <link href="https://jonty.top/2023/06/09/redis-distributed-locking/"/>
    <id>https://jonty.top/2023/06/09/redis-distributed-locking/</id>
    <published>2023-06-09T05:59:01.000Z</published>
    <updated>2023-06-09T07:08:48.987Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>分布式锁其实就是，控制分布式系统不同进程共同访问共享资源的一种锁的实现。如果不同的系统或同一个系统的不同主机之间共享了某个临界资源，往往需要互斥来防止彼此干扰，以保证一致性。</p></div><h2 id="分布式锁的特征"><a href="#分布式锁的特征" class="headerlink" title="分布式锁的特征"></a>分布式锁的特征</h2><p>一把靠谱的分布式锁应该有哪些特征：</p><p><img data-src="https://cdn.jonty.top/img/Distributed-Locking.png" alt="Distributed-Locking"></p><ul><li><strong>互斥性</strong>：任意时刻，只有一个客户端能持有锁</li><li><strong>锁超时释放</strong>：持有锁超时，可以释放，防止不必要的资源浪费，也可以防止死锁</li><li><strong>可重入性</strong>：一个线程如果获取了锁之后，可以再次对其请求加锁</li><li><strong>高性能和高可用</strong>：加锁和解锁需要开销尽可能低，同时也要保证高可用，避免分布式锁失效</li><li><strong>安全性</strong>：锁只能被持有的客户端删除，不能被其他客户端删除</li></ul><h2 id="ABP使用分布式锁"><a href="#ABP使用分布式锁" class="headerlink" title="ABP使用分布式锁"></a>ABP使用分布式锁</h2><blockquote><p>ABP当前的分布式锁实现基于<a href="https://github.com/madelson/DistributedLock">DistributedLock</a>库.</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abp add-package Volo.Abp.DistributedLocking</span><br></pre></td></tr></table></figure><h3 id="配置提供程序"><a href="#配置提供程序" class="headerlink" title="配置提供程序"></a>配置提供程序</h3><p><a href="https://github.com/madelson/DistributedLock">DistributedLock</a>库对<a href="https://github.com/madelson/DistributedLock/blob/master/docs/DistributedLock.Redis.md">Redis</a>和<a href="https://github.com/madelson/DistributedLock/blob/master/docs/DistributedLock.ZooKeeper.md">ZooKeeper</a>提供<a href="https://github.com/madelson/DistributedLock#implementations">多种实现</a>。</p><p>如果要Redis，需要将<a href="https://www.nuget.org/packages/DistributedLock.Redis">DistributedLock.Redis</a> NuGet包添加到项目中，然后在模块类中注册，如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Medallion.Threading;</span><br><span class="line"><span class="keyword">using</span> Medallion.Threading.Redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AbpDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DependsOn(</span></span><br><span class="line"><span class="meta">            typeof(AbpDistributedLockingModule)</span></span><br><span class="line"><span class="meta">            //If you have the other dependencies, you should do here</span></span><br><span class="line"><span class="meta">    )</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">AbpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">ServiceConfigurationContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> configuration = context.Services.GetConfiguration();</span><br><span class="line">        </span><br><span class="line">            context.Services.AddSingleton&lt;IDistributedLockProvider&gt;(sp =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> connection = ConnectionMultiplexer</span><br><span class="line">                    .Connect(configuration[<span class="string">&quot;Redis:Configuration&quot;</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> </span><br><span class="line">                    RedisDistributedSynchronizationProvider(connection.GetDatabase());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<code>appsettings.json</code>文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Redis&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Configuration&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>有两种方法可以使用分布式锁API：ABP的<code>IAbpDistributedLock</code>抽象和<a href="https://github.com/madelson/DistributedLock">DistributedLock</a>库的API。</p><h4 id="使用IAbpDistributedLock服务"><a href="#使用IAbpDistributedLock服务" class="headerlink" title="使用IAbpDistributedLock服务"></a>使用IAbpDistributedLock服务</h4><p>示例：使用<code>IAbpDistributedLock.TryAcquireAsync</code>方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Volo.Abp.DistributedLocking; </span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AbpDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span> : <span class="title">ITransientDependency</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IAbpDistributedLock _distributedLock;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyService</span>(<span class="params">IAbpDistributedLock distributedLock</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _distributedLock = distributedLock;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">MyMethodAsync</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">using</span> (<span class="keyword">var</span> handle = </span><br><span class="line">                         <span class="keyword">await</span> _distributedLock.TryAcquireAsync(<span class="string">&quot;MyLockName&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (handle != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// your code that access the shared resource</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>TryAcquireAsync</code>可能无法获取锁. 如果无法获取锁, 则返回<code>null</code>. 在这种情况下, 你不应该访问资源. 如果句柄不为<code>null</code>, 则表示你已获得锁, 并且可以安全地访问资源.</p><p><code>TryAcquireAsync</code>方法拥有以下参数:</p><ul><li><code>name</code> (<code>string</code>, 必须): 锁的唯一名称. 不同的锁命名用于访问不同的资源.</li><li><code>timeout</code> (<code>TimeSpan</code>): 等待获取锁的超时值. 默认值为<code>TimeSpan.Zero</code>, 这意味着如果锁已经被另一个应用程序拥有, 它不会等待.</li><li><code>cancellationToken</code>: 取消令牌可在触发后取消操作.</li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="AbpDistributedLockOptions"><a href="#AbpDistributedLockOptions" class="headerlink" title="AbpDistributedLockOptions"></a>AbpDistributedLockOptions</h4><p><code>AbpDistributedLockOptions</code> 是配置分布式锁的主要选项类.</p><p>示例: 设置应用程序的分布式锁Key前缀</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configure&lt;AbpDistributedLockOptions&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.KeyPrefix = <span class="string">&quot;MyApp1&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Redis实现分布式锁方案"><a href="#Redis实现分布式锁方案" class="headerlink" title="Redis实现分布式锁方案"></a>Redis实现分布式锁方案</h2><h3 id="方案1：SETNX-EXPIRE"><a href="#方案1：SETNX-EXPIRE" class="headerlink" title="方案1：SETNX + EXPIRE"></a>方案1：SETNX + EXPIRE</h3><p>使用<code>setnx</code>+ <code>expire</code>命令，即先用<code>setnx</code>来抢锁，如果抢到之后再用<code>expire</code>给锁设置一个过期时间，防止忘记释放</p><blockquote><p>SETNX 是SET IF NOT EXISTS的简写.日常命令格式是SETNX key value，如果 key不存在，则SETNX成功返回1，如果这个key已经存在了，则返回0。</p></blockquote><p>假设某电商网站的某商品做秒杀活动，key可以设置为key_resource_id,value设置任意值，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.setnx(key_resource_id,lock_value) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    expire（key_resource_id，<span class="number">100</span>）; <span class="comment">//设置过期时间</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务请求</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">       jedis.del(key_resource_id); <span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个方案中，<code>setnx</code>和<code>expire</code>两个命令分开了，不是原子操作。如果执行完<code>setnx</code>加锁，正要执行<code>expire</code>设置过期时间时，进程crash或者要重启维护了，那么这个锁就“长生不老”了，别的线程永远获取不到锁。</p><h3 id="方案2：SETNX-Value值"><a href="#方案2：SETNX-Value值" class="headerlink" title="方案2：SETNX + Value值"></a>方案2：SETNX + Value值</h3><p>为了解决方案1：发生异常锁得不到释放的场景，可以把过期时间放到<code>setnx</code>的<code>value</code>值里面。如果加锁失败，再拿出value值校验一下即可。</p><p>加锁代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> expires = System.currentTimeMillis() + expireTime; <span class="comment">//系统时间+设置的过期时间</span></span><br><span class="line">String expiresStr = String.valueOf(expires);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line"><span class="keyword">if</span> (jedis.setnx(key_resource_id, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 如果锁已经存在，获取锁的过期时间</span></span><br><span class="line">String currentValueStr = jedis.get(key_resource_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果获取到的过期时间，小于系统当前时间，表示已经过期</span></span><br><span class="line"><span class="keyword">if</span> (currentValueStr != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间（不了解redis的getSet命令的小伙伴，可以去官网看下哈）</span></span><br><span class="line">    String oldValueStr = jedis.getSet(key_resource_id, expiresStr);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldValueStr != <span class="keyword">null</span> &amp;&amp; oldValueStr.equals(currentValueStr)) &#123;</span><br><span class="line">         <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才可以加锁</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//其他情况，均返回加锁失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p>这个方案的优点是，巧妙移除<code>expire</code>单独设置过期时间的操作，把过期时间放到<code>setnx</code>的<code>value</code>值里面来。解决了方案一发生异常，锁得不到释放的问题。</p><p>但是这个方案还有别的缺点：</p><ul><li>过期时间是客户端自己生成的（<code>System.currentTimeMillis()</code>是当前系统的时间），必须要求分布式环境下，每个客户端的时间必须同步。</li><li>如果锁过期的时候，并发多个客户端同时请求过来，都执行<code>jedis.getSet()</code>，最终只能有一个客户端加锁成功，但是该客户端锁的过期时间，可能被别的客户端覆盖</li><li>该锁没有保存持有者的唯一标识，可能被别的客户端释放/解锁。</li></ul><h3 id="方案3：使用Lua脚本"><a href="#方案3：使用Lua脚本" class="headerlink" title="方案3：使用Lua脚本"></a>方案3：使用Lua脚本</h3><p>可以使用Lua脚本来保证原子性（包含<code>setnx</code>和<code>expire</code>两条指令），<code>lua</code>脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;setnx&#x27;</span>,KEYS[<span class="number">1</span>],ARGV[<span class="number">1</span>]) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">   redis.call(<span class="string">&#x27;expire&#x27;</span>,KEYS[<span class="number">1</span>],ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>加锁代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String lua_scripts = <span class="string">&quot;if redis.call(&#x27;setnx&#x27;,KEYS[1],ARGV[1]) == 1 then&quot;</span> +</span><br><span class="line">            <span class="string">&quot; redis.call(&#x27;expire&#x27;,KEYS[1],ARGV[2]) return 1 else return 0 end&quot;</span>;   </span><br><span class="line">Object result = jedis.eval(lua_scripts, Collections.singletonList(key_resource_id), Collections.singletonList(values));</span><br><span class="line"><span class="comment">//判断是否成功</span></span><br><span class="line"><span class="keyword">return</span> result.equals(<span class="number">1L</span>);</span><br></pre></td></tr></table></figure><h3 id="方案4：SET的扩展命令"><a href="#方案4：SET的扩展命令" class="headerlink" title="方案4：SET的扩展命令"></a>方案4：SET的扩展命令</h3><p>除了使用Lua脚本保证<code>SETNX + EXPIRE</code>两条指令的原子性，=还可以巧用Redis的SET指令扩展参数（<code>SET key value[EX seconds][PX milliseconds][NX|XX]</code>），也是原子性的。</p><blockquote><p>SET key value[ EX seconds ][PX milliseconds][NX|XX]</p><ul><li>NX :表示key不存在的时候，才能set成功，也即保证只有第一个客户端请求才能获得锁，而其他客户端请求只能等其释放锁，才能获取。</li><li>EX seconds :设定key的过期时间，时间单位是秒。</li><li>PX milliseconds: 设定key的过期时间，单位为毫秒</li><li>XX: 仅当key存在时设置值</li></ul></blockquote><p>伪代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.set(key_resource_id, lock_value, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, 100s) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务处理</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">       jedis.del(key_resource_id); <span class="comment">//释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案还是可能存在问题：</p><ul><li>问题一：<strong>锁过期释放了，业务还没执行完</strong>，假设线程a获取锁成功，一直在执行临界区的代码。但是100s过去后，它还没执行完。但是这时候锁已经过期了，此时线程b又请求过来。显然线程b就可以获得锁成功，也开始执行临界区的代码。那么问题就来了，临界区的业务代码都不是严格串行执行。</li><li>问题二：<strong>锁被别的线程误删</strong>，假设线程a执行完后，去释放锁。但是它不知道当前的锁可能是线程b持有的（线程a去释放锁时，有可能过期时间已经到了，此时线程b进来占有了锁）。那线程a就把线程b的锁释放掉了，但是线程b临界区业务代码可能都还没执行完。</li></ul><h3 id="方案5：方案4-唯一随机值"><a href="#方案5：方案4-唯一随机值" class="headerlink" title="方案5：方案4+唯一随机值"></a>方案5：方案4+唯一随机值</h3><p>既然锁可能被别的线程误删，给value值设置一个标记当前线程唯一的随机数，在删除的时候，校验一下。</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>（jedis.set(key_resource_id, uni_request_id, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, 100s) == <span class="number">1</span>）&#123; <span class="comment">//加锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> something  <span class="comment">//业务处理</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">       <span class="comment">//判断是不是当前线程加的锁,是才释放</span></span><br><span class="line">       <span class="keyword">if</span> (uni_request_id.equals(jedis.get(key_resource_id))) &#123;</span><br><span class="line">        jedis.del(lockKey); <span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，判断是不是当前线程加的锁和释放锁不是一个原子操作。如果调用<code>jedis.del()</code>释放锁的时候，可能这把锁已经不属于当前客户端，会解除他人加的锁。</p><p>为了更严谨，一般也是用<code>lua</code>脚本代替:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span> </span><br><span class="line">   <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>,KEYS[<span class="number">1</span>]) </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h3 id="方案6：Redisson框架"><a href="#方案6：Redisson框架" class="headerlink" title="方案6：Redisson框架"></a>方案6：Redisson框架</h3><p>方案5还是可能存在<strong>锁过期释放，业务没执行完</strong>的问题。设想一下，是否可以给获得锁的线程，开启一个定时守护线程，每隔一段时间检查锁是否还存在，存在则对锁的过期时间延长，防止锁过期提前释放。</p><p>当前开源框架<strong>Redisson</strong>解决了这个问题。</p><p><img data-src="https://cdn.jonty.top/img/redisson.png" alt="redisson"></p><p>只要线程一加锁成功，就会启动一个<code>watch dog</code>看门狗，它是一个后台线程，会每隔10秒检查一下，如果线程1还持有锁，那么就会不断的延长锁key的生存时间。因此，<code>Redisson</code>就解决了<strong>锁过期释放，业务没执行完</strong>问题。</p><h3 id="方案7：集群分布式锁Redlock-Redisson"><a href="#方案7：集群分布式锁Redlock-Redisson" class="headerlink" title="方案7：集群分布式锁Redlock+Redisson"></a>方案7：集群分布式锁Redlock+Redisson</h3><p>Redis一般都是集群部署</p><p><img data-src="https://cdn.jonty.top/img/redis-cluster-redisson.png" alt="redis-cluster-redisson"></p><p>如果线程一在Redis的master节点上拿到了锁，但是加锁的key还没同步到slave节点。恰好这时，master节点发生故障，一个slave节点就会升级为master节点。线程二就可以获取同个key的锁啦，但线程一也已经拿到锁了，锁的安全性就没了。</p><p>为了解决这个问题，Redis作者 antirez提出一种高级的分布式锁算法：<code>Redlock</code>：</p><blockquote><p>搞多个Redis master部署，以保证它们不会同时宕掉。并且这些master节点是完全相互独立的，相互之间不存在数据同步。同时，需要确保在这多个master实例上，是与在Redis单实例，使用相同方法来获取和释放锁。</p></blockquote><p>假设当前有5个Redis master节点，在5台服务器上面运行这些Redis实例。</p><p><img data-src="https://cdn.jonty.top/img/redis-cluster.png" alt="redis-cluster"></p><p><code>RedLock</code>的实现步骤:</p><ul><li>获取当前时间，以毫秒为单位。</li><li>按顺序向5个master节点请求加锁。客户端设置网络连接和响应超时时间，并且超时时间要小于锁的失效时间。（假设锁自动失效时间为10秒，则超时时间一般在5-50毫秒之间）。如果超时，跳过该master节点，尽快去尝试下一个master节点。</li><li>客户端使用当前时间减去开始获取锁时间（即步骤1记录的时间），得到获取锁使用的时间。当且仅当超过一半（N/2+1，这里是5/2+1=3个节点）的Redis master节点都获得锁，并且使用的时间小于锁失效时间时，锁才算获取成功。（如上图，10s&gt; 30ms+40ms+50ms+4m0s+50ms）</li><li>如果取到了锁，key的真正有效时间就变，需要减去获取锁所使用的时间。</li><li>如果获取锁失败（没有在至少N/2+1个master实例取到锁，有或者获取锁时间已经超过了有效时间），客户端要在所有的master节点上解锁（即便有些master节点根本就没有加锁成功，也需要解锁，以防止有些漏网之鱼）。</li></ul><p>简化下步骤就是：</p><ul><li>按顺序向5个master节点请求加锁。</li><li>根据设置的超时时间来判断，是不是要跳过该master节点。</li><li>如果大于等于3个节点加锁成功，并且使用的时间小于锁的有效期，即可认定加锁成功啦。</li><li>如果获取锁失败，解锁。</li></ul><blockquote><p><a href="https://redis.io/docs/manual/patterns/distributed-locks/">Distributed Locks with Redis | Redis</a></p></blockquote>]]></content>
    
    
    <summary type="html">Redis实现分布式锁以及在ABP应用</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="ABP" scheme="https://jonty.top/tags/ABP/"/>
    
    <category term="Redis" scheme="https://jonty.top/tags/Redis/"/>
    
    <category term="分布式锁" scheme="https://jonty.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>给博客装个空调</title>
    <link href="https://jonty.top/2023/06/01/air-conditioner/"/>
    <id>https://jonty.top/2023/06/01/air-conditioner/</id>
    <published>2023-06-01T05:51:11.000Z</published>
    <updated>2023-06-09T07:11:35.365Z</updated>
    
    <content type="html"><![CDATA[<iframe height="840" width="100%" src="https://ac.yunyoujun.cn"></iframe>]]></content>
    
    
    <summary type="html">唯一的缺憾是，没有风。</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>【游记】河南宝泉崖天下</title>
    <link href="https://jonty.top/2023/05/15/travelogue-henan-baoquan/"/>
    <id>https://jonty.top/2023/05/15/travelogue-henan-baoquan/</id>
    <published>2023-05-15T07:20:25.000Z</published>
    <updated>2023-05-15T09:53:57.156Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>太行八百里，最美在薄壁</p></div><img data-src="https://cdn.jonty.top/img/image-20230515153548260.png" alt="宝上路拍摄" style="width:600px" /><p>仍在出差，恰逢周末想着出去逛逛，既然来了河南，那就见见河南的风土人情~</p><p>很早是看短视频发现了这个地方，<code>宝泉崖天下</code>也是今年4月份刚开业的景点，实际上是分为两个部分：大峡谷景区和崖天下景区</p><p>大峡谷景区：大巴+门票大概是100￥</p><p>崖天下景区：门票+索道 160￥</p><p>大峡谷偏向于风景、绿水青山，而崖天下侧重于刺激的体验，比如空中玻璃栈道、悬崖过山车等（而且每个项目还需要单独收费）</p><p>花100大洋进大峡谷逛逛，至于崖天下，详见下文🤪</p><h2 id="宝泉大峡谷"><a href="#宝泉大峡谷" class="headerlink" title="宝泉大峡谷"></a>宝泉大峡谷</h2><p>乘坐大巴大概20分钟到达景区入口，开始一路逛逛逛，最终的目标是峡谷的尽头：飞龙瀑</p><img data-src="https://cdn.jonty.top/img/image-20230515163410673.png" alt="景交车进山" style="width:400px" /><p>途径的乱石滩</p><img data-src="https://cdn.jonty.top/img/image-20230515163944981.png" alt="乱石滩" style="width:400px" /><p>第一道瀑布，还以为到了终点，看路牌到核心景区还有2.5公里</p><img data-src="https://cdn.jonty.top/img/image-20230515164040802.png" alt="飞女瀑" style="width:400px" /><p>干脆飞个无人机探探路，一不小心游玩了全程~由于实在是太饿了（还特别热），乘坐景交车（15￥到景区入口）+大巴返回游客中心</p><p>下图便是大峡谷的终点站：飞龙瀑</p><img data-src="https://cdn.jonty.top/img/image-20230515164658578.png" alt="飞龙瀑" style="width:400px" /><h2 id="网红打卡点"><a href="#网红打卡点" class="headerlink" title="网红打卡点"></a>网红打卡点</h2><p>简单吃点东西，返回游客中心后驾车上山，导航宝上路大概到双泉凹</p><p>下图是导航信息，不得不说，开山路很刺激，特别多回头弯</p><img data-src="https://cdn.jonty.top/img/image-20230515165847700.png" alt="宝上路，86上山了" style="zoom:33%;" /><p>也过隧道后第一道桥，往下大概200m可以看到有几家商店，然后穿过小溪，顺着小路可以一直开到崖边（建议越野车），步行前往大概15min，山顶有小旗子，进入树林后，小路后分成两条路，一条去小庙，向下的一条到观景台</p><p>以下多图预警！！！风景绝美</p><img data-src="https://cdn.jonty.top/img/image-20230515171011523.png" alt="俯瞰全景" style="width:400px" /><p>下图便是打卡点位置，沿着小路可以直达悬崖边，也就是突出的崖顶那~</p><img data-src="https://cdn.jonty.top/img/image-20230515171351991.png" alt="打卡点" style="width:400px" /><img data-src="https://cdn.jonty.top/img/image-20230515171120710.png" alt="打卡点航拍图" style="width:400px" /><p>对比外面的平原地区</p><img data-src="https://cdn.jonty.top/img/image-20230515171500338.png" alt="山脉外的平原" style="width:400px" /><img data-src="https://cdn.jonty.top/img/89e79d1bdfb8062920093312248180d.jpg" alt="俯拍" style="width:400px" /><img data-src="https://cdn.jonty.top/img/image-20230515172210737.png" alt="远眺" style="width:400px" /><p>最后扔一张打卡照，腿软……</p><img data-src="https://cdn.jonty.top/img/image-20230515172643641.png" alt="打卡照" style="width:400px" /><p>打卡完成，下山返程，下山的路边有特别多桃李园，可以尝尝</p><img data-src="https://cdn.jonty.top/img/image-20230515173820585.png" alt="高山与平原" style="width:400px;" /><img data-src="https://cdn.jonty.top/img/image-20230515173832900.png" alt="绝美太行山" style="width:400px"  /><img data-src="https://cdn.jonty.top/img/image-20230515173917653.png" alt="达尔文效应" style="width:400px" /><p>对了，下山后薄壁供销社加油站旁烧烤店的大盘鸡很不错~</p>]]></content>
    
    
    <summary type="html">太行山把最美的一段留给了河南</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Travelogue" scheme="https://jonty.top/tags/Travelogue/"/>
    
  </entry>
  
  <entry>
    <title>左耳听风</title>
    <link href="https://jonty.top/2023/05/15/coolshell/"/>
    <id>https://jonty.top/2023/05/15/coolshell/</id>
    <published>2023-05-15T07:11:33.000Z</published>
    <updated>2023-05-15T07:18:01.543Z</updated>
    
    <content type="html"><![CDATA[<p>以陈皓老师的座右铭纪念他</p><blockquote><p>芝兰生于深谷，不以无人而不芳<br>君子修身养德，不以穷困而改志</p></blockquote><p><a href="https://coolshell.cn/haoel">关于陈皓 | 酷 壳 - CoolShell</a></p>]]></content>
    
    
    <summary type="html">身体健康才是最大的财富</summary>
    
    
    
    <category term="人生是一场未知的旅行" scheme="https://jonty.top/categories/%E4%BA%BA%E7%94%9F%E6%98%AF%E4%B8%80%E5%9C%BA%E6%9C%AA%E7%9F%A5%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Keepalived</title>
    <link href="https://jonty.top/2023/05/11/docker-keepalived-vip-ip/"/>
    <id>https://jonty.top/2023/05/11/docker-keepalived-vip-ip/</id>
    <published>2023-05-11T03:22:13.000Z</published>
    <updated>2023-05-11T06:51:54.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>keepalived是集群管理中保证集群高可用的一个服务软件，其功能类似于heartbeat，用来防止单点故障。</p><p>但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><a href="https://github.com/acassen/keepalived">https://github.com/acassen/keepalived</a> （源码）</li><li><a href="https://keepalived.readthedocs.io/en/latest/">https://keepalived.readthedocs.io/en/latest/</a> （官方）</li><li><a href="https://www.cnblogs.com/centos2017/p/7896780.html">https://www.cnblogs.com/centos2017/p/7896780.html</a></li><li><a href="https://www.cnblogs.com/getbird/p/11703027.html">https://www.cnblogs.com/getbird/p/11703027.html</a></li></ul><h2 id="功能示例"><a href="#功能示例" class="headerlink" title="功能示例"></a>功能示例</h2><h3 id="实现虚拟IP（IP漂移）"><a href="#实现虚拟IP（IP漂移）" class="headerlink" title="实现虚拟IP（IP漂移）"></a>实现虚拟IP（IP漂移）</h3><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul><li><p><a href="https://github.com/osixia/docker-keepalived">https://github.com/osixia/docker-keepalived</a></p></li><li><p><a href="https://www.jianshu.com/p/c206d5a99274">https://www.jianshu.com/p/c206d5a99274</a></p></li><li><p><a href="https://www.cnblogs.com/zwh0910/p/16518416.html">https://www.cnblogs.com/zwh0910/p/16518416.html</a></p></li></ul><h4 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h4><p>使用docker运行keepalived，实现主备切换虚拟IP，实现宕机一台另一台IP自动变更，不影响原有使用，环境配置信息如下</p><h5 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h5><ul><li>虚拟IP: 192.168.2.153</li><li>主节点IP: 192.168.2.151</li><li>备节点IP: 192.168.2.152</li></ul><h5 id="网卡信息"><a href="#网卡信息" class="headerlink" title="网卡信息"></a>网卡信息</h5><ul><li>主节点： ens160</li><li>备节点： ens160</li></ul><h5 id="硬件配置与操作系统版本"><a href="#硬件配置与操作系统版本" class="headerlink" title="硬件配置与操作系统版本"></a>硬件配置与操作系统版本</h5><ul><li>2C+4G+40G</li><li>Ubuntu 18.04</li></ul><h4 id="本地配置路径"><a href="#本地配置路径" class="headerlink" title="本地配置路径"></a>本地配置路径</h4><blockquote><p>此路径根据实际进行调整</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/yh/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure><h4 id="配置内容"><a href="#配置内容" class="headerlink" title="配置内容"></a>配置内容</h4><h5 id="主配置"><a href="#主配置" class="headerlink" title="主配置"></a>主配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   #notification_email &#123;</span><br><span class="line">   #    root@localhost</span><br><span class="line">   #&#125;</span><br><span class="line">   #notification_email_from root@localhost</span><br><span class="line">   #smtp_server 127.0.0.1</span><br><span class="line">   #smtp_connect_timeout 30</span><br><span class="line">   router_id ka1 # 主从id区分</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">#vrrp_strict # 单播模式需要注释</span><br><span class="line">#vrrp_mcast_group4 224.100.100.100 # 单播模式需要注释</span><br><span class="line">   vrrp_iptables</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER  #设为主</span><br><span class="line">    interface ens160  #绑定的网卡名称，按需修改</span><br><span class="line">    virtual_router_id 11  #两台服务器保持一致</span><br><span class="line">    priority 100  # 主服务器优先级高一些</span><br><span class="line">    advert_int 1</span><br><span class="line">    #nopreempt  #注释，表示打开VIP漂移，在优先级高的服务器上线后自动漂移VIP</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_src_ip 192.168.2.151  # 本机IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.2.152  #单播，通知的目标IP，可以写多个</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.153  #要保持和实际IP在同一网段，使用192.168.1.*，否则会因为缺少路由规则，两台服务器直接无法相互ping通</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="从配置"><a href="#从配置" class="headerlink" title="从配置"></a>从配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   #notification_email &#123;</span><br><span class="line">   #    root@localhost</span><br><span class="line">   #&#125;</span><br><span class="line">   #notification_email_from root@localhost</span><br><span class="line">   #smtp_server 127.0.0.1</span><br><span class="line">   #smtp_connect_timeout 30</span><br><span class="line">   router_id ka2 # 主从id区分</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   #vrrp_strict</span><br><span class="line">   #vrrp_mcast_group4 224.100.100.100</span><br><span class="line">   vrrp_iptables</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP  # 设为备</span><br><span class="line">    interface ens160</span><br><span class="line">    virtual_router_id 11</span><br><span class="line">    priority 80  #优先级低于主</span><br><span class="line">    advert_int 1</span><br><span class="line">    #nopreempt</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123</span><br><span class="line">    &#125;</span><br><span class="line">    unicast_src_ip 192.168.2.152  # 本机IP</span><br><span class="line">    unicast_peer &#123;</span><br><span class="line">        192.168.2.151  #单播，通知的目标IP，可以写多个</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.2.153  #要保持和实际IP在同一网段，使用192.168.1.*，否则会因为缺少路由规则，两台服务器直接无法相互ping通</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主备服务器均使用此命令启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 注意此处的keepalived.conf文件路径调整</span></span></span><br><span class="line">docker run -d --restart=always \</span><br><span class="line">--net=host \</span><br><span class="line">-v /root/keepalived/keepalived.conf:/container/service/keepalived/assets/keepalived.conf \</span><br><span class="line">--cap-add=NET_ADMIN \</span><br><span class="line">--cap-add=NET_BROADCAST \</span><br><span class="line">--cap-add=NET_RAW \</span><br><span class="line">--name keepalived \</span><br><span class="line">osixia/keepalived:2.0.20 --copy-service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">sudo docker logs -f keepalived</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除keepalived服务</span></span><br><span class="line">sudo docker rm -f keepalived</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除网卡其他ip</span></span><br><span class="line">ip addr del 192.168.2.xx dev ens192</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用Docker部署Keepalived实现VIP IP</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Keepalived" scheme="https://jonty.top/tags/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>Docker注册Gitlab Runner</title>
    <link href="https://jonty.top/2023/05/11/use-docker-register-gitlab-runner/"/>
    <id>https://jonty.top/2023/05/11/use-docker-register-gitlab-runner/</id>
    <published>2023-05-11T03:16:41.000Z</published>
    <updated>2023-05-11T03:18:17.514Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GitLabServer=&#x27;https://git.xxx.com/&#x27; # gitlab服务器地址</span><br><span class="line">GitLabToken=&#x27;xxxxx&#x27; # gitlab 仓库token</span><br><span class="line">GitLabRunnerNamePrefix=&#x27;xxxx&#x27; # gitlab runner 前缀</span><br><span class="line">GitLabRunnerTags=&#x27;xxx&#x27; # gitlab runner tags</span><br><span class="line">GitLabRunnerDesc=&#x27;xxx&#x27; # gitlab runner desc</span><br><span class="line">GitLabRunnerImg=&#x27;gitlab/gitlab-runner:v14.10.1&#x27; # gitlab runner img</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建配置数据卷"><a href="#创建配置数据卷" class="headerlink" title="创建配置数据卷"></a>创建配置数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;</span><br></pre></td></tr></table></figure><h3 id="创建runner"><a href="#创建runner" class="headerlink" title="创建runner"></a>创建runner</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --network host -d --restart always \</span><br><span class="line">-e TZ=Asia/Beijing \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">-v &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;:/etc/gitlab-runner \</span><br><span class="line">--name &quot;$GitLabRunnerNamePrefix-gitlab-runner&quot; $GitLabRunnerImg</span><br></pre></td></tr></table></figure><h3 id="注册runner"><a href="#注册runner" class="headerlink" title="注册runner"></a>注册runner</h3><blockquote><p><a href="https://docs.gitlab.com/runner/examples/gitlab.html">https://docs.gitlab.com/runner/examples/gitlab.html</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm \</span><br><span class="line">-v &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;:/etc/gitlab-runner \</span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">--name &quot;$GitLabRunnerNamePrefix-gitlab-runner-register&quot; $GitLabRunnerImg register \</span><br><span class="line">--url &quot;$GitLabServer&quot; \</span><br><span class="line">--registration-token &quot;$GitLabToken&quot; \</span><br><span class="line">--description &quot;$GitLabRunnerDesc&quot; \</span><br><span class="line">--tag-list &quot;$GitLabRunnerTags&quot; \</span><br><span class="line">--non-interactive \</span><br><span class="line">--executor &quot;docker&quot; \</span><br><span class="line">--docker-image docker:23.0.2 \</span><br><span class="line">--docker-privileged=&quot;true&quot; \</span><br><span class="line">--docker-volumes &quot;/certs/client&quot; \</span><br><span class="line">--run-untagged=&quot;true&quot; \</span><br><span class="line">--locked=&quot;false&quot; \</span><br><span class="line">--access-level=&quot;not_protected&quot; \</span><br><span class="line">--docker-volumes /var/run/docker.sock:/var/run/docker.sock </span><br></pre></td></tr></table></figure><h3 id="删除runner"><a href="#删除runner" class="headerlink" title="删除runner"></a>删除runner</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop &quot;$GitLabRunnerNamePrefix-gitlab-runner&quot;</span><br><span class="line">docker rm &quot;$GitLabRunnerNamePrefix-gitlab-runner&quot;</span><br><span class="line">docker volume rm &quot;$GitLabRunnerNamePrefix-gitlab-runner-conf&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">使用Docker注册Gitlab Runner</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Runner" scheme="https://jonty.top/tags/Runner/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab Runner 实现内网自动部署</title>
    <link href="https://jonty.top/2023/05/11/gitlab-runner-intranet-job/"/>
    <id>https://jonty.top/2023/05/11/gitlab-runner-intranet-job/</id>
    <published>2023-05-11T03:02:58.000Z</published>
    <updated>2023-05-11T03:13:29.764Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>最近出差支持项目上线，我们的部署流程是Gitlab CI打包<code>Docker</code>镜像上传到云镜像服务，现场部署由于内网无法访问公网，没办法直接使用脚本实现自动部署(Runner没办法连接~)。目前的情况是，客户提供了一台可访问外网的机器（不提供也可以使用本机），并且在同一个网段，也算是放开一个口子，可以基于这一台机器去实现不同操作，以下便是提供的一种解决思路，减少工作量。</p></div><h2 id="Ubuntu安装Gitlab-Runner"><a href="#Ubuntu安装Gitlab-Runner" class="headerlink" title="Ubuntu安装Gitlab Runner"></a>Ubuntu安装Gitlab Runner</h2><h3 id="添加Gitlab-Runner仓库"><a href="#添加Gitlab-Runner仓库" class="headerlink" title="添加Gitlab Runner仓库"></a>添加Gitlab Runner仓库</h3><p>首先，添加Gitlab Runner的官方仓库，运行一下命令添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230511103118473.png" alt="image-20230511103118473"></p><h3 id="安装Gitlab-Runner"><a href="#安装Gitlab-Runner" class="headerlink" title="安装Gitlab Runner"></a>安装Gitlab Runner</h3><p>使用<code>apt</code>包管理器安装<code>Gitlab Runner</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gitlab-runner</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230511103303074.png" alt="image-20230511103303074"></p><h3 id="检查Gitlab-Runner状态"><a href="#检查Gitlab-Runner状态" class="headerlink" title="检查Gitlab Runner状态"></a>检查Gitlab Runner状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner status</span><br></pre></td></tr></table></figure><p>查看Runner运行状态</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@runner:/home/jonty<span class="params">#</span> sudo gitlab-runner status</span><br><span class="line">Runtime platform                                    arch=amd64 os=linux pid=2966404 revision=436955cb version=15.11.0</span><br><span class="line">gitlab-runner: Service is running</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230511103329891.png" alt="image-20230511103329891"></p><p>成功在Ubuntu安装Gitlab Runner</p><h3 id="卸载Gitlab-Runner"><a href="#卸载Gitlab-Runner" class="headerlink" title="卸载Gitlab Runner"></a>卸载Gitlab Runner</h3><p>停止服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner stop</span><br></pre></td></tr></table></figure><p>卸载服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner uninstall</span><br></pre></td></tr></table></figure><h2 id="注册Gitlab-Runner"><a href="#注册Gitlab-Runner" class="headerlink" title="注册Gitlab Runner"></a>注册Gitlab Runner</h2><p>将Runner注册到Gitlab项目中</p><p>1、获取Gitlab项目注册令牌：</p><ul><li>仓库RUL地址</li><li>仓库注册令牌</li></ul><p><img data-src="https://cdn.jonty.top/img/image-20230511102811943.png" alt="image-20230511102811943"></p><p>2、 注册Gitlab Runner</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner register</span><br></pre></td></tr></table></figure><p>按照提示输入Gitlab 示例的URL、项目的注册令牌以及Runner描述信息、Tag</p><p>这里<code>executor</code>选择<code>shell</code></p><p><img data-src="https://cdn.jonty.top/img/image-20230511103545979.png" alt="image-20230511103545979"></p><p>3、激活Gitlab Runner</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner verify</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/image-20230511103918535.png" alt="image-20230511103918535"></p><p>在项目Runner中可以看到已经注册完成：</p><p><img data-src="https://cdn.jonty.top/img/image-20230511103934445.png" alt="image-20230511103934445"></p><p>4、Gitlab Runner后台运行</p><p>使用“&amp;”将在后台启动，即使关闭 SSH 会话，它仍然存在，只有在服务器重新启动或关闭时才会停止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gitlab-runner run&amp;</span><br></pre></td></tr></table></figure><h2 id="定义Job"><a href="#定义Job" class="headerlink" title="定义Job"></a>定义Job</h2><p>在<code>.gitlab-ci.yml</code>中定义Job</p><p><code>script</code>执行<code>runner</code>宿主机<code>/bin/bash /images_194/deploy_194.sh</code>脚本，实现<code>曲线救国</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy_dev:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">dependencies:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">build_host_dev</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dev-1.5</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">retry:</span></span><br><span class="line">    <span class="attr">max:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">/bin/bash</span> <span class="string">/images_194/deploy_194.sh</span></span><br></pre></td></tr></table></figure><p>最后贴出连接局域网另一台机器部署的脚本:</p><ul><li>拉取公网镜像，重新打Tag，推送到内网<code>Registry</code></li><li>ssh连接到内网机器，执行部署脚本</li><li>完成部署</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">imgAppNames=(<span class="string">&#x27;server&#x27;</span> <span class="string">&#x27;vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">AppFile</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">  WMS_VERSION=dev</span><br><span class="line">  REGISTRY_URL=ccr.ccs.tencentyun.com/xxx</span><br><span class="line">  LocalRegistryUrl=192.168.2.89:8232</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$WMS_VERSION</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$REGISTRY_URL</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$LocalRegistryUrl</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在处理应用镜像&quot;</span></span><br><span class="line">  PullImage</span><br><span class="line">  TagImage</span><br><span class="line">  PushImage</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">PullImage</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> imgName <span class="keyword">in</span> <span class="variable">$&#123;imgAppNames[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  targetImgName=<span class="string">&quot;<span class="variable">$REGISTRY_URL</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在拉取: <span class="variable">$targetImgName</span>&quot;</span></span><br><span class="line">  docker pull <span class="variable">$targetImgName</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;拉取完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">TagImage</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> imgName <span class="keyword">in</span> <span class="variable">$&#123;imgAppNames[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  targetImgName=<span class="string">&quot;<span class="variable">$REGISTRY_URL</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line">  localImgName=<span class="string">&quot;<span class="variable">$LocalRegistryUrl</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在打标签: <span class="variable">$targetImgName</span>&quot;</span></span><br><span class="line">  docker tag <span class="variable">$targetImgName</span> <span class="variable">$localImgName</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;打标签完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">PushImage</span></span>()&#123;</span><br><span class="line">  <span class="keyword">for</span> imgName <span class="keyword">in</span> <span class="variable">$&#123;imgAppNames[@]&#125;</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  localImgName=<span class="string">&quot;<span class="variable">$LocalRegistryUrl</span>/<span class="variable">$&#123;imgName&#125;</span>:<span class="variable">$WMS_VERSION</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;正在推送: <span class="variable">$localImgName</span>&quot;</span></span><br><span class="line">  docker push <span class="variable">$localImgName</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;推送完成&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AppFile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置参数</span></span><br><span class="line">REMOTE_IP=<span class="string">&quot;192.168.2.194&quot;</span></span><br><span class="line">REMOTE_USER=<span class="string">&quot;wms&quot;</span></span><br><span class="line">REMOTE_PASS=<span class="string">&quot;wmstest@123&quot;</span></span><br><span class="line">ROOT_PASS=<span class="string">&quot;wmstest@123&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到远程服务器</span></span><br><span class="line">sshpass -p <span class="string">&quot;<span class="variable">$&#123;REMOTE_PASS&#125;</span>&quot;</span> ssh -o StrictHostKeyChecking=no -l <span class="string">&quot;<span class="variable">$&#123;REMOTE_USER&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;REMOTE_IP&#125;</span>&quot;</span> &lt;&lt;- <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 切换到 root 用户</span></span><br><span class="line"><span class="string">echo &quot;$&#123;ROOT_PASS&#125;&quot; | sudo -S su</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 切换到指定目录</span></span><br><span class="line"><span class="string">cd /home/wms/wms_app/07_app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;移除当前服务：test_app&quot;</span></span><br><span class="line"><span class="string">sudo docker stack rm test_app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sleep 20s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;启动服务中...&quot;</span></span><br><span class="line"><span class="string"># 执行 run.sh</span></span><br><span class="line"><span class="string">sudo /bin/bash ./run.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">echo &quot;服务启动完成...&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sudo docker service ls -f name=test_app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 退出 root 用户</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 退出远程服务器</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Gitlab CI 曲线救国 实现内网自动部署</summary>
    
    
    
    <category term="DevOps" scheme="https://jonty.top/categories/DevOps/"/>
    
    
    <category term="Gitlab" scheme="https://jonty.top/tags/Gitlab/"/>
    
    <category term="Runner" scheme="https://jonty.top/tags/Runner/"/>
    
  </entry>
  
  <entry>
    <title>Git 的奇技淫巧</title>
    <link href="https://jonty.top/2023/05/04/git-tips/"/>
    <id>https://jonty.top/2023/05/04/git-tips/</id>
    <published>2023-05-04T07:59:04.000Z</published>
    <updated>2023-05-04T08:02:07.660Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git 常用命令集合，Fork 自 <a href="https://github.com/git-tips/tips">tips</a> 项目</p><p>分享自：<a href="https://github.com/521xueweihan/git-tips">521xueweihan/git-tips: Git的奇技淫巧 (github.com)</a></p></blockquote><p>Git 是一个分布式版本管理工具，版本管理工具就是大家在写东西的时候都用过 <strong>回撤</strong>这个功能，但是回撤只能回撤几步，假如想要找回我三天之前的修改，光用回撤是找不回来的。而<strong>版本管理工具能记录每次的修改</strong>，只要提交到版本仓库，就可以找到之前任何时刻的状态（文本状态）。</p><p>下面的内容就是列举了常用的 Git 命令和一些小技巧，可以通过页面内查找的方式 <code>Ctrl/Command+f</code> 进行快速查找。</p><h2 id="开卷必读"><a href="#开卷必读" class="headerlink" title="开卷必读"></a>开卷必读</h2><p><em>如果之前未使用过 Git，可以学习 <a href="https://rogerdudler.github.io/git-guide/index.zh.html">Git 小白教程</a>入门</em></p><ol><li><strong>一定要先测试命令的效果后</strong>，再用于工作环境中，以防造成不能弥补的后果！<strong>到时候别拿着砍刀来找我</strong></li><li>所有的命令都在 <code>git version 2.7.4 (Apple Git-66)</code> 下测试通过</li><li>统一概念：<ul><li>工作区：改动（增删文件和内容）</li><li>暂存区：输入命令：<code>git add 改动的文件名</code>，此次改动就放到了 ‘暂存区’</li><li>本地仓库(简称：本地)：输入命令：<code>git commit 此次修改的描述</code>，此次改动就放到了本地仓库，每个 commit，我叫它为一个版本。</li><li>远程仓库(简称：远程)：输入命令：<code>git push 远程仓库</code>，此次改动就放到了远程仓库（GitHub 等)</li><li>commit-id：输出命令：<code>git log</code>，最上面那行 <code>commit xxxxxx</code>，后面的字符串就是 commit-id</li></ul></li><li>如果喜欢这个项目，欢迎 Star、提交 Pr、<a href="https://github.com/521xueweihan/git-tips/issues">反馈问题</a>😊</li></ol><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E8%84%91%E5%9B%BE">脑图</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF">展示帮助信息</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E7%8A%B6%E6%80%81">回到远程仓库的状态</a></li><li><a href="#%E9%87%8D%E8%AE%BE%E7%AC%AC%E4%B8%80%E4%B8%AA-commit">重设第一个commit</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E5%86%B2%E7%AA%81%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8">查看冲突文件列表</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E4%B8%8D%E5%90%8C">展示工作区和暂存区的不同</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区和最近版本的不同</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9A%82%E5%AD%98%E5%8C%BA%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%9C%80%E8%BF%91%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%8D%E5%90%8C">展示暂存区、工作区和最近版本的不同</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2%E5%88%B0%E4%B8%8A%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">快速切换到上一个分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%B7%B2%E7%BB%8F%E5%90%88%E5%B9%B6%E5%88%B0-master-%E7%9A%84%E5%88%86%E6%94%AF">删除已经合并到 master 的分支</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E6%83%85%E5%86%B5">展示本地分支关联远程仓库的情况</a></li><li><a href="#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">关联远程分支</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出所有远程分支</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%92%8C%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">列出本地和远程分支</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF%E7%9A%84%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">查看远程分支和本地分支的对应关系</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E5%88%A0%E9%99%A4%E4%BA%86%E5%88%86%E6%94%AF%E6%9C%AC%E5%9C%B0%E4%B9%9F%E6%83%B3%E5%88%A0%E9%99%A4">远程删除了分支本地也想删除</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">创建并切换到本地分支</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E4%B8%AD%E5%88%9B%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程分支中创建并切换到本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">删除本地分支</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">删除远程分支</a></li><li><a href="#%E9%87%8D%E5%91%BD%E5%90%8D%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">重命名本地分支</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE">查看标签</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%A0%87%E7%AD%BE%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF">查看标签详细信息</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE">本地创建标签</a></li><li><a href="#%E6%8E%A8%E9%80%81%E6%A0%87%E7%AD%BE%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">推送标签到远程仓库</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%9C%AC%E5%9C%B0%E6%A0%87%E7%AD%BE">删除本地标签</a></li><li><a href="#%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E6%A0%87%E7%AD%BE">删除远程标签</a></li><li><a href="#%E5%88%87%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA%E6%A0%87%E7%AD%BE">切回到某个标签</a></li><li><a href="#%E6%94%BE%E5%BC%83%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E4%BF%AE%E6%94%B9">放弃工作区的修改</a></li><li><a href="#%E6%81%A2%E5%A4%8D%E5%88%A0%E9%99%A4%E7%9A%84%E6%96%87%E4%BB%B6">恢复删除的文件</a></li><li><a href="#%E4%BB%A5%E6%96%B0%E5%A2%9E%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%96%B9%E5%BC%8F%E8%BF%98%E5%8E%9F%E6%9F%90%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E4%BF%AE%E6%94%B9">以新增一个 commit 的方式还原某一个 commit 的修改</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-commit-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E5%90%8E%E9%9D%A2%E7%9A%84-commit">回到某个 commit 的状态，并删除后面的 commit</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%8A%E4%B8%80%E4%B8%AA-commit-%E7%9A%84%E6%8F%8F%E8%BF%B0">修改上一个 commit 的描述</a></li><li><a href="#%E6%9F%A5%E7%9C%8B-commit-%E5%8E%86%E5%8F%B2">查看 commit 历史</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E6%9C%AC%E5%9C%B0%E6%9B%B4%E6%96%B0%E8%BF%87-head-%E7%9A%84-git-%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95">显示本地更新过 HEAD 的 git 命令记录</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%BD%9C%E8%80%85%E5%90%8D">修改作者名</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84-url">修改远程仓库的 url</a></li><li><a href="#%E5%A2%9E%E5%8A%A0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">增加远程仓库</a></li><li><a href="#%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">列出所有远程仓库</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E4%B8%A4%E4%B8%AA%E6%98%9F%E6%9C%9F%E5%86%85%E7%9A%84%E6%94%B9%E5%8A%A8">查看两个星期内的改动</a></li><li><a href="#%E6%8A%8A-A-%E5%88%86%E6%94%AF%E7%9A%84%E6%9F%90%E4%B8%80%E4%B8%AA-commit%E6%94%BE%E5%88%B0-B-%E5%88%86%E6%94%AF%E4%B8%8A">把 A 分支的某一个 commit，放到 B 分支上</a></li><li><a href="#%E7%BB%99-git-%E5%91%BD%E4%BB%A4%E8%B5%B7%E5%88%AB%E5%90%8D">给 git 命令起别名</a></li><li><a href="#%E5%AD%98%E5%82%A8%E5%BD%93%E5%89%8D%E7%9A%84%E4%BF%AE%E6%94%B9%E4%BD%86%E4%B8%8D%E7%94%A8%E6%8F%90%E4%BA%A4-commit">存储当前的修改，但不用提交 commit</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E5%BD%93%E5%89%8D%E7%8A%B6%E6%80%81%E5%8C%85%E6%8B%AC-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">保存当前状态，包括 untracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-stashes">展示所有 stashes</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9F%90%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81">回到某个 stash 的状态</a></li><li><a href="#%E5%9B%9E%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA-stash-%E7%9A%84%E7%8A%B6%E6%80%81%E5%B9%B6%E5%88%A0%E9%99%A4%E8%BF%99%E4%B8%AA-stash">回到最后一个 stash 的状态，并删除这个 stash</a></li><li><a href="#%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E7%9A%84-stash">删除所有的 stash</a></li><li><a href="#%E4%BB%8E-stash-%E4%B8%AD%E6%8B%BF%E5%87%BA%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E4%BF%AE%E6%94%B9">从 stash 中拿出某个文件的修改</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-tracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 tracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">展示所有 untracked 的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示所有忽略的文件</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E6%96%87%E4%BB%B6">强制删除 untracked 的文件</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4-untracked-%E7%9A%84%E7%9B%AE%E5%BD%95">强制删除 untracked 的目录</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E7%AE%80%E5%8C%96%E7%9A%84-commit-%E5%8E%86%E5%8F%B2">展示简化的 commit 历史</a></li><li><a href="#%E6%9F%A5%E7%9C%8B%E6%9F%90%E6%AE%B5%E4%BB%A3%E7%A0%81%E6%98%AF%E8%B0%81%E5%86%99%E7%9A%84">查看某段代码是谁写的</a></li><li><a href="#%E6%8A%8A%E6%9F%90%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%AF%BC%E5%87%BA%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">把某一个分支导出成一个文件</a></li><li><a href="#%E4%BB%8E%E5%8C%85%E4%B8%AD%E5%AF%BC%E5%85%A5%E5%88%86%E6%94%AF">从包中导入分支</a></li><li><a href="#%E6%89%A7%E8%A1%8C-rebase-%E4%B9%8B%E5%89%8D%E8%87%AA%E5%8A%A8-stash">执行 rebase 之前自动 stash</a></li><li><a href="#%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E6%A0%B9%E6%8D%AE-ID-%E6%8B%89%E4%B8%8B%E6%9F%90%E4%B8%80%E7%8A%B6%E6%80%81-%E5%88%B0%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li><li><a href="#%E8%AF%A6%E7%BB%86%E5%B1%95%E7%A4%BA%E4%B8%80%E8%A1%8C%E4%B8%AD%E7%9A%84%E4%BF%AE%E6%94%B9">详细展示一行中的修改</a></li><li><a href="#%E6%B8%85%E9%99%A4-gitignore-%E6%96%87%E4%BB%B6%E4%B8%AD%E8%AE%B0%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6">清除 <code>.gitignore</code> 文件中记录的文件</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E6%89%80%E6%9C%89-alias-%E5%92%8C-configs">展示所有 alias 和 configs</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E5%BF%BD%E7%95%A5%E7%9A%84%E6%96%87%E4%BB%B6">展示忽略的文件</a></li><li><a href="#commit-%E5%8E%86%E5%8F%B2%E4%B8%AD%E6%98%BE%E7%A4%BA-Branch1-%E6%9C%89%E7%9A%84%E4%BD%86%E6%98%AF-Branch2-%E6%B2%A1%E6%9C%89-commit">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li><li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%98%BE%E7%A4%BA-GPG-%E7%AD%BE%E5%90%8D">在 commit log 中显示 GPG 签名</a></li><li><a href="#%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE">删除全局设置</a></li><li><a href="#%E6%96%B0%E5%BB%BA%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E6%96%B0%E5%88%86%E6%94%AF%E4%B8%8A%E5%90%8C%E6%97%B6%E8%BF%99%E4%B8%AA%E5%88%86%E6%94%AF%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95-commit">新建并切换到新分支上，同时这个分支没有任何 commit</a></li><li><a href="#%E5%B1%95%E7%A4%BA%E4%BB%BB%E6%84%8F%E5%88%86%E6%94%AF%E6%9F%90%E4%B8%80%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9">展示任意分支某一文件的内容</a></li><li><a href="#clone-%E4%B8%8B%E6%9D%A5%E6%8C%87%E5%AE%9A%E7%9A%84%E5%8D%95%E4%B8%80%E5%88%86%E6%94%AF">clone 下来指定的单一分支</a></li><li><a href="#clone-%E6%9C%80%E6%96%B0%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4">clone 最新一次提交</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E6%94%B9%E5%8A%A8">忽略某个文件的改动</a></li><li><a href="#%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E7%9A%84%E6%9D%83%E9%99%90%E5%8F%98%E5%8C%96">忽略文件的权限变化</a></li><li><a href="#%E4%BB%A5%E6%9C%80%E5%90%8E%E6%8F%90%E4%BA%A4%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89-Git-%E5%88%86%E6%94%AF">以最后提交的顺序列出所有 Git 分支</a></li><li><a href="#%E5%9C%A8-commit-log-%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9">在 commit log 中查找相关内容</a></li><li><a href="#%E6%8A%8A%E6%9A%82%E5%AD%98%E5%8C%BA%E7%9A%84%E6%8C%87%E5%AE%9A-file-%E6%94%BE%E5%88%B0%E5%B7%A5%E4%BD%9C%E5%8C%BA%E4%B8%AD">把暂存区的指定 file 放到工作区中</a></li><li><a href="#%E5%BC%BA%E5%88%B6%E6%8E%A8%E9%80%81">强制推送</a></li><li><a href="#git-%E9%85%8D%E7%BD%AE-http-%E5%92%8C-socks-%E4%BB%A3%E7%90%86">git 配置 http 和 socks 代理</a></li><li><a href="#git-%E9%85%8D%E7%BD%AE-ssh-%E4%BB%A3%E7%90%86">git 配置 ssh 代理</a></li><li><a href="#%E4%BC%98%E9%9B%85%E7%9A%84Commit%E4%BF%A1%E6%81%AF">优雅的Commit信息</a></li><li><a href="#commit%E5%B7%A5%E5%85%B7">commit工具</a></li><li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li></ul><h2 id="展示帮助信息"><a href="#展示帮助信息" class="headerlink" title="展示帮助信息"></a>展示帮助信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> -g</span><br></pre></td></tr></table></figure><p>The command output as below:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">The common Git guides are:</span><br><span class="line">   attributes          Defining attributes per path</span><br><span class="line">   <span class="keyword">cli</span>                 Git command-<span class="keyword">line</span> interface and conventions</span><br><span class="line">   core-<span class="keyword">tutorial</span>       A Git core <span class="keyword">tutorial</span> <span class="keyword">for</span> developers</span><br><span class="line">   cvs-migration       Git <span class="keyword">for</span> CVS users</span><br><span class="line">   diffcore            Tweaking diff output</span><br><span class="line">   everyday            A useful minimum <span class="keyword">set</span> of commands <span class="keyword">for</span> Everyday Git</span><br><span class="line">   glossary            A Git Glossary</span><br><span class="line">   hooks               Hooks used <span class="keyword">by</span> Git</span><br><span class="line">   ignore              Specifies intentionally untracked files to ignore</span><br><span class="line">   modules             Defining submodule properties</span><br><span class="line">   namespaces          Git namespaces</span><br><span class="line">   repository-layout    Git Repository Layout</span><br><span class="line">   revisions           Specifying revisions and ranges <span class="keyword">for</span> Git</span><br><span class="line">   <span class="keyword">tutorial</span>            A <span class="keyword">tutorial</span> introduction to Git</span><br><span class="line">   <span class="keyword">tutorial</span>-2          A <span class="keyword">tutorial</span> introduction to Git: part <span class="keyword">two</span></span><br><span class="line">   workflows           <span class="keyword">An</span> overview of recommended workflows with Git</span><br><span class="line"></span><br><span class="line">&#x27;git <span class="keyword">help</span> -a&#x27; and &#x27;git <span class="keyword">help</span> -<span class="keyword">g</span>&#x27; <span class="keyword">list</span> available subcommands and some concept guides. See &#x27;git <span class="keyword">help</span> &lt;command&gt;&#x27; or &#x27;git <span class="keyword">help</span> &lt;concept&gt;&#x27; to <span class="keyword">read</span> <span class="keyword">about</span> a specific subcommand or concept.</span><br></pre></td></tr></table></figure><h2 id="回到远程仓库的状态"><a href="#回到远程仓库的状态" class="headerlink" title="回到远程仓库的状态"></a>回到远程仓库的状态</h2><p>抛弃本地所有的修改，回到远程仓库的状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure><h2 id="重设第一个-commit"><a href="#重设第一个-commit" class="headerlink" title="重设第一个 commit"></a>重设第一个 commit</h2><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-ref -d HEAD</span><br></pre></td></tr></table></figure><h2 id="查看冲突文件列表"><a href="#查看冲突文件列表" class="headerlink" title="查看冲突文件列表"></a>查看冲突文件列表</h2><p>展示工作区的冲突文件列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --name-only --diff-filter=U</span><br></pre></td></tr></table></figure><h2 id="展示工作区和暂存区的不同"><a href="#展示工作区和暂存区的不同" class="headerlink" title="展示工作区和暂存区的不同"></a>展示工作区和暂存区的不同</h2><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>还可以展示本地仓库中任意两个 commit 之间的文件变动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="展示暂存区和最近版本的不同"><a href="#展示暂存区和最近版本的不同" class="headerlink" title="展示暂存区和最近版本的不同"></a>展示暂存区和最近版本的不同</h2><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h2 id="展示暂存区、工作区和最近版本的不同"><a href="#展示暂存区、工作区和最近版本的不同" class="headerlink" title="展示暂存区、工作区和最近版本的不同"></a>展示暂存区、工作区和最近版本的不同</h2><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure><h2 id="快速切换到上一个分支"><a href="#快速切换到上一个分支" class="headerlink" title="快速切换到上一个分支"></a>快速切换到上一个分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -</span><br></pre></td></tr></table></figure><h2 id="删除已经合并到-master-的分支"><a href="#删除已经合并到-master-的分支" class="headerlink" title="删除已经合并到 master 的分支"></a>删除已经合并到 master 的分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged master | grep -v <span class="string">&#x27;^\*\|  master&#x27;</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure><h2 id="展示本地分支关联远程仓库的情况"><a href="#展示本地分支关联远程仓库的情况" class="headerlink" title="展示本地分支关联远程仓库的情况"></a>展示本地分支关联远程仓库的情况</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h2 id="关联远程分支"><a href="#关联远程分支" class="headerlink" title="关联远程分支"></a>关联远程分支</h2><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure><p>或者在 push 时加上 <code>-u</code> 参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin/mybranch -u</span><br></pre></td></tr></table></figure><h2 id="列出所有远程分支"><a href="#列出所有远程分支" class="headerlink" title="列出所有远程分支"></a>列出所有远程分支</h2><p>-r 参数相当于：remote</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure><h2 id="列出本地和远程分支"><a href="#列出本地和远程分支" class="headerlink" title="列出本地和远程分支"></a>列出本地和远程分支</h2><p>-a 参数相当于：all</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h2 id="查看远程分支和本地分支的对应关系"><a href="#查看远程分支和本地分支的对应关系" class="headerlink" title="查看远程分支和本地分支的对应关系"></a>查看远程分支和本地分支的对应关系</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="远程删除了分支本地也想删除"><a href="#远程删除了分支本地也想删除" class="headerlink" title="远程删除了分支本地也想删除"></a>远程删除了分支本地也想删除</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h2 id="创建并切换到本地分支"><a href="#创建并切换到本地分支" class="headerlink" title="创建并切换到本地分支"></a>创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="从远程分支中创建并切换到本地分支"><a href="#从远程分支中创建并切换到本地分支" class="headerlink" title="从远程分支中创建并切换到本地分支"></a>从远程分支中创建并切换到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;local-branchname&gt;</span><br></pre></td></tr></table></figure><h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure><h2 id="重命名本地分支"><a href="#重命名本地分支" class="headerlink" title="重命名本地分支"></a>重命名本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><p>展示当前分支的最近的 tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure><h2 id="查看标签详细信息"><a href="#查看标签详细信息" class="headerlink" title="查看标签详细信息"></a>查看标签详细信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -ln</span><br></pre></td></tr></table></figure><h2 id="本地创建标签"><a href="#本地创建标签" class="headerlink" title="本地创建标签"></a>本地创建标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure><p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;version-number&gt; -m <span class="string">&quot;v1.0 发布(描述)&quot;</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="推送标签到远程仓库"><a href="#推送标签到远程仓库" class="headerlink" title="推送标签到远程仓库"></a>推送标签到远程仓库</h2><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;local-version-number&gt;</span><br></pre></td></tr></table></figure><p>一次性推送所有标签，同步到远程仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="删除本地标签"><a href="#删除本地标签" class="headerlink" title="删除本地标签"></a>删除本地标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><h2 id="切回到某个标签"><a href="#切回到某个标签" class="headerlink" title="切回到某个标签"></a>切回到某个标签</h2><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure><h2 id="放弃工作区的修改"><a href="#放弃工作区的修改" class="headerlink" title="放弃工作区的修改"></a>放弃工作区的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure><p>放弃所有修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure><h2 id="恢复删除的文件"><a href="#恢复删除的文件" class="headerlink" title="恢复删除的文件"></a>恢复删除的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class="comment">#得到 deleting_commit</span></span><br><span class="line"></span><br><span class="line">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class="comment">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure><h2 id="以新增一个-commit-的方式还原某一个-commit-的修改"><a href="#以新增一个-commit-的方式还原某一个-commit-的修改" class="headerlink" title="以新增一个 commit 的方式还原某一个 commit 的修改"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="回到某个-commit-的状态，并删除后面的-commit"><a href="#回到某个-commit-的状态，并删除后面的-commit" class="headerlink" title="回到某个 commit 的状态，并删除后面的 commit"></a>回到某个 commit 的状态，并删除后面的 commit</h2><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit-id&gt;  <span class="comment">#默认就是-mixed参数。</span></span><br><span class="line"></span><br><span class="line">git reset --mixed HEAD^  <span class="comment">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class="line"></span><br><span class="line">git reset --soft HEAD~3  <span class="comment">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit-id&gt;  <span class="comment">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure><h2 id="修改上一个-commit-的描述"><a href="#修改上一个-commit-的描述" class="headerlink" title="修改上一个 commit 的描述"></a>修改上一个 commit 的描述</h2><p>如果暂存区有改动，同时也会将暂存区的改动提交到上一个 commit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><h2 id="查看-commit-历史"><a href="#查看-commit-历史" class="headerlink" title="查看 commit 历史"></a>查看 commit 历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="查看某段代码是谁写的"><a href="#查看某段代码是谁写的" class="headerlink" title="查看某段代码是谁写的"></a>查看某段代码是谁写的</h2><p>blame 的意思为‘责怪’，你懂的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="显示本地更新过-HEAD-的-git-命令记录"><a href="#显示本地更新过-HEAD-的-git-命令记录" class="headerlink" title="显示本地更新过 HEAD 的 git 命令记录"></a>显示本地更新过 HEAD 的 git 命令记录</h2><p>每次更新了 HEAD 的 git 命令比如 commit、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><h2 id="修改作者名"><a href="#修改作者名" class="headerlink" title="修改作者名"></a>修改作者名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend --author=<span class="string">&#x27;Author Name &lt;email@address.com&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="修改远程仓库的-url"><a href="#修改远程仓库的-url" class="headerlink" title="修改远程仓库的 url"></a>修改远程仓库的 url</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure><h2 id="增加远程仓库"><a href="#增加远程仓库" class="headerlink" title="增加远程仓库"></a>增加远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure><h2 id="列出所有远程仓库"><a href="#列出所有远程仓库" class="headerlink" title="列出所有远程仓库"></a>列出所有远程仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h2 id="查看两个星期内的改动"><a href="#查看两个星期内的改动" class="headerlink" title="查看两个星期内的改动"></a>查看两个星期内的改动</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git whatchanged --since=<span class="string">&#x27;2 weeks ago&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="把-A-分支的某一个-commit，放到-B-分支上"><a href="#把-A-分支的某一个-commit，放到-B-分支上" class="headerlink" title="把 A 分支的某一个 commit，放到 B 分支上"></a>把 A 分支的某一个 commit，放到 B 分支上</h2><p>这个过程需要 <code>cherry-pick</code> 命令，<a href="http://sg552.iteye.com/blog/1300713#bc2367928">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure><h2 id="给-git-命令起别名"><a href="#给-git-命令起别名" class="headerlink" title="给 git 命令起别名"></a>给 git 命令起别名</h2><p>简化命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global <span class="built_in">alias</span>.&lt;handle&gt; &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">比如：git status 改成 git st，这样可以简化命令</span><br><span class="line"></span><br><span class="line">git config --global alias.st status</span><br></pre></td></tr></table></figure><h2 id="存储当前的修改，但不用提交-commit"><a href="#存储当前的修改，但不用提交-commit" class="headerlink" title="存储当前的修改，但不用提交 commit"></a>存储当前的修改，但不用提交 commit</h2><p>详解可以参考<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000">廖雪峰老师的 git 教程</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><h2 id="保存当前状态，包括-untracked-的文件"><a href="#保存当前状态，包括-untracked-的文件" class="headerlink" title="保存当前状态，包括 untracked 的文件"></a>保存当前状态，包括 untracked 的文件</h2><p>untracked 文件：新建的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash -u</span><br></pre></td></tr></table></figure><h2 id="展示所有-stashes"><a href="#展示所有-stashes" class="headerlink" title="展示所有 stashes"></a>展示所有 stashes</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><h2 id="回到某个-stash-的状态"><a href="#回到某个-stash-的状态" class="headerlink" title="回到某个 stash 的状态"></a>回到某个 stash 的状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure><h2 id="回到最后一个-stash-的状态，并删除这个-stash"><a href="#回到最后一个-stash-的状态，并删除这个-stash" class="headerlink" title="回到最后一个 stash 的状态，并删除这个 stash"></a>回到最后一个 stash 的状态，并删除这个 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h2 id="删除所有的-stash"><a href="#删除所有的-stash" class="headerlink" title="删除所有的 stash"></a>删除所有的 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br></pre></td></tr></table></figure><h2 id="从-stash-中拿出某个文件的修改"><a href="#从-stash-中拿出某个文件的修改" class="headerlink" title="从 stash 中拿出某个文件的修改"></a>从 stash 中拿出某个文件的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure><h2 id="展示所有-tracked-的文件"><a href="#展示所有-tracked-的文件" class="headerlink" title="展示所有 tracked 的文件"></a>展示所有 tracked 的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files -t</span><br></pre></td></tr></table></figure><h2 id="展示所有-untracked-的文件"><a href="#展示所有-untracked-的文件" class="headerlink" title="展示所有 untracked 的文件"></a>展示所有 untracked 的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others</span><br></pre></td></tr></table></figure><h2 id="展示所有忽略的文件"><a href="#展示所有忽略的文件" class="headerlink" title="展示所有忽略的文件"></a>展示所有忽略的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure><h2 id="强制删除-untracked-的文件"><a href="#强制删除-untracked-的文件" class="headerlink" title="强制删除 untracked 的文件"></a>强制删除 untracked 的文件</h2><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p><ol><li>clean 后，删除的文件无法找回</li><li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure><h2 id="强制删除-untracked-的目录"><a href="#强制删除-untracked-的目录" class="headerlink" title="强制删除 untracked 的目录"></a>强制删除 untracked 的目录</h2><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure><h2 id="展示简化的-commit-历史"><a href="#展示简化的-commit-历史" class="headerlink" title="展示简化的 commit 历史"></a>展示简化的 commit 历史</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure><h2 id="把某一个分支导出成一个文件"><a href="#把某一个分支导出成一个文件" class="headerlink" title="把某一个分支导出成一个文件"></a>把某一个分支导出成一个文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="从包中导入分支"><a href="#从包中导入分支" class="headerlink" title="从包中导入分支"></a>从包中导入分支</h2><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="执行-rebase-之前自动-stash"><a href="#执行-rebase-之前自动-stash" class="headerlink" title="执行 rebase 之前自动 stash"></a>执行 rebase 之前自动 stash</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --autostash</span><br></pre></td></tr></table></figure><h2 id="从远程仓库根据-ID，拉下某一状态，到本地分支"><a href="#从远程仓库根据-ID，拉下某一状态，到本地分支" class="headerlink" title="从远程仓库根据 ID，拉下某一状态，到本地分支"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="详细展示一行中的修改"><a href="#详细展示一行中的修改" class="headerlink" title="详细展示一行中的修改"></a>详细展示一行中的修改</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --word-diff</span><br></pre></td></tr></table></figure><h2 id="清除-gitignore-文件中记录的文件"><a href="#清除-gitignore-文件中记录的文件" class="headerlink" title="清除 gitignore 文件中记录的文件"></a>清除 gitignore 文件中记录的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -X -f</span><br></pre></td></tr></table></figure><h2 id="展示所有-alias-和-configs"><a href="#展示所有-alias-和-configs" class="headerlink" title="展示所有 alias 和 configs"></a>展示所有 alias 和 configs</h2><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> --list (当前目录)</span><br><span class="line">git config --global --list (全局)</span><br></pre></td></tr></table></figure><h2 id="展示忽略的文件"><a href="#展示忽略的文件" class="headerlink" title="展示忽略的文件"></a>展示忽略的文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status --ignored</span><br></pre></td></tr></table></figure><h2 id="commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit"><a href="#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit" class="headerlink" title="commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure><h2 id="在-commit-log-中显示-GPG-签名"><a href="#在-commit-log-中显示-GPG-签名" class="headerlink" title="在 commit log 中显示 GPG 签名"></a>在 commit log 中显示 GPG 签名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --show-signature</span><br></pre></td></tr></table></figure><h2 id="删除全局设置"><a href="#删除全局设置" class="headerlink" title="删除全局设置"></a>删除全局设置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure><h2 id="新建并切换到新分支上，同时这个分支没有任何-commit"><a href="#新建并切换到新分支上，同时这个分支没有任何-commit" class="headerlink" title="新建并切换到新分支上，同时这个分支没有任何 commit"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h2><p>相当于保存修改，但是重写 commit 历史</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="展示任意分支某一文件的内容"><a href="#展示任意分支某一文件的内容" class="headerlink" title="展示任意分支某一文件的内容"></a>展示任意分支某一文件的内容</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="clone-下来指定的单一分支"><a href="#clone-下来指定的单一分支" class="headerlink" title="clone 下来指定的单一分支"></a>clone 下来指定的单一分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="clone-最新一次提交"><a href="#clone-最新一次提交" class="headerlink" title="clone 最新一次提交"></a>clone 最新一次提交</h2><p>只会 clone 最近一次提交，将减少 clone 时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/user/repo.git</span><br></pre></td></tr></table></figure><h2 id="忽略某个文件的改动"><a href="#忽略某个文件的改动" class="headerlink" title="忽略某个文件的改动"></a>忽略某个文件的改动</h2><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure><p>恢复 track 指定文件的改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure><h2 id="忽略文件的权限变化"><a href="#忽略文件的权限变化" class="headerlink" title="忽略文件的权限变化"></a>忽略文件的权限变化</h2><p>不再将文件的权限变化视作改动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.fileMode <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="以最后提交的顺序列出所有-Git-分支"><a href="#以最后提交的顺序列出所有-Git-分支" class="headerlink" title="以最后提交的顺序列出所有 Git 分支"></a>以最后提交的顺序列出所有 Git 分支</h2><p>最新的放在最上面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git for-each-ref --sort=-committerdate --format=<span class="string">&#x27;%(refname:short)&#x27;</span> refs/heads/</span><br></pre></td></tr></table></figure><h2 id="在-commit-log-中查找相关内容"><a href="#在-commit-log-中查找相关内容" class="headerlink" title="在 commit log 中查找相关内容"></a>在 commit log 中查找相关内容</h2><p>通过 grep 查找，given-text：所需要查找的字段</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --all --grep=<span class="string">&#x27;&lt;given-text&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="把暂存区的指定-file-放到工作区中"><a href="#把暂存区的指定-file-放到工作区中" class="headerlink" title="把暂存区的指定 file 放到工作区中"></a>把暂存区的指定 file 放到工作区中</h2><p>不添加参数，默认是 <code>-mixed</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure><h2 id="强制推送"><a href="#强制推送" class="headerlink" title="强制推送"></a>强制推送</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h2 id="git-配置-http-和-socks-代理"><a href="#git-配置-http-和-socks-代理" class="headerlink" title="git 配置 http 和 socks 代理"></a>git 配置 http 和 socks 代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span>   <span class="comment"># 适用于 privoxy 将 socks 协议转为 http 协议的 http 端口</span></span><br><span class="line">git config --global http.proxy <span class="string">&#x27;http://127.0.0.1:8001&#x27;</span></span><br><span class="line">git config --global socks.proxy <span class="string">&quot;127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><h2 id="git-配置-ssh-代理"><a href="#git-配置-ssh-代理" class="headerlink" title="git 配置 ssh 代理"></a>git 配置 ssh 代理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/config</span><br><span class="line">Host gitlab.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    <span class="comment"># 直接使用 shadowsocks 提供的 socks5 代理端口</span></span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">ProxyCommand nc -X 5 -x 127.0.0.1:1080 %h %p    </span><br></pre></td></tr></table></figure><h2 id="脑图"><a href="#脑图" class="headerlink" title="脑图"></a>脑图</h2><p><img data-src="https://cdn.jonty.top/img/git.png"></p><h2 id="优雅的Commit信息"><a href="#优雅的Commit信息" class="headerlink" title="优雅的Commit信息"></a>优雅的Commit信息</h2><p>使用<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular团队提交规范</a></p><p>主要有以下组成</p><ul><li>标题行: 必填, 描述主要修改类型和内容</li><li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等</li><li>页脚注释: 放 Breaking Changes 或 Closed Issues</li></ul><p>常用的修改项</p><ul><li>type: commit 的类型</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>chore: 其他修改, 比如构建流程, 依赖管理.</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述</li><li>body: commit 具体修改内容, 可以分为多行</li><li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</li></ul><h2 id="commit工具"><a href="#commit工具" class="headerlink" title="commit工具"></a>commit工具</h2><p>可以使用<a href="https://github.com/commitizen/cz-cli">cz-cli</a>工具代替 <code>git commit</code></p><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g commitizen cz-conventional-changelog</span><br><span class="line"></span><br><span class="line">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br></pre></td></tr></table></figure><p>全局安装后使用 <code>git cz</code> 代替 <code>git commit</code>就可以了,如下图</p><p><img data-src="https://cdn.jonty.top/img/gitcz.png"></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh"><img alt="知识共享许可协议" style="border-width: 0" data-src="https://licensebuttons.net/l/by-nc-nd/4.0/88x31.png"></a><br>本作品采用 <a rel="license" href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh">署名-非商业性使用-禁止演绎 4.0 国际</a> 进行许可。</p><p><strong><a href="#%E7%9B%AE%E5%BD%95">⬆ 返回顶部</a></strong></p>]]></content>
    
    
    <summary type="html">常用的 Git 命令和一些小技巧</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="Share" scheme="https://jonty.top/tags/Share/"/>
    
    <category term="Git" scheme="https://jonty.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>【Blazor-07】- Blazor学生列表组件</title>
    <link href="https://jonty.top/2023/04/26/blazor-component/"/>
    <id>https://jonty.top/2023/04/26/blazor-component/</id>
    <published>2023-04-26T02:59:52.000Z</published>
    <updated>2023-04-26T03:10:32.130Z</updated>
    
    <content type="html"><![CDATA[<p>在此节中，我们实现一个Blazor组件—<strong>StudentList</strong>组件。</p><p>组件用于展示学生列表，如下图所示：</p><p><img data-src="https://cdn.jonty.top/img/202204241334464.png" alt="image-20220424133441270"></p><h2 id="StudentList-razor"><a href="#StudentList-razor" class="headerlink" title="StudentList.razor"></a>StudentList.razor</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@page &quot;/students&quot;</span><br><span class="line">@inherits StudentListListBase</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>StudentList<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    @foreach (var student in Students)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card m-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@student.FirstName @student.LastName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top imageThumbnail&quot;</span> <span class="attr">src</span>=<span class="string">&quot;@student.PhotoPath&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer text-center&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger m-1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="代码说明"><a href="#代码说明" class="headerlink" title="代码说明"></a>代码说明</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 指定当我们导航到此路径时显示此组件</span></span><br><span class="line">@page <span class="string">&quot;/&quot;</span> </span><br><span class="line">    </span><br><span class="line"><span class="meta"># 定义此组件的基类</span></span><br><span class="line">@inherits SutdentListBase </span><br></pre></td></tr></table></figure><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>使用 Bootstrap Card 显示， 为了遍历学生列表，我们使用了<code> foreach</code> 循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    @foreach (var student in Students)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-3&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card m-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>@student.FirstName @student.LastName<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;card-img-top imageThumbnail&quot;</span> <span class="attr">src</span>=<span class="string">&quot;@student.PhotoPath&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-footer text-center&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary m-1&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger m-1&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="StudentListBase"><a href="#StudentListBase" class="headerlink" title="StudentListBase"></a>StudentListBase</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Components;</span><br><span class="line"><span class="keyword">using</span> StudentManagement.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StudentManagement.Web.Pages</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StudentListListBase</span>: <span class="title">ComponentBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;Student&gt; Students &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> Task <span class="title">OnInitializedAsync</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        LoadStudents();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.OnInitializedAsync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoadStudents</span>(<span class="params"></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> s1 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">1</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;John&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Hastings&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;David@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1980</span>, <span class="number">10</span>, <span class="number">5</span>),</span><br><span class="line">            Gender = Gender.Male,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123;ClassId = <span class="number">1</span>, ClassName = <span class="string">&quot;计算机科学&quot;</span>&#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/john.png&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s2 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">2</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;Sam&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Galloway&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;Sam@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1981</span>, <span class="number">12</span>, <span class="number">22</span>),</span><br><span class="line">            Gender = Gender.Male,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123; ClassId = <span class="number">2</span>, ClassName = <span class="string">&quot;软件工程&quot;</span> &#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/sam.jpg&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s3 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">3</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;Mary&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;mary@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1979</span>, <span class="number">11</span>, <span class="number">11</span>),</span><br><span class="line">            Gender = Gender.Female,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123; ClassId = <span class="number">3</span>, ClassName = <span class="string">&quot;通信工程&quot;</span> &#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/mary.png&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> s4 = <span class="keyword">new</span> Student()</span><br><span class="line">        &#123;</span><br><span class="line">            StudentId = <span class="number">4</span>,</span><br><span class="line">            FirstName = <span class="string">&quot;Sara&quot;</span>,</span><br><span class="line">            LastName = <span class="string">&quot;Longway&quot;</span>,</span><br><span class="line">            Email = <span class="string">&quot;sara@qq.com&quot;</span>,</span><br><span class="line">            DateOfBrith = <span class="keyword">new</span> DateTime(<span class="number">1982</span>, <span class="number">9</span>, <span class="number">23</span>),</span><br><span class="line">            Gender = Gender.Female,</span><br><span class="line">            StudentClass = <span class="keyword">new</span> StudentClass &#123; ClassId = <span class="number">3</span>, ClassName = <span class="string">&quot;移动互联网&quot;</span> &#125;,</span><br><span class="line">            PhotoPath = <span class="string">&quot;images/sara.png&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Students = <span class="keyword">new</span> List&lt;Student&gt; &#123;s1, s2, s3, s4&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Blazor 组件有多种生命周期方法。<strong>OnInitializedAsync</strong>是较常用的生命周期方法。我们重写此方法用来加载学生数据。 </p><p>目前，我们在组件中<strong>硬编码</strong>了学生数据。随着我们课程的深入，我们将学习如何通过调用 RESTful API从数据库中加载这些数据。</p><p><strong>MainLayout.razor</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@inherits LayoutComponentBase</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">PageTitle</span>&gt;</span>S<span class="tag">&lt;/<span class="name">PageTitle</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">NavMenu</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;content px-4&quot;</span>&gt;</span></span><br><span class="line">            @Body</span><br><span class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并在<code>Site.css</code>中添加头像的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// Site<span class="selector-class">.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.imageThumbnail</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Blazor系列翻译07- Blazor学生列表组件</summary>
    
    
    
    <category term="搬砖那些事儿" scheme="https://jonty.top/categories/%E6%90%AC%E7%A0%96%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    
    
    <category term="ASP.NET Core" scheme="https://jonty.top/tags/ASP-NET-Core/"/>
    
    <category term="Blazor" scheme="https://jonty.top/tags/Blazor/"/>
    
  </entry>
  
</feed>
