<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>卷不动了</title>
  
  <subtitle>life has no Ctrl Z</subtitle>
  <link href="https://jonty.top/atom.xml" rel="self"/>
  
  <link href="https://jonty.top/"/>
  <updated>2021-09-27T15:15:06.212Z</updated>
  <id>https://jonty.top/</id>
  
  <author>
    <name>Jonty</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>知乎关于我国高等教育的看法</title>
    <link href="https://jonty.top/2021/09/27/the-systematic-failure-of-higher-education-in-china/"/>
    <id>https://jonty.top/2021/09/27/the-systematic-failure-of-higher-education-in-china/</id>
    <published>2021-09-27T15:07:23.000Z</published>
    <updated>2021-09-27T15:15:06.212Z</updated>
    
    <content type="html"><![CDATA[<p>和老同学聊到在学校的生活，突然想到之前在知乎看到的这篇帖子，转载记录一下</p><p><a href="https://www.zhihu.com/people/517a82a684971b49348575efaa8f6fdd">@Youngster38324</a> 的回答透露出来了我国高等教育系统中的不少问题：</p><ol><li><strong>「进大学前唯分数和同质化教育」</strong>导致了太多人去大学后根本不知道自己要干嘛，很多人专业根本就不是自己选的更不要说知道自己有没有兴趣了，即便是很多高分考生也路径依赖地以为继续努力填鸭就能成功，没有意识到高考后的人生已经换赛道了。作为解决方案，可以引入类似美国 AP（Advanced Placement）的预科制度以及调整整个社会鼓励向自我发展看而不是向钱看的风气。</li><li><strong>「进大学后专业制度没有容错性」</strong>，即便已经发现自己不喜欢被录取专业了也没有办法，因为转专业制度不完善（通常要求你先要在你已经不喜欢了的本专业内卷到班级前多少名）。在不少西方学校，专业可以 undecided（先上课再决定专业，比如经典的哈佛 CS50，你上下来感兴趣了再去选 CS）；学位本身只是某个学科下课程学分累计的自然结果，因此可以灵活的转专业与多学位；班级这种促进内卷的概念也被弱化，强调跟自己比关注个人的成长，学生自己控制上几年课，念几个学位，中间休学一下都没关系。</li><li>前两步的结果就是导致大学为了毕业率把<strong>「评判标准搞成了平均主义」</strong>，为了能够每年顺利向社会输送一批（80% 将来都不会从事本专业）的人才，打分根据每年学生情况动态规划自适应，把大学搞成了「严进宽出」。其实大学教育更应该强调「宽进严出」，无论你底子如何，无论重修几次，你只要通过了某个（相对稳定的）客观标准就是合格，为了保证该制度的机械性运作，就要辅以严格的日常作业计分，对「作弊」零容忍（自动化判重，发现一次重修两次退学）。</li><li>平均主义进一步导致<strong>「课程设置没有灵活性无法自定义」</strong>，老师不但要照顾及格率还有一颗圣母心希望那些对专业没什么兴趣的人能好歹学到点东西，同时又真心欣赏且想要给予好学的尖子生资源，最后即便绞尽脑汁了也还是只能弄出个在差生里下限高在尖子生里上限低的课程安排两面不当人 —— 尖子生觉得课程要求太低不能激发自己的潜力喂不饱（常见于私下要求加难度或者去无学分旁听），摸鱼的觉得老师影响了我的快乐学习（常见于课堂上一布置作业下面就叫苦连天）该挂还是挂或者 60 分万岁。在不少西方学校学生，课程表可以自行安排，一个课可以开多个班次照顾灵活性，学霸可以比别人多上任意节课，也可以跨专业选课或者减少课程增加实习或研究，而且难度自选只要你点过前置技能就行。</li></ol><p>有类似迟先生这样诉求的人很多，可是一个系统很难由系统内的个体改变，所以很多个体选择了做局部优化趋利避害陪玩成为既得利益者，或者全局优化更换自己所处的系统。</p><p>只要所处系统里的大部分个体都已经默许了这个游戏规则，无论迟先生是「凡尔赛」还是「理想主义」，改变赛道规则就会被其他个体认为侵害到利益。小孩才分对错，成年人的屁股都是歪得，都是各取所需。</p><blockquote><p>作者：黄玄<br>链接：<a href="https://www.zhihu.com/question/439622084/answer/1685314467">https://www.zhihu.com/question/439622084/answer/1685314467</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <summary type="html">知乎关于我国高等教育看法的高赞回答</summary>
    
    
    
    <category term="Reprint" scheme="https://jonty.top/categories/Reprint/"/>
    
    
    <category term="Zhihu" scheme="https://jonty.top/tags/Zhihu/"/>
    
    <category term="View" scheme="https://jonty.top/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>浏览器实现静默打印</title>
    <link href="https://jonty.top/2021/09/25/browser-silent-printing/"/>
    <id>https://jonty.top/2021/09/25/browser-silent-printing/</id>
    <published>2021-09-25T15:42:22.000Z</published>
    <updated>2021-09-25T15:46:45.001Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>最近有一个需求涉及到<code>静默打印</code>,也就是打印时不需要弹出打印配置框，而是直接调用打印机</p><img data-src="https://cdn.jonty.top/img/image-20210925223925277.png"><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>经过讨论大概是以下几种方案：</p><ul><li>把打印配置弹窗干掉、模拟点击打印事件</li><li>浏览器实现静默打印</li><li>本地运行一个服务，客户端返回请求状态后请求本地接口调用打印</li></ul><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>第一种没有去尝试，所以先讲讲第二种解决方案，通过前端控制浏览器打印，但是百度一圈下来的解决方案都是通过设置浏览器参数，然后创建一个快捷程序并设置启动参数，操作很简单，但实在不符合需求，总不能给每个客户也这样配置一边吧，所以第二种也<code>pass</code>。</p><p>操作如下：</p><img data-src="https://cdn.jonty.top/img/image-20210925225136606.png"><h5 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h5><p>重点讲一下方案，也是目前在探索中，后续有更好的方法会发出来，也欢迎各位提出更好的解决方案。</p><p>目前仅支持windows环境，<code>winform</code>最终是<code>.exe</code>程序</p><h4 id="新建Winform程序"><a href="#新建Winform程序" class="headerlink" title="新建Winform程序"></a>新建Winform程序</h4><h5 id="使用VS2019创建"><a href="#使用VS2019创建" class="headerlink" title="使用VS2019创建"></a>使用<code>VS2019</code>创建</h5><img data-src="https://cdn.jonty.top/img/image-20210925225722885.png"><h5 id="拖入ComboBox控件，用来选择本地打印机"><a href="#拖入ComboBox控件，用来选择本地打印机" class="headerlink" title="拖入ComboBox控件，用来选择本地打印机"></a>拖入<code>ComboBox</code>控件，用来选择本地打印机</h5><img data-src="https://cdn.jonty.top/img/image-20210925225843764.png"><h5 id="获取打印机列表填充下拉"><a href="#获取打印机列表填充下拉" class="headerlink" title="获取打印机列表填充下拉"></a>获取打印机列表填充下拉</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">      /// 加载打印机列表</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      private void InitPrinterList()</span><br><span class="line">      &#123;</span><br><span class="line">          var print = new PrintDocument();</span><br><span class="line">          var defaultPrinter = print.PrinterSettings.PrinterName;</span><br><span class="line">          for (var i = 0; i &lt; PrinterSettings.InstalledPrinters.Count; i++)</span><br><span class="line">          &#123;</span><br><span class="line">              var tmp = PrinterSettings.InstalledPrinters[i];</span><br><span class="line">              if (tmp == defaultPrinter)</span><br><span class="line">              &#123;</span><br><span class="line">                  tmp += &quot;(默认)&quot;; // 标记默认的打印机</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              this.comboBox1.Items.Add(tmp);  // 下拉项新增</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">private void Form1_Load(object sender, EventArgs e)</span><br><span class="line">      &#123;</span><br><span class="line">          InitPrinterList(); // 窗体加载事件中调用</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h5 id="ctrl-f5运行窗体查看效果"><a href="#ctrl-f5运行窗体查看效果" class="headerlink" title="ctrl+f5运行窗体查看效果"></a><code>ctrl+f5</code>运行窗体查看效果</h5><img data-src="https://cdn.jonty.top/img/image-20210925230348173.png"><h4 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h4><p>没有使用<code>socket</code>,而是在<code>winform</code>中创建了一个<code>http</code>服务，并开放端口供浏览器本地请求</p><p>先新增两个依赖：</p><ol><li>BeetleX 1.5.1.7 </li><li>BeetleX.FastHttpApi 1.8.2.61</li></ol><p>这两个版本是支持<code>.net framework</code>的，<a href="https://github.com/IKende/BeetleX/">BeetleX</a>是一个基于.Net Core开发的一个开源跨平台TCP通讯框架，它提供了完整的会话服务管理，协议分析扩展，TLS支持和缓冲区管理等完全服务基础功能。有兴趣的可以去Github参观一下。</p><h5 id="初始化Http服务"><a href="#初始化Http服务" class="headerlink" title="初始化Http服务"></a>初始化Http服务</h5><p>在Load方法中调用<code>InitHttpServer()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">      /// 初始化网关服务</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      protected void InitHttpServer()</span><br><span class="line">      &#123;</span><br><span class="line">          _httpApiServer = new HttpApiServer(new HttpOptions()</span><br><span class="line">          &#123;</span><br><span class="line">              Port = 9000, // 本地开放的端口 要注意不要被占用</span><br><span class="line">              LogToConsole = true,</span><br><span class="line">              LogLevel = BeetleX.EventArgs.LogType.Debug</span><br><span class="line">          &#125;);</span><br><span class="line">          _httpApiServer.IPv4Tables.AddWhite(&quot;127.0.0.1/24&quot;);</span><br><span class="line">          _httpApiServer.Options.CrossDomain = new OptionsAttribute() &#123; AllowOrigin = &quot;*&quot;, AllowMethods = &quot;*&quot;, AllowHeaders = &quot;*&quot; &#125;; // 跨域配置，这个很重要</span><br><span class="line">          _httpApiServer.Register(typeof(Home).Assembly);</span><br><span class="line">          _httpApiServer.Open();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>注册的程序就是<code>Controller</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Controller(BaseUrl = &quot;/home&quot;)]</span><br><span class="line">  public class Home</span><br><span class="line">  &#123;</span><br><span class="line">      /// &lt;summary&gt;</span><br><span class="line">      /// Hello Word</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;name&quot;&gt;string:  you name&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;string&lt;/returns&gt;</span><br><span class="line">      public object Hello(string name)</span><br><span class="line">      &#123;</span><br><span class="line">          return new &#123; Hello = &quot;hello &quot; + name, Time = DateTime.Now &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>控制下服务的生命周期</p><img data-src="https://cdn.jonty.top/img/image-20210925231850394.png"><p>使用<code>Postman</code>请求一下</p><p><code>http://localhost:9000/home/Hello?name=test</code> 返回成功</p><img data-src="https://cdn.jonty.top/img/image-20210925232302311.png"><h4 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h4><p>客户端向本地请求打印接口，传入参数</p><p>这里传入了pdf文件地址，通过请求文件并打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">      /// 打印接口</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;url&quot;&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;param name=&quot;printCount&quot;&gt;&lt;/param&gt;</span><br><span class="line">      public void Print(string url, int printCount)</span><br><span class="line">      &#123;</span><br><span class="line">          url = url.Replace(&quot;\n &quot;, &quot;&quot;);</span><br><span class="line">          if (!(WebRequest.Create(url) is HttpWebRequest request)) return;</span><br><span class="line">          if (!(request.GetResponse() is HttpWebResponse response)) return;</span><br><span class="line">          var stream = response.GetResponseStream();</span><br><span class="line">          // 创建打印机</span><br><span class="line">          var pdf = new InputPdf(ReadFully(stream));</span><br><span class="line">          var printJob = new PrintJob(Printer.Default, pdf); // 默认打印机</span><br><span class="line">          printJob.PrintOptions.Copies = printCount; //打印数量</span><br><span class="line">          printJob.Print();</span><br><span class="line">      &#125;</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">      /// 读取字节流</span><br><span class="line">      /// &lt;/summary&gt;</span><br><span class="line">      /// &lt;param name=&quot;input&quot;&gt;&lt;/param&gt;</span><br><span class="line">      /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">      public static byte[] ReadFully(Stream input)</span><br><span class="line">      &#123;</span><br><span class="line">          using (var ms = new MemoryStream())</span><br><span class="line">          &#123;</span><br><span class="line">              input.CopyTo(ms);</span><br><span class="line">              return ms.ToArray();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印插件调用的<code>DynamicPdf</code></p><p>打印插件文档：<a href="https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options">https://www.dynamicpdf.com/docs/dotnet/print-manager-print-options</a> </p></blockquote><h4 id="优化建议："><a href="#优化建议：" class="headerlink" title="优化建议："></a>优化建议：</h4><p>可以通过下拉框选择的打印机打印,需要记录选择的打印机</p><p>通过读取和设置<code>config</code>值实现,引入<code>System.Configuration</code></p><p>ConfigHelper类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">public static class ConfigHelper</span><br><span class="line">&#123;</span><br><span class="line">        ///&lt;summary&gt; </span><br><span class="line">        ///返回*.exe.config文件中appSettings配置节的value项  </span><br><span class="line">        ///&lt;/summary&gt; </span><br><span class="line">        ///&lt;param name=&quot;strKey&quot;&gt;&lt;/param&gt; </span><br><span class="line">        ///&lt;returns&gt;&lt;/returns&gt; </span><br><span class="line">        public static string GetAppConfig(string strKey)</span><br><span class="line">        &#123;</span><br><span class="line">            var file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">            var config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">            return config.AppSettings.Settings.AllKeys.Any(key =&gt; key == strKey) ? config.AppSettings.Settings[strKey].Value.ToString() : null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ///&lt;summary&gt;  </span><br><span class="line">        ///在*.exe.config文件中appSettings配置节增加一对键值对  </span><br><span class="line">        ///&lt;/summary&gt;  </span><br><span class="line">        ///&lt;param name=&quot;newKey&quot;&gt;&lt;/param&gt;  </span><br><span class="line">        ///&lt;param name=&quot;newValue&quot;&gt;&lt;/param&gt;  </span><br><span class="line">        public static void UpdateAppConfig(string newKey, string newValue)</span><br><span class="line">        &#123;</span><br><span class="line">            var file = System.Windows.Forms.Application.ExecutablePath;</span><br><span class="line">            var config = ConfigurationManager.OpenExeConfiguration(file);</span><br><span class="line">            var exist = false;</span><br><span class="line">            foreach (var key in config.AppSettings.Settings.AllKeys)</span><br><span class="line">            &#123;</span><br><span class="line">                if (key == newKey)</span><br><span class="line">                &#123;</span><br><span class="line">                    exist = true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (exist)</span><br><span class="line">            &#123;</span><br><span class="line">                config.AppSettings.Settings.Remove(newKey);</span><br><span class="line">            &#125;</span><br><span class="line">            config.AppSettings.Settings.Add(newKey, newValue);</span><br><span class="line">            config.Save(ConfigurationSaveMode.Modified);</span><br><span class="line">            ConfigurationManager.RefreshSection(&quot;appSettings&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="设置下拉选择事件"><a href="#设置下拉选择事件" class="headerlink" title="设置下拉选择事件"></a>设置下拉选择事件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)</span><br><span class="line">     &#123;</span><br><span class="line">         // 更新setting设置</span><br><span class="line">         var selectedPrint = this.comboBox1.SelectedItem.ToString();</span><br><span class="line">         if (string.IsNullOrEmpty(selectedPrint))</span><br><span class="line">         &#123;</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         // 移除掉初始化打印机列表添加的默认文本</span><br><span class="line">         if (selectedPrint.Contains(&quot;默认&quot;))</span><br><span class="line">         &#123;</span><br><span class="line">             selectedPrint = selectedPrint.Replace(&quot;(默认)&quot;, &quot;&quot;);</span><br><span class="line">         &#125;</span><br><span class="line">         ConfigHelper.UpdateAppConfig(&quot;defaultPrint&quot;, selectedPrint);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h5 id="优化后的打印接口"><a href="#优化后的打印接口" class="headerlink" title="优化后的打印接口"></a>优化后的打印接口</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">// 获取设置的打印机 （读取配置）</span><br><span class="line">         var defaultPrinter = ConfigHelper.GetAppConfig(&quot;defaultPrint&quot;);</span><br><span class="line">         // 创建打印机</span><br><span class="line">         var printer = new Printer(defaultPrinter);</span><br><span class="line">         var pdf = new InputPdf(ReadFully(stream));</span><br><span class="line">         var printJob = new PrintJob(printer, pdf);</span><br><span class="line">         ...</span><br></pre></td></tr></table></figure><p>这样就能实现简单的静默打印，当然还有很多欠缺之处，后续优化，不当之处请指出</p>]]></content>
    
    
    <summary type="html">浏览器实现静默打印的小方案😁</summary>
    
    
    
    <category term=".Net" scheme="https://jonty.top/categories/Net/"/>
    
    
    <category term="Winform" scheme="https://jonty.top/tags/Winform/"/>
    
    <category term="Print" scheme="https://jonty.top/tags/Print/"/>
    
  </entry>
  
  <entry>
    <title>Docker中安装jira</title>
    <link href="https://jonty.top/2021/09/23/install-jira-in-docker/"/>
    <id>https://jonty.top/2021/09/23/install-jira-in-docker/</id>
    <published>2021-09-23T13:25:56.000Z</published>
    <updated>2021-09-27T15:07:38.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h2><p>其他数据库请参考文档</p><p><a href="https://confluence.atlassian.com/adminjiraserver/connecting-jira-applications-to-a-database-938846850.html">Connecting Jira applications to a database</a></p><p>这里使用的是PostgreSql</p><ol><li><p>创建空数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE jiradb <span class="keyword">WITH</span> ENCODING <span class="string">&#x27;UNICODE&#x27;</span> LC_COLLATE <span class="string">&#x27;C&#x27;</span> LC_CTYPE <span class="string">&#x27;C&#x27;</span> TEMPLATE template0;</span><br></pre></td></tr></table></figure></li><li><p>创建用户(也可以使用默认用户)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> jira <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;bb123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 给权限</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> DATABASE jiradb <span class="keyword">TO</span> jira</span><br></pre></td></tr></table></figure></li></ol><p><img data-src="https://cdn.jonty.top/img/20210711235815.png" alt="image-20210708171601263"></p><h3 id="Jira安装"><a href="#Jira安装" class="headerlink" title="Jira安装"></a>Jira安装</h3><p><a href="https://confluence.atlassian.com/adminjiraserver071/jira-applications-installation-requirements-802592164.html">需要保证服务器有<code>4GB</code>以上内存</a></p><p>我在安装的时候1核2G跑不动换成了4核8G👀</p><p><img data-src="https://cdn.jonty.top/img/20210711235851.png" alt="image-20210708164819758"></p><h4 id="拉镜像"><a href="#拉镜像" class="headerlink" title="拉镜像"></a>拉镜像</h4><p>查看docker文档</p><p><img data-src="https://cdn.jonty.top/img/20210712000508.png"></p><ol><li>创建卷</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name jiraVolume</span><br></pre></td></tr></table></figure><ol start="2"><li>拉取镜像并运行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v jiraVolume:/var/atlassian/application-data/jira --name=&quot;jira&quot; -d -p 8080:8080 atlassian/jira-software:8.1.0</span><br></pre></td></tr></table></figure><blockquote><p>ps：注意：我们破解的版本的为8.1.0，拉镜像需要指定版本</p></blockquote><p><img data-src="https://cdn.jonty.top/img/20210712001529.png" alt="image-20210708170606734"></p><ol start="4"><li>浏览器打开<code>IP:8080</code>端口</li></ol><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初次打开为英文，可在右上角设置为中文。选择第二个，自定义配置</p><p><img data-src="https://cdn.jonty.top/img/20210712001604.png" alt="image-20210708170935567"></p><p>点击下一步</p><p><img data-src="https://cdn.jonty.top/img/20210721102437.png" alt="image-20210708171706660"></p><p><img data-src="https://cdn.jonty.top/img/20210721102449.png" alt="image-20210708171725265"></p><p>点击下一步，等待几分钟，正在创建数据库表</p><p><img data-src="https://cdn.jonty.top/img/20210721102444.png" alt="image-20210708171808729"></p><p>数据库创建完成之后</p><p><img data-src="https://cdn.jonty.top/img/20210721102454.png" alt="image-20210708172102316"></p><p>点击下一步，获取授权码，可以有30天试用</p><p>需要先按照提示去官方获取试用授权码，这样才可以进入系统，然后进行破解包的替换，重启服务即可。</p><p>点击连接去官网生成许可证</p><p><img data-src="https://cdn.jonty.top/img/20210721102458.png" alt="image-20210708172300316"></p><p>我这里是直接用微软账号登录申请的，点击生成按钮后自动跳转回来并自动填入授权码</p><p><img data-src="https://cdn.jonty.top/img/20210712001647.png" alt="image-20210708172452780"></p><p>配置管理员账号</p><p><img data-src="https://cdn.jonty.top/img/20210721102555.png" alt="image-20210708172617985"></p><p>邮件服务器，以后再说</p><p><img data-src="https://cdn.jonty.top/img/20210721102602.png" alt="image-20210708172653783"></p><p>设置默认语言</p><p><img data-src="https://cdn.jonty.top/img/20210721102726.png" alt="image-20210708172918673"></p><p>选择头像</p><p><img data-src="https://cdn.jonty.top/img/20210721102743.png" alt="image-20210708172949746"></p><p>这里可以选择创建示例项目</p><p><img data-src="https://cdn.jonty.top/img/20210721102835.png" alt="image-20210708173027592"></p><p><img data-src="https://cdn.jonty.top/img/20210721102859.png" alt="image-20210708173118682"></p><p>进入首页面板</p><p><img data-src="https://cdn.jonty.top/img/20210721102910.png" alt="image-20210708173327874"></p><p>点击右上角的管理&gt;应用程序</p><p><img data-src="https://cdn.jonty.top/img/20210721102535.png" alt="image-20210708173606783"></p><h3 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h3><ol><li>下载破解包</li></ol><p><a href="https://cloud.189.cn/t/2MFZFvriQ7fe">atlassian-extras-3.2</a></p><ol start="2"><li>使用ftp工具上传到服务器</li></ol><p><img data-src="https://cdn.jonty.top/img/20210721102527.png" alt="image-20210708174235612"></p><ol start="3"><li><p>替换</p><p>通过docker ps 获取jira容器id，然后把破解包上传至宿主机通过docker cp 命令复制到容器中，重启jira容器　</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">docker cp atlassian-extras-3.2.jar  06849baab1a6:/opt/atlassian/jira/atlassian-jira/WEB-INF/lib</span><br><span class="line"></span><br><span class="line">docker restart 06849baab1a6</span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.jonty.top/img/20210721091151.png" alt="image-20210708174512592"></p></li></ol><p>破解成功</p><p><img data-src="https://cdn.jonty.top/img/20210721102816.png" alt="image-20210708174733130"></p>]]></content>
    
    
    <summary type="html">使用Docker部署项目管理工具Jira</summary>
    
    
    
    <category term="Docker" scheme="https://jonty.top/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://jonty.top/tags/Docker/"/>
    
    <category term="Jira" scheme="https://jonty.top/tags/Jira/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jonty.top/2021/09/08/hello-world/"/>
    <id>https://jonty.top/2021/09/08/hello-world/</id>
    <published>2021-09-08T14:55:00.544Z</published>
    <updated>2021-09-25T15:48:37.826Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hello World ! this is my first blog👏</summary>
    
    
    
    <category term="Hexo" scheme="https://jonty.top/categories/Hexo/"/>
    
    
    <category term="Config" scheme="https://jonty.top/tags/Config/"/>
    
  </entry>
  
</feed>
